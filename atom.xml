<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Last Order</title>
  
  
  <link href="http://example.com/atom.xml" rel="self"/>
  
  <link href="http://example.com/"/>
  <updated>2021-01-23T06:16:44.025Z</updated>
  <id>http://example.com/</id>
  
  <author>
    <name>不侯鸟</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>mac下尝试zsh</title>
    <link href="http://example.com/2018/12/28/mac%E4%B8%8B%E5%B0%9D%E8%AF%95zsh/"/>
    <id>http://example.com/2018/12/28/mac%E4%B8%8B%E5%B0%9D%E8%AF%95zsh/</id>
    <published>2018-12-27T17:39:58.000Z</published>
    <updated>2021-01-23T06:16:44.025Z</updated>
    
    <content type="html"><![CDATA[<p>这几天尝试了一下 zsh，是linux shell 的一种<a id="more"></a>，mac下默认提供了六种shell，可以通过</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cat /etc/shells</span><br></pre></td></tr></table></figure><p>查看，</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> List of acceptable shells <span class="keyword">for</span> chpass(1).</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> Ftpd will not allow users to connect who are not using</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> one of these shells.</span></span><br><span class="line"></span><br><span class="line">/bin/bash</span><br><span class="line">/bin/csh</span><br><span class="line">/bin/ksh</span><br><span class="line">/bin/sh</span><br><span class="line">/bin/tcsh</span><br><span class="line">/bin/zsh</span><br></pre></td></tr></table></figure><p>默认使用的bash，这也是大多数linux发行版的默认选择，zsh是另外一种shell，关于它们的不同，可以自行搜索。</p><p>mac上虽然自带了zsh，但是用<code>zsh --version</code>查看版本可以发现还是几年前的比较老的版本，于是想安装最新的版本，但是好像没法update ,只能自己另外安装，下面是安装步骤：</p><ol><li><p>先安装 homebrew</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">/usr/bin/ruby -e &quot;$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install)&quot;</span><br></pre></td></tr></table></figure><p>来源于官网 <a href="https://brew.sh/">https://brew.sh/</a></p></li><li><p>安装zsh</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">brew install zsh zsh-completions</span><br></pre></td></tr></table></figure><p>来源：<a href="https://github.com/robbyrussell/oh-my-zsh/wiki/Installing-ZSH">https://github.com/robbyrussell/oh-my-zsh/wiki/Installing-ZSH</a></p></li><li><p>添加刚刚安装的zsh路径到系统记录<br>查看当前系统的shell </p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cat /etc/shells</span><br></pre></td></tr></table></figure><p>我们添加刚刚下载的新的zsh路径<code>/usr/local/bin/zsh</code>到最下面一行</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vim /etc/shells</span><br></pre></td></tr></table></figure><p>…(vim操作自行研究)</p><p>添加完成后再次查看</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;</span><span class="bash">&gt; cat /etc/shells</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> List of acceptable shells <span class="keyword">for</span> chpass(1).</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> Ftpd will not allow users to connect who are not using</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> one of these shells.</span></span><br><span class="line"></span><br><span class="line">/bin/bash</span><br><span class="line">/bin/csh</span><br><span class="line">/bin/ksh</span><br><span class="line">/bin/sh</span><br><span class="line">/bin/tcsh</span><br><span class="line">/bin/zsh</span><br><span class="line">/usr/local/bin/zsh</span><br></pre></td></tr></table></figure></li><li><p>设置为<code>/usr/local/bin/zsh</code>为默认的shell</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">chsh -s /usr/local/bin/zsh</span><br></pre></td></tr></table></figure><p>不要漏了上面第3步，否则会提示 <code>chsh: /usr/local/bin/zsh: non-standard shell</code>,</p><p>确认设置成功：关闭终端重新打开，</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">echo #SHELL         // 应该显示的是 /usr/local/bin/zsh</span><br><span class="line"><span class="meta">#</span><span class="bash">SHELL --version    // 应该显示的是最新的版本，比如 5.6.x</span></span><br></pre></td></tr></table></figure></li><li><p>安装 oh-my-zsh</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sh -c &quot;$(curl -fsSL https://raw.githubusercontent.com/robbyrussell/oh-my-zsh/master/tools/install.sh)&quot;</span><br></pre></td></tr></table></figure><p>来源：<a href="https://github.com/robbyrussell/oh-my-zsh">https://github.com/robbyrussell/oh-my-zsh</a></p><p>安装成功后可以看到 </p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">           __                                     __   </span><br><span class="line">    ____  / /_     ____ ___  __  __   ____  _____/ /_  </span><br><span class="line">   / __ \/ __ \   / __ `__ \/ / / /  /_  / / ___/ __ \ </span><br><span class="line">  / /_/ / / / /  / / / / / / /_/ /    / /_(__  ) / / / </span><br><span class="line">  \____/_/ /_/  /_/ /_/ /_/\__, /    /___/____/_/ /_/  </span><br><span class="line">                          /____/                       ....is now installed!</span><br><span class="line">Please look over the ~/.zshrc file to select plugins, themes, and options.</span><br><span class="line">p.s. Follow us at https://twitter.com/ohmyzsh.</span><br><span class="line">   </span><br><span class="line">p.p.s. Get stickers and t-shirts at https://shop.planetargon.com.</span><br></pre></td></tr></table></figure></li><li><p>设置主题</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vim ~/.zshrc </span><br></pre></td></tr></table></figure><p>修改 <code>ZSH_THEME</code> 设置主题 ，比如 <code>ys</code>,</p><p> 执行</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">source ~/.zshrc</span><br></pre></td></tr></table></figure><p>使它生效</p></li><li><p>因为我们使用了新的shell，所以之前设置的环境变量和设置都无效了，所以还需要把之前的设置拷贝过来，之前的设置都在文件<code>~/.bash_profile</code>里，拷贝到<code>~/.zshrc</code>中</p></li><li><p>背景色，字体和颜色这些都是在终端的偏好设置里面设置，我们可以另外设置几个比较方便的别名，比如</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">alias zshrc=&quot;vim ~/.zshrc&quot;</span><br><span class="line">alias rcupdate=&quot;source ~/.zshrc&quot;</span><br><span class="line">alias stashpull=&quot;git stash &amp;&amp; git pull &amp;&amp; git stash pop&quot;</span><br><span class="line">alias xxxx=&quot;cd ~/desktop/xxxx&quot;</span><br></pre></td></tr></table></figure><p>把这些内容添加到<code>~/.zshrc</code>文件的末尾，就可以直接使用<code>zshrc</code>,<code>rcupdate</code>,<code>stashpull</code>,<code>xxxx</code>等自定义命令了</p></li></ol>]]></content>
    
    
    <summary type="html">&lt;p&gt;这几天尝试了一下 zsh，是linux shell 的一种&lt;/p&gt;</summary>
    
    
    
    
    <category term="其他" scheme="http://example.com/tags/%E5%85%B6%E4%BB%96/"/>
    
  </entry>
  
  <entry>
    <title>安卓测试-Robolectric框架</title>
    <link href="http://example.com/2018/12/16/%E5%AE%89%E5%8D%93%E6%B5%8B%E8%AF%95-Robolectric%E6%A1%86%E6%9E%B6/"/>
    <id>http://example.com/2018/12/16/%E5%AE%89%E5%8D%93%E6%B5%8B%E8%AF%95-Robolectric%E6%A1%86%E6%9E%B6/</id>
    <published>2018-12-16T05:06:47.000Z</published>
    <updated>2018-12-16T05:06:47.447Z</updated>
    
    
    
    
    
  </entry>
  
  <entry>
    <title>安卓测试-Mockito框架</title>
    <link href="http://example.com/2018/12/13/%E5%AE%89%E5%8D%93%E6%B5%8B%E8%AF%95-Mockito%E6%A1%86%E6%9E%B6/"/>
    <id>http://example.com/2018/12/13/%E5%AE%89%E5%8D%93%E6%B5%8B%E8%AF%95-Mockito%E6%A1%86%E6%9E%B6/</id>
    <published>2018-12-13T00:59:43.000Z</published>
    <updated>2018-12-27T17:43:46.444Z</updated>
    
    <content type="html"><![CDATA[<p>Mockito是一个用于java单元测试中的mocking框架<a id="more"></a>，mock就是模拟的意思，就是能够模拟一些类和方法的实现。当需要测试的类需要一个依赖类的时候，如果依赖类的获取很麻烦，那么可以直接使用Mock方法来模拟这个类，方便测试。</p><p><a href="https://static.javadoc.io/org.mockito/mockito-core/2.23.4/org/mockito/Mockito.html">官方文档</a></p><h2 id="引入"><a href="#引入" class="headerlink" title="引入"></a>引入</h2><p>build.gradle里面增加</p><figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">testImplementation <span class="string">&quot;org.mockito:mockito-core:+&quot;</span></span><br><span class="line">androidTestImplementation <span class="string">&quot;org.mockito:mockito-android:+&quot;</span>  <span class="comment">//看了下好像没几个类，可能以后会增加功能</span></span><br></pre></td></tr></table></figure><h2 id="常用方法"><a href="#常用方法" class="headerlink" title="常用方法"></a>常用方法</h2><h3 id="验证行为"><a href="#验证行为" class="headerlink" title="验证行为"></a>验证行为</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">//Let&#x27;s import Mockito statically so that the code looks clearer</span></span><br><span class="line"><span class="keyword">import</span> <span class="keyword">static</span> org.mockito.Mockito.*;</span><br><span class="line"></span><br><span class="line"><span class="comment">//mock creation</span></span><br><span class="line">List mockedList = mock(List.class);</span><br><span class="line"></span><br><span class="line"><span class="comment">//using mock object</span></span><br><span class="line">mockedList.add(<span class="string">&quot;one&quot;</span>);</span><br><span class="line">mockedList.clear();</span><br><span class="line"></span><br><span class="line"><span class="comment">//verification</span></span><br><span class="line">verify(mockedList).add(<span class="string">&quot;one&quot;</span>);</span><br><span class="line">verify(mockedList).clear();</span><br></pre></td></tr></table></figure><h3 id="Stubbing"><a href="#Stubbing" class="headerlink" title="Stubbing"></a>Stubbing</h3> <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"> <span class="comment">//You can mock concrete classes, not just interfaces</span></span><br><span class="line">LinkedList mockedList = mock(LinkedList.class);</span><br><span class="line"></span><br><span class="line"><span class="comment">//stubbing</span></span><br><span class="line">when(mockedList.get(<span class="number">0</span>)).thenReturn(<span class="string">&quot;first&quot;</span>);</span><br><span class="line">when(mockedList.get(<span class="number">1</span>)).thenThrow(<span class="keyword">new</span> RuntimeException());</span><br><span class="line"></span><br><span class="line">doThrow(<span class="keyword">new</span> RuntimeException()).when(mockedList).clear();</span><br><span class="line"></span><br><span class="line"><span class="comment">//following throws RuntimeException:</span></span><br><span class="line">mockedList.clear();</span><br><span class="line"></span><br><span class="line"><span class="comment">//following prints &quot;first&quot;</span></span><br><span class="line">System.out.println(mockedList.get(<span class="number">0</span>));</span><br><span class="line"></span><br><span class="line"><span class="comment">//following throws runtime exception</span></span><br><span class="line">System.out.println(mockedList.get(<span class="number">1</span>));</span><br><span class="line"></span><br><span class="line"><span class="comment">//following prints &quot;null&quot; because get(999) was not stubbed</span></span><br><span class="line">System.out.println(mockedList.get(<span class="number">999</span>));</span><br><span class="line"></span><br><span class="line"><span class="comment">//Although it is possible to verify a stubbed invocation, usually it&#x27;s just redundant</span></span><br><span class="line"><span class="comment">//If your code cares what get(0) returns, then something else breaks (often even before verify() gets executed).</span></span><br><span class="line"><span class="comment">//If your code doesn&#x27;t care what get(0) returns, then it should not be stubbed. Not convinced? See here.</span></span><br><span class="line">verify(mockedList).get(<span class="number">0</span>);</span><br></pre></td></tr></table></figure><h3 id="参数匹配"><a href="#参数匹配" class="headerlink" title="参数匹配"></a>参数匹配</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//stubbing using built-in anyInt() argument matcher</span></span><br><span class="line">when(mockedList.get(anyInt())).thenReturn(<span class="string">&quot;element&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//stubbing using custom matcher (let&#x27;s say isValid() returns your own matcher implementation):</span></span><br><span class="line">when(mockedList.contains(argThat(isValid()))).thenReturn(<span class="string">&quot;element&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//following prints &quot;element&quot;</span></span><br><span class="line">System.out.println(mockedList.get(<span class="number">999</span>));</span><br><span class="line"></span><br><span class="line"><span class="comment">//you can also verify using an argument matcher</span></span><br><span class="line">verify(mockedList).get(anyInt());</span><br><span class="line"></span><br><span class="line"><span class="comment">//argument matchers can also be written as Java 8 Lambdas</span></span><br><span class="line">verify(mockedList).add(argThat(someString -&gt; someString.length() &gt; <span class="number">5</span>));</span><br></pre></td></tr></table></figure><h3 id="验证方法的调用次数"><a href="#验证方法的调用次数" class="headerlink" title="验证方法的调用次数"></a>验证方法的调用次数</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">//using mock</span></span><br><span class="line">mockedList.add(<span class="string">&quot;once&quot;</span>);</span><br><span class="line"></span><br><span class="line">mockedList.add(<span class="string">&quot;twice&quot;</span>);</span><br><span class="line">mockedList.add(<span class="string">&quot;twice&quot;</span>);</span><br><span class="line"></span><br><span class="line">mockedList.add(<span class="string">&quot;three times&quot;</span>);</span><br><span class="line">mockedList.add(<span class="string">&quot;three times&quot;</span>);</span><br><span class="line">mockedList.add(<span class="string">&quot;three times&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//following two verifications work exactly the same - times(1) is used by default</span></span><br><span class="line">verify(mockedList).add(<span class="string">&quot;once&quot;</span>);</span><br><span class="line">verify(mockedList, times(<span class="number">1</span>)).add(<span class="string">&quot;once&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//exact number of invocations verification</span></span><br><span class="line">verify(mockedList, times(<span class="number">2</span>)).add(<span class="string">&quot;twice&quot;</span>);</span><br><span class="line">verify(mockedList, times(<span class="number">3</span>)).add(<span class="string">&quot;three times&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//verification using never(). never() is an alias to times(0)</span></span><br><span class="line">verify(mockedList, never()).add(<span class="string">&quot;never happened&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//verification using atLeast()/atMost()</span></span><br><span class="line">verify(mockedList, atLeastOnce()).add(<span class="string">&quot;three times&quot;</span>);</span><br><span class="line">verify(mockedList, atLeast(<span class="number">2</span>)).add(<span class="string">&quot;three times&quot;</span>);</span><br><span class="line">verify(mockedList, atMost(<span class="number">5</span>)).add(<span class="string">&quot;three times&quot;</span>);</span><br></pre></td></tr></table></figure><h3 id="验证方法的调用顺序"><a href="#验证方法的调用顺序" class="headerlink" title="验证方法的调用顺序"></a>验证方法的调用顺序</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// A. Single mock whose methods must be invoked in a particular order</span></span><br><span class="line">List singleMock = mock(List.class);</span><br><span class="line"></span><br><span class="line"><span class="comment">//using a single mock</span></span><br><span class="line">singleMock.add(<span class="string">&quot;was added first&quot;</span>);</span><br><span class="line">singleMock.add(<span class="string">&quot;was added second&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//create an inOrder verifier for a single mock</span></span><br><span class="line">InOrder inOrder = inOrder(singleMock);</span><br><span class="line"></span><br><span class="line"><span class="comment">//following will make sure that add is first called with &quot;was added first&quot;, then with &quot;was added second&quot;</span></span><br><span class="line">inOrder.verify(singleMock).add(<span class="string">&quot;was added first&quot;</span>);</span><br><span class="line">inOrder.verify(singleMock).add(<span class="string">&quot;was added second&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// B. Multiple mocks that must be used in a particular order</span></span><br><span class="line">List firstMock = mock(List.class);</span><br><span class="line">List secondMock = mock(List.class);</span><br><span class="line"></span><br><span class="line"><span class="comment">//using mocks</span></span><br><span class="line">firstMock.add(<span class="string">&quot;was called first&quot;</span>);</span><br><span class="line">secondMock.add(<span class="string">&quot;was called second&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//create inOrder object passing any mocks that need to be verified in order</span></span><br><span class="line">InOrder inOrder = inOrder(firstMock, secondMock);</span><br><span class="line"></span><br><span class="line"><span class="comment">//following will make sure that firstMock was called before secondMock</span></span><br><span class="line">inOrder.verify(firstMock).add(<span class="string">&quot;was called first&quot;</span>);</span><br><span class="line">inOrder.verify(secondMock).add(<span class="string">&quot;was called second&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// Oh, and A + B can be mixed together at will</span></span><br></pre></td></tr></table></figure><h3 id="验证方法没有执行"><a href="#验证方法没有执行" class="headerlink" title="验证方法没有执行"></a>验证方法没有执行</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//using mocks - only mockOne is interacted</span></span><br><span class="line">mockOne.add(<span class="string">&quot;one&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//ordinary verification</span></span><br><span class="line">verify(mockOne).add(<span class="string">&quot;one&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//verify that method was never called on a mock</span></span><br><span class="line">verify(mockOne, never()).add(<span class="string">&quot;two&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//verify that other mocks were not interacted</span></span><br><span class="line">verifyZeroInteractions(mockTwo, mockThree);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//using mocks</span></span><br><span class="line">mockedList.add(<span class="string">&quot;one&quot;</span>);</span><br><span class="line">mockedList.add(<span class="string">&quot;two&quot;</span>);</span><br><span class="line"></span><br><span class="line">verify(mockedList).add(<span class="string">&quot;one&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//following verification will fail</span></span><br><span class="line">verifyNoMoreInteractions(mockedList);</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="doReturn-doThrow-doAnswer-doNothing-doCallRealMethod"><a href="#doReturn-doThrow-doAnswer-doNothing-doCallRealMethod" class="headerlink" title="doReturn()|doThrow()| doAnswer()|doNothing()|doCallRealMethod()"></a>doReturn()|doThrow()| doAnswer()|doNothing()|doCallRealMethod()</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">doThrow(<span class="keyword">new</span> RuntimeException()).when(mockedList).clear();</span><br><span class="line"></span><br><span class="line"><span class="comment">//following throws RuntimeException:</span></span><br><span class="line">mockedList.clear();</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">when(mock.someMethod(anyString())).thenAnswer(</span><br><span class="line">    <span class="keyword">new</span> Answer() &#123;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> Object <span class="title">answer</span><span class="params">(InvocationOnMock invocation)</span> </span>&#123;</span><br><span class="line">            Object[] args = invocation.getArguments();</span><br><span class="line">            Object mock = invocation.getMock();</span><br><span class="line">            <span class="keyword">return</span> <span class="string">&quot;called with arguments: &quot;</span> + Arrays.toString(args);</span><br><span class="line">        &#125;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">//Following prints &quot;called with arguments: [foo]&quot;</span></span><br><span class="line">System.out.println(mock.someMethod(<span class="string">&quot;foo&quot;</span>));</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">List list = <span class="keyword">new</span> LinkedList();</span><br><span class="line">List spy = spy(list);</span><br><span class="line"></span><br><span class="line"><span class="comment">//Impossible: real method is called so spy.get(0) throws IndexOutOfBoundsException (the list is yet empty)</span></span><br><span class="line">when(spy.get(<span class="number">0</span>)).thenReturn(<span class="string">&quot;foo&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//You have to use doReturn() for stubbing:</span></span><br><span class="line">doReturn(<span class="string">&quot;foo&quot;</span>).when(spy).get(<span class="number">0</span>);</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="参数捕捉"><a href="#参数捕捉" class="headerlink" title="参数捕捉"></a>参数捕捉</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//Impossible: real method is called so spy.get(0) throws IndexOutOfBoundsException (the list is yet empty)</span></span><br><span class="line"> when(spy.get(<span class="number">0</span>)).thenReturn(<span class="string">&quot;foo&quot;</span>);</span><br><span class="line"></span><br><span class="line"> <span class="comment">//You have to use doReturn() for stubbing</span></span><br><span class="line"> doReturn(<span class="string">&quot;foo&quot;</span>).when(spy).get(<span class="number">0</span>);</span><br></pre></td></tr></table></figure><h3 id="序列化的mock"><a href="#序列化的mock" class="headerlink" title="序列化的mock"></a>序列化的mock</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">List serializableMock = mock(List.class, withSettings().serializable());</span><br></pre></td></tr></table></figure><h3 id="验证超时"><a href="#验证超时" class="headerlink" title="验证超时"></a>验证超时</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">//passes when someMethod() is called no later than within 100 ms</span></span><br><span class="line"><span class="comment">//exits immediately when verification is satisfied (e.g. may not wait full 100 ms)</span></span><br><span class="line">verify(mock, timeout(<span class="number">100</span>)).someMethod();</span><br><span class="line"><span class="comment">//above is an alias to:</span></span><br><span class="line">verify(mock, timeout(<span class="number">100</span>).times(<span class="number">1</span>)).someMethod();</span><br><span class="line"></span><br><span class="line"><span class="comment">//passes as soon as someMethod() has been called 2 times under 100 ms</span></span><br><span class="line">verify(mock, timeout(<span class="number">100</span>).times(<span class="number">2</span>)).someMethod();</span><br><span class="line"></span><br><span class="line"><span class="comment">//equivalent: this also passes as soon as someMethod() has been called 2 times under 100 ms</span></span><br><span class="line">verify(mock, timeout(<span class="number">100</span>).atLeast(<span class="number">2</span>)).someMethod();</span><br></pre></td></tr></table></figure><h3 id="mock抽象类"><a href="#mock抽象类" class="headerlink" title="mock抽象类"></a>mock抽象类</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//convenience API, new overloaded spy() method:</span></span><br><span class="line">SomeAbstract spy = spy(SomeAbstract.class);</span><br><span class="line"></span><br><span class="line"><span class="comment">//Mocking abstract methods, spying default methods of an interface (only available since 2.7.13)</span></span><br><span class="line">Function function = spy(Function.class);</span><br><span class="line"></span><br><span class="line"><span class="comment">//Robust API, via settings builder:</span></span><br><span class="line">OtherAbstract spy = mock(OtherAbstract.class, withSettings()</span><br><span class="line">   .useConstructor().defaultAnswer(CALLS_REAL_METHODS));</span><br><span class="line"></span><br><span class="line"><span class="comment">//Mocking an abstract class with constructor arguments (only available since 2.7.14)</span></span><br><span class="line">SomeAbstract spy = mock(SomeAbstract.class, withSettings()</span><br><span class="line">  .useConstructor(<span class="string">&quot;arg1&quot;</span>, <span class="number">123</span>).defaultAnswer(CALLS_REAL_METHODS));</span><br><span class="line"></span><br><span class="line"><span class="comment">//Mocking a non-static inner abstract class:</span></span><br><span class="line">InnerAbstract spy = mock(InnerAbstract.class, withSettings()</span><br><span class="line">   .useConstructor().outerInstance(outerInstance).defaultAnswer(CALLS_REAL_METHODS));</span><br></pre></td></tr></table></figure><h3 id="自定义验证失败信息"><a href="#自定义验证失败信息" class="headerlink" title="自定义验证失败信息"></a>自定义验证失败信息</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// will print a custom message on verification failure</span></span><br><span class="line">verify(mock, description(<span class="string">&quot;This will print on failure&quot;</span>)).someMethod();</span><br><span class="line"></span><br><span class="line"><span class="comment">// will work with any verification mode</span></span><br><span class="line">verify(mock, times(<span class="number">2</span>).description(<span class="string">&quot;someMethod should be called twice&quot;</span>)).someMethod();</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="Java8匹配器支持"><a href="#Java8匹配器支持" class="headerlink" title="Java8匹配器支持"></a>Java8匹配器支持</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">// verify a list only had strings of a certain length added to it</span></span><br><span class="line"><span class="comment">// note - this will only compile under Java 8</span></span><br><span class="line">verify(list, times(<span class="number">2</span>)).add(argThat(string -&gt; string.length() &lt; <span class="number">5</span>));</span><br><span class="line"></span><br><span class="line"><span class="comment">// Java 7 equivalent - not as neat</span></span><br><span class="line">verify(list, times(<span class="number">2</span>)).add(argThat(<span class="keyword">new</span> ArgumentMatcher()&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">matches</span><span class="params">(String arg)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> arg.length() &lt; <span class="number">5</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;));</span><br><span class="line"></span><br><span class="line"><span class="comment">// more complex Java 8 example - where you can specify complex verification behaviour functionally</span></span><br><span class="line">verify(target, times(<span class="number">1</span>)).receiveComplexObject(argThat(obj -&gt; obj.getSubObject().get(<span class="number">0</span>).equals(<span class="string">&quot;expected&quot;</span>)));</span><br><span class="line"></span><br><span class="line"><span class="comment">// this can also be used when defining the behaviour of a mock under different inputs</span></span><br><span class="line"><span class="comment">// in this case if the input list was fewer than 3 items the mock returns null</span></span><br><span class="line">when(mock.someMethod(argThat(list -&gt; list.size()&lt;<span class="number">3</span>))).thenReturn(<span class="keyword">null</span>);</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="Java8-Answer接口支持"><a href="#Java8-Answer接口支持" class="headerlink" title="Java8 Answer接口支持"></a>Java8 Answer接口支持</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// answer by returning 12 every time</span></span><br><span class="line">doAnswer(invocation -&gt; <span class="number">12</span>).when(mock).doSomething();</span><br><span class="line"></span><br><span class="line"><span class="comment">// answer by using one of the parameters - converting into the right</span></span><br><span class="line"><span class="comment">// type as your go - in this case, returning the length of the second string parameter</span></span><br><span class="line"><span class="comment">// as the answer. This gets long-winded quickly, with casting of parameters.</span></span><br><span class="line">doAnswer(invocation -&gt; ((String)invocation.getArgument(<span class="number">1</span>)).length())</span><br><span class="line">    .when(mock).doSomething(anyString(), anyString(), anyString());</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="对final对象，方法，枚举的支持"><a href="#对final对象，方法，枚举的支持" class="headerlink" title="对final对象，方法，枚举的支持"></a>对final对象，方法，枚举的支持</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">final</span> <span class="class"><span class="keyword">class</span> <span class="title">FinalClass</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="keyword">final</span> String <span class="title">finalMethod</span><span class="params">()</span> </span>&#123; <span class="keyword">return</span> <span class="string">&quot;something&quot;</span>; &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">FinalClass concrete = <span class="keyword">new</span> FinalClass(); </span><br><span class="line"></span><br><span class="line">FinalClass mock = mock(FinalClass.class);</span><br><span class="line">given(mock.finalMethod()).willReturn(<span class="string">&quot;not anymore&quot;</span>);</span><br><span class="line"></span><br><span class="line">assertThat(mock.finalMethod()).isNotEqualTo(concrete.finalMethod());</span><br></pre></td></tr></table></figure><h2 id="创建mock对象的方法"><a href="#创建mock对象的方法" class="headerlink" title="创建mock对象的方法"></a>创建mock对象的方法</h2><h3 id="注解方法创建"><a href="#注解方法创建" class="headerlink" title="注解方法创建"></a>注解方法创建</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ArticleManagerTest</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Mock</span> <span class="keyword">private</span> ArticleCalculator calculator;</span><br><span class="line">    <span class="meta">@Mock</span> <span class="keyword">private</span> ArticleDatabase database;</span><br><span class="line">    <span class="meta">@Mock</span> <span class="keyword">private</span> UserProvider userProvider;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> ArticleManager manager;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>使用注解方法创建的时候，需要先 </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">MockitoAnnotations.initMocks(<span class="keyword">this</span>);</span><br></pre></td></tr></table></figure><p>也可以使用预置的 <code>MockitoJUnitRunner</code> Runner 或者 rule: <code>MockitoRule</code>. </p><h3 id="直接创建"><a href="#直接创建" class="headerlink" title="直接创建"></a>直接创建</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Person mPerson = mock(Person.class); <span class="comment">//&lt;--使用mock方法</span></span><br></pre></td></tr></table></figure><h2 id="使用spy监视真正的对象"><a href="#使用spy监视真正的对象" class="headerlink" title="使用spy监视真正的对象"></a>使用spy监视真正的对象</h2><p>你可以创建真实对象的spy对象，当使用spy对象的时候真实的方法会被调用(假如这个方法没有被stub)<br>应当谨慎小心的使用spy对象 </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">List list = <span class="keyword">new</span> LinkedList();</span><br><span class="line">List spy = spy(list);</span><br><span class="line"></span><br><span class="line"><span class="comment">//optionally, you can stub out some methods:</span></span><br><span class="line">when(spy.size()).thenReturn(<span class="number">100</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//using the spy calls *real* methods</span></span><br><span class="line">spy.add(<span class="string">&quot;one&quot;</span>);</span><br><span class="line">spy.add(<span class="string">&quot;two&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//prints &quot;one&quot; - the first element of a list</span></span><br><span class="line">System.out.println(spy.get(<span class="number">0</span>));</span><br><span class="line"></span><br><span class="line"><span class="comment">//size() method was stubbed - 100 is printed</span></span><br><span class="line">System.out.println(spy.size());</span><br></pre></td></tr></table></figure><h3 id="对spy对象要慎用when-thenReturn"><a href="#对spy对象要慎用when-thenReturn" class="headerlink" title="对spy对象要慎用when/thenReturn"></a>对spy对象要慎用when/thenReturn</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//optionally, you can verify</span></span><br><span class="line">verify(spy).add(<span class="string">&quot;one&quot;</span>);</span><br><span class="line">verify(spy).add(<span class="string">&quot;two&quot;</span>);</span><br><span class="line"> </span><br><span class="line"><span class="comment">//Impossible: real method is called so spy.get(0) </span></span><br><span class="line"><span class="comment">// throws IndexOutOfBoundsException (the list is yet empty)</span></span><br><span class="line">when(spy.get(<span class="number">0</span>)).thenReturn(<span class="string">&quot;foo&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//You have to use doReturn() for stubbing</span></span><br><span class="line">doReturn(<span class="string">&quot;foo&quot;</span>).when(spy).get(<span class="number">0</span>);  </span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;p&gt;Mockito是一个用于java单元测试中的mocking框架&lt;/p&gt;</summary>
    
    
    
    <category term="测试" scheme="http://example.com/categories/%E6%B5%8B%E8%AF%95/"/>
    
    
  </entry>
  
  <entry>
    <title>安卓测试-JUnit框架</title>
    <link href="http://example.com/2018/11/28/%E5%AE%89%E5%8D%93%E6%B5%8B%E8%AF%95-JUnit%E6%A1%86%E6%9E%B6/"/>
    <id>http://example.com/2018/11/28/%E5%AE%89%E5%8D%93%E6%B5%8B%E8%AF%95-JUnit%E6%A1%86%E6%9E%B6/</id>
    <published>2018-11-27T17:13:25.000Z</published>
    <updated>2018-12-16T02:15:53.143Z</updated>
    
    <content type="html"><![CDATA[<p>JUnit是java开发的一个测试框架，Android当然也能用<a id="more"></a><br>我个人的感觉是它比较适合测试纯Java逻辑的代码，比如工具类，算法的计算，类的数据操作等等。在app -&gt; src目录下，test就是它的工作目录。 在类名字上右键，go-to，选择test，就可以自动创建一个对应的测试类。在左边的文件目录里面对测试类文件右键，run，就可以执行里面的测试方法。</p><h2 id="基础"><a href="#基础" class="headerlink" title="基础"></a>基础</h2><p>引入方法：</p><figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">testImplementation <span class="string">&#x27;junit:junit:4.12&#x27;</span></span><br></pre></td></tr></table></figure><p>JUnit4基础方法注解和常用的assertEquals之类的断言就不用说了，看名字基本都明白。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DateUtilTest</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String time = <span class="string">&quot;2017-10-15 16:00:02&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">long</span> timeStamp = <span class="number">1508054402000L</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Date mDate;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Before</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setUp</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;测试开始！&quot;</span>);</span><br><span class="line">        mDate = <span class="keyword">new</span> Date();</span><br><span class="line">        mDate.setTime(timeStamp);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@After</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">tearDown</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;测试结束！&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">   <span class="comment">//该方法默认会在主线程中执行</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">dateToStampTest</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        assertNotEquals(<span class="number">4</span>, DateUtil.dateToStamp(time));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test(expected = ParseException.class)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">dateToStampTest1</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        DateUtil.dateToStamp(<span class="string">&quot;2017-10-15&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="meta">@Ignore(&quot;test方法不执行\n&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;-----&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//该方法会在一个单独的线程中执行，单位为毫秒，这里超时时间为2秒</span></span><br><span class="line">    <span class="meta">@Test(timeout = 2000)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testTimeout</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;timeout method called in thread &quot;</span> + Thread.currentThread().getName());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test(expected = IndexOutOfBoundsException.class)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">empty</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">new</span> ArrayList&lt;Object&gt;().get(<span class="number">0</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>不过这里的@Test注解还有两个属性可以指定</p><h2 id="Hamcrest与assertThat"><a href="#Hamcrest与assertThat" class="headerlink" title="Hamcrest与assertThat"></a>Hamcrest与assertThat</h2><p>Hamcrest是一个表达式类库，它提供了一套匹配符Matcher，JUnit4结合Hamcrest提供了一个全新的断言语法：assertThat，结合Hamcrest提供的匹配符，可以表达全部的测试思想。使用gradle引入JUnit4.12时已经包含了hamcrest-core.jar、hamcrest-library.jar、hamcrest-integration.jar这三个jar包，所以我们无需额外再单独导入hamcrest相关类库。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//注意由于没有导包，直接用is(),both等等会找不到方法，他们基本都是CoreMatchers类的方法</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AssertThatTest</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testMobilePhone</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        Assert.assertThat(<span class="string">&quot;13588888888&quot;</span>, <span class="keyword">new</span> IsMobilePhoneMatcher());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testAssertThat1</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        Assert.assertThat(<span class="number">6</span>, CoreMatchers.is(<span class="number">6</span>));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testAssertThat2</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        Assert.assertThat(<span class="keyword">null</span>, IsNull.nullValue());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testAssertThat3</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        Assert.assertThat(<span class="string">&quot;Hello python world&quot;</span>,CoreMatchers.both(CoreMatchers.startsWith(<span class="string">&quot;Hello&quot;</span>)).and(CoreMatchers.endsWith(<span class="string">&quot;World&quot;</span>)));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="自定义匹配器"><a href="#自定义匹配器" class="headerlink" title="自定义匹配器"></a>自定义匹配器</h2><p>assertThat会用到匹配器，我们也可以自己定义匹配规则</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> org.hamcrest.BaseMatcher;</span><br><span class="line"><span class="keyword">import</span> org.hamcrest.Description;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.regex.Matcher;</span><br><span class="line"><span class="keyword">import</span> java.util.regex.Pattern;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">IsMobilePhoneMatcher</span> <span class="keyword">extends</span> <span class="title">BaseMatcher</span>&lt;<span class="title">String</span>&gt; </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 进行断言判定，返回true则断言成功，否则断言失败</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">matches</span><span class="params">(Object item)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (item == <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        Pattern pattern = Pattern.compile(<span class="string">&quot;(1|861)(3|5|7|8)\\d&#123;9&#125;$*&quot;</span>);</span><br><span class="line">        Matcher matcher = pattern.matcher((String) item);</span><br><span class="line">        <span class="keyword">return</span> matcher.find();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 给期待断言成功的对象增加描述</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">describeTo</span><span class="params">(Description description)</span> </span>&#123;</span><br><span class="line">        description.appendText(<span class="string">&quot;预计此字符串是手机号码！&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 给断言失败的对象增加描述</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">describeMismatch</span><span class="params">(Object item, Description description)</span> </span>&#123;</span><br><span class="line">        description.appendText(item.toString() + <span class="string">&quot;不是手机号码！&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="自定义-Rule"><a href="#自定义-Rule" class="headerlink" title="自定义 Rule"></a>自定义 Rule</h2><p>Rule给我的感觉类似于动态代理里面的InvocationHandler，在测试类中使用 @Rule 注解标记一个 Rule 接口的实现类，那么在 Rule 的 apply方法中就可以拦截到这个测试类的所有测试方法。</p><p>自带的Rule示例：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//在测试方法内部能知道当前的方法名。</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">NameRuleTest</span> </span>&#123; <span class="comment">//用@Rule注解来标记一个TestRule，注意必须是public修饰的 </span></span><br><span class="line">    <span class="meta">@Rule</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">final</span> TestName name = <span class="keyword">new</span> TestName();</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testA</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        assertEquals(<span class="string">&quot;testA&quot;</span>, name.getMethodName());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testB</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        assertEquals(<span class="string">&quot;testB&quot;</span>, name.getMethodName());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//超时时间</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TimeoutRuleTest</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Rule</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">final</span> Timeout globalTimeout = Timeout.millis(<span class="number">20</span>);</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testInfiniteLoop1</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">for</span> (; ; ) &#123;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testInfiniteLoop2</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">for</span> (; ; ) &#123;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>自定义Rule：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 自定义<span class="doctag">@RuLL</span>  MyRule 演示</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AssertThatTest</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Rule</span></span><br><span class="line">    <span class="keyword">public</span> MyRule rule = <span class="keyword">new</span> MyRule();</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testAssertThat1</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        Assert.assertThat(<span class="number">6</span>, CoreMatchers.is(<span class="number">6</span>));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testAssertThat2</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        Assert.assertThat(<span class="keyword">null</span>, IsNull.nullValue());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testAssertThat3</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        Assert.assertThat(<span class="string">&quot;Hello python world&quot;</span>,CoreMatchers.both(CoreMatchers.startsWith(<span class="string">&quot;Hello&quot;</span>)).and(CoreMatchers.endsWith(<span class="string">&quot;World&quot;</span>)));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyRule</span> <span class="keyword">implements</span> <span class="title">TestRule</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> Statement <span class="title">apply</span><span class="params">(<span class="keyword">final</span> Statement base, <span class="keyword">final</span> Description description)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> Statement() &#123;</span><br><span class="line">                <span class="meta">@Override</span></span><br><span class="line">                <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">evaluate</span><span class="params">()</span> <span class="keyword">throws</span> Throwable </span>&#123;</span><br><span class="line">                    <span class="comment">// evaluate前执行方法相当于@Before</span></span><br><span class="line">                    String methodName = description.getMethodName(); <span class="comment">// 获取测试方法的名字</span></span><br><span class="line">                    System.out.println(methodName + <span class="string">&quot;测试开始！&quot;</span>);</span><br><span class="line"></span><br><span class="line">                    base.evaluate();  <span class="comment">// 运行的测试方法</span></span><br><span class="line"></span><br><span class="line">                    <span class="comment">// evaluate后执行方法相当于@After</span></span><br><span class="line">                    System.out.println(methodName + <span class="string">&quot;测试结束！&quot;</span>);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RepeatRule</span> <span class="keyword">implements</span> <span class="title">TestRule</span> </span>&#123; <span class="comment">//这里定义一个注解，用于动态在测试方法里指定重复次数</span></span><br><span class="line">    <span class="meta">@Retention(RetentionPolicy.RUNTIME)</span></span><br><span class="line">    <span class="meta">@Target(&#123;ElementType.METHOD&#125;)</span></span><br><span class="line">    <span class="keyword">public</span> <span class="meta">@interface</span> Repeat &#123;</span><br><span class="line">        <span class="function"><span class="keyword">int</span> <span class="title">count</span><span class="params">()</span></span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Statement <span class="title">apply</span><span class="params">(<span class="keyword">final</span> Statement base, <span class="keyword">final</span> Description description)</span> </span>&#123;</span><br><span class="line">        Statement repeatStatement = <span class="keyword">new</span> Statement() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">evaluate</span><span class="params">()</span> <span class="keyword">throws</span> Throwable </span>&#123;</span><br><span class="line">                Repeat repeat = description.getAnnotation(Repeat.class); <span class="comment">//如果有@Repeat注解，则会重复执行指定次数</span></span><br><span class="line">                <span class="keyword">if</span> (repeat != <span class="keyword">null</span>) &#123;</span><br><span class="line">                    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; repeat.count(); i++) &#123;</span><br><span class="line">                        base.evaluate();</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123; <span class="comment">//如果没有注解，则不会重复执行</span></span><br><span class="line">                    base.evaluate();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;;</span><br><span class="line">        <span class="keyword">return</span> repeatStatement;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RepeatTest</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Rule</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">final</span> RepeatRule repeatRule = <span class="keyword">new</span> RepeatRule(); <span class="comment">//该方法重复执行5次 </span></span><br><span class="line"></span><br><span class="line">    <span class="meta">@RepeatRule</span>.Repeat(count = <span class="number">5</span>)</span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testMethod</span><span class="params">()</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;---test method---&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testMethod2</span><span class="params">()</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;---test method2---&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="测试方法的执行顺序"><a href="#测试方法的执行顺序" class="headerlink" title="测试方法的执行顺序"></a>测试方法的执行顺序</h2><p> 当我们运行一个测试类里的所有测试方法时，测试方法的执行顺序并不是固定的，JUnit4提供@ FixMethodOrder注解来配置执行顺序，其可选值有：MethodSorters.NAME_ASCENDING、MethodSorters.DEFAULT、MethodSorters.JVM</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@FixMethodOrder(MethodSorters.NAME_ASCENDING)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestExecOrder</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testD</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;DDDDD&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testA</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;AAAAA&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testB</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;BBBBB&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testC</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;CCCCC&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Test-runners"><a href="#Test-runners" class="headerlink" title="Test runners"></a>Test runners</h2><p>所有的单元测试方法都是通过Runner来执行的。Runner只是一个抽象类，它是用来跑测试用例并通知结果的，JUnit提供了很多Runner的实现类，可以根据不同的情况选择不同的test runner。</p><p>通过@RunWith注解，可以为我们的测试用例选定一个特定的Runner来执行。<br>默认的test runner是 BlockJUnit4ClassRunner。<br>@RunWith(JUnit4.class)，使用的依然是默认的test runner，实质上JUnit4继承自BlockJUnit4ClassRunner。</p><h3 id="Suite"><a href="#Suite" class="headerlink" title="Suite"></a>Suite</h3><p>Suite 翻译过来是测试套件，意思是让我们将一批其他的测试类聚集在一起，然后一起执行，这样就达到了同时运行多个测试类的目的。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RunWith(Suite.class)</span></span><br><span class="line"><span class="meta">@Suite</span>.SuiteClasses(&#123;</span><br><span class="line">        TestLogin.class,</span><br><span class="line">        TestLogout.class,</span><br><span class="line">        TestUpdate.class</span><br><span class="line">&#125;)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestSuite</span> </span>&#123;</span><br><span class="line">    <span class="comment">//不需要有任何实现方法</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>执行运行TestSuite，相当于同时执行了这3个测试类。<br>Suite还可以进行嵌套，即一个测试Suite里包含另外一个测试Suite。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RunWith(Suite.class)</span></span><br><span class="line"><span class="meta">@Suite</span>.SuiteClasses(TestSuite.class)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestSuite2</span> </span>&#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Parameterized-参数化"><a href="#Parameterized-参数化" class="headerlink" title="Parameterized 参数化"></a>Parameterized 参数化</h3><p>假如我们有一个待测试类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Fibonacci</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">compute</span><span class="params">(<span class="keyword">int</span> n)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> result = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">if</span> (n &lt;= <span class="number">1</span>) &#123;</span><br><span class="line">            result = n;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            result = compute(n - <span class="number">1</span>) + compute(n - <span class="number">2</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>针对这个函数，我们需要多个输入参数来验证是否正确</p><ol><li>使用构造函数来注入参数值<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"> <span class="comment">//指定Parameterized作为test runner </span></span><br><span class="line"><span class="meta">@RunWith(Parameterized.class)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestParams</span> </span>&#123;</span><br><span class="line">    <span class="comment">//这里是配置参数的数据源，该方法必须是public static修饰的，且必须返回一个可迭代的数组或者集合 </span></span><br><span class="line">    <span class="comment">// JUnit会自动迭代该数据源，自动为参数赋值，所需参数以及参数赋值顺序由构造器决定。 </span></span><br><span class="line">    <span class="meta">@Parameterized</span>.Parameters</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> List <span class="title">getParams</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> Arrays.asList(<span class="keyword">new</span> Integer[][]&#123;&#123;<span class="number">0</span>, <span class="number">0</span>&#125;, &#123;<span class="number">1</span>, <span class="number">1</span>&#125;, &#123;<span class="number">2</span>, <span class="number">1</span>&#125;, &#123;<span class="number">3</span>, <span class="number">2</span>&#125;, &#123;<span class="number">4</span>, <span class="number">3</span>&#125;, &#123;<span class="number">5</span>, <span class="number">5</span>&#125;, &#123;<span class="number">6</span>, <span class="number">8</span>&#125;&#125;);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> input;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> expected; <span class="comment">//在构造函数里，指定了2个输入参数，JUnit会在迭代数据源的时候，自动传入这2个参数。 </span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 例如：当获取到数据源的第3条数据&#123;2，1&#125;时，input=2，expected=1 </span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">TestParams</span><span class="params">(<span class="keyword">int</span> input, <span class="keyword">int</span> expected)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.input = input;</span><br><span class="line">        <span class="keyword">this</span>.expected = expected;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testFibonacci</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(input + <span class="string">&quot;,&quot;</span> + expected);</span><br><span class="line">        Assert.assertEquals(expected, Fibonacci.compute(input));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure></li><li>使用注解<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RunWith(Parameterized.class)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestParams2</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Parameterized</span>.Parameters</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> List <span class="title">getParams</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> Arrays.asList(<span class="keyword">new</span> Integer[][]&#123;&#123;<span class="number">0</span>, <span class="number">0</span>&#125;, &#123;<span class="number">1</span>, <span class="number">1</span>&#125;, &#123;<span class="number">2</span>, <span class="number">1</span>&#125;, &#123;<span class="number">3</span>, <span class="number">2</span>&#125;, &#123;<span class="number">4</span>, <span class="number">3</span>&#125;, &#123;<span class="number">5</span>, <span class="number">5</span>&#125;, &#123;<span class="number">6</span>, <span class="number">8</span>&#125;&#125;);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//这里必须是public，不能是private</span></span><br><span class="line">    <span class="meta">@Parameterized</span>.Parameter</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">int</span> input;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//注解括号里的参数，用来指定参数的顺序，默认为0</span></span><br><span class="line">    <span class="meta">@Parameterized</span>.Parameter(<span class="number">1</span>)</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">int</span> expected;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testFibonacci</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(input + <span class="string">&quot;,&quot;</span> + expected);</span><br><span class="line">        Assert.assertEquals(expected, Fibonacci.compute(input));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Categories"><a href="#Categories" class="headerlink" title="Categories"></a>Categories</h3>Categories继承自Suite，但是比Suite功能更加强大，它能对测试类中的测试方法进行分类执行。当你想把不同测试类中的测试方法分在一组，Categories就很管用。</li></ol><p><a href="https://github.com/nangonghuang/AndroidTest">代码 github地址</a></p><p>引用：<br><a href="https://blog.csdn.net/qq_17766199/article/details/78243176">Android单元测试(一)：JUnit框架的使用</a><br><a href="https://www.jianshu.com/p/06124ddc6c68">Android单元测试</a></p>]]></content>
    
    
    <summary type="html">&lt;p&gt;JUnit是java开发的一个测试框架，Android当然也能用&lt;/p&gt;</summary>
    
    
    
    <category term="测试" scheme="http://example.com/categories/%E6%B5%8B%E8%AF%95/"/>
    
    
  </entry>
  
  <entry>
    <title>flutter get started</title>
    <link href="http://example.com/2018/11/05/flutter-get-started/"/>
    <id>http://example.com/2018/11/05/flutter-get-started/</id>
    <published>2018-11-05T11:15:45.000Z</published>
    <updated>2018-11-05T14:05:08.315Z</updated>
    
    <content type="html"><![CDATA[<p>今天尝试了一下flutter,记一下过程</p><a id="more"></a><h2 id="安装和运行"><a href="#安装和运行" class="headerlink" title="安装和运行"></a>安装和运行</h2><p><a href="https://flutter.io/get-started/install/">get-started</a></p><ol><li><p>首先它说需要安装Git for Windows ，好像没有用到这个，因为我本身就已经有了，所以不知道没装会不会ok，建议安装</p></li><li><p>然后是下载 flutter_windows_v0.9.4-beta.zip ，300多M，这个是真的慢，我看了全局vpn依然很慢</p></li><li><p>解压出 flutter 文件夹，并且设置环境变量指向 flutter\bin ，有一万多个文件把，解压也是超慢。</p></li><li><p>dos命令行运行 <code>flutter doctor</code>，检测环境设置，因为已经安装了Android-Studio了，所以jdk,sdk，AS，模拟器 那一块都没有问题，如果打算使用visio studio code 的话需要安装 flutter插件才能被发现。</p></li><li><p>如果打算使用AS的话，需要依次搜索安装插件 Dart 和 flutter ，这里我开了全局vpn依然安装不了flutter插件，不知道为什么，根据它错误提示里面的地址，我复制到浏览器里面下载了zip格式的插件然后导入到AS里面。</p></li><li><p>使用AS的话，直接创建Flutter项目就行，创建的时候记得勾选offline,不过即使是offline了，创建过程还是不知道为什么卡了很久很久。使用vsc的话，直接ctrl+p ,输入 &gt; ,再选择 Flutter: New Project 就行，直接就创建好了，或者使用命令行:</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">flutter create myapp</span><br><span class="line">cd myapp</span><br></pre></td></tr></table></figure><p>创建后打开 myapp文件夹也行，也很快。</p></li><li><p>运行就，点击AS 的run按钮 ，或者vsc的debug(记得先点一下右边的配置小按钮)，或者 <code>flutter run</code>，按 R 是实时部署代码。</p></li></ol><p>IDE的选择的话，我本来是倾向于vsc的，dart看起来像是ts一类的语言语法，但是实际打开后发现vsc来做这个的话，内存占用也到了七八百M了，和AS不相上下了。抽空看了看 google io 上的一些 flutter 的介绍视频，里面的程序员也都是用的 AS，所以还是决定用 AS 了。</p><p>大概看了下美团和咸鱼的试用报告，了解了下渲染效率和原理，觉得还是不错的。特别是看了<a href="https://www.youtube.com/watch?v=w2TcYP8qiRI">使用flutter30分钟实现一个跨平台的IM app</a>之后，觉得有点惊艳。谷歌的firebase和service全家桶套餐原来还有远程数据库的功能。视频里就演示了下双端读取同步数据库来实现IM，有些意思。</p><h2 id="Demo"><a href="#Demo" class="headerlink" title="Demo"></a>Demo</h2><p>官网文档的演示教程分1，2两部分，第一部分简单介绍了下text，展示了一个列表：</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="string">&#x27;package:flutter/material.dart&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="string">&#x27;package:english_words/english_words.dart&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">void</span> main() =&gt; runApp(MyApp());</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyApp</span> <span class="keyword">extends</span> <span class="title">StatelessWidget</span> </span>&#123;</span><br><span class="line">  <span class="meta">@override</span></span><br><span class="line">  Widget build(BuildContext context) &#123;</span><br><span class="line">    <span class="keyword">return</span> MaterialApp(</span><br><span class="line">      title: <span class="string">&#x27;Startup Name Generator&#x27;</span>,</span><br><span class="line">      home: RandomWords(),</span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">RandomWordsState</span> <span class="keyword">extends</span> <span class="title">State</span>&lt;<span class="title">RandomWords</span>&gt; </span>&#123;</span><br><span class="line">  <span class="keyword">final</span> _suggestions = &lt;WordPair&gt;[];</span><br><span class="line"></span><br><span class="line">  <span class="keyword">final</span> _biggerFont = <span class="keyword">const</span> TextStyle(fontSize: <span class="number">18.0</span>);</span><br><span class="line"></span><br><span class="line">  Widget _buildSuggestions() &#123;</span><br><span class="line">    <span class="keyword">return</span> ListView.builder(</span><br><span class="line">        padding: <span class="keyword">const</span> EdgeInsets.all(<span class="number">16.0</span>),</span><br><span class="line">        itemBuilder: (context, i) &#123;</span><br><span class="line">          <span class="comment">// Add a one-pixel-high divider widget before each row in theListView.</span></span><br><span class="line">          <span class="keyword">if</span> (i.isOdd) <span class="keyword">return</span> Divider();</span><br><span class="line"></span><br><span class="line">          <span class="keyword">final</span> index = i ~/ <span class="number">2</span>;</span><br><span class="line">          <span class="keyword">if</span> (index &gt;= _suggestions.length) &#123;</span><br><span class="line">            _suggestions.addAll(generateWordPairs().take(<span class="number">10</span>));</span><br><span class="line">          &#125;</span><br><span class="line">          <span class="keyword">return</span> _buildRow(_suggestions[index]);</span><br><span class="line">        &#125;);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  Widget _buildRow(WordPair pair) &#123;</span><br><span class="line">    <span class="keyword">return</span> ListTile(</span><br><span class="line">      title: Text(</span><br><span class="line">        pair.asPascalCase,</span><br><span class="line">        style: _biggerFont,</span><br><span class="line">      ),</span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@override</span></span><br><span class="line">  Widget build(BuildContext context) &#123;</span><br><span class="line">    <span class="keyword">return</span> Scaffold(</span><br><span class="line">      appBar: AppBar(</span><br><span class="line">        title: Text(<span class="string">&#x27;Startup Name Generator&#x27;</span>),</span><br><span class="line">      ),</span><br><span class="line">      body: _buildSuggestions(),</span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">RandomWords</span> <span class="keyword">extends</span> <span class="title">StatefulWidget</span> </span>&#123;</span><br><span class="line">  <span class="meta">@override</span></span><br><span class="line">  RandomWordsState createState() =&gt; <span class="keyword">new</span> RandomWordsState();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>通过 <code>void main() =&gt; runApp(MyApp());</code> 来启动一个界面，MyApp则是一个 StatelessWidget 的控件，需要实现的虚方法 <code>build</code>要求返回一个 Widget</p><p>对于有状态变化的控件，需要使用 StatefulWidget 控件。继承后虚方法要求返回一个State. 然后新建一个状态类继承 State，把控件的名字作为 泛型参数写进去，State 的子类则需要返回一个 Widget。</p><p>可以使用 Scaffold 类来包裹 Widget 作为body参数的值来返回，可以使用ListView.builder（padding,ListTile）来构造一个列表控件。</p><p>感觉和rn相比，理解起来更接近客户端的思维。rn写起来则是更接近web的思维，尖括号大括号小括号一起上，还要用 StyleSheet.create 来写css，很不习惯。</p><p>第二部分展示了一下路由和页面交互的功能。呃，前端里面的路由意思就是页面跳转，这个也是看rn的时候迷糊了一段才明白。</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="string">&#x27;package:flutter/material.dart&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="string">&#x27;package:english_words/english_words.dart&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">void</span> main() =&gt; runApp(<span class="keyword">new</span> MyApp());</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyApp</span> <span class="keyword">extends</span> <span class="title">StatelessWidget</span> </span>&#123;</span><br><span class="line">  <span class="comment">// This widget is the root of your application.</span></span><br><span class="line">  <span class="meta">@override</span></span><br><span class="line">  Widget build(BuildContext context) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> MaterialApp(</span><br><span class="line">      title: <span class="string">&#x27;Flutter Demo&#x27;</span>,</span><br><span class="line">      theme: <span class="keyword">new</span> ThemeData(</span><br><span class="line">        <span class="comment">// This is the theme of your application.</span></span><br><span class="line">        <span class="comment">//</span></span><br><span class="line">        <span class="comment">// Try running your application with &quot;flutter run&quot;. You&#x27;ll see the</span></span><br><span class="line">        <span class="comment">// application has a blue toolbar. Then, without quitting the app, try</span></span><br><span class="line">        <span class="comment">// changing the primarySwatch below to Colors.green and then invoke</span></span><br><span class="line">        <span class="comment">// &quot;hot reload&quot; (press &quot;r&quot; in the console where you ran &quot;flutter run&quot;,</span></span><br><span class="line">        <span class="comment">// or press Run &gt; Flutter Hot Reload in IntelliJ). Notice that the</span></span><br><span class="line">        <span class="comment">// counter didn&#x27;t reset back to zero; the application is not restarted.</span></span><br><span class="line">        primarySwatch: Colors.blue,</span><br><span class="line">      ),</span><br><span class="line">      home: RandomWords(),</span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">RandomWordState</span> <span class="keyword">extends</span> <span class="title">State</span>&lt;<span class="title">RandomWords</span>&gt; </span>&#123;</span><br><span class="line">  <span class="keyword">final</span> _suggestions = &lt;WordPair&gt;[];</span><br><span class="line"></span><br><span class="line">  <span class="keyword">final</span> _saved = <span class="keyword">new</span> <span class="built_in">Set</span>&lt;WordPair&gt;();</span><br><span class="line">  <span class="keyword">final</span> _biggerFont = <span class="keyword">const</span> TextStyle(fontSize: <span class="number">18.0</span>);</span><br><span class="line"></span><br><span class="line">  <span class="meta">@override</span></span><br><span class="line">  Widget build(BuildContext context) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> Scaffold(</span><br><span class="line">      appBar: <span class="keyword">new</span> AppBar(</span><br><span class="line">        title: <span class="keyword">new</span> Text(<span class="string">&#x27;Startup Name Generator&#x27;</span>),</span><br><span class="line">        actions: &lt;Widget&gt;[</span><br><span class="line">          <span class="comment">// Add 3 lines from here...</span></span><br><span class="line">          <span class="keyword">new</span> IconButton(icon: <span class="keyword">const</span> Icon(Icons.list), onPressed: _pushSaved),</span><br><span class="line">        ], <span class="comment">// ... to here.</span></span><br><span class="line">      ),</span><br><span class="line">      body: _buildSuggestions(),</span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  Widget _buildSuggestions() &#123;</span><br><span class="line">    <span class="keyword">return</span> ListView.builder(</span><br><span class="line">        padding: <span class="keyword">const</span> EdgeInsets.all(<span class="number">16.0</span>),</span><br><span class="line">        <span class="comment">// The itemBuilder callback is called once per suggested word pairing,</span></span><br><span class="line">        <span class="comment">// and places each suggestion into a ListTile row.</span></span><br><span class="line">        <span class="comment">// For even rows, the function adds a ListTile row for the word pairing.</span></span><br><span class="line">        <span class="comment">// For odd rows, the function adds a Divider widget to visually</span></span><br><span class="line">        <span class="comment">// separate the entries. Note that the divider may be difficult</span></span><br><span class="line">        <span class="comment">// to see on smaller devices.</span></span><br><span class="line">        itemBuilder: (context, i) &#123;</span><br><span class="line">          <span class="comment">// Add a one-pixel-high divider widget before each row in theListView.</span></span><br><span class="line">          <span class="keyword">if</span> (i.isOdd) <span class="keyword">return</span> Divider();</span><br><span class="line"></span><br><span class="line">          <span class="comment">// The syntax &quot;i ~/ 2&quot; divides i by 2 and returns an integer result.</span></span><br><span class="line">          <span class="comment">// For example: 1, 2, 3, 4, 5 becomes 0, 1, 1, 2, 2.</span></span><br><span class="line">          <span class="comment">// This calculates the actual number of word pairings in the ListView,</span></span><br><span class="line">          <span class="comment">// minus the divider widgets.</span></span><br><span class="line">          <span class="keyword">final</span> index = i ~/ <span class="number">2</span>;</span><br><span class="line">          <span class="comment">// If you&#x27;ve reached the end of the available word pairings...</span></span><br><span class="line">          <span class="keyword">if</span> (index &gt;= _suggestions.length) &#123;</span><br><span class="line">            <span class="comment">// ...then generate 10 more and add them to the suggestions list.</span></span><br><span class="line">            _suggestions.addAll(generateWordPairs().take(<span class="number">10</span>));</span><br><span class="line">          &#125;</span><br><span class="line">          <span class="keyword">return</span> _buildRow(_suggestions[index]);</span><br><span class="line">        &#125;);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  Widget _buildRow(WordPair pair) &#123;</span><br><span class="line">    <span class="keyword">final</span> <span class="built_in">bool</span> alreadySaved = _saved.contains(pair);</span><br><span class="line">    <span class="keyword">return</span> ListTile(</span><br><span class="line">      title: Text(</span><br><span class="line">        pair.asPascalCase,</span><br><span class="line">        style: _biggerFont,</span><br><span class="line">      ),</span><br><span class="line">      trailing: <span class="keyword">new</span> Icon(</span><br><span class="line">        <span class="comment">// Add the lines from here...</span></span><br><span class="line">        alreadySaved ? Icons.favorite : Icons.favorite_border,</span><br><span class="line">        color: alreadySaved ? Colors.red : <span class="keyword">null</span>,</span><br><span class="line">      ), <span class="comment">// ... to here.</span></span><br><span class="line">      onTap: () &#123;</span><br><span class="line">        <span class="comment">// Add 9 lines from here...</span></span><br><span class="line">        setState(() &#123;</span><br><span class="line">          <span class="keyword">if</span> (alreadySaved) &#123;</span><br><span class="line">            _saved.remove(pair);</span><br><span class="line">          &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            _saved.add(pair);</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">      &#125;,</span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">void</span> _pushSaved() &#123;</span><br><span class="line">    Navigator.of(context).push(</span><br><span class="line">      <span class="keyword">new</span> MaterialPageRoute&lt;<span class="keyword">void</span>&gt;(</span><br><span class="line">        <span class="comment">// Add 20 lines from here...</span></span><br><span class="line">        builder: (BuildContext context) &#123;</span><br><span class="line">          <span class="keyword">final</span> <span class="built_in">Iterable</span>&lt;ListTile&gt; tiles = _saved.map(</span><br><span class="line">                (WordPair pair) &#123;</span><br><span class="line">              <span class="keyword">return</span> <span class="keyword">new</span> ListTile(</span><br><span class="line">                title: <span class="keyword">new</span> Text(</span><br><span class="line">                  pair.asPascalCase,</span><br><span class="line">                  style: _biggerFont,</span><br><span class="line">                ),</span><br><span class="line">              );</span><br><span class="line">            &#125;,</span><br><span class="line">          );</span><br><span class="line">          <span class="keyword">final</span> <span class="built_in">List</span>&lt;Widget&gt; divided = ListTile.divideTiles(</span><br><span class="line">            context: context,</span><br><span class="line">            tiles: tiles,</span><br><span class="line">          ).toList();</span><br><span class="line"></span><br><span class="line">          <span class="keyword">return</span> <span class="keyword">new</span> Scaffold(</span><br><span class="line">            appBar: <span class="keyword">new</span> AppBar(</span><br><span class="line">              title: <span class="keyword">const</span> Text(<span class="string">&#x27;Saved  suggestions&#x27;</span>),</span><br><span class="line">            ),</span><br><span class="line">            body: <span class="keyword">new</span> ListView(children: divided),</span><br><span class="line">          );</span><br><span class="line">        &#125;,</span><br><span class="line">      ), <span class="comment">// ... to here.</span></span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">RandomWords</span> <span class="keyword">extends</span> <span class="title">StatefulWidget</span> </span>&#123;</span><br><span class="line">  <span class="meta">@override</span></span><br><span class="line">  State&lt;StatefulWidget&gt; createState() &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> RandomWordState();</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>按钮的话是通过增加一个 <code>onPressed: _pushSaved</code>方法来实现，js里面对于这种突然而然出来的参数已经见怪不怪了。。路由则是通过 <code>Navigator.of(context).push( MaterialPageRoute(builder:Widget) )</code>来实现。其中用到了一些简单的图片，都是内置的。</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;今天尝试了一下flutter,记一下过程&lt;/p&gt;</summary>
    
    
    
    <category term="flutter" scheme="http://example.com/categories/flutter/"/>
    
    
    <category term="flutter" scheme="http://example.com/tags/flutter/"/>
    
  </entry>
  
  <entry>
    <title>Android-binder-java层</title>
    <link href="http://example.com/2018/11/03/Android-binder-java%E5%B1%82/"/>
    <id>http://example.com/2018/11/03/Android-binder-java%E5%B1%82/</id>
    <published>2018-11-03T09:07:37.000Z</published>
    <updated>2018-11-05T14:13:02.551Z</updated>
    
    <content type="html"><![CDATA[<p>java层分为系统服务的binder 和 bindService的 binder </p><a id="more"></a><h2 id="系统服务"><a href="#系统服务" class="headerlink" title="系统服务"></a>系统服务</h2><p>以ServiceManager.java 为例 :</p><p><img src="/2018/11/03/Android-binder-java%E5%B1%82/binder_5.jpg" alt="ServiceManager"></p><h3 id="addService的过程"><a href="#addService的过程" class="headerlink" title="addService的过程"></a>addService的过程</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//ServiceManager::getIServiceManager()</span></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">static</span> IServiceManager <span class="title">getIServiceManager</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (sServiceManager != <span class="keyword">null</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> sServiceManager;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Find the service manager</span></span><br><span class="line">    sServiceManager = ServiceManagerNative.asInterface(Binder.allowBlocking(BinderInternal.getContextObject()));</span><br><span class="line">    <span class="keyword">return</span> sServiceManager;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//ServiceManagerNative::asInterface</span></span><br><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">public</span> IServiceManager <span class="title">asInterface</span><span class="params">(IBinder obj)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (obj == <span class="keyword">null</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    IServiceManager in =</span><br><span class="line">        (IServiceManager)obj.queryLocalInterface(descriptor);</span><br><span class="line">    <span class="keyword">if</span> (in != <span class="keyword">null</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> in;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> ServiceManagerProxy(obj);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>ServiceManager通过getIServiceManager()拿到远程接口，<code>BinderInternal.getContextObject()</code>是一个native方法：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">static</span> jobject <span class="title">android_os_BinderInternal_getContextObject</span><span class="params">(JNIEnv* env, jobject clazz)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">// 这里 new BpBinder(handle)，具体函数见下面</span></span><br><span class="line">    <span class="comment">// 注意这里 ProcessState::self() 会打开驱动，建立内存映射</span></span><br><span class="line">    sp&lt;IBinder&gt; b = ProcessState::self()-&gt;getContextObject(NULL);</span><br><span class="line">    <span class="comment">//  返回的是BinderProxy，并且设置了这个BinderProxy的mNativeDatas指针指向这个bpBinder,具体函数见下面</span></span><br><span class="line">    <span class="keyword">return</span> javaObjectForIBinder(env, b);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在c++层调用<code>ProcessState::getContextObject(NULL)</code>得到一个c++的BpBinder(0)对象，并且通过jni的反射把它包装为一个BinderProxy的java对象返回给java，并且设置了BinderProxy(0)对象又有c++层BpBinder(0)对象的指针，因此</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ServiceManagerNative.asInterface(Binder.allowBlocking(BinderInternal.getContextObject()))</span><br></pre></td></tr></table></figure><p>等于</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">new</span> ServiceManagerProxy(Binder.allowBlocking(<span class="keyword">new</span> BinderProxy(<span class="number">0</span>))`</span><br></pre></td></tr></table></figure><p>从类的设计上来看，ServiceManagerProxy是ServiceManagerNative的一个静态代理类，通过asInterface()方法传入一个BinderProxy来构造，在ServiceManagerProxy的方法实现上，请求都转发给了BinderProxy,所以ServiceManagerProxy也是一个适配器类，把BinderProxy的方法适配成ServiceManagerProxy的方法来给用户调用。BinderProxy含有c++层BpBinder的指针，所以跨进程调用都是通过它来实现。</p><p>当java层调用 getIServiceManager().addService(…) 的时候，比如添加ActivityManagerService,因为继承了Binder,所以初始化的时候会设置一个mObject指针指向c++层的JavaBBinder类，这个JavaBBinder又有一个mObject指针指向JavaBBinder,这个JavaBBinder是c++层BBinder的子类，表示一个服务的实体，因此这里的Java层的getIServiceManager().addService(…) ，就转成了c++层的 BpBinder(0)::transact(…),transact的参数包含了name,JavaBBinder, 到这里就和前面的BpServiceManager.addService()一样了。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//  android / platform / frameworks / base / master / . / core / java / android / os / ServiceManagerNative.java$ServiceManagerProxy</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">addService</span><span class="params">(String name, IBinder service, <span class="keyword">boolean</span> allowIsolated, <span class="keyword">int</span> dumpPriority)</span></span></span><br><span class="line"><span class="function">        <span class="keyword">throws</span> RemoteException </span>&#123;</span><br><span class="line">    Parcel data = Parcel.obtain();</span><br><span class="line">    Parcel reply = Parcel.obtain();</span><br><span class="line">    data.writeInterfaceToken(IServiceManager.descriptor);</span><br><span class="line">    data.writeString(name);</span><br><span class="line">    data.writeStrongBinder(service);</span><br><span class="line">    data.writeInt(allowIsolated ? <span class="number">1</span> : <span class="number">0</span>);</span><br><span class="line">    data.writeInt(dumpPriority);</span><br><span class="line">    mRemote.transact(ADD_SERVICE_TRANSACTION, data, reply, <span class="number">0</span>);</span><br><span class="line">    reply.recycle();</span><br><span class="line">    data.recycle();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// android / platform / frameworks / base / master / . / core / jni / android_os_Parcel.cpp</span></span><br><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">android_os_Parcel_writeStrongBinder</span><span class="params">(JNIEnv* env, jclass clazz, jlong nativePtr, jobject object)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    Parcel* parcel = reinterpret_cast&lt;Parcel*&gt;(nativePtr);</span><br><span class="line">    <span class="keyword">if</span> (parcel != NULL) &#123;</span><br><span class="line">        <span class="keyword">const</span> status_t err = parcel-&gt;writeStrongBinder(ibinderForJavaObject(env, object));</span><br><span class="line">        <span class="keyword">if</span> (err != NO_ERROR) &#123;</span><br><span class="line">            signalExceptionForError(env, clazz, err);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// android / platform / frameworks / base / master / . / core / jni / android_util_Binder.cpp</span></span><br><span class="line"><span class="function">sp&lt;IBinder&gt; <span class="title">ibinderForJavaObject</span><span class="params">(JNIEnv* env, jobject obj)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (obj == NULL) <span class="keyword">return</span> NULL;</span><br><span class="line">    <span class="comment">// Instance of Binder? 读取 Binder.java 的 mObject指针,得到JavaBBinderHolder，再get()，得到JavaBBinder,这个类是 BBinder.cpp的子类</span></span><br><span class="line">    <span class="keyword">if</span> (env-&gt;IsInstanceOf(obj, gBinderOffsets.mClass)) &#123;</span><br><span class="line">        JavaBBinderHolder* jbh = (JavaBBinderHolder*)</span><br><span class="line">            env-&gt;GetLongField(obj, gBinderOffsets.mObject);</span><br><span class="line">        <span class="keyword">return</span> jbh-&gt;get(env, obj);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// Instance of BinderProxy? 读取 BinderProxy.java 的 mObject指针，得到 BpBinder</span></span><br><span class="line">    <span class="keyword">if</span> (env-&gt;IsInstanceOf(obj, gBinderProxyOffsets.mClass)) &#123;</span><br><span class="line">        <span class="keyword">return</span> getBPNativeData(env, obj)-&gt;mObject;</span><br><span class="line">    &#125;</span><br><span class="line">    ALOGW(<span class="string">&quot;ibinderForJavaObject: %p is not a Binder object&quot;</span>, obj);</span><br><span class="line">    <span class="keyword">return</span> NULL;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//android / platform / frameworks / native / master / . / libs / binder / Parcel.cpp</span></span><br><span class="line">status_t Parcel::writeStrongBinder(<span class="keyword">const</span> sp&lt;IBinder&gt;&amp; val)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">return</span> flatten_binder(ProcessState::self(), val, <span class="keyword">this</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function">status_t <span class="title">flatten_binder</span><span class="params">(<span class="keyword">const</span> sp&lt;ProcessState&gt;&amp; <span class="comment">/*proc*/</span>,</span></span></span><br><span class="line"><span class="function"><span class="params">    <span class="keyword">const</span> sp&lt;IBinder&gt;&amp; binder, Parcel* out)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    flat_binder_object obj;</span><br><span class="line">    <span class="keyword">if</span> (IPCThreadState::self()-&gt;backgroundSchedulingDisabled()) &#123;</span><br><span class="line">        <span class="comment">/* minimum priority for all nodes is nice 0 */</span></span><br><span class="line">        obj.flags = FLAT_BINDER_FLAG_ACCEPTS_FDS;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="comment">/* minimum priority for all nodes is MAX_NICE(19) */</span></span><br><span class="line">        obj.flags = <span class="number">0x13</span> | FLAT_BINDER_FLAG_ACCEPTS_FDS;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (binder != nullptr) &#123;</span><br><span class="line">        IBinder *local = binder-&gt;localBinder();</span><br><span class="line">        <span class="keyword">if</span> (!local) &#123;</span><br><span class="line">            BpBinder *proxy = binder-&gt;remoteBinder();</span><br><span class="line">            <span class="keyword">if</span> (proxy == nullptr) &#123;</span><br><span class="line">                ALOGE(<span class="string">&quot;null proxy&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">const</span> int32_t handle = proxy ? proxy-&gt;handle() : <span class="number">0</span>;</span><br><span class="line">            obj.hdr.type = BINDER_TYPE_HANDLE;</span><br><span class="line">            obj.binder = <span class="number">0</span>; <span class="comment">/* Don&#x27;t pass uninitialized stack data to a remote process */</span></span><br><span class="line">            obj.handle = handle;</span><br><span class="line">            obj.cookie = <span class="number">0</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            obj.hdr.type = BINDER_TYPE_BINDER;</span><br><span class="line">            obj.binder = reinterpret_cast&lt;uintptr_t&gt;(local-&gt;getWeakRefs());</span><br><span class="line">            obj.cookie = reinterpret_cast&lt;uintptr_t&gt;(local);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        obj.hdr.type = BINDER_TYPE_BINDER;</span><br><span class="line">        obj.binder = <span class="number">0</span>;</span><br><span class="line">        obj.cookie = <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> finish_flatten_binder(binder, obj, out);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function">inline <span class="keyword">static</span> status_t <span class="title">finish_flatten_binder</span><span class="params">(</span></span></span><br><span class="line"><span class="function"><span class="params">    <span class="keyword">const</span> sp&lt;IBinder&gt;&amp; <span class="comment">/*binder*/</span>, <span class="keyword">const</span> flat_binder_object&amp; flat, Parcel* out)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> out-&gt;writeObject(flat, <span class="keyword">false</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><img src="/2018/11/03/Android-binder-java%E5%B1%82/binder%E7%A4%BA%E6%84%8F%E5%9B%BE.jpg" alt="binder示意图"> </p><h3 id="getService的过程"><a href="#getService的过程" class="headerlink" title="getService的过程"></a>getService的过程</h3><p>首先是获取 getIServiceManager()，这个在上面已经分析过了。<br>之后是 getService(name)的方法，和上面类似，区别在于上面是writeStrongBinder写入service,这里是多了个readStrongBinder读取service,最后的结果是拿到了一个 BinderProxy.  mRemote.transact(…)的过程可以去看c++流程部分。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//  android / platform / frameworks / base / master / . / core / java / android / os / ServiceManagerNative.java$ServiceManagerProxy</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> IBinder <span class="title">getService</span><span class="params">(String name)</span> <span class="keyword">throws</span> RemoteException </span>&#123;</span><br><span class="line">    Parcel data = Parcel.obtain();</span><br><span class="line">    Parcel reply = Parcel.obtain();</span><br><span class="line">    data.writeInterfaceToken(IServiceManager.descriptor);</span><br><span class="line">    data.writeString(name);</span><br><span class="line">    mRemote.transact(GET_SERVICE_TRANSACTION, data, reply, <span class="number">0</span>);</span><br><span class="line">    IBinder binder = reply.readStrongBinder();</span><br><span class="line">    reply.recycle();</span><br><span class="line">    data.recycle();</span><br><span class="line">    <span class="keyword">return</span> binder;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// android / platform / frameworks / base / master / . / core / jni / android_os_Parcel.cpp</span></span><br><span class="line"><span class="function"><span class="keyword">static</span> jobject <span class="title">android_os_Parcel_readStrongBinder</span><span class="params">(JNIEnv* env, jobject clazz)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    Parcel* parcel = parcelForJavaObject(env, clazz);</span><br><span class="line">    <span class="keyword">if</span> (parcel != NULL) &#123;</span><br><span class="line">        <span class="keyword">return</span> javaObjectForIBinder(env, parcel-&gt;readStrongBinder());</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> NULL;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//android / platform / frameworks / native / master / . / libs / binder / Parcel.cpp</span></span><br><span class="line"><span class="comment">//得到一个 BpBinder</span></span><br><span class="line">sp&lt;IBinder&gt; Parcel::readStrongBinder() <span class="keyword">const</span></span><br><span class="line">&#123;</span><br><span class="line">    sp&lt;IBinder&gt; val;</span><br><span class="line">    <span class="comment">// Note that a lot of code in Android reads binders by hand with this</span></span><br><span class="line">    <span class="comment">// method, and that code has historically been ok with getting nullptr</span></span><br><span class="line">    <span class="comment">// back (while ignoring error codes).</span></span><br><span class="line">    readNullableStrongBinder(&amp;val);</span><br><span class="line">    <span class="keyword">return</span> val;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//android / platform / frameworks / native / master / . / libs / binder / Parcel.cpp</span></span><br><span class="line">status_t Parcel::readNullableStrongBinder(sp&lt;IBinder&gt;* val) <span class="keyword">const</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">return</span> unflatten_binder(ProcessState::self(), *<span class="keyword">this</span>, val);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//android / platform / frameworks / native / master / . / libs / binder / Parcel.cpp</span></span><br><span class="line"><span class="function">status_t <span class="title">unflatten_binder</span><span class="params">(<span class="keyword">const</span> sp&lt;ProcessState&gt;&amp; proc,<span class="keyword">const</span> Parcel&amp; in, sp&lt;IBinder&gt;* out)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">const</span> flat_binder_object* flat = in.readObject(<span class="keyword">false</span>);</span><br><span class="line">    <span class="keyword">if</span> (flat) &#123;</span><br><span class="line">        <span class="keyword">switch</span> (flat-&gt;hdr.type) &#123;</span><br><span class="line">            <span class="keyword">case</span> BINDER_TYPE_BINDER:</span><br><span class="line">                *out = reinterpret_cast&lt;IBinder*&gt;(flat-&gt;cookie);</span><br><span class="line">                <span class="keyword">return</span> finish_unflatten_binder(nullptr, *flat, in);</span><br><span class="line">            <span class="keyword">case</span> BINDER_TYPE_HANDLE:</span><br><span class="line">                *out = proc-&gt;getStrongProxyForHandle(flat-&gt;handle);</span><br><span class="line">                <span class="keyword">return</span> finish_unflatten_binder(</span><br><span class="line">                    static_cast&lt;BpBinder*&gt;(out-&gt;get()), *flat, in);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> BAD_TYPE;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// android / platform / frameworks / native / master / . / libs / binder / ProcessState.cpp</span></span><br><span class="line"><span class="comment">// 根据handle 生成一个BpBinder</span></span><br><span class="line">sp&lt;IBinder&gt; ProcessState::getStrongProxyForHandle(int32_t handle)</span><br><span class="line">&#123;</span><br><span class="line">    sp&lt;IBinder&gt; result;</span><br><span class="line">    <span class="function">AutoMutex <span class="title">_l</span><span class="params">(mLock)</span></span>;</span><br><span class="line">    handle_entry* e = lookupHandleLocked(handle);</span><br><span class="line">    <span class="keyword">if</span> (e != nullptr) &#123;</span><br><span class="line">        <span class="comment">// We need to create a new BpBinder if there isn&#x27;t currently one, OR we</span></span><br><span class="line">        <span class="comment">// are unable to acquire a weak reference on this current one.  See comment</span></span><br><span class="line">        <span class="comment">// in getWeakProxyForHandle() for more info about this.</span></span><br><span class="line">        IBinder* b = e-&gt;binder;</span><br><span class="line">        <span class="keyword">if</span> (b == nullptr || !e-&gt;refs-&gt;attemptIncWeak(<span class="keyword">this</span>)) &#123;</span><br><span class="line">            <span class="keyword">if</span> (handle == <span class="number">0</span>) &#123;</span><br><span class="line">                <span class="comment">// Special case for context manager...</span></span><br><span class="line">                <span class="comment">// The context manager is the only object for which we create</span></span><br><span class="line">                <span class="comment">// a BpBinder proxy without already holding a reference.</span></span><br><span class="line">                <span class="comment">// Perform a dummy transaction to ensure the context manager</span></span><br><span class="line">                <span class="comment">// is registered before we create the first local reference</span></span><br><span class="line">                <span class="comment">// to it (which will occur when creating the BpBinder).</span></span><br><span class="line">                <span class="comment">// If a local reference is created for the BpBinder when the</span></span><br><span class="line">                <span class="comment">// context manager is not present, the driver will fail to</span></span><br><span class="line">                <span class="comment">// provide a reference to the context manager, but the</span></span><br><span class="line">                <span class="comment">// driver API does not return status.</span></span><br><span class="line">                <span class="comment">//</span></span><br><span class="line">                <span class="comment">// Note that this is not race-free if the context manager</span></span><br><span class="line">                <span class="comment">// dies while this code runs.</span></span><br><span class="line">                <span class="comment">//</span></span><br><span class="line">                <span class="comment">// <span class="doctag">TODO:</span> add a driver API to wait for context manager, or</span></span><br><span class="line">                <span class="comment">// stop special casing handle 0 for context manager and add</span></span><br><span class="line">                <span class="comment">// a driver API to get a handle to the context manager with</span></span><br><span class="line">                <span class="comment">// proper reference counting.</span></span><br><span class="line">                Parcel data;</span><br><span class="line">                status_t status = IPCThreadState::self()-&gt;transact(</span><br><span class="line">                        <span class="number">0</span>, IBinder::PING_TRANSACTION, data, nullptr, <span class="number">0</span>);</span><br><span class="line">                <span class="keyword">if</span> (status == DEAD_OBJECT)</span><br><span class="line">                   <span class="keyword">return</span> nullptr;</span><br><span class="line">            &#125;</span><br><span class="line">            b = BpBinder::create(handle);</span><br><span class="line">            e-&gt;binder = b;</span><br><span class="line">            <span class="keyword">if</span> (b) e-&gt;refs = b-&gt;getWeakRefs();</span><br><span class="line">            result = b;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="comment">// This little bit of nastyness is to allow us to add a primary</span></span><br><span class="line">            <span class="comment">// reference to the remote proxy when this team doesn&#x27;t have one</span></span><br><span class="line">            <span class="comment">// but another team is sending the handle to us.</span></span><br><span class="line">            result.force_set(b);</span><br><span class="line">            e-&gt;refs-&gt;decWeak(<span class="keyword">this</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// android / platform / frameworks / base / master / . / core / jni / android_util_Binder.cpp</span></span><br><span class="line"><span class="comment">// If the argument is a JavaBBinder, return the Java object that was used to create it.</span></span><br><span class="line"><span class="comment">// Otherwise return a BinderProxy for the IBinder. If a previous call was passed the</span></span><br><span class="line"><span class="comment">// same IBinder, and the original BinderProxy is still alive, return the same BinderProxy.</span></span><br><span class="line"><span class="comment">// // 根据 BpBinder 生成一个 BinderProxy并且返回</span></span><br><span class="line"><span class="function">jobject <span class="title">javaObjectForIBinder</span><span class="params">(JNIEnv* env, <span class="keyword">const</span> sp&lt;IBinder&gt;&amp; val)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (val == NULL) <span class="keyword">return</span> NULL;</span><br><span class="line">    <span class="keyword">if</span> (val-&gt;checkSubclass(&amp;gBinderOffsets)) &#123;</span><br><span class="line">        <span class="comment">// It&#x27;s a JavaBBinder created by ibinderForJavaObject. Already has Java object.</span></span><br><span class="line">        jobject object = static_cast&lt;JavaBBinder*&gt;(val.get())-&gt;object();</span><br><span class="line">        LOGDEATH(<span class="string">&quot;objectForBinder %p: it&#x27;s our own %p!\n&quot;</span>, val.get(), object);</span><br><span class="line">        <span class="keyword">return</span> object;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// For the rest of the function we will hold this lock, to serialize</span></span><br><span class="line">    <span class="comment">// looking/creation/destruction of Java proxies for native Binder proxies.</span></span><br><span class="line">    <span class="function">AutoMutex <span class="title">_l</span><span class="params">(gProxyLock)</span></span>;</span><br><span class="line">    BinderProxyNativeData* nativeData = gNativeDataCache;</span><br><span class="line">    <span class="keyword">if</span> (nativeData == nullptr) &#123;</span><br><span class="line">        nativeData = <span class="keyword">new</span> BinderProxyNativeData();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// gNativeDataCache is now logically empty.</span></span><br><span class="line">    jobject object = env-&gt;CallStaticObjectMethod(gBinderProxyOffsets.mClass,</span><br><span class="line">            gBinderProxyOffsets.mGetInstance, (jlong) nativeData, (jlong) val.get());</span><br><span class="line">    <span class="keyword">if</span> (env-&gt;ExceptionCheck()) &#123;</span><br><span class="line">        <span class="comment">// In the exception case, getInstance still took ownership of nativeData.</span></span><br><span class="line">        gNativeDataCache = nullptr;</span><br><span class="line">        <span class="keyword">return</span> NULL;</span><br><span class="line">    &#125;</span><br><span class="line">    BinderProxyNativeData* actualNativeData = getBPNativeData(env, object);</span><br><span class="line">    <span class="keyword">if</span> (actualNativeData == nativeData) &#123;</span><br><span class="line">        <span class="comment">// New BinderProxy; we still have exclusive access.</span></span><br><span class="line">        nativeData-&gt;mOrgue = <span class="keyword">new</span> DeathRecipientList;</span><br><span class="line">        nativeData-&gt;mObject = val;</span><br><span class="line">        gNativeDataCache = nullptr;</span><br><span class="line">        ++gNumProxies;</span><br><span class="line">        <span class="keyword">if</span> (gNumProxies &gt;= gProxiesWarned + PROXY_WARN_INTERVAL) &#123;</span><br><span class="line">            ALOGW(<span class="string">&quot;Unexpectedly many live BinderProxies: %d\n&quot;</span>, gNumProxies);</span><br><span class="line">            gProxiesWarned = gNumProxies;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="comment">// nativeData wasn&#x27;t used. Reuse it the next time.</span></span><br><span class="line">        gNativeDataCache = nativeData;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> object;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>当java层调用 getIServiceManager().getService(…) 的时候，执行完毕后，还会调用 reply.readStrongBinder() 去读取远程调用的返回值，根据 handle 生成一个 BpBinder , 再根据 BpBinder 生成一个BinderProxy,这样子就拿到了需要的service的代理对象了。</p><p>可以看到，ServiceManager 仅仅是对 IServiceManager 的一个管理类，ServiceManagerNative是一个Binder虚基类，因为 ServiceManager 作为一个管理类，c++层的BBinder已经实现了，所以这里不需要实现 ServiceManagerNative了，只是用了它的静态方法，如果java类想要c++的数据，通过parcel.readXXX 就可以得到。</p><h2 id="bindService-的-binder"><a href="#bindService-的-binder" class="headerlink" title="bindService 的 binder"></a>bindService 的 binder</h2><p>这里从网上找了一个 code example：</p><p>GetDeviceInfoInterface.aidl :</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">interface</span> <span class="title">IRemote</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">  <span class="function"><span class="keyword">int</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span> a, <span class="keyword">int</span> b)</span></span>;</span><br><span class="line"> </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>GetDeviceInfoService.java:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ArithmeticService</span> <span class="keyword">extends</span> <span class="title">Service</span></span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> IBinder <span class="title">onBind</span><span class="params">(Intent intent)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> mBinder;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> IRemote.Stub mBinder = <span class="keyword">new</span> IRemote.Stub() &#123;</span><br><span class="line"> </span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span> a, <span class="keyword">int</span> b)</span> <span class="keyword">throws</span> RemoteException </span>&#123;</span><br><span class="line">            <span class="comment">// TODO Auto-generated method stub</span></span><br><span class="line">            <span class="keyword">return</span> (a + b);</span><br><span class="line">        &#125;</span><br><span class="line"> </span><br><span class="line">    &#125;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>MainActivity.java:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MainActivity</span> <span class="keyword">extends</span> <span class="title">Activity</span> <span class="keyword">implements</span> <span class="title">OnClickListener</span>  </span>&#123;</span><br><span class="line"> </span><br><span class="line">    ServiceConnection mServiceConnection;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onCreate</span><span class="params">(Bundle savedInstanceState)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>.onCreate(savedInstanceState);</span><br><span class="line">        setContentView(R.layout.activity_main);</span><br><span class="line"> </span><br><span class="line">        initConnection();</span><br><span class="line"> </span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">initConnection</span><span class="params">()</span></span>&#123;</span><br><span class="line">        mServiceConnection = <span class="keyword">new</span> ServiceConnection() &#123;</span><br><span class="line"></span><br><span class="line">                <span class="meta">@Override</span></span><br><span class="line">                <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onServiceDisconnected</span><span class="params">(ComponentName name)</span> </span>&#123;</span><br><span class="line">                    <span class="comment">// TODO Auto-generated method stub</span></span><br><span class="line">                    mService = <span class="keyword">null</span>;</span><br><span class="line">                    Toast.makeText(getApplicationContext(), <span class="string">&quot;no&quot;</span>, Toast.LENGTH_SHORT).show();</span><br><span class="line">                    Log.d(<span class="string">&quot;IRemote&quot;</span>, <span class="string">&quot;Binding - Service disconnected&quot;</span>);</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">                <span class="meta">@Override</span></span><br><span class="line">                <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onServiceConnected</span><span class="params">(ComponentName name, IBinder service)</span></span></span><br><span class="line"><span class="function">                </span>&#123;</span><br><span class="line">                    <span class="comment">// TODO Auto-generated method stub</span></span><br><span class="line">                    mService = IRemote.Stub.asInterface((IBinder) service);</span><br><span class="line">                    Toast.makeText(getApplicationContext(), <span class="string">&quot;yes&quot;</span>, Toast.LENGTH_SHORT).show();</span><br><span class="line">                    Log.d(<span class="string">&quot;IRemote&quot;</span>, <span class="string">&quot;Binding is done - Service connected&quot;</span>);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;;</span><br><span class="line">        <span class="keyword">if</span>(mService == <span class="keyword">null</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            Intent it = <span class="keyword">new</span> Intent();</span><br><span class="line">            it.setAction(<span class="string">&quot;com.remote.service.CALCULATOR&quot;</span>);</span><br><span class="line">            bindService(it, mServiceConnection, Service.BIND_AUTO_CREATE);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onDestroy</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>.onDestroy();</span><br><span class="line">        unbindService(mServiceConnection);</span><br><span class="line">&#125;;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>接下来从bindService看起，bindService传入了一个类 ServiceConnection 作为回调。由于Activity的context实际上是ContextImpl,所以这里会到 ContextImpl.java里面去：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//ContextImpl.java</span></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">bindService</span><span class="params">(Intent service, ServiceConnection conn,<span class="keyword">int</span> flags)</span> </span>&#123;</span><br><span class="line">    warnIfCallingFromSystemProcess();</span><br><span class="line">    <span class="keyword">return</span> bindServiceCommon(service, conn, flags, mMainThread.getHandler(), getUser());</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">boolean</span> <span class="title">bindServiceCommon</span><span class="params">(Intent service, ServiceConnection conn, <span class="keyword">int</span> flags, Handler</span></span></span><br><span class="line"><span class="function"><span class="params">        handler, UserHandle user)</span> </span>&#123;</span><br><span class="line">    <span class="comment">// Keep this in sync with DevicePolicyManager.bindDeviceAdminServiceAsUser.</span></span><br><span class="line">    IServiceConnection sd;</span><br><span class="line">    ...</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        IBinder token = getActivityToken();</span><br><span class="line">        <span class="keyword">if</span> (token == <span class="keyword">null</span> &amp;&amp; (flags&amp;BIND_AUTO_CREATE) == <span class="number">0</span> &amp;&amp; mPackageInfo != <span class="keyword">null</span></span><br><span class="line">                &amp;&amp; mPackageInfo.getApplicationInfo().targetSdkVersion</span><br><span class="line">                &lt; android.os.Build.VERSION_CODES.ICE_CREAM_SANDWICH) &#123;</span><br><span class="line">            flags |= BIND_WAIVE_PRIORITY;</span><br><span class="line">        &#125;</span><br><span class="line">        service.prepareToLeaveProcess(<span class="keyword">this</span>);</span><br><span class="line">        <span class="keyword">int</span> res = ActivityManager.getService().bindService(</span><br><span class="line">            mMainThread.getApplicationThread(), getActivityToken(), service,</span><br><span class="line">            service.resolveTypeIfNeeded(getContentResolver()),</span><br><span class="line">            sd, flags, getOpPackageName(), user.getIdentifier());</span><br><span class="line">        <span class="keyword">if</span> (res &lt; <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> SecurityException(</span><br><span class="line">                    <span class="string">&quot;Not allowed to bind to service &quot;</span> + service);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> res != <span class="number">0</span>;</span><br><span class="line">    &#125; <span class="keyword">catch</span> (RemoteException e) &#123;</span><br><span class="line">        <span class="keyword">throw</span> e.rethrowFromSystemServer();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这里把传入的 ServiceConnection 类作为参数构造了一个 ServiceDispatcher, 然后返回了ServiceDispatcher的内部类mIServiceConnection，这是一个Binder类实体。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// LoadedAPK.java</span></span><br><span class="line"><span class="keyword">static</span> <span class="keyword">final</span> <span class="class"><span class="keyword">class</span> <span class="title">ServiceDispatcher</span> </span>&#123;</span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">final</span> ServiceDispatcher.InnerConnection mIServiceConnection;</span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">final</span> ServiceConnection mConnection;</span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">final</span> Context mContext;</span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">final</span> Handler mActivityThread;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">InnerConnection</span> <span class="keyword">extends</span> <span class="title">IServiceConnection</span>.<span class="title">Stub</span> </span>&#123;</span><br><span class="line">            <span class="keyword">final</span> WeakReference&lt;LoadedApk.ServiceDispatcher&gt; mDispatcher;</span><br><span class="line"></span><br><span class="line">            InnerConnection(LoadedApk.ServiceDispatcher sd) &#123;</span><br><span class="line">                mDispatcher = <span class="keyword">new</span> WeakReference&lt;LoadedApk.ServiceDispatcher&gt;(sd);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">connected</span><span class="params">(ComponentName name, IBinder service, <span class="keyword">boolean</span> dead)</span></span></span><br><span class="line"><span class="function">                    <span class="keyword">throws</span> RemoteException </span>&#123;</span><br><span class="line">                LoadedApk.ServiceDispatcher sd = mDispatcher.get();</span><br><span class="line">                <span class="keyword">if</span> (sd != <span class="keyword">null</span>) &#123;</span><br><span class="line">                    sd.connected(name, service, dead);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">final</span> ArrayMap&lt;ComponentName, ServiceDispatcher.ConnectionInfo&gt; mActiveConnections</span><br><span class="line">            = <span class="keyword">new</span> ArrayMap&lt;ComponentName, ServiceDispatcher.ConnectionInfo&gt;();</span><br><span class="line"></span><br><span class="line">        ServiceDispatcher(ServiceConnection conn,</span><br><span class="line">                Context context, Handler activityThread, <span class="keyword">int</span> flags) &#123;</span><br><span class="line">            mIServiceConnection = <span class="keyword">new</span> InnerConnection(<span class="keyword">this</span>);</span><br><span class="line">            mConnection = conn;</span><br><span class="line">            mContext = context;</span><br><span class="line">            mActivityThread = activityThread;</span><br><span class="line">            mLocation = <span class="keyword">new</span> ServiceConnectionLeaked(<span class="keyword">null</span>);</span><br><span class="line">            mLocation.fillInStackTrace();</span><br><span class="line">            mFlags = flags;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function">ServiceConnection <span class="title">getServiceConnection</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> mConnection;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function">IServiceConnection <span class="title">getIServiceConnection</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> mIServiceConnection;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">connected</span><span class="params">(ComponentName name, IBinder service, <span class="keyword">boolean</span> dead)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">if</span> (mActivityThread != <span class="keyword">null</span>) &#123;</span><br><span class="line">                mActivityThread.post(<span class="keyword">new</span> RunConnection(name, service, <span class="number">0</span>, dead));</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                doConnected(name, service, dead);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// IServiceConnection.aidl</span></span><br><span class="line"><span class="class"><span class="keyword">interface</span> <span class="title">IServiceConnection</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">connected</span><span class="params">(in ComponentName name, IBinder service, <span class="keyword">boolean</span> dead)</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>之后是ActivityManager.getService().bindService(…):</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//ActivityManager.java</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> IActivityManager <span class="title">getService</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> IActivityManagerSingleton.get();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> Singleton&lt;IActivityManager&gt; IActivityManagerSingleton =</span><br><span class="line">        <span class="keyword">new</span> Singleton&lt;IActivityManager&gt;() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">protected</span> IActivityManager <span class="title">create</span><span class="params">()</span> </span>&#123;</span><br><span class="line">                <span class="keyword">final</span> IBinder b = ServiceManager.getService(Context.ACTIVITY_SERVICE);</span><br><span class="line">                <span class="keyword">final</span> IActivityManager am = IActivityManager.Stub.asInterface(b);</span><br><span class="line">                <span class="keyword">return</span> am;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// ServiceManager.java</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> IBinder <span class="title">getService</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        IBinder service = sCache.get(name);</span><br><span class="line">        <span class="keyword">if</span> (service != <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> service;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> Binder.allowBlocking(rawGetService(name));</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; <span class="keyword">catch</span> (RemoteException e) &#123;</span><br><span class="line">        Log.e(TAG, <span class="string">&quot;error in getService&quot;</span>, e);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">static</span> IBinder <span class="title">rawGetService</span><span class="params">(String name)</span> <span class="keyword">throws</span> RemoteException </span>&#123;</span><br><span class="line">    <span class="keyword">final</span> <span class="keyword">long</span> start = sStatLogger.getTime();</span><br><span class="line">    <span class="keyword">final</span> IBinder binder = getIServiceManager().getService(name);</span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>在上面已经讲过，这里得到的是一个IActivityManager.Proxy类，是ActivityManagerService的远程接口.从app进程发起AMS的调用，参数中传递了一个Binder实体，在驱动的处理中，就会为app进程创建一个binder_node,同时在AMS的进程(也就是system_server)中创建一个binder_ref，然后还会把flat_binder_object的BINDER_TYPE_BINDER转成BINDER_TYPE_HANDLE类型，因此后面解析出来是一个BpBinder接口。对于AMS来说，binder线程唤醒后会执行executeCommand(…)</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">status_t</span> <span class="title">IPCThreadState::executeCommand</span><span class="params">(<span class="keyword">int32_t</span> cmd)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    ...</span><br><span class="line">    <span class="keyword">switch</span> (cmd) &#123;</span><br><span class="line">    ......</span><br><span class="line">    <span class="keyword">case</span> BR_TRANSACTION:</span><br><span class="line">        &#123;</span><br><span class="line">            ...</span><br><span class="line">            <span class="keyword">if</span> (tr.target.ptr) &#123;</span><br><span class="line">                <span class="comment">// We only have a weak reference on the target object, so we must first try to</span></span><br><span class="line">                <span class="comment">// safely acquire a strong reference before doing anything else with it.</span></span><br><span class="line">                <span class="keyword">if</span> (<span class="keyword">reinterpret_cast</span>&lt;RefBase::weakref_type*&gt;(</span><br><span class="line">                        tr.target.ptr)-&gt;attemptIncStrong(<span class="keyword">this</span>)) &#123;</span><br><span class="line">                    error = <span class="keyword">reinterpret_cast</span>&lt;BBinder*&gt;(tr.cookie)-&gt;transact(tr.code, buffer,</span><br><span class="line">                            &amp;reply, tr.flags);</span><br><span class="line">                    <span class="keyword">reinterpret_cast</span>&lt;BBinder*&gt;(tr.cookie)-&gt;decStrong(<span class="keyword">this</span>);</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    error = UNKNOWN_TRANSACTION;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                error = the_context_object-&gt;transact(tr.code, buffer, &amp;reply, tr.flags);</span><br><span class="line">            &#125;</span><br><span class="line">           ...</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line"></span><br><span class="line">    .......</span><br><span class="line">    &#125;</span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这里有把tr.cookie保存的值强转为BBinder类型(cookie的值在binder_thread_read设置)，对于c++的服务来说，它们本身已经继承了BBinder,所以会进入到它们自己的transact方法中，对于这里的调用来说，保存的是一个JavaBBinder类(可以看上面，对于Binder,writeStrongBinder写入的是一个JavaBBinder类)</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">JavaBBinder</span> :</span> <span class="keyword">public</span> BBinder</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">protected</span>:</span><br><span class="line">        <span class="function"><span class="keyword">status_t</span> <span class="title">onTransact</span><span class="params">(</span></span></span><br><span class="line"><span class="function"><span class="params">            <span class="keyword">uint32_t</span> code, <span class="keyword">const</span> Parcel&amp; data, Parcel* reply, <span class="keyword">uint32_t</span> flags = <span class="number">0</span>)</span> <span class="keyword">override</span></span></span><br><span class="line"><span class="function">        </span>&#123;</span><br><span class="line">            ...</span><br><span class="line">            jboolean res = env-&gt;CallBooleanMethod(mObject, gBinderOffsets.mExecTransact,</span><br><span class="line">                code, <span class="keyword">reinterpret_cast</span>&lt;jlong&gt;(&amp;data), <span class="keyword">reinterpret_cast</span>&lt;jlong&gt;(reply), flags);</span><br><span class="line">            ...</span><br><span class="line">        &#125;</span><br><span class="line">    <span class="keyword">private</span>:</span><br><span class="line">        JavaVM* <span class="keyword">const</span>   mVM;</span><br><span class="line">        jobject <span class="keyword">const</span>   mObject;  <span class="comment">// GlobalRef to Java Binder</span></span><br><span class="line">        <span class="keyword">mutable</span> <span class="built_in">std</span>::once_flag mPopulateDescriptor;</span><br><span class="line">        <span class="keyword">mutable</span> String16 mDescriptor;</span><br><span class="line">    &#125;;</span><br></pre></td></tr></table></figure><p>JavaBBinder 会通过jni反射调到它对应的Binder类的 onTransact 方法，在这里是指 IActivityManagerService.Stub里的方法，又会继续调用到子类的ams的bindService方法，终于来到了ams类。。</p><p><img src="/2018/11/03/Android-binder-java%E5%B1%82/service_bind.jpg" alt="service-bind"></p><p>这里回到InnerConnection的connected()方法，依次调用到ServiceDispatcher.connected(),然后就是 mConnection.onServiceConnected。</p><p>总体上来说，这里还是binder的应用之一，因为serviceConnection不能跨进程，所以构造了一个InnerConnection，并且传给ams，这样ams就能主动通知app了，ams在创建service后，如果有bindservice,那么就会把 service 的成员变量，一个 Binder 作为参数通过 InnerConnection 的接口通知回app，这样app就拿到了 service 里面的 Binder 的远程接口，然后就可以调用这个 Binder 的方法了。</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;java层分为系统服务的binder 和 bindService的 binder &lt;/p&gt;</summary>
    
    
    
    <category term="android_framework" scheme="http://example.com/categories/android-framework/"/>
    
    
    <category term="binder" scheme="http://example.com/tags/binder/"/>
    
  </entry>
  
  <entry>
    <title>Android-binder总结</title>
    <link href="http://example.com/2018/11/02/Android-binder%E6%80%BB%E7%BB%93/"/>
    <id>http://example.com/2018/11/02/Android-binder%E6%80%BB%E7%BB%93/</id>
    <published>2018-11-02T05:02:24.000Z</published>
    <updated>2018-11-05T14:14:13.350Z</updated>
    
    <content type="html"><![CDATA[<p>一些描述性的总结,大多数前面两篇已经描述过了</p><a id="more"></a><h2 id="进程结构："><a href="#进程结构：" class="headerlink" title="进程结构："></a>进程结构：</h2><p><img src="/2018/11/02/Android-binder%E6%80%BB%E7%BB%93/binder_11.png" alt="binder_16"></p><blockquote><p>binder_proces 是保存在binder驱动中的一个全局的链表</p></blockquote><p><img src="/2018/11/02/Android-binder%E6%80%BB%E7%BB%93/%E8%BF%9B%E7%A8%8B%E7%BB%93%E6%9E%84%E7%A4%BA%E6%84%8F%E5%9B%BE.jpg" alt="binder_16"></p><blockquote><p>注册服务的时候，会在service_manager中创建ref,在服务的进程中创建node,客户进程请求服务的时候会在自己的进程创建ref，都保存在各自的proc的红黑树的结构中</p></blockquote><p><img src="/2018/11/02/Android-binder%E6%80%BB%E7%BB%93/binder_13.png" alt="binder_13"></p><h2 id="数据流向"><a href="#数据流向" class="headerlink" title="数据流向"></a>数据流向</h2><ol><li>BBinder会转成一个flat_binder_object，然后加上 name 序列化到 Parcel里</li><li>然后加上 target= 0和code=ADD_SERVICE 转成 binder_transation_data 对象，</li><li>然后加上 cmd = BC_TRANSACTION 写入到IPC_ThreadState的mOut 里面,mOut和mIn 构造一个 binder_write_read 对象， 发送给 binder 驱动</li><li>binder 驱动拷贝这个数据到内核，构造一个 binder_transaction_data 发送给服务进程的todo队列，同时向用户进程回复BR_COMPLETE</li><li>服务进程构造 binder_transaction_data 和 BC_REPLY 回复给 binder 驱动</li></ol><h2 id="请求过程"><a href="#请求过程" class="headerlink" title="请求过程"></a>请求过程</h2><p><img src="/2018/11/02/Android-binder%E6%80%BB%E7%BB%93/media_player_service_ipc.jpg" alt="binder_13"></p><h2 id="传输数据的大小限制"><a href="#传输数据的大小限制" class="headerlink" title="传输数据的大小限制"></a>传输数据的大小限制</h2><p>取决于<code>binder_open</code>的参数:</p><ol><li>ServiceManager 初始化的时候传入的是 128*1024，也就是128k， 这个我们用不上</li><li>其他系统服务初始化的时候传入的是 BINDER_VM_SIZE(1*1024*1024-4096*2)，也就是 1M-8K</li></ol><h2 id="系统服务与bindService等启动的服务的区别"><a href="#系统服务与bindService等启动的服务的区别" class="headerlink" title="系统服务与bindService等启动的服务的区别"></a>系统服务与bindService等启动的服务的区别</h2><p><img src="/2018/11/02/Android-binder%E6%80%BB%E7%BB%93/binder_20.jpg" alt="binder_20"></p><p><a href="https://blog.csdn.net/happylishang/article/details/62234127">深入理解Binder通信原理及面试问题</a><br><a href="http://gityuan.com/2015/11/28/binder-summary/">Binder系列10—总结</a></p>]]></content>
    
    
    <summary type="html">&lt;p&gt;一些描述性的总结,大多数前面两篇已经描述过了&lt;/p&gt;</summary>
    
    
    
    <category term="android_framework" scheme="http://example.com/categories/android-framework/"/>
    
    
    <category term="binder" scheme="http://example.com/tags/binder/"/>
    
  </entry>
  
  <entry>
    <title>java-锁</title>
    <link href="http://example.com/2018/10/30/java-%E9%94%81/"/>
    <id>http://example.com/2018/10/30/java-%E9%94%81/</id>
    <published>2018-10-30T01:34:19.000Z</published>
    <updated>2018-10-31T05:24:40.459Z</updated>
    
    <content type="html"><![CDATA[<p>主要是锁，线程相关的一些知识点</p><a id="more"></a><h2 id="线程间通信"><a href="#线程间通信" class="headerlink" title="线程间通信"></a>线程间通信</h2><ol><li>volatile和synchronized</li><li>wait/notify</li><li>管道输入输出流</li><li>Thread.join()</li></ol><p>线程池本质是 对任务的一个生产者消费者模型，通过worker来对job进行消费，没有就阻塞，这种就是核心线程。job是对runnable或者callable接口的实现，加入到阻塞队列可以更简单的进行同步的操作。</p><h2 id="原子操作的实现原理"><a href="#原子操作的实现原理" class="headerlink" title="原子操作的实现原理"></a>原子操作的实现原理</h2><p>处理器实现原子操作有两种方式：</p><ol><li>通过总线锁来保证原子性</li><li>通过缓存锁来保证原子性</li></ol><p>java种则通过CAS来实现原子操作，CAS的底层就是处理器的指令</p><h2 id="synchronized关键字"><a href="#synchronized关键字" class="headerlink" title="synchronized关键字"></a>synchronized关键字</h2><ol><li><p>synchronized 锁的对象</p><p>synchronized 可以用来修饰类的实例方法、静态方法、代码块</p><ol><li>修饰实例方法的时候，锁是当前实例对象</li><li>修饰静态同步方法的时候，锁是当前class类对象</li><li>修饰代码块的时候，锁是synchronized括号里配置的对象</li></ol></li><li><p>synchronized 的特点</p><ol><li>synchronized 具备可重入性，对同一个线程在获得锁之后在调用其他需要同样锁的代码时可以直接调用，其可重入性是通过记录锁的持有线程和持有数量来实现的，调用 synchronized 代码时检查对象是否已经被锁，是则检查是否被当前线程锁定，是则计数加一，不是则加入等待队列，释放时计数减一直到为零释放锁。</li><li>synchronized 是重量级锁，竞争失败的线程会阻塞。</li></ol></li><li><p>synchronized 的实现原理</p><p>语义底层是通过一个 monitor 监视器对象来完成，监视器锁（monitor）的本质依赖于底层操作系统的互斥锁（Mutex Lock）实现，而操作系统实现线程之间的切换需要从用户态转换到核心态，这个成本非常高，状态之间的转换需要相对比较长的时间，所以这就是为什么 synchronized 效率低且重量级的原因（Java 1.6 进行了优化，但是相比其他锁机制还是略显偏重）。</p><p>其实 wait、notify 等方法也依赖于 monitor 对象，所以这就是为什么只有在同步的块或者方法中才能调用 wait、notify 等方法，否则会抛出 IllegalMonitorStateException 异常的原因。</p></li></ol><p><a href="http://url.cn/5r6q9RA">每日一题</a></p><h2 id="锁的级别"><a href="#锁的级别" class="headerlink" title="锁的级别"></a>锁的级别</h2><p>java中每个对象都可作为锁，锁有四种级别，按照量级从轻到重分为：无锁、偏向锁、轻量级锁、重量级锁。并且锁只能升级不能降级，但是偏向锁状态可以被重置为无锁状态。</p><h3 id="自旋"><a href="#自旋" class="headerlink" title="自旋"></a>自旋</h3><p>自旋是指当一个线程尝试获取某个锁时，如果该锁已被其他线程占用，就一直循环检测锁是否被释放，而不是进入线程挂起或睡眠状态。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.concurrent.atomic.AtomicReference;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SpinLock</span> </span>&#123;</span><br><span class="line">   <span class="keyword">private</span> AtomicReference&lt;Thread&gt; owner = <span class="keyword">new</span> AtomicReference&lt;Thread&gt;();</span><br><span class="line"></span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">lock</span><span class="params">()</span> </span>&#123;</span><br><span class="line">       Thread currentThread = Thread.currentThread();</span><br><span class="line"></span><br><span class="line">              <span class="comment">// 如果锁未被占用，则设置当前线程为锁的拥有者</span></span><br><span class="line">       <span class="keyword">while</span> (!owner.compareAndSet(<span class="keyword">null</span>, currentThread)) &#123;</span><br><span class="line">       &#125;</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">unlock</span><span class="params">()</span> </span>&#123;</span><br><span class="line">       Thread currentThread = Thread.currentThread();</span><br><span class="line"></span><br><span class="line">              <span class="comment">// 只有锁的拥有者才能释放锁</span></span><br><span class="line">       owner.compareAndSet(currentThread, <span class="keyword">null</span>);</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>线程B尝试进入临界区的时候，在lock()函数里面会一直CAS失败而不能进入到临界区，此时就是自旋状态。可以看到这个语义是靠CAS来实现的。</p><h3 id="对象头"><a href="#对象头" class="headerlink" title="对象头"></a>对象头</h3><p>锁的实现机制与java对象头息息相关，锁的所有信息，都记录在java的对象头中。用2字宽(WORD)（32位JVM中1字宽==4Byte=32bit）存储对象头，如果是数组类型使用3字存储（还需存储数组长度）。对象头中包括mark word、类元数据的指针和数组的长度。</p><table><thead><tr><th>长度</th><th>内容</th><th>说明</th></tr></thead><tbody><tr><td>32/64bit</td><td>Mark Word</td><td>存储对象的hashCode或锁信息等。</td></tr><tr><td>32/64bit</td><td>Class Metadata Address</td><td>存储到对象类型数据的指针</td></tr><tr><td>32/64bit</td><td>Array length</td><td>数组的长度（如果当前对象是数组）</td></tr></tbody></table><p>mark word默认存储对象的hashcode,GC分代年龄，锁的状态，偏向锁的线程ID等。32位位：</p><p><img src="/2018/10/30/java-%E9%94%81/markword1.jpg" alt="mark word"></p><p> 在64位虚拟机下，Mark Word是64bit大小的，其存储结构如下：</p><p><img src="/2018/10/30/java-%E9%94%81/markword2.jpg" alt="mark word"></p><h3 id="偏向锁"><a href="#偏向锁" class="headerlink" title="偏向锁"></a>偏向锁</h3><p>引入偏向锁是为了在无多线程竞争的情况下尽量减少不必要的轻量级锁执行路径。</p><p>当只有一个线程去竞争锁的时候，我们不需要阻塞，也不需要自旋，因为只有一个线程在竞争，我们只要去判断该偏向锁中的ThreadID是否为当前线程即可。</p><p>如果线程2要竞争锁对象，（偏向锁不会主动释放因此还是存储的线程1的threadID），那么需要查看Java对象头中记录的线程是否存活，</p><p>如果没有存活，那么锁对象被重置为无锁状态，再使用cas替换偏向锁线程ID为线程2,锁不升级；如果存活，那么立刻查找该线程（线程1）的栈帧信息，</p><p>如果还是需要继续持有这个锁对象，那么暂停当前线程1，撤销偏向锁，升级为轻量级锁，如果线程1 不再使用该锁对象，那么将锁对象状态设为无锁状态，重新偏向新的线程。</p><h3 id="轻量锁"><a href="#轻量锁" class="headerlink" title="轻量锁"></a>轻量锁</h3><p>轻量级锁考虑的是竞争锁对象的线程不多，而且线程持有锁的时间也不长的情景。因为阻塞线程需要CPU从用户态转到内核态，代价较大，如果刚刚阻塞不久这个锁就被释放了，那这个代价就有点得不偿失了，因此这个时候就干脆不阻塞这个线程，让它自旋这等待锁释放。</p><p>线程1获取轻量级锁时会<strong>先把锁对象的对象头MarkWord复制一份到线程1的栈帧中</strong>创建的用于存储锁记录的空间（称为DisplacedMarkWord），<strong>然后使用CAS把对象头中的内容替换为线程1的锁记录地址</strong>；</p><p>如果在线程1复制对象头的同时（在线程1CAS之前），线程2也准备获取锁，复制了对象头到线程2的锁记录空间中，但是在线程2CAS的时候，发现线程1已经把对象头换了，线程2的CAS失败，那么线程2就尝试使用自旋锁来等待线程1释放锁。</p><p>但是如果自旋的时间太长也不行，因为自旋是要消耗CPU的，因此自旋的次数是有限制的，比如10次或者100次，如果自旋次数到了线程1还没有释放锁，线程2还在自旋等待，或者又有一个线程3过来竞争这个锁对象，那么这个时候轻量级锁就会膨胀为重量级锁。重量级锁把除了拥有锁的线程都阻塞，防止CPU空转。</p><h3 id="优缺点对比"><a href="#优缺点对比" class="headerlink" title="优缺点对比"></a>优缺点对比</h3><table><thead><tr><th>锁</th><th>优点</th><th>缺点</th><th>适用场景</th></tr></thead><tbody><tr><td>偏向锁</td><td>加锁和解锁不需要额外的消耗，和执行非同步方法比仅存在纳秒级的差距。</td><td>如果线程间存在锁竞争，会带来额外的锁撤销的消耗。</td><td>适用于只有一个线程访问同步块场景。</td></tr><tr><td>轻量级锁</td><td>竞争的线程不会阻塞，提高了程序的响应速度。</td><td>如果始终得不到锁竞争的线程使用自旋会消耗CPU。</td><td>追求响应时间。   同步块执行速度非常快。</td></tr><tr><td>重量级锁</td><td>线程竞争不使用自旋，不会消耗CPU。</td><td>线程阻塞，响应时间缓慢。</td><td>追求吞吐量。   同步块执行速度较长。</td></tr></tbody></table><p><a href="https://blog.csdn.net/tongdanping/article/details/79647337?utm_source=blogxgwz0">Java并发——Synchronized关键字和锁升级，详细分析偏向锁和轻量级锁的升级</a></p><h2 id="Lock锁"><a href="#Lock锁" class="headerlink" title="Lock锁"></a>Lock锁</h2><h3 id="lock锁和synchronized的对比"><a href="#lock锁和synchronized的对比" class="headerlink" title="lock锁和synchronized的对比"></a>lock锁和synchronized的对比</h3><ol><li>非阻塞的获取锁（基于CAS的自旋？），synchronized竞争失败的线程会阻塞</li><li>能够响应中断,当获取到锁的线程被中断的时候，中断异常将会被抛出，同时锁会被释放，synchronized不会响应中断</li><li>有超时时间，synchronized会一直阻塞</li></ol><h3 id="LockSupport"><a href="#LockSupport" class="headerlink" title="LockSupport"></a>LockSupport</h3><p>在Java多线程中，当需要阻塞或者唤醒一个线程时，都会使用LockSupport工具类来完成相应的工作。LockSupport定义了一组公共静态方法，这些方法提供了最基本的线程阻塞和唤醒功能，而LockSupport也因此成为了构建同步组件的基础工具。</p><p>LockSupport定义了一组以park开头的方法用来阻塞当前线程，以及unpark(Thread)方法来唤醒一个被阻塞的线程，这些方法描述如下：</p><table><thead><tr><th>方法名称</th><th align="center">描  述</th></tr></thead><tbody><tr><td>void park()</td><td align="center">阻塞当前线程，如果掉用unpark(Thread)方法或被中断，才能从park()返回</td></tr><tr><td>void parkNanos(long nanos)</td><td align="center">阻塞当前线程，超时返回，阻塞时间最长不超过nanos纳秒</td></tr><tr><td>void parkUntil(long deadline)</td><td align="center">阻塞当前线程，直到deadline时间点</td></tr><tr><td>void unpark(Thread)</td><td align="center">唤醒处于阻塞状态的线程</td></tr></tbody></table><p>需要注意的是，和wait,notify不一样，park和unpark之间没有顺序要求，可以理解为调用unpark则获得了一个许可，没有这个许可则阻塞。(If the thread was blocked on park then it will unblock. Otherwise, its next call to park is guaranteed not to block.)</p><h3 id="lock锁实现原理"><a href="#lock锁实现原理" class="headerlink" title="lock锁实现原理"></a>lock锁实现原理</h3><p>基于AbstractQueuedSynchronizer(AQS,队列同步器)实现：</p><p>先说大致流程：队列同步器依赖内部的同步队列（一个fifo双向队列）来完成同步状态的管理，当前线程获取同步状态失败时，同步器会将当前线程以及等待状态等信息构造成为一个节点并将其加入同步队列，同时阻塞线程，当同步状态释放的时候，会把节点中的线程唤醒，使其再次尝试获取同步状态。</p><p>节点的定义可以看作是有一些额外属性的双向链表，同步器内部则保存了链表的头尾节点的引用。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 一个独占锁的示例代码,,不支持重入</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyLock</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">Sync</span> <span class="keyword">extends</span> <span class="title">AbstractQueuedSynchronizer</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">protected</span> <span class="keyword">boolean</span> <span class="title">tryAcquire</span><span class="params">(<span class="keyword">int</span> acquires)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">if</span> (compareAndSetState(<span class="number">0</span>, <span class="number">1</span>)) &#123;</span><br><span class="line">                setExclusiveOwnerThread(Thread.currentThread());</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">protected</span> <span class="keyword">boolean</span> <span class="title">tryRelease</span><span class="params">(<span class="keyword">int</span> i)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">if</span> (getState() == <span class="number">0</span>) &#123;</span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> IllegalMonitorStateException();</span><br><span class="line">            &#125;</span><br><span class="line">            setExclusiveOwnerThread(<span class="keyword">null</span>);</span><br><span class="line">            setState(<span class="number">0</span>);</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * 一般表示是否被当前线程所独占</span></span><br><span class="line"><span class="comment">         *</span></span><br><span class="line"><span class="comment">         * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">protected</span> <span class="keyword">boolean</span> <span class="title">isHeldExclusively</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> getState() == <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function">ConditionObject <span class="title">newCondition</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> ConditionObject();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> Sync sync = <span class="keyword">new</span> Sync();</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">lock</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        sync.acquire(<span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">tryLock</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> sync.tryAcquire(<span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">unlock</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        sync.release(<span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Condition <span class="title">newCondition</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> sync.newCondition();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isLocked</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> sync.isHeldExclusively();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">hasQueuedThreads</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> sync.hasQueuedThreads();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">lockInterruptibly</span><span class="params">()</span> <span class="keyword">throws</span> InterruptedException </span>&#123;</span><br><span class="line">        sync.acquireInterruptibly(<span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">tryLock</span><span class="params">(<span class="keyword">long</span> timeout, TimeUnit unit)</span> <span class="keyword">throws</span> InterruptedException </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> sync.tryAcquireNanos(<span class="number">1</span>, unit.toNanos(timeout));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>扩展：</p><p><a href="https://javadoop.com/2017/06/16/AbstractQueuedSynchronizer/#toc1">一行一行源码分析清楚AbstractQueuedSynchronizer</a></p><p><a href="https://javadoop.com/2017/07/20/AbstractQueuedSynchronizer-2/#%E5%85%AC%E5%B9%B3%E9%94%81%E5%92%8C%E9%9D%9E%E5%85%AC%E5%B9%B3%E9%94%81">一行一行源码分析清楚 AbstractQueuedSynchronizer(二)</a></p><h2 id="ArrayBlockingQueue"><a href="#ArrayBlockingQueue" class="headerlink" title="ArrayBlockingQueue"></a>ArrayBlockingQueue</h2><p>ArrayBlockingQueue 底层是数组，有界队列，如果我们要使用生产者-消费者模式，这是非常好的选择。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 用于存放元素的数组</span></span><br><span class="line"><span class="keyword">final</span> Object[] items;</span><br><span class="line"><span class="comment">// 下一次读取操作的位置</span></span><br><span class="line"><span class="keyword">int</span> takeIndex;</span><br><span class="line"><span class="comment">// 下一次写入操作的位置</span></span><br><span class="line"><span class="keyword">int</span> putIndex;</span><br><span class="line"><span class="comment">// 队列中的元素数量</span></span><br><span class="line"><span class="keyword">int</span> count;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 以下几个就是控制并发用的同步器</span></span><br><span class="line"><span class="keyword">final</span> ReentrantLock lock;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">final</span> Condition notEmpty;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">final</span> Condition notFull;</span><br></pre></td></tr></table></figure><p><img src="/2018/10/30/java-%E9%94%81/array-blocking-queue.png" alt="array-blocking-queue"></p><p>ArrayBlockingQueue用到了一个锁（ReentranLock基于AQS实现，因此就带有一个同步队列）和两个condition，也就是一个同步队列和两个条件队列。</p><ol><li>对于ArrayBlockingQueue里面的数组数据写，写数据的时候从0向后写，遇到数组结尾则重置位置，继续从0开始，因为如果有数据被读了， 那0开始的一段一定是空的，这样就不会覆盖数据。</li><li>对于ArrayBlockingQueue里面的数组数据读，读数据的时候从0向后读，遇到数组结尾则重置位置，继续从0开始，算是跟着写的顺序，这样就肯定能读到数据，除非数组中没有数据了。</li><li>对于同步队列，每个线程尝试进入临界区的时候会调用lock.lock创建节点并且加入到同步队列末尾，如果锁是公平锁，那么还需要排队，如果是非公平锁，那么可以直接竞争,竞争成功则把带有自己线程ID的节点设置为同步队列的头节点。临界区执行完毕后从同步队列中删除节点。</li><li>如果遇到conditionA .await()调用， 因为这段代码在临界区，因此这个线程一定就是头节点的线程，此时会根据线程ID重新创建一个节点加入到conditionA的条件队列的末尾。</li><li>如果遇到conditionA.signal()调用，则会在conditionA的条件队列中找到头节点（等待最久的线程），把它从条件队列中移除，并且加入到锁的同步队列中，如果同步队列的锁是公平锁，那么还需要排队，如果是非公平锁，那么可以直接竞争锁，竞争成功则设置自己为头结点，进入临界区。</li></ol><h2 id="LinkedBlockingQueue"><a href="#LinkedBlockingQueue" class="headerlink" title="LinkedBlockingQueue"></a>LinkedBlockingQueue</h2><p>LinkedBlockingQueue 是链表实现的阻塞队列，这里默认和最大长度是Integer.MAX_VALUE。可以当做无界和有界队列来使用，所以大家不要以为它就是无界队列。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// take, poll, peek 等读操作的方法需要获取到这个锁</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">final</span> ReentrantLock takeLock = <span class="keyword">new</span> ReentrantLock();</span><br><span class="line"></span><br><span class="line"><span class="comment">// 如果读操作的时候队列是空的，那么等待 notEmpty 条件</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">final</span> Condition notEmpty = takeLock.newCondition();</span><br><span class="line"></span><br><span class="line"><span class="comment">// put, offer 等写操作的方法需要获取到这个锁</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">final</span> ReentrantLock putLock = <span class="keyword">new</span> ReentrantLock();</span><br><span class="line"></span><br><span class="line"><span class="comment">// 如果写操作的时候队列是满的，那么等待 notFull 条件</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">final</span> Condition notFull = putLock.newCondition();</span><br></pre></td></tr></table></figure><p><img src="/2018/10/30/java-%E9%94%81/linked-blocking-queue.png" alt="array-blocking-queue"></p><p>LinkedBlockingQueue用到了两个锁（ReentranLock基于AQS实现，因此就带有一个同步队列）和两个condition，也就是两个同步队列和两个条件队列。</p><p>同步队列和条件队列之间节点的变化和上面还是类似的，不过这边因为有两个同步队列，取数据的时候只锁了读锁，此时还是可以进行写，数据全部取出的时候才会阻塞读线程。写数据的时候也只是锁了写锁，此时还是可以读，数据达到最大值的时候才会阻塞写线程。</p><h2 id="SynchronousQueue"><a href="#SynchronousQueue" class="headerlink" title="SynchronousQueue"></a>SynchronousQueue</h2><p>SynchronousQueue 本身不带有空间来存储任何元素，使用上可以选择公平模式和非公平模式。它的队列不提供任何空间（一个都没有）来存储元素。数据必须从某个写线程交给某个读线程，而不是写到某个队列中等待被消费。</p><p>在它的实现代码中没有用到AQS锁，是基于CAS自旋和LockSupport阻塞而实现的。</p><p>主要的逻辑：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 写入值</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">put</span><span class="params">(E o)</span> <span class="keyword">throws</span> InterruptedException </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (o == <span class="keyword">null</span>) <span class="keyword">throw</span> <span class="keyword">new</span> NullPointerException();</span><br><span class="line">    <span class="keyword">if</span> (transferer.transfer(o, <span class="keyword">false</span>, <span class="number">0</span>) == <span class="keyword">null</span>) &#123; <span class="comment">// 1</span></span><br><span class="line">        Thread.interrupted();</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> InterruptedException();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 读取值并移除</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> E <span class="title">take</span><span class="params">()</span> <span class="keyword">throws</span> InterruptedException </span>&#123;</span><br><span class="line">    Object e = transferer.transfer(<span class="keyword">null</span>, <span class="keyword">false</span>, <span class="number">0</span>); <span class="comment">// 2</span></span><br><span class="line">    <span class="keyword">if</span> (e != <span class="keyword">null</span>)</span><br><span class="line">        <span class="keyword">return</span> (E)e;</span><br><span class="line">    Thread.interrupted();</span><br><span class="line">    <span class="keyword">throw</span> <span class="keyword">new</span> InterruptedException();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>其中，transferer接口对应于SynchronousQueue的两个内部类，构造 SynchronousQueue 的时候，我们可以指定公平策略。公平模式对应 TransferQueue。而非公平模式则对应 TransferStack。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">static</span> <span class="keyword">final</span> <span class="class"><span class="keyword">class</span> <span class="title">TransferQueue</span>&lt;<span class="title">E</span>&gt; <span class="keyword">extends</span> <span class="title">Transferer</span>&lt;<span class="title">E</span>&gt; </span>&#123; ... &#125;</span><br><span class="line"><span class="keyword">static</span> <span class="keyword">final</span> <span class="class"><span class="keyword">class</span> <span class="title">TransferStack</span>&lt;<span class="title">E</span>&gt; <span class="keyword">extends</span> <span class="title">Transferer</span>&lt;<span class="title">E</span>&gt; </span>&#123; ... &#125; </span><br></pre></td></tr></table></figure><p>其他的细节还是直接看<a href="https://javadoop.com/post/java-concurrent-queue">解读 Java 并发队列 BlockingQueue</a>吧，他写的比较好。</p><h2 id="PriorityBlockingQueue"><a href="#PriorityBlockingQueue" class="headerlink" title="PriorityBlockingQueue"></a>PriorityBlockingQueue</h2><p>PriorityBlockingQueue 是无界队列，基于数组，数据结构为二叉堆，数组第一个也是树的根节点总是最小值。</p><p> PriorityQueue 的线程安全版本。</p><p>//todo 很多代码没有详细看，只是过了一下大致的流程</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;主要是锁，线程相关的一些知识点&lt;/p&gt;</summary>
    
    
    
    <category term="Java" scheme="http://example.com/categories/Java/"/>
    
    
  </entry>
  
  <entry>
    <title>Android-SparseArray</title>
    <link href="http://example.com/2018/10/29/Android-SparseArray/"/>
    <id>http://example.com/2018/10/29/Android-SparseArray/</id>
    <published>2018-10-29T14:53:31.000Z</published>
    <updated>2018-11-05T14:13:58.994Z</updated>
    
    <content type="html"><![CDATA[<p>SparseArray 是Android里面加入的数据结构<a id="more"></a>,在插入的时候会对Key做hash，然后按照二分查找的算法去找到合适的位置插入或者更新对应的value值。和Hashmap相比较的话，用到的内存会比散列表小，因为少了那部分阈值的空数组位，但是数据量大起来后，二分查找比起散列表直接hash取位置还是要慢一些</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//内部维护一个int[]类型的key数组，一个object[]类型的value数组，key会保持有序并且无重复</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SparseArray</span>&lt;<span class="title">E</span>&gt; <span class="keyword">implements</span> <span class="title">Cloneable</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> Object DELETED = <span class="keyword">new</span> Object();  <span class="comment">//用于删除的标记</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">boolean</span> mGarbage = <span class="keyword">false</span>;</span><br><span class="line"> </span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span>[] mKeys;</span><br><span class="line">    <span class="keyword">private</span> Object[] mValues;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> mSize;</span><br><span class="line"> </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">SparseArray</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>(<span class="number">10</span>);</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">SparseArray</span><span class="params">(<span class="keyword">int</span> initialCapacity)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (initialCapacity == <span class="number">0</span>) &#123;</span><br><span class="line">            mKeys = EmptyArray.INT;</span><br><span class="line">            mValues = EmptyArray.OBJECT;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            mValues = ArrayUtils.newUnpaddedObjectArray(initialCapacity);</span><br><span class="line">            mKeys = <span class="keyword">new</span> <span class="keyword">int</span>[mValues.length];</span><br><span class="line">        &#125;</span><br><span class="line">        mSize = <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> SparseArray&lt;E&gt; <span class="title">clone</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        SparseArray&lt;E&gt; clone = <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            clone = (SparseArray&lt;E&gt;) <span class="keyword">super</span>.clone();</span><br><span class="line">            clone.mKeys = mKeys.clone();</span><br><span class="line">            clone.mValues = mValues.clone();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (CloneNotSupportedException cnse) &#123;</span><br><span class="line">            <span class="comment">/* ignore */</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> clone;</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    <span class="function"><span class="keyword">public</span> E <span class="title">get</span><span class="params">(<span class="keyword">int</span> key)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> get(key, <span class="keyword">null</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> E <span class="title">get</span><span class="params">(<span class="keyword">int</span> key, E valueIfKeyNotFound)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> i = ContainerHelpers.binarySearch(mKeys, mSize, key);</span><br><span class="line"> </span><br><span class="line">        <span class="keyword">if</span> (i &lt; <span class="number">0</span> || mValues[i] == DELETED) &#123;</span><br><span class="line">            <span class="keyword">return</span> valueIfKeyNotFound;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> (E) mValues[i];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">delete</span><span class="params">(<span class="keyword">int</span> key)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> i = ContainerHelpers.binarySearch(mKeys, mSize, key);</span><br><span class="line"> </span><br><span class="line">        <span class="keyword">if</span> (i &gt;= <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">if</span> (mValues[i] != DELETED) &#123;</span><br><span class="line">                mValues[i] = DELETED;</span><br><span class="line">                mGarbage = <span class="keyword">true</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">remove</span><span class="params">(<span class="keyword">int</span> key)</span> </span>&#123;</span><br><span class="line">        delete(key);</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">removeAt</span><span class="params">(<span class="keyword">int</span> index)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (mValues[index] != DELETED) &#123;</span><br><span class="line">            mValues[index] = DELETED;</span><br><span class="line">            mGarbage = <span class="keyword">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">removeAtRange</span><span class="params">(<span class="keyword">int</span> index, <span class="keyword">int</span> size)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">final</span> <span class="keyword">int</span> end = Math.min(mSize, index + size);</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = index; i &lt; end; i++) &#123;</span><br><span class="line">            removeAt(i);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line"><span class="comment">//把数组标记为DELETED的元素置为null，非标记的元素向前移动，然后更新属性</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">gc</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> n = mSize;</span><br><span class="line">        <span class="keyword">int</span> o = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">int</span>[] keys = mKeys;</span><br><span class="line">        Object[] values = mValues;</span><br><span class="line"> </span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">            Object val = values[i];</span><br><span class="line"> </span><br><span class="line">            <span class="keyword">if</span> (val != DELETED) &#123;</span><br><span class="line">                <span class="keyword">if</span> (i != o) &#123;</span><br><span class="line">                    keys[o] = keys[i];</span><br><span class="line">                    values[o] = val;</span><br><span class="line">                    values[i] = <span class="keyword">null</span>;</span><br><span class="line">                &#125;</span><br><span class="line"> </span><br><span class="line">                o++;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"> </span><br><span class="line">        mGarbage = <span class="keyword">false</span>;</span><br><span class="line">        mSize = o;</span><br><span class="line">     &#125;</span><br><span class="line"> </span><br><span class="line"><span class="comment">//首先会查找，如果找到了相同的key，会直接替换value的值，因此不会存在相同的key的情况，没找到的情况下，如果i&lt;size并且最后一次二分查找的低位标记为DELETED的话，直接把key,value赋值过去，否则gc()一次，然后调用工具类把key,value插入到i位置，这样的话key依然是有序的</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">put</span><span class="params">(<span class="keyword">int</span> key, E value)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> i = ContainerHelpers.binarySearch(mKeys, mSize, key);</span><br><span class="line"> </span><br><span class="line">        <span class="keyword">if</span> (i &gt;= <span class="number">0</span>) &#123;</span><br><span class="line">            mValues[i] = value;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            i = ~i;</span><br><span class="line"> </span><br><span class="line">            <span class="keyword">if</span> (i &lt; mSize &amp;&amp; mValues[i] == DELETED) &#123;</span><br><span class="line">                mKeys[i] = key;</span><br><span class="line">                mValues[i] = value;</span><br><span class="line">                <span class="keyword">return</span>;</span><br><span class="line">            &#125;</span><br><span class="line"> </span><br><span class="line">            <span class="keyword">if</span> (mGarbage &amp;&amp; mSize &gt;= mKeys.length) &#123;</span><br><span class="line">                gc();</span><br><span class="line"> </span><br><span class="line">                <span class="comment">// Search again because indices may have changed.</span></span><br><span class="line">                i = ~ContainerHelpers.binarySearch(mKeys, mSize, key);</span><br><span class="line">            &#125;</span><br><span class="line"> </span><br><span class="line">            mKeys = GrowingArrayUtils.insert(mKeys, mSize, i, key);</span><br><span class="line">            mValues = GrowingArrayUtils.insert(mValues, mSize, i, value);</span><br><span class="line">            mSize++;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">size</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (mGarbage) &#123;</span><br><span class="line">            gc();</span><br><span class="line">        &#125;</span><br><span class="line"> </span><br><span class="line">        <span class="keyword">return</span> mSize;</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">keyAt</span><span class="params">(<span class="keyword">int</span> index)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (mGarbage) &#123;</span><br><span class="line">            gc();</span><br><span class="line">        &#125;</span><br><span class="line"> </span><br><span class="line">        <span class="keyword">return</span> mKeys[index];</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    <span class="function"><span class="keyword">public</span> E <span class="title">valueAt</span><span class="params">(<span class="keyword">int</span> index)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (mGarbage) &#123;</span><br><span class="line">            gc();</span><br><span class="line">        &#125;</span><br><span class="line"> </span><br><span class="line">        <span class="keyword">return</span> (E) mValues[index];</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setValueAt</span><span class="params">(<span class="keyword">int</span> index, E value)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (mGarbage) &#123;</span><br><span class="line">            gc();</span><br><span class="line">        &#125;</span><br><span class="line"> </span><br><span class="line">        mValues[index] = value;</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">indexOfKey</span><span class="params">(<span class="keyword">int</span> key)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (mGarbage) &#123;</span><br><span class="line">            gc();</span><br><span class="line">        &#125;</span><br><span class="line"> </span><br><span class="line">        <span class="keyword">return</span> ContainerHelpers.binarySearch(mKeys, mSize, key);</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">indexOfValue</span><span class="params">(E value)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (mGarbage) &#123;</span><br><span class="line">            gc();</span><br><span class="line">        &#125;</span><br><span class="line"> </span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; mSize; i++)</span><br><span class="line">            <span class="keyword">if</span> (mValues[i] == value)</span><br><span class="line">                <span class="keyword">return</span> i;</span><br><span class="line"> </span><br><span class="line">        <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">clear</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> n = mSize;</span><br><span class="line">        Object[] values = mValues;</span><br><span class="line"> </span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">            values[i] = <span class="keyword">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line"> </span><br><span class="line">        mSize = <span class="number">0</span>;</span><br><span class="line">        mGarbage = <span class="keyword">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">append</span><span class="params">(<span class="keyword">int</span> key, E value)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (mSize != <span class="number">0</span> &amp;&amp; key &lt;= mKeys[mSize - <span class="number">1</span>]) &#123;</span><br><span class="line">            put(key, value);</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line"> </span><br><span class="line">        <span class="keyword">if</span> (mGarbage &amp;&amp; mSize &gt;= mKeys.length) &#123;</span><br><span class="line">            gc();</span><br><span class="line">        &#125;</span><br><span class="line"> </span><br><span class="line">        mKeys = GrowingArrayUtils.append(mKeys, mSize, key);</span><br><span class="line">        mValues = GrowingArrayUtils.append(mValues, mSize, value);</span><br><span class="line">        mSize++;</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (size() &lt;= <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="string">&quot;&#123;&#125;&quot;</span>;</span><br><span class="line">        &#125;</span><br><span class="line"> </span><br><span class="line">        StringBuilder buffer = <span class="keyword">new</span> StringBuilder(mSize * <span class="number">28</span>);</span><br><span class="line">        buffer.append(<span class="string">&#x27;&#123;&#x27;</span>);</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;mSize; i++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (i &gt; <span class="number">0</span>) &#123;</span><br><span class="line">                buffer.append(<span class="string">&quot;, &quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">int</span> key = keyAt(i);</span><br><span class="line">            buffer.append(key);</span><br><span class="line">            buffer.append(<span class="string">&#x27;=&#x27;</span>);</span><br><span class="line">            Object value = valueAt(i);</span><br><span class="line">            <span class="keyword">if</span> (value != <span class="keyword">this</span>) &#123;</span><br><span class="line">                buffer.append(value);</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                buffer.append(<span class="string">&quot;(this Map)&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        buffer.append(<span class="string">&#x27;&#125;&#x27;</span>);</span><br><span class="line">        <span class="keyword">return</span> buffer.toString();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">----------------------------------------------------------------------</span><br><span class="line"><span class="comment">//上面用到的工具类的二分查找算法</span></span><br><span class="line">    <span class="function"><span class="keyword">static</span> <span class="keyword">int</span> <span class="title">binarySearch</span><span class="params">(<span class="keyword">int</span>[] array, <span class="keyword">int</span> size, <span class="keyword">int</span> value)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> lo = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">int</span> hi = size - <span class="number">1</span>;</span><br><span class="line"> </span><br><span class="line">        <span class="keyword">while</span> (lo &lt;= hi) &#123;</span><br><span class="line">            <span class="keyword">final</span> <span class="keyword">int</span> mid = (lo + hi) &gt;&gt;&gt; <span class="number">1</span>;  <span class="comment">//算数右移</span></span><br><span class="line">            <span class="keyword">final</span> <span class="keyword">int</span> midVal = array[mid];</span><br><span class="line"> </span><br><span class="line">            <span class="keyword">if</span> (midVal &lt; value) &#123;</span><br><span class="line">                lo = mid + <span class="number">1</span>;</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (midVal &gt; value) &#123;</span><br><span class="line">                hi = mid - <span class="number">1</span>;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="keyword">return</span> mid;  <span class="comment">// value found</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> ~lo;  <span class="comment">// value not present   取反为负数，再取反可以获取二分的最后一次位置，直接插入新的值</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;p&gt;SparseArray 是Android里面加入的数据结构&lt;/p&gt;</summary>
    
    
    
    <category term="android_app" scheme="http://example.com/categories/android-app/"/>
    
    
  </entry>
  
  <entry>
    <title>二叉树常见操作</title>
    <link href="http://example.com/2018/10/28/%E4%BA%8C%E5%8F%89%E6%A0%91%E5%B8%B8%E8%A7%81%E6%93%8D%E4%BD%9C/"/>
    <id>http://example.com/2018/10/28/%E4%BA%8C%E5%8F%89%E6%A0%91%E5%B8%B8%E8%A7%81%E6%93%8D%E4%BD%9C/</id>
    <published>2018-10-27T16:42:00.000Z</published>
    <updated>2018-10-27T17:36:49.789Z</updated>
    
    <content type="html"><![CDATA[<p>遍历等等</p><a id="more"></a><p>Java:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TreeNode</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> val;</span><br><span class="line">    TreeNode left;</span><br><span class="line">    TreeNode right;</span><br><span class="line"></span><br><span class="line">    TreeNode(<span class="keyword">int</span> x) &#123;</span><br><span class="line">        val = x;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;&quot;</span> + val;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//非递归的前序遍历</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> List&lt;TreeNode&gt; <span class="title">getPreOrderIteratively</span><span class="params">(TreeNode p)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> getPreOrderIteratively(p, <span class="keyword">true</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//对于非叶子节点，如果有一个子树位空会把它打印出来</span></span><br><span class="line"><span class="function"><span class="keyword">private</span> List&lt;TreeNode&gt; <span class="title">getPreOrderIteratively</span><span class="params">(TreeNode p, <span class="keyword">boolean</span> printNull)</span> </span>&#123;</span><br><span class="line">    Stack&lt;TreeNode&gt; stack = <span class="keyword">new</span> Stack&lt;&gt;();</span><br><span class="line">    List&lt;TreeNode&gt; listP = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">    <span class="keyword">while</span> (p != <span class="keyword">null</span> || !stack.isEmpty()) &#123;</span><br><span class="line">        <span class="keyword">while</span> (p != <span class="keyword">null</span>) &#123;</span><br><span class="line">            listP.add(p);</span><br><span class="line">            stack.push(p);</span><br><span class="line">            <span class="keyword">if</span> (printNull &amp;&amp; !isLeaf(p) &amp;&amp; p.left == <span class="keyword">null</span>) &#123;</span><br><span class="line">                listP.add(<span class="keyword">null</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            p = p.left;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (!stack.isEmpty()) &#123;</span><br><span class="line">            p = stack.pop();</span><br><span class="line">            <span class="keyword">if</span> (printNull &amp;&amp; !isLeaf(p) &amp;&amp; p.right == <span class="keyword">null</span>) &#123;</span><br><span class="line">                listP.add(<span class="keyword">null</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            p = p.right;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> listP;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">boolean</span> <span class="title">isLeaf</span><span class="params">(TreeNode parent)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (parent.left == <span class="keyword">null</span> &amp;&amp; parent.right == <span class="keyword">null</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">boolean</span> <span class="title">isSameTreeNode</span><span class="params">(TreeNode p1, TreeNode p2)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (p1 == <span class="keyword">null</span> &amp;&amp; p2 == <span class="keyword">null</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (p1 == <span class="keyword">null</span> || p2 == <span class="keyword">null</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> p1.val == p2.val;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//递归的层次遍历</span></span><br><span class="line"><span class="keyword">public</span> List&lt;List&lt;Integer&gt;&gt; levelOrderRecursively (TreeNode root) &#123;</span><br><span class="line">    List&lt;List&lt;Integer&gt;&gt; result = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">    result = levelOrderInternal(root, result,<span class="number">0</span>);</span><br><span class="line">    <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> List&lt;List&lt;Integer&gt;&gt; levelOrderInternal(TreeNode node, List&lt;List&lt;Integer&gt;&gt; result, <span class="keyword">int</span> level)&#123;</span><br><span class="line">    <span class="keyword">if</span>(node == <span class="keyword">null</span>) <span class="keyword">return</span> result;</span><br><span class="line">    <span class="keyword">if</span>(result.size() &lt;= level)&#123;</span><br><span class="line">        result.add(<span class="keyword">new</span> ArrayList&lt;&gt;());</span><br><span class="line">    &#125;</span><br><span class="line">    result.get(level).add(node.val);</span><br><span class="line">    levelOrderInternal(node.left,result, level+<span class="number">1</span>);</span><br><span class="line">    levelOrderInternal(node.right,result,level+<span class="number">1</span>);</span><br><span class="line">    <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//非递归的层次遍历</span></span><br><span class="line"><span class="keyword">public</span> List&lt;List&lt;Integer&gt;&gt; levelOrderIteratively(TreeNode root) &#123;</span><br><span class="line">    List&lt;List&lt;Integer&gt;&gt; ret = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">    <span class="keyword">if</span>(root ==<span class="keyword">null</span>)&#123;</span><br><span class="line">        <span class="keyword">return</span> ret;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    Queue&lt;TreeNode&gt; queue = <span class="keyword">new</span> LinkedList&lt;&gt;();</span><br><span class="line">    List&lt;Integer&gt; list = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line"></span><br><span class="line">    TreeNode levelStart = root ;</span><br><span class="line">    queue.offer(root);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span>(!queue.isEmpty())&#123;</span><br><span class="line">        TreeNode node = queue.poll();</span><br><span class="line">        <span class="keyword">if</span>(node == levelStart)&#123;</span><br><span class="line">            list = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">            ret.add(list);</span><br><span class="line">            levelStart = <span class="keyword">null</span> ;</span><br><span class="line">        &#125;</span><br><span class="line">        list.add(node.val);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span>(node.left !=<span class="keyword">null</span>)&#123;</span><br><span class="line">            queue.offer(node.left);</span><br><span class="line">            <span class="keyword">if</span>(levelStart == <span class="keyword">null</span>)&#123;</span><br><span class="line">                levelStart = node.left;</span><br><span class="line">            &#125;      </span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(node.right !=<span class="keyword">null</span>)&#123;</span><br><span class="line">            queue.offer(node.right);</span><br><span class="line">            <span class="keyword">if</span>(levelStart == <span class="keyword">null</span>)&#123;</span><br><span class="line">                levelStart = node.right ; </span><br><span class="line">            &#125; </span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> ret ;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;p&gt;遍历等等&lt;/p&gt;</summary>
    
    
    
    <category term="数据结构和算法" scheme="http://example.com/categories/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%92%8C%E7%AE%97%E6%B3%95/"/>
    
    
  </entry>
  
  <entry>
    <title>一个硬币凑齐数值的问题</title>
    <link href="http://example.com/2018/10/25/%E4%B8%80%E4%B8%AA%E7%A1%AC%E5%B8%81%E5%87%91%E9%BD%90%E6%95%B0%E5%80%BC%E7%9A%84%E9%97%AE%E9%A2%98/"/>
    <id>http://example.com/2018/10/25/%E4%B8%80%E4%B8%AA%E7%A1%AC%E5%B8%81%E5%87%91%E9%BD%90%E6%95%B0%E5%80%BC%E7%9A%84%E9%97%AE%E9%A2%98/</id>
    <published>2018-10-24T16:06:00.000Z</published>
    <updated>2018-10-27T17:35:32.520Z</updated>
    
    <content type="html"><![CDATA[<p>晚上看到qq群里讨论一个算法题：<br>四个人分别有10000元 A只有1元的 B只有2元的 C只有5元的 D只有10元的 </p><a id="more"></a><p>1.问现在要凑10000元 有多少方法 ？<br>2.假设投资额为10000，但最高出资的比例不能超过51%，问集资方案有多少种 ？</p><p>为了准备面试，第一次刷题，刷了四五天的leetcode，结果面试算法题写出来了，但还是挂了，有点迷茫睡了一觉，醒来刚好看到这个题目，顺便做一做把。因为自己完全不知道动态规划，只知道个名称，最后做出来花了很久。</p><p>思路的话第一时间想到的是leetcode上一个<a href="https://leetcode.com/problems/climbing-stairs/">爬楼梯</a>的题目，不过仔细算了下发现有点不太一样，一个是爬楼梯有顺序，二是爬楼梯只有1步和2步。</p><p>这里的话，如果我们用4种面值去凑11块钱，那么，D可能出0或者1张，如果出0张，那问题就变成了3种面值去凑11块钱，如果出1张，那么问题就变成了3种面值去凑1块钱，嗯，这是关键的部分，其他的可以类似的推算，比如4种面值去凑22块钱，那么D可能出0，1，2张，又变成3个3种面值去凑钱的问题，根据5块钱出0，1，2….等等张数的时候，3种面值去凑钱又可以变成2种面值去凑钱的问题，2种面值去凑钱的话，根据2块钱出0，1…张可以直接得出有多少种方法，比如2种面值凑3块钱，那么2块钱可以出0或者1张，有两种方法。2种面值凑4块钱，则是3种方法，因为2块钱可以出0，1，2三种，5块钱依然是3种方法。下面就是代码实现了：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        System.out.println(get4n(<span class="number">10000</span>));  <span class="comment">// 1671170501</span></span><br><span class="line">        System.out.println(get4n(<span class="number">10000</span>, <span class="number">5100</span>));  <span class="comment">//884304594</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">   <span class="comment">// 表示用4种(1,2,5,10)硬币计算凑齐n块钱有多少种方法,i表示出的10块钱的总额，例如</span></span><br><span class="line">    <span class="comment">// i==0的时候，就表示要用3种硬币凑齐所有的n块钱</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">long</span> <span class="title">get4n</span><span class="params">(<span class="keyword">int</span> n)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">long</span> sum = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt;= n; i += <span class="number">10</span>) &#123;</span><br><span class="line">            sum += get3n(n - i);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> sum;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 表示用3种(1,2,5)硬币计算凑齐n块钱有多少种方法</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">long</span> <span class="title">get3n</span><span class="params">(<span class="keyword">int</span> n)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">long</span> sum = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt;= n; i += <span class="number">5</span>) &#123;</span><br><span class="line">            sum += get2n(n - i);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> sum;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 表示用2种(1,2)硬币计算凑齐n块钱有多少种方法</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">long</span> <span class="title">get2n</span><span class="params">(<span class="keyword">int</span> n)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span> + (n / <span class="number">2</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 出的10块钱的总额不得大于 maxPer</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">long</span> <span class="title">get4n</span><span class="params">(<span class="keyword">int</span> n, <span class="keyword">int</span> maxPer)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">long</span> sum = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt;= maxPer; i += <span class="number">10</span>) &#123;</span><br><span class="line">            sum += get3n(n - i, maxPer);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> sum;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 出的5块钱的总额不得大于 maxPer</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">long</span> <span class="title">get3n</span><span class="params">(<span class="keyword">int</span> n, <span class="keyword">int</span> maxPer)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">long</span> sum = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt;= maxPer; i += <span class="number">5</span>) &#123;</span><br><span class="line">            sum += get2n(n - i, maxPer);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> sum;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">long</span> <span class="title">get2n</span><span class="params">(<span class="keyword">int</span> n, <span class="keyword">int</span> maxPer)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (n &lt; maxPer) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">1</span> + (n / <span class="number">2</span>);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">int</span> bMax = maxPer / <span class="number">2</span> - <span class="number">1</span>;</span><br><span class="line">            <span class="keyword">int</span> bMin = (n - maxPer) / <span class="number">2</span> + <span class="number">1</span>;</span><br><span class="line">            <span class="keyword">if</span> (bMax &lt; bMin) &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> bMax - bMin + <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;p&gt;晚上看到qq群里讨论一个算法题：&lt;br&gt;四个人分别有10000元 A只有1元的 B只有2元的 C只有5元的 D只有10元的 &lt;/p&gt;</summary>
    
    
    
    <category term="数据结构和算法" scheme="http://example.com/categories/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%92%8C%E7%AE%97%E6%B3%95/"/>
    
    
  </entry>
  
  <entry>
    <title>按XML格式打印view和它的子view</title>
    <link href="http://example.com/2018/10/16/Q-A-%E6%8C%89XML%E6%A0%BC%E5%BC%8F%E6%89%93%E5%8D%B0view%E5%92%8C%E5%AE%83%E7%9A%84%E5%AD%90view/"/>
    <id>http://example.com/2018/10/16/Q-A-%E6%8C%89XML%E6%A0%BC%E5%BC%8F%E6%89%93%E5%8D%B0view%E5%92%8C%E5%AE%83%E7%9A%84%E5%AD%90view/</id>
    <published>2018-10-16T12:50:29.000Z</published>
    <updated>2018-10-27T17:14:09.719Z</updated>
    
    <content type="html"><![CDATA[<p>逻辑很简单，就是递归就结束了，很麻烦的是xml的格式调整，换行和缩进花了很久。没有要求写文件，不过写了看看效果</p><a id="more"></a><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onCreate</span><span class="params">(Bundle savedInstanceState)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">super</span>.onCreate(savedInstanceState);</span><br><span class="line">    setContentView(R.layout.activity_main);</span><br><span class="line">    View view = findViewById(R.id.layout);</span><br><span class="line">    ViewGroup viewGroup = (ViewGroup) getWindow().getDecorView();</span><br><span class="line"></span><br><span class="line">    String str = printViewHierarchy(viewGroup);</span><br><span class="line">    writeFile(str);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">private</span> String <span class="title">printViewHierarchy</span><span class="params">(ViewGroup viewGroup)</span> </span>&#123;</span><br><span class="line">    String lineStarter = <span class="string">&quot;&quot;</span>;</span><br><span class="line">    String blank = <span class="string">&quot;  &quot;</span>;</span><br><span class="line">    StringBuilder builder = <span class="keyword">new</span> StringBuilder();</span><br><span class="line">    builder.append(<span class="string">&quot;&lt;?xml version=\&quot;1.0\&quot; encoding=\&quot;utf-8\&quot;?&gt;&quot;</span>);</span><br><span class="line">    builder.append(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line">    travelView(viewGroup, builder, lineStarter, blank);</span><br><span class="line">    <span class="keyword">return</span> builder.toString();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">writeFile</span><span class="params">(String str)</span> </span>&#123;</span><br><span class="line">    File output = <span class="keyword">new</span> File(Environment.getExternalStorageDirectory(), <span class="string">&quot;treeView.xml&quot;</span>);</span><br><span class="line">    <span class="keyword">if</span> (output.exists()) &#123;</span><br><span class="line">        output.delete();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        FileOutputStream outputStream = <span class="keyword">new</span> FileOutputStream(output);</span><br><span class="line">        outputStream.write(str.getBytes());</span><br><span class="line">        outputStream.close();</span><br><span class="line">    &#125; <span class="keyword">catch</span> (FileNotFoundException e) &#123;</span><br><span class="line">        e.printStackTrace();</span><br><span class="line">    &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">        e.printStackTrace();</span><br><span class="line">    &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">travelView</span><span class="params">(View view, StringBuilder builder, String lineStarter, String blank)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (view <span class="keyword">instanceof</span> ViewGroup) &#123;</span><br><span class="line">        ViewGroup viewGroup = ((ViewGroup) view);</span><br><span class="line">        builder.append(getStartTag(lineStarter, view));</span><br><span class="line">        <span class="keyword">if</span> (viewGroup.getChildCount() != <span class="number">0</span>) &#123;</span><br><span class="line">            builder.append(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">boolean</span> newLine = <span class="keyword">true</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; viewGroup.getChildCount(); i++) &#123;</span><br><span class="line">            View child = viewGroup.getChildAt(i);</span><br><span class="line">            <span class="keyword">if</span> (newLine) &#123;</span><br><span class="line">                lineStarter += blank;</span><br><span class="line">                newLine = <span class="keyword">false</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            travelView(child, builder,lineStarter,blank);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (viewGroup.getChildCount() != <span class="number">0</span>) &#123;</span><br><span class="line">            lineStarter = lineStarter.substring(<span class="number">0</span>, lineStarter.length() - blank.length());</span><br><span class="line">            builder.append(getEndTag(lineStarter, view));</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            builder.append(getEndTag(<span class="string">&quot; &quot;</span>, view));</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        builder.append(getStartTag(lineStarter, view));</span><br><span class="line">        builder.append(getEndTag(<span class="string">&quot; &quot;</span>, view));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">private</span> String <span class="title">getEndTag</span><span class="params">(String pre, View view)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> (pre + <span class="string">&quot;&lt;/&quot;</span> + getViewName(view) + <span class="string">&quot;&gt;&quot;</span> + <span class="string">&quot;\n&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">private</span> String <span class="title">getStartTag</span><span class="params">(String pre, View view)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> (pre + <span class="string">&quot;&lt;&quot;</span> + getViewName(view) + <span class="string">&quot;&gt;&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">private</span> String <span class="title">getViewName</span><span class="params">(View view)</span> </span>&#123;</span><br><span class="line">    String s = view.toString();</span><br><span class="line">    <span class="keyword">int</span> index = s.indexOf(<span class="string">&quot;&#123;&quot;</span>);</span><br><span class="line">    index = (index == -<span class="number">1</span>) ? s.length() : index;</span><br><span class="line">    s = s.subSequence(<span class="number">0</span>, index).toString();</span><br><span class="line">    <span class="keyword">int</span> start = s.lastIndexOf(<span class="string">&quot;.&quot;</span>);</span><br><span class="line">    <span class="keyword">if</span> (start != -<span class="number">1</span>) &#123;</span><br><span class="line">        s = s.substring(start + <span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> s;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;p&gt;逻辑很简单，就是递归就结束了，很麻烦的是xml的格式调整，换行和缩进花了很久。没有要求写文件，不过写了看看效果&lt;/p&gt;</summary>
    
    
    
    <category term="数据结构和算法" scheme="http://example.com/categories/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%92%8C%E7%AE%97%E6%B3%95/"/>
    
    
  </entry>
  
  <entry>
    <title>http 相关知识</title>
    <link href="http://example.com/2018/10/15/http-%E7%9B%B8%E5%85%B3%E7%9F%A5%E8%AF%86/"/>
    <id>http://example.com/2018/10/15/http-%E7%9B%B8%E5%85%B3%E7%9F%A5%E8%AF%86/</id>
    <published>2018-10-15T04:57:42.000Z</published>
    <updated>2018-11-01T04:52:29.472Z</updated>
    
    <content type="html"><![CDATA[<p><a href="https://httpwg.org/specs/">http文档</a></p><a id="more"></a><h2 id="HTTP报文格式"><a href="#HTTP报文格式" class="headerlink" title="HTTP报文格式"></a>HTTP报文格式</h2><p>由三个部分组成，分别是： </p><ul><li>状态行</li><li>消息报头</li><li>正文</li></ul><p>如下所示，HTTP响应的格式与请求的格式十分类似： </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">请求报文：</span><br><span class="line">    &lt;method&gt; &lt;request-URL&gt; &lt;version&gt;</span><br><span class="line">    &lt;headers&gt;</span><br><span class="line">    &lt;blank line&gt; </span><br><span class="line">    &lt;entity-body&gt;</span><br><span class="line"></span><br><span class="line">响应报文：</span><br><span class="line">    HTTP-Version Status-Code Reason-Phrase CRLF</span><br><span class="line">    &lt;headers&gt;</span><br><span class="line">    &lt;blank line&gt; </span><br><span class="line">    &lt;entity-body&gt;</span><br></pre></td></tr></table></figure><p>头部字段分为请求头部字段，响应头部字段和通用头部字段三种类型，</p><pre><code>请求报文头部字段有Accept、From 等等，响应报文有 Content-Length 等，通用有Cache-Control，Content-Type,Date等</code></pre><h2 id="get和post区别？"><a href="#get和post区别？" class="headerlink" title="get和post区别？"></a>get和post区别？</h2><p>两者没有本质区别，相比之下，get请求报文在startLine的url里面会直接带上query参数，post请求报文则不会带上，query参数会放在body里面。不过这些也都是通用的做法，在get请求报文的body里面带上query参数可能不会被大多数的服务器解析.</p><p>get格式:</p><pre><code><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">GET &#x2F;sn&#x2F;index.php?sn&#x3D;123&amp;n&#x3D;asa HTTP&#x2F;1.1</span><br><span class="line">Accept: *&#x2F;*</span><br><span class="line">Accept-Language: zh-cn</span><br><span class="line">host: localhost</span><br><span class="line">Content-Type: application&#x2F;x-www-form-urlencoded</span><br><span class="line">Content-Length: 12</span><br><span class="line">Connection:close</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure></code></pre><p>post格式：</p><pre><code><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">POST &#x2F;sn&#x2F;index.php HTTP&#x2F;1.1</span><br><span class="line">Accept: *&#x2F;*</span><br><span class="line">Accept-Language: zh-cn</span><br><span class="line">host: localhost</span><br><span class="line">Content-Type: application&#x2F;x-www-form-urlencoded</span><br><span class="line">Content-Length: 12</span><br><span class="line">Connection:close</span><br><span class="line"></span><br><span class="line">sn&#x3D;123&amp;n&#x3D;asa</span><br><span class="line"></span><br></pre></td></tr></table></figure></code></pre><h2 id="响应码分类"><a href="#响应码分类" class="headerlink" title="响应码分类"></a>响应码分类</h2><p>响应码由三位十进制数字组成，它们出现在由HTTP服务器发送的响应的第一行。 响应码分五种类型，由它们的第一位数字表示： </p><ul><li>1xx：信息，请求收到，继续处理</li><li>2xx：成功，行为被成功地接受、理解和采纳</li><li>3xx：重定向，为了完成请求，必须进一步执行的动作</li><li>4xx：客户端错误，请求包含语法错误或者请求无法实现</li><li>5xx：服务器错误，服务器不能实现一种明显无效的请求</li></ul><p>常见的响应码如下： </p><ul><li>200：请求成功，请求内容与该响应一起返回</li><li>202：请求已被接受，但还没处理。</li><li>301：请求的资源已被永久移动到新的位置。</li><li>302：请求的资源被临时移动到新的位置。</li><li>400：请求参数有误，当前请求无法被服务器理解。</li><li>401：请求需要验证用户</li><li>403：不允许访问该地址</li><li>404：Not Found</li><li>408：请求超时</li><li>500：服务器内部错误</li><li>502：Bad Gateway网关出错</li></ul><h2 id="HTTP和HTTPS"><a href="#HTTP和HTTPS" class="headerlink" title="HTTP和HTTPS"></a>HTTP和HTTPS</h2><ul><li>HTTP 标准端口是 80 ，而 HTTPS 的标准端口是 443</li></ul><p>HTTPS 协议提供了三个强大的功能：</p><ul><li>内容加密。浏览器到百度服务器的内容都是以加密形式传输，中间者无法直接查看原始内容。</li><li>身份认证。保证用户访问的是百度服务，即使被 DNS 劫持到了第三方站点，也会提醒用户没有访问百度服务，有可能被劫持</li><li>数据完整性。防止内容被第三方冒充或者篡改。</li></ul><h2 id="HTTP和HTTP1-1"><a href="#HTTP和HTTP1-1" class="headerlink" title="HTTP和HTTP1.1"></a>HTTP和HTTP1.1</h2><p>Http1.1比Http1.0多了以下优点： </p><ul><li>支持持久连接，在一个TCP连接上可以传送多个HTTP请求和响应，减少了建立和关闭连接的消耗和延迟</li><li>多个请求和响应可以重叠，多个请求和响应可以同时进行.</li><li>更加多的请求头和响应头(比如身份认证、状态管理和Cache缓存等机制相关的请求头和响应头).</li></ul><h2 id="Http2-0"><a href="#Http2-0" class="headerlink" title="Http2.0"></a>Http2.0</h2><p>Http1.1主要针对的是tcp连接中握手和挥手导致的时延。而Http2.0主要针对的是tcp连接中慢启动导致的时延，同时也改进了串行执行的问题。</p><ul><li><p>Http2的主要特点：</p><ul><li><p>新的二进制格式（Binary Format），HTTP1.x的解析是基于文本。基于文本协议的格式解析存在天然缺陷，文本的表现形式有多样性，要做到健壮性考虑的场景必然很多，二进制则不同，只认0和1的组合。基于这种考虑HTTP2.0的协议解析决定采用二进制格式，实现方便且健壮。</p></li><li><p>多路复用（MultiPlexing），即连接共享，即每一个request都是是用作连接共享机制的。一个request对应一个id，这样一个连接上可以有多个request，每个连接的request可以随机的混杂在一起，接收方可以根据request的 id将request再归属到各自不同的服务端请求里面。</p></li><li><p>header压缩，如上文中所言，对前面提到过HTTP1.x的header带有大量信息，而且每次都要重复发送，HTTP2.0使用encoder来减少需要传输的header大小，通讯双方各自cache一份header fields表，既避免了重复header的传输，又减小了需要传输的大小。</p></li><li><p>服务端推送（server push），同SPDY一样，HTTP2.0也具有server push功能（假如你请求index.html，会把它需要的main.js也推送过来，这样就不用再去请求main.js）。</p></li></ul></li><li><p>HTTP2.0的多路复用和HTTP1.X中的长连接复用有什么区别？</p><p>  HTTP/1.0 一次请求-响应，建立一个连接，用完关闭；每一个请求都要建立一个连接；</p><p>  HTTP/1.1 Pipeling解决方式为，若干个请求排队串行化单线程处理，后面的请求等待前面请求的返回才能获得执行机会，一旦有某请求超时等，后续请求只能被阻塞，毫无办法，也就是人们常说的线头阻塞；</p><blockquote><p>在网页请求中这样似乎很常见，但是在移动端的编程中并没有用到，如果这样阻塞对移动端的影响还是挺大的，比如请求一个图片，后面再一个普通json请求，如果json请求需要等待图片io结束才能进行，那app早就被人卸载了。。。okhttp中采用的是连接建立之后会缓存一段时间这种方式来避免重复的握手和挥手，请求发送前会检查是不是有可以重用的连接。</p></blockquote><p>  HTTP/2多个请求可同时在一个连接上并行执行。某个请求任务耗时严重，不会影响到其它连接的正常执行；</p><p>  具体如图：<br>  <img src="http2.jpg" alt="http2"></p></li></ul><blockquote><p>更多：<br><a href="https://segmentfault.com/a/1190000011172823">浅析HTTP/2的多路复用</a><br><a href="http://www.blogjava.net/yongboy/archive/2015/03/19/423611.aspx">HTTP/2笔记之流和多路复用</a></p></blockquote><h2 id="三次握手和四次挥手"><a href="#三次握手和四次挥手" class="headerlink" title="三次握手和四次挥手"></a>三次握手和四次挥手</h2><h3 id="三次握手"><a href="#三次握手" class="headerlink" title="三次握手"></a>三次握手</h3><p>三次握手过程示意图如下：</p><p><img src="/2018/10/15/http-%E7%9B%B8%E5%85%B3%E7%9F%A5%E8%AF%86/%E4%B8%89%E6%AC%A1%E6%8F%A1%E6%89%8B.png" alt="udp"> </p><ol><li><p>三次握手过程</p><p>第一步:</p><p>客户机的TCP首先向服务器得TCP发送一个连接请求报文段。这个特殊的报文段中不含应用层数据，其首部中的SYN标志位被设置为1。另外，客户机会随机选择一个起始序号seq=x。（连接请求报文不携带数据，但要消耗一个序号）</p><p>第二步:</p><p>服务器得TCP收到请求连接报文段后，如果同意建立连接，就向客户机发回确认，并为该TCP连接分配TCP缓存和变量。在确认报文段中，SYN和ACK位都被置为1，确认号字段的值为x+1，并且服务器随机产生起始序号seq=y（确认报文不携带数据，但也要消耗掉一个序号）。 </p><p>第三步：</p><p>当客户机收到确认报文段后，还要向服务器给出确认，并且也要给该连接分配缓存和变量。这个报文段的ACK标志位被置为1，序号字段为x+1，确认号字段ack=y+1。该报文段可以携带数据，不过不携带数据则不消耗序号。 </p><p>成功进行以上三步之后，TCP连接就建立了，接下来就可以传送应用层数据了，TCP提供的是全双工通信，因此通信双方的应用进程在任何时候都能发送数据。 </p><p>上述TCP连接建立过程可总结如下： </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">1. SYN&#x3D;1,seq&#x3D;x</span><br><span class="line"></span><br><span class="line">2. SYN&#x3D;1,ACK&#x3D;1,seq&#x3D;y,ack&#x3D;x+1</span><br><span class="line"></span><br><span class="line">3. ACK&#x3D;1,seq&#x3D;x+1,ack&#x3D;y+1</span><br></pre></td></tr></table></figure></li></ol><ol><li><p>为什么建立连接需要3次握手</p><p>如果采用两次的话，会出现下面这种情况： </p><ol><li><p>TCP的三次握手最主要是防止已过期的连接再次传到被连接的主机。 </p><p>比如是客户端要连到服务器，结果发送的连接信息由于某种原因没有到达服务器；于是，客户端又发了一    次，结果这次服务器收到了，于是就发信息回来，两机就连接。传完东西后，断开。结果这时候，原先没有到达的连接信息突然又传到了服务器，于是服务器发确认信息给客户端，然后服务器就以为和客户端连上了，这个时候服务器就在等待客户端传东西过去。 </p></li><li><p>三次握手改成仅需要两次握手，死锁是可能发生 </p><p>考虑客户机和服务器之间的通信，假定客户机向服务器发送连接请求，服务器收到这个分组后，回复确认分组。按照两次握手的协定，服务器认为连接已经成功建立了，可以开始发送数据分组。 </p><p>可是，可能出现一种情况就是，服务器的确认分组在传输过程中被丢失，而此时客户端没有收到确认分组；客户端此时不知道服务器是否已经准备好，不知道服务器建议什么样的序列号，客户端甚至怀疑服务器是否收到了自己的连接请求分组。 </p><p>在这种情况下，客户端认为连接还未建立成功，将忽略服务器发来的任何数据分组，只等待连接确认应答分组。而服务器发出的分组超时后，重复发同样的分组，这样就形成了死锁。 </p></li></ol></li><li><p>简单描述：</p><p>客户端 ： 我要建立连接</p><p>服务端 ： 我OK了，缓存已经分配，连接号给你。</p><p>客户端 ： 我知道你ok了，我也开始把</p></li></ol><h3 id="四次挥手"><a href="#四次挥手" class="headerlink" title="四次挥手"></a>四次挥手</h3><p>四次挥手如下图所示： </p><p><img src="/2018/10/15/http-%E7%9B%B8%E5%85%B3%E7%9F%A5%E8%AF%86/%E5%9B%9B%E6%AC%A1%E6%8C%A5%E6%89%8B.png" alt="udp"> </p><p>看起来四次挥手好像很复杂，其实很简单。无非就是客户端和服务器端各自提出关闭，值得注意的是TIME-WAIT，后面小结详细说。 </p><ol><li><p>四次挥手过程</p><p>第一步：</p><p>客户机打算关闭连接，就向其TCP发送一个连接释放报文段，并停止再发送数据，主动关闭TCP连接，该报文的的FIN标志位被置1，seq=u，它等于前面已传送过的数据的最后一个字节序号+1（FIN报文段即使不携带数据，也要消耗一个序号），TCP是全双工的，即可以想象成一条TCP连接上有两条数据通路。当发送FIN报文时，发送FIN的一端就不能再发送数据，也就是关闭了其中一条数据通路，但对方还可以发送数据。</p><p>第二步：</p><p>服务器收到连接释放报文段后即发出确认，确认号是ack=u+1，而这个报文段自己的序号是v，等于它前面已经传送过的数据的最后一个自己的序号+1。此时，从客户机到服务器这个方向的连接就释放了，TCP连接处于半关闭状态。但服务器若发送数据，客户机仍要接收，即从服务器到客户机这个方向的连接并未关闭。 </p><p>第三步：</p><p>若服务器已经没有要向客户机发送的数据，就通知TCP释放连接，此时其发出FIN=1的连接释放报文段。</p><p>第四步：</p><p>客户机收到连接释放报文段后，必须发出确认。在确认报文段中，ACK字段被置为1，确认号ack=w+1，序号seq=u+1。此时TCP连接还没有释放掉，必须经过时间等待计时器设置的时间2MSL后，A才进入连接关闭状态。 </p><p>上述TCP连接释放过程可总结如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">1. FIN&#x3D;1,seq&#x3D;u</span><br><span class="line"></span><br><span class="line">2. ACK&#x3D;1,seq&#x3D;v,ack&#x3D;u+1</span><br><span class="line"></span><br><span class="line">3. FIN&#x3D;1,ACK&#x3D;1,seq&#x3D;w,ack&#x3D;u+1</span><br><span class="line"></span><br><span class="line">4. ACK&#x3D;1,seq&#x3D;u+1,ack&#x3D;w+1</span><br></pre></td></tr></table></figure></li><li><p>TIME-WAIT作用</p><p> 为什么需要TIME_WAIT？有如下几个原因： </p><ol><li><p>因为在第四步的时候，客户机发送的ACK可能丢失并导致服务端重新发送FIN消息，TIME_WAIT维护连接状态.</p><p> 如果执行主动关闭的一方客户机不进入到TIME_WAIT状态就关闭连接那会发生什么呢？当重传的FIN消息到达时，因为TCP已经不再有连接的信息了，所以就用RST(重新启动)消息应答，导致服务端进入错误的状态而不是有序终止状态，如果发送最后ACK消息的一方处于TIME_WAIT状态并仍然记录着连接的信息，它就可以正确的响应对等方服务端的FIN消息了. </p></li><li><p>TIME_WAIT为连接中”离群的段”提供从网络中消失的时间. </p><p> 考虑一下，如果延迟或者重传段在连接关闭后到达时会发生什么呢？通常情况下，因为TCP仅仅丢弃该数据并响应RST消息，所以这不会造成任何问题。当RST消息到达发出延时段的主机时，因为该主机也没有记录连接的任何信息，所以它也丢弃该段。然而，如果两个相同主机之间又建立了一个具有相同端口号的新连接，那么离群的段就可能被看成是新连接的，如果离群的段中数据的任何序列号恰恰在新连接的当前接收窗口中，数据就会被重新接收，其结果就是破坏新连接。</p></li></ol></li><li><p>简单描述：</p><p>客户端 ： 我传完了，可以关闭了</p><p>服务端 ： 我知道了，这边可能还有点东西没传完</p><p>服务端 ： 我也传完了</p><p>客户端 ： 我知道了，2MSL后我也关闭</p><p>服务端 ：收到确认后关闭连接</p></li></ol><h2 id="tcp报文和-udp报文"><a href="#tcp报文和-udp报文" class="headerlink" title="tcp报文和 udp报文"></a>tcp报文和 udp报文</h2><p>TCP报文段首部</p><p><img src="/2018/10/15/http-%E7%9B%B8%E5%85%B3%E7%9F%A5%E8%AF%86/tcp%E6%8A%A5%E6%96%87.jpg" alt="tcp"></p><p>UDP数据报格式</p><p><img src="/2018/10/15/http-%E7%9B%B8%E5%85%B3%E7%9F%A5%E8%AF%86/udp%E6%8A%A5%E6%96%87.png" alt="udp"></p><h2 id="TCP的拥塞控制"><a href="#TCP的拥塞控制" class="headerlink" title="TCP的拥塞控制"></a>TCP的拥塞控制</h2><p><img src="/2018/10/15/http-%E7%9B%B8%E5%85%B3%E7%9F%A5%E8%AF%86/%E6%8B%A5%E5%A1%9E%E6%8E%A7%E5%88%B6.png" alt="udp"></p><ol><li>拥塞的标志 ： <ol><li>重传计时器超时</li><li>接收到三个重复确认</li></ol></li><li>慢开始<ol><li>慢开始不是指cwnd的增长速度慢（指数增长），而是指TCP开始发送设置cwnd=1。</li><li>思路：不要一开始就发送大量的数据，先探测一下网络的拥塞程度，也就是说由小到大逐渐增加拥塞窗口的大小。</li></ol></li><li>拥塞避免（按线性规律增长）<ol><li>拥塞避免并非完全能够避免拥塞，是说在拥塞避免阶段将拥塞窗口控制为按线性规律增长，使网络比较不容易出现拥塞。</li><li>思路：让拥塞窗口cwnd缓慢地增大，即每经过一个往返时间RTT就把发送方的拥塞控制窗口加一。</li></ol></li><li>快速重传和快速恢复</li></ol><h2 id="代理："><a href="#代理：" class="headerlink" title="代理："></a>代理：</h2><p><a href="https://blog.csdn.net/watson2017/article/details/79897693">https://blog.csdn.net/watson2017/article/details/79897693</a></p><h2 id="Https"><a href="#Https" class="headerlink" title="Https"></a>Https</h2><p><a href="https://www.cnblogs.com/zhangshitong/p/6478721.html">一些推算过程</a></p><p>其实https的关键在于非对称加解密算法，有了这个算法作为基础，后面才能有这么多验证过程</p><h3 id="数字签名"><a href="#数字签名" class="headerlink" title="数字签名"></a>数字签名</h3><p>将报文按双方约定的摘要算法Hash后得到的一个固定位数的报文摘要，再使用CA机构的公钥加密得到数字签名。</p><p>在这里报文包含：</p><ol><li>你提交给CA的公钥</li><li>你提交给CA的标识信息（网址，邮件等）</li><li>有效期（证书的有效时间）</li><li>CA机构的标识信息</li></ol><p>在数学上保证：只要改动报文中任何一位，重新计算出来的报文摘要值就会与原先的值不相符。这就保证了报文的不可更改性。</p><h3 id="证书"><a href="#证书" class="headerlink" title="证书"></a>证书</h3><p>证书需要申请，并由专门的数字证书认证机构 CA 通过非常严格的审核之后颁发的电子证书，证书是对服务器端的一种认证。<br>证书的内容：</p><ol><li>你提交给CA的公钥</li><li>你提交给CA的标识信息（网址，邮件等）</li><li>有效期（证书的有效时间）</li><li>CA机构的标识信息</li><li>摘要算法（md5,sha1,sha256等等）</li><li>颁发者的数字签名，用来证明使用者的公钥和使用者的标识符信息之间的绑定的有效性。</li></ol><p>客户端收到证书以后，用CA的的公钥解密数字签名，得到报文摘要A，解密成功说明这个证书确实是由这个CA颁发的。<br>拿1234按照5去hash，得到报文摘要B，再，对比A和B是否相同，相同则说明报文信息没有被篡改。<br>CA的公钥是存在客户端本地的，CA机构和它们的公钥都是已知的保证权威的。</p><h3 id="PRF"><a href="#PRF" class="headerlink" title="PRF"></a>PRF</h3><p>PRF是一个“伪随机数函数”，这个函数很聪明，在规约中也有定义。它使用基于哈希的消息验证码（HMAC）的MD5和SHA-1两种哈希函数将密钥，ASCII字符以及我们给的种子结合起来。对每个哈希函数发送一半的输入。说它聪明的原因是即使面对MD5和SHA-1的弱点，它的防攻击能力还很强。这个过程可以自我反馈并不停地循环，而且我们要多少字节就能生成多少。</p><h3 id="https的过程"><a href="#https的过程" class="headerlink" title="https的过程"></a>https的过程</h3><p><img src="https.png" alt="https"></p><ol><li>客户端向服务端发起请求，并且带上自己支持的加密算法（ Cipher Suites），ssl版本，摘要算法等等，产生一个随机数A（Client random）。</li><li>服务端把自己的证书返回给客户端，并且带上选择的加密算法，摘要算法等等，产生一个随机数B（Server random）。</li><li>客户端验证这个证书，通过后再生成一个随机数C（Pre-master secret），客户端会使用这三个随机数ABC使用PRF生成一个master_secret，然后再使用 master_secret和随机数AB再PRF一次得到加密套件key block，里面包含后面通信会用到的各种密钥。然后使用证书中的公钥加密C，发送给服务器端，并且发送change_cipher_spec协议通知服务器，客户端已经准备好。</li><li>服务器端用私钥解密C，用同样的方式生成master_secret和加密套件key block，然后发送change_cipher_spec协议通知客户端，服务器已经准备好</li></ol><p>感谢 </p><p><a href="http://huachao1001.github.io/">Android校招笔记</a></p><p><a href="https://cloud.tencent.com/developer/article/1004327">浅析TCP协议中的疑难杂症</a></p>]]></content>
    
    
    <summary type="html">&lt;p&gt;&lt;a href=&quot;https://httpwg.org/specs/&quot;&gt;http文档&lt;/a&gt;&lt;/p&gt;</summary>
    
    
    
    <category term="通用" scheme="http://example.com/categories/%E9%80%9A%E7%94%A8/"/>
    
    
  </entry>
  
  <entry>
    <title>Java-hashmap,concurrentHashmap</title>
    <link href="http://example.com/2018/10/13/Java-hashmap/"/>
    <id>http://example.com/2018/10/13/Java-hashmap/</id>
    <published>2018-10-13T08:59:24.000Z</published>
    <updated>2018-11-01T02:32:16.982Z</updated>
    
    <content type="html"><![CDATA[<p>java8的hashmap和concurrentHashmap</p><a id="more"></a><h2 id="HashMap"><a href="#HashMap" class="headerlink" title="HashMap"></a>HashMap</h2><ol><li><p>hashmap的几个字段的含义</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> threshold;             <span class="comment">// 所能容纳的key-value对极限，超过就要进行扩容。threshold = table.length * loadFactor</span></span><br><span class="line"><span class="keyword">final</span> <span class="keyword">float</span> loadFactor;    <span class="comment">// 负载因子</span></span><br><span class="line"><span class="keyword">int</span> size;   <span class="comment">//保存的键值对的数目</span></span><br><span class="line"><span class="keyword">transient</span> Node&lt;K,V&gt;[] table;   <span class="comment">// 散列表数组</span></span><br></pre></td></tr></table></figure></li><li><p>hashmap的构造函数</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">HashMap</span><span class="params">(<span class="keyword">int</span> initialCapacity, <span class="keyword">float</span> loadFactor)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (initialCapacity &lt; <span class="number">0</span>)</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> IllegalArgumentException(<span class="string">&quot;Illegal initial capacity: &quot;</span> +</span><br><span class="line">                                        initialCapacity);</span><br><span class="line">    <span class="keyword">if</span> (initialCapacity &gt; MAXIMUM_CAPACITY)</span><br><span class="line">        initialCapacity = MAXIMUM_CAPACITY;</span><br><span class="line">    <span class="keyword">if</span> (loadFactor &lt;= <span class="number">0</span> || Float.isNaN(loadFactor))</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> IllegalArgumentException(<span class="string">&quot;Illegal load factor: &quot;</span> +</span><br><span class="line">                                        loadFactor);</span><br><span class="line">    <span class="keyword">this</span>.loadFactor = loadFactor;</span><br><span class="line">    <span class="keyword">this</span>.threshold = tableSizeFor(initialCapacity);</span><br><span class="line">&#125;</span><br><span class="line">   </span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">* Constructs an empty &lt;tt&gt;HashMap&lt;/tt&gt; with the specified initial</span></span><br><span class="line"><span class="comment">* capacity and the default load factor (0.75).</span></span><br><span class="line"><span class="comment">*</span></span><br><span class="line"><span class="comment">* <span class="doctag">@param</span>  initialCapacity the initial capacity.</span></span><br><span class="line"><span class="comment">* <span class="doctag">@throws</span> IllegalArgumentException if the initial capacity is negative.</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">HashMap</span><span class="params">(<span class="keyword">int</span> initialCapacity)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>(initialCapacity, DEFAULT_LOAD_FACTOR);</span><br><span class="line">&#125;</span><br><span class="line">   </span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">* Constructs an empty &lt;tt&gt;HashMap&lt;/tt&gt; with the default initial capacity</span></span><br><span class="line"><span class="comment">* (16) and the default load factor (0.75).</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">HashMap</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.loadFactor = DEFAULT_LOAD_FACTOR; <span class="comment">// all other fields defaulted</span></span><br><span class="line">&#125;</span><br><span class="line">   </span><br><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> <span class="title">tableSizeFor</span><span class="params">(<span class="keyword">int</span> cap)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> n = cap - <span class="number">1</span>;</span><br><span class="line">    n |= n &gt;&gt;&gt; <span class="number">1</span>;</span><br><span class="line">    n |= n &gt;&gt;&gt; <span class="number">2</span>;</span><br><span class="line">    n |= n &gt;&gt;&gt; <span class="number">4</span>;</span><br><span class="line">    n |= n &gt;&gt;&gt; <span class="number">8</span>;</span><br><span class="line">    n |= n &gt;&gt;&gt; <span class="number">16</span>;</span><br><span class="line">    <span class="keyword">return</span> (n &lt; <span class="number">0</span>) ? <span class="number">1</span> : (n &gt;= MAXIMUM_CAPACITY) ? MAXIMUM_CAPACITY : n + <span class="number">1</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在构造函数里面，如果我们传入了初始值大小，则会对这个值做一个<code>tableSizeFor(...)</code>的处理，处理的结果是 最小的大于cap的2的幂(这个算法没看明白)，并且设置 threshold 的值为它，否则 threshold 的值为 0 </p></li><li><p>hashmap的散列函数 </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">index = hash(key) &amp; (table.length()-<span class="number">1</span>)</span><br></pre></td></tr></table></figure><p>当 table.length() 的值是2的幂次方的时候，<code>table.length()-1</code>的值在bit位上则全是1，因此这里的index的值实际上等于hash值的末位数字。比如 index = 101101010  &amp; 111 = 010 = 2 ,这个key对应的数据应该放在数组的2位置。</p></li><li><p>put过程<br><img src="/2018/10/13/Java-hashmap/put%E6%96%B9%E6%B3%95%E6%89%A7%E8%A1%8C%E6%B5%81%E7%A8%8B%E5%9B%BE.png" alt="put方法执行流程图"></p></li><li><p>key-value<br>在hashmap 中以 Node 节点的形式存储，Node节点保存有next值，指向下一个节点。如果存在下一个节点，则说明这里有hash冲突，作为链表保存，否则仅仅是一个Node节点存储。其中，转化为红黑树的时候，红黑树的节点 TreeNode 是Node 的子类</p></li><li><p>扩容</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">final</span> Node&lt;K,V&gt;[] resize() &#123;</span><br><span class="line">    Node&lt;K,V&gt;[] oldTab = table;</span><br><span class="line">    <span class="keyword">int</span> oldCap = (oldTab == <span class="keyword">null</span>) ? <span class="number">0</span> : oldTab.length;    <span class="comment">//如果是刚刚初始化，这里oldTab是null</span></span><br><span class="line">    <span class="keyword">int</span> oldThr = threshold;</span><br><span class="line">    <span class="keyword">int</span> newCap, newThr = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">if</span> (oldCap &gt; <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="keyword">if</span> (oldCap &gt;= MAXIMUM_CAPACITY) &#123;</span><br><span class="line">            threshold = Integer.MAX_VALUE;</span><br><span class="line">            <span class="keyword">return</span> oldTab;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> ((newCap = oldCap &lt;&lt; <span class="number">1</span>) &lt; MAXIMUM_CAPACITY &amp;&amp;</span><br><span class="line">                 oldCap &gt;= DEFAULT_INITIAL_CAPACITY)</span><br><span class="line">            newThr = oldThr &lt;&lt; <span class="number">1</span>; <span class="comment">// double threshold ， 两倍</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span> (oldThr &gt; <span class="number">0</span>) <span class="comment">// initial capacity was placed in threshold</span></span><br><span class="line">        newCap = oldThr;   <span class="comment">// 对应于在构造函数中传入了初始化大小，那么tableSizeFor处理后的值就成了散列表数组的初始化大小</span></span><br><span class="line">    <span class="keyword">else</span> &#123;               <span class="comment">// zero initial threshold signifies using defaults</span></span><br><span class="line">        <span class="comment">// 在构造函数中如果没有传入初始化大小，这里oldThr是等于0的，采用默认值，默认是16</span></span><br><span class="line">        newCap = DEFAULT_INITIAL_CAPACITY;</span><br><span class="line">        newThr = (<span class="keyword">int</span>)(DEFAULT_LOAD_FACTOR * DEFAULT_INITIAL_CAPACITY);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (newThr == <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="keyword">float</span> ft = (<span class="keyword">float</span>)newCap * loadFactor;</span><br><span class="line">        newThr = (newCap &lt; MAXIMUM_CAPACITY &amp;&amp; ft &lt; (<span class="keyword">float</span>)MAXIMUM_CAPACITY ?</span><br><span class="line">                  (<span class="keyword">int</span>)ft : Integer.MAX_VALUE);</span><br><span class="line">    &#125;</span><br><span class="line">    threshold = newThr;</span><br><span class="line">    <span class="comment">//  前面确定了扩容后的参数，这里把原来的节点移到新的数组中去</span></span><br><span class="line">    <span class="meta">@SuppressWarnings(&#123;&quot;rawtypes&quot;,&quot;unchecked&quot;&#125;)</span></span><br><span class="line">        Node&lt;K,V&gt;[] newTab = (Node&lt;K,V&gt;[])<span class="keyword">new</span> Node[newCap];</span><br><span class="line">    table = newTab;</span><br><span class="line">    <span class="keyword">if</span> (oldTab != <span class="keyword">null</span>) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; oldCap; ++j) &#123;</span><br><span class="line">            Node&lt;K,V&gt; e;</span><br><span class="line">            <span class="keyword">if</span> ((e = oldTab[j]) != <span class="keyword">null</span>) &#123;</span><br><span class="line">                oldTab[j] = <span class="keyword">null</span>;</span><br><span class="line">                <span class="keyword">if</span> (e.next == <span class="keyword">null</span>)  <span class="comment">//如果在这个位置上没有冲突，则直接复制过去</span></span><br><span class="line">                    newTab[e.hash &amp; (newCap - <span class="number">1</span>)] = e;</span><br><span class="line">                <span class="keyword">else</span> <span class="keyword">if</span> (e <span class="keyword">instanceof</span> TreeNode)   <span class="comment">//如果这个位置上是红黑树，处理</span></span><br><span class="line">                    ((TreeNode&lt;K,V&gt;)e).split(<span class="keyword">this</span>, newTab, j, oldCap);</span><br><span class="line">                <span class="keyword">else</span> &#123; <span class="comment">// preserve order，如果这个位置是个长度大于1的链表</span></span><br><span class="line">                    Node&lt;K,V&gt; loHead = <span class="keyword">null</span>, loTail = <span class="keyword">null</span>;</span><br><span class="line">                    Node&lt;K,V&gt; hiHead = <span class="keyword">null</span>, hiTail = <span class="keyword">null</span>;</span><br><span class="line">                    Node&lt;K,V&gt; next;</span><br><span class="line">                    <span class="keyword">do</span> &#123;</span><br><span class="line">                        next = e.next;</span><br><span class="line">                        <span class="keyword">if</span> ((e.hash &amp; oldCap) == <span class="number">0</span>) &#123;  <span class="comment">//这句在下面有分析，是怎么拆分链表的</span></span><br><span class="line">                            <span class="keyword">if</span> (loTail == <span class="keyword">null</span>)</span><br><span class="line">                                loHead = e;</span><br><span class="line">                            <span class="keyword">else</span></span><br><span class="line">                                loTail.next = e;</span><br><span class="line">                            loTail = e;</span><br><span class="line">                        &#125;</span><br><span class="line">                        <span class="keyword">else</span> &#123;</span><br><span class="line">                            <span class="keyword">if</span> (hiTail == <span class="keyword">null</span>)</span><br><span class="line">                                hiHead = e;</span><br><span class="line">                            <span class="keyword">else</span></span><br><span class="line">                                hiTail.next = e;</span><br><span class="line">                            hiTail = e;</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125; <span class="keyword">while</span> ((e = next) != <span class="keyword">null</span>);</span><br><span class="line">                    <span class="keyword">if</span> (loTail != <span class="keyword">null</span>) &#123;</span><br><span class="line">                        loTail.next = <span class="keyword">null</span>;</span><br><span class="line">                        newTab[j] = loHead;</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="keyword">if</span> (hiTail != <span class="keyword">null</span>) &#123;</span><br><span class="line">                        hiTail.next = <span class="keyword">null</span>;</span><br><span class="line">                        newTab[j + oldCap] = hiHead;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> newTab;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>当需要扩容的时候，会调用 <code>resize()</code>函数。在扩容后，因为散列函数不变，因此  </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">index = hash(key) &amp; (table.length()-<span class="number">1</span>)</span><br></pre></td></tr></table></figure><p>仍然成立，但是此时，table的大小变成了原来的两倍，因此在散列的时候，后面的括号的值会多一位1，假如刚开始有：</p><p>index = 101101010  &amp; 111 = 010 = 2 ；</p><p>那么扩容后则变成了 ：</p><p>index = 101101010  &amp; 1111 = 1010 = 10</p><p>观察下可以知道，如果高1位（第四位，扩容后的最高位）的值为0，那么扩容后节点的位置不变，如果高1位的位置为1，那么扩容后节点的位置为index + table.length。而获取这个高1位的值的方法，则可以是  </p><p>hash(key) &amp; (table.length())</p><p>因为 table.length() 是2的幂次方，因此一定是 ..00100… ，相与运算之后刚好可以得到这个位的值是1还是0</p><p>在  <code>resize()</code> 函数中， 如果是0，则添加到 newTab[j] 位置的链表中去，如果是1，则添加到 newTab[j + oldCap] 的链表中去</p></li><li><p>重写key的equals和hashCode :<br>A和B对象equals方法返回true，hashCode方法返回值必然一样；<br>A和B对象hashCode不一样，那么equals方法必须返回false。<br>A和B对象hashCode一样，不能判定A equals B。</p></li></ol><h2 id="ConcurrentHashMap"><a href="#ConcurrentHashMap" class="headerlink" title="ConcurrentHashMap"></a>ConcurrentHashMap</h2><ol><li><p>一些参数</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//  0：默认值</span></span><br><span class="line"><span class="comment">//  -1：代表哈希表正在进行初始化</span></span><br><span class="line"><span class="comment">//  -N 表示有N-1个线程正在进行扩容操作                     </span></span><br><span class="line"><span class="comment">//  大于0：相当于 HashMap 中的 threshold，表示阈值                  </span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">transient</span> <span class="keyword">volatile</span> <span class="keyword">int</span> sizeCtl;</span><br><span class="line"></span><br><span class="line"><span class="comment">//表示散列表</span></span><br><span class="line"><span class="keyword">transient</span> <span class="keyword">volatile</span> Node&lt;K,V&gt;[] table;</span><br><span class="line"><span class="comment">//哈希表扩容的时候会用，扩容完成后会被重置为 null。</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">transient</span> <span class="keyword">volatile</span> Node&lt;K,V&gt;[] nextTable;</span><br><span class="line"></span><br><span class="line"><span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> MOVED     = -<span class="number">1</span>; <span class="comment">// hash值是-1，表示这是一个forwardNode节点  </span></span><br><span class="line"><span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> TREEBIN   = -<span class="number">2</span>; <span class="comment">// hash值是-2  表示这时一个TreeBin节点  </span></span><br></pre></td></tr></table></figure></li><li><p>构造函数，这里只选常用的</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 这里和hashmap有些不一样，初始化的大小是 initialCapacity*1.5+1，再向上取到2的n次方，</span></span><br><span class="line"><span class="comment">// hashmap是直接用 initialCapacity 向上取到2的n次方</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">ConcurrentHashMap</span><span class="params">(<span class="keyword">int</span> initialCapacity)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (initialCapacity &lt; <span class="number">0</span>)</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> IllegalArgumentException();</span><br><span class="line">    <span class="keyword">int</span> cap = ((initialCapacity &gt;= (MAXIMUM_CAPACITY &gt;&gt;&gt; <span class="number">1</span>)) ?</span><br><span class="line">               MAXIMUM_CAPACITY :</span><br><span class="line">               tableSizeFor(initialCapacity + (initialCapacity &gt;&gt;&gt; <span class="number">1</span>) + <span class="number">1</span>));</span><br><span class="line">    <span class="keyword">this</span>.sizeCtl = cap;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//不带参数甚至什么都不初始化</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">ConcurrentHashMap</span><span class="params">()</span> </span>&#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>put函数</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br></pre></td><td class="code"><pre><span class="line"> <span class="function"><span class="keyword">public</span> V <span class="title">put</span><span class="params">(K key, V value)</span> </span>&#123;</span><br><span class="line">     <span class="keyword">return</span> putVal(key, value, <span class="keyword">false</span>);</span><br><span class="line"> &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/** Implementation for put and putIfAbsent */</span></span><br><span class="line"><span class="function"><span class="keyword">final</span> V <span class="title">putVal</span><span class="params">(K key, V value, <span class="keyword">boolean</span> onlyIfAbsent)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (key == <span class="keyword">null</span> || value == <span class="keyword">null</span>) <span class="keyword">throw</span> <span class="keyword">new</span> NullPointerException();</span><br><span class="line">    <span class="keyword">int</span> hash = spread(key.hashCode());</span><br><span class="line">    <span class="keyword">int</span> binCount = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (Node&lt;K,V&gt;[] tab = table;;) &#123;</span><br><span class="line">        Node&lt;K,V&gt; f; <span class="keyword">int</span> n, i, fh;</span><br><span class="line">        <span class="keyword">if</span> (tab == <span class="keyword">null</span> || (n = tab.length) == <span class="number">0</span>)</span><br><span class="line">            <span class="comment">//initTable()的时候也需要考虑多个线程操作的情景，使用cas来保证线程同步</span></span><br><span class="line">            tab = initTable();</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> ((f = tabAt(tab, i = (n - <span class="number">1</span>) &amp; hash)) == <span class="keyword">null</span>) &#123; <span class="comment">//如果这个数组位置上还没有节点，cas插入</span></span><br><span class="line">            <span class="keyword">if</span> (casTabAt(tab, i, <span class="keyword">null</span>,</span><br><span class="line">                         <span class="keyword">new</span> Node&lt;K,V&gt;(hash, key, value, <span class="keyword">null</span>)))</span><br><span class="line">                <span class="keyword">break</span>;                   <span class="comment">// no lock when adding to empty bin</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> ((fh = f.hash) == MOVED)</span><br><span class="line">            <span class="comment">//  帮助数据迁移，假如此时正在扩容</span></span><br><span class="line">            tab = helpTransfer(tab, f);</span><br><span class="line">        <span class="keyword">else</span> &#123;</span><br><span class="line">            V oldVal = <span class="keyword">null</span>;</span><br><span class="line">            <span class="keyword">synchronized</span> (f) &#123;</span><br><span class="line">                <span class="keyword">if</span> (tabAt(tab, i) == f) &#123;</span><br><span class="line">                    <span class="keyword">if</span> (fh &gt;= <span class="number">0</span>) &#123;</span><br><span class="line">                        binCount = <span class="number">1</span>;</span><br><span class="line">                        <span class="keyword">for</span> (Node&lt;K,V&gt; e = f;; ++binCount) &#123;</span><br><span class="line">                            K ek;</span><br><span class="line">                            <span class="keyword">if</span> (e.hash == hash &amp;&amp;</span><br><span class="line">                                ((ek = e.key) == key ||</span><br><span class="line">                                 (ek != <span class="keyword">null</span> &amp;&amp; key.equals(ek)))) &#123;</span><br><span class="line">                                oldVal = e.val;</span><br><span class="line">                                <span class="keyword">if</span> (!onlyIfAbsent)</span><br><span class="line">                                    e.val = value;</span><br><span class="line">                                <span class="keyword">break</span>;</span><br><span class="line">                            &#125;</span><br><span class="line">                            Node&lt;K,V&gt; pred = e;</span><br><span class="line">                            <span class="keyword">if</span> ((e = e.next) == <span class="keyword">null</span>) &#123;</span><br><span class="line">                                pred.next = <span class="keyword">new</span> Node&lt;K,V&gt;(hash, key,</span><br><span class="line">                                                          value, <span class="keyword">null</span>);</span><br><span class="line">                                <span class="keyword">break</span>;</span><br><span class="line">                            &#125;</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="keyword">else</span> <span class="keyword">if</span> (f <span class="keyword">instanceof</span> TreeBin) &#123;</span><br><span class="line">                        Node&lt;K,V&gt; p;</span><br><span class="line">                        binCount = <span class="number">2</span>;</span><br><span class="line">                        <span class="keyword">if</span> ((p = ((TreeBin&lt;K,V&gt;)f).putTreeVal(hash, key,</span><br><span class="line">                                                              value)) != <span class="keyword">null</span>) &#123;</span><br><span class="line">                            oldVal = p.val;</span><br><span class="line">                            <span class="keyword">if</span> (!onlyIfAbsent)</span><br><span class="line">                                p.val = value;</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="keyword">else</span> <span class="keyword">if</span> (f <span class="keyword">instanceof</span> ReservationNode)</span><br><span class="line">                        <span class="keyword">throw</span> <span class="keyword">new</span> IllegalStateException(<span class="string">&quot;Recursive update&quot;</span>);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">// binCount != 0 表示插入到了节点到了链表或者红黑树中去了，返回之前的值</span></span><br><span class="line">            <span class="keyword">if</span> (binCount != <span class="number">0</span>) &#123;</span><br><span class="line">                <span class="keyword">if</span> (binCount &gt;= TREEIFY_THRESHOLD)</span><br><span class="line">                    treeifyBin(tab, i);</span><br><span class="line">                <span class="keyword">if</span> (oldVal != <span class="keyword">null</span>)</span><br><span class="line">                    <span class="keyword">return</span> oldVal;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    addCount(<span class="number">1L</span>, binCount);</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>从过程上看，和hashmap的区别在于，插入的时候，</p><ol><li>如果在数组对应的hash位置上没有元素，那么使用cas来插入而不是直接赋值，如果插入失败，会继续循环继续判断这个位置有没有别的线程已经插入了，直到插入成功为止。</li><li>如果对应的hash位置上已经有元素了，那么这里要么是单链表要么是红黑树，把头结点作为锁，再执行插入操作</li><li>hash的方法没变，但是对于hashcode,会先spread() :  spread(hash) &amp; (n-1)</li><li>因为有个for( ; ; )循环的存在，所以遇到节点是MOVED的时候，会先帮助进行数据迁移。</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">final</span> Node&lt;K,V&gt;[] helpTransfer(Node&lt;K,V&gt;[] tab, Node&lt;K,V&gt; f) &#123;</span><br><span class="line">    Node&lt;K,V&gt;[] nextTab; <span class="keyword">int</span> sc;</span><br><span class="line">    <span class="keyword">if</span> (tab != <span class="keyword">null</span> &amp;&amp; (f <span class="keyword">instanceof</span> ForwardingNode) &amp;&amp;</span><br><span class="line">        (nextTab = ((ForwardingNode&lt;K,V&gt;)f).nextTable) != <span class="keyword">null</span>) &#123;</span><br><span class="line">        <span class="comment">//返回一个 16 位长度的扩容校验标识</span></span><br><span class="line">        <span class="keyword">int</span> rs = resizeStamp(tab.length);</span><br><span class="line">        <span class="keyword">while</span> (nextTab == nextTable &amp;&amp; table == tab &amp;&amp;</span><br><span class="line">               (sc = sizeCtl) &lt; <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="comment">//sizeCtl 如果处于扩容状态的话</span></span><br><span class="line">            <span class="comment">//前 16 位是数据校验标识，后 16 位是当前正在扩容的线程总数</span></span><br><span class="line">            <span class="comment">//这里判断校验标识是否相等，如果校验符不等或者扩容操作已经完成了，直接退出循环，不用协助它们扩容了</span></span><br><span class="line">            <span class="keyword">if</span> ((sc &gt;&gt;&gt; RESIZE_STAMP_SHIFT) != rs || sc == rs + <span class="number">1</span> ||</span><br><span class="line">                sc == rs + MAX_RESIZERS || transferIndex &lt;= <span class="number">0</span>)</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="comment">//否则调用 transfer 帮助它们进行扩容</span></span><br><span class="line">            <span class="comment">//sc + 1 标识增加了一个线程进行扩容</span></span><br><span class="line">            <span class="keyword">if</span> (U.compareAndSwapInt(<span class="keyword">this</span>, SIZECTL, sc, sc + <span class="number">1</span>)) &#123;</span><br><span class="line">                transfer(tab, nextTab);</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> nextTab;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> table;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><a href="https://www.cnblogs.com/yangming1996/p/8031199.html">为并发而生的 ConcurrentHashMap</a></p></li><li><p>转移函数</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">void</span> <span class="title">transfer</span><span class="params">(Node&lt;K,V&gt;[] tab, Node&lt;K,V&gt;[] nextTab)</span> </span>&#123;</span><br><span class="line">       <span class="keyword">int</span> n = tab.length, stride;</span><br><span class="line">       <span class="keyword">if</span> ((stride = (NCPU &gt; <span class="number">1</span>) ? (n &gt;&gt;&gt; <span class="number">3</span>) / NCPU : n) &lt; MIN_TRANSFER_STRIDE)</span><br><span class="line">           stride = MIN_TRANSFER_STRIDE; <span class="comment">// 计算每个线程转移的数据的最小步长</span></span><br><span class="line">       <span class="keyword">if</span> (nextTab == <span class="keyword">null</span>) &#123;            <span class="comment">// initiating</span></span><br><span class="line">           <span class="keyword">try</span> &#123;</span><br><span class="line">               <span class="meta">@SuppressWarnings(&quot;unchecked&quot;)</span></span><br><span class="line">               Node&lt;K,V&gt;[] nt = (Node&lt;K,V&gt;[])<span class="keyword">new</span> Node&lt;?,?&gt;[n &lt;&lt; <span class="number">1</span>];</span><br><span class="line">               nextTab = nt;</span><br><span class="line">           &#125; <span class="keyword">catch</span> (Throwable ex) &#123;      <span class="comment">// try to cope with OOME</span></span><br><span class="line">               sizeCtl = Integer.MAX_VALUE;</span><br><span class="line">               <span class="keyword">return</span>;</span><br><span class="line">           &#125;</span><br><span class="line">           nextTable = nextTab;</span><br><span class="line">           transferIndex = n;</span><br><span class="line">       &#125;</span><br><span class="line">       <span class="keyword">int</span> nextn = nextTab.length;</span><br><span class="line">       ForwardingNode&lt;K,V&gt; fwd = <span class="keyword">new</span> ForwardingNode&lt;K,V&gt;(nextTab);</span><br><span class="line">       <span class="keyword">boolean</span> advance = <span class="keyword">true</span>;</span><br><span class="line">       <span class="keyword">boolean</span> finishing = <span class="keyword">false</span>; <span class="comment">// to ensure sweep before committing nextTab</span></span><br><span class="line">       <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>, bound = <span class="number">0</span>;;) &#123;  <span class="comment">//这里的for循环，下面会多次执行</span></span><br><span class="line">           Node&lt;K,V&gt; f; <span class="keyword">int</span> fh;</span><br><span class="line">           <span class="keyword">while</span> (advance) &#123;  </span><br><span class="line">               <span class="keyword">int</span> nextIndex, nextBound;</span><br><span class="line">               <span class="keyword">if</span> (--i &gt;= bound || finishing)</span><br><span class="line">                   advance = <span class="keyword">false</span>;</span><br><span class="line">               <span class="comment">// 这里transferIndex小于0表示数组迁移任务已经分配完了，不需要协助了</span></span><br><span class="line">               <span class="keyword">else</span> <span class="keyword">if</span> ((nextIndex = transferIndex) &lt;= <span class="number">0</span>) &#123;</span><br><span class="line">                   i = -<span class="number">1</span>;</span><br><span class="line">                   advance = <span class="keyword">false</span>;</span><br><span class="line">               &#125;</span><br><span class="line">               <span class="comment">//这里的else if 分支表示为线程分配任务，负责的区间在数组上的索引是（nextbound,nextIndex），第一次while循环的时候前面两个分支都不满足条件，进来这里分配，通过CAS更新transferIndex的值为前一个transferIndex-stride,更新成功后i也有了值，然后跳出了while循环，在下次for循环进来的时候会进入while的第一/二个分支</span></span><br><span class="line">               <span class="keyword">else</span> <span class="keyword">if</span> (U.compareAndSwapInt</span><br><span class="line">                        (<span class="keyword">this</span>, TRANSFERINDEX, nextIndex,</span><br><span class="line">                         nextBound = (nextIndex &gt; stride ?</span><br><span class="line">                                      nextIndex - stride : <span class="number">0</span>))) &#123;</span><br><span class="line">                   bound = nextBound;</span><br><span class="line">                   i = nextIndex - <span class="number">1</span>;</span><br><span class="line">                   advance = <span class="keyword">false</span>;</span><br><span class="line">               &#125;</span><br><span class="line">           &#125;</span><br><span class="line">          <span class="comment">//当前线程所有任务完成</span></span><br><span class="line">           <span class="keyword">if</span> (i &lt; <span class="number">0</span> || i &gt;= n || i + n &gt;= nextn) &#123;</span><br><span class="line">               <span class="keyword">int</span> sc;</span><br><span class="line">               <span class="comment">//结束了就更新相关的变量</span></span><br><span class="line">               <span class="keyword">if</span> (finishing) &#123;</span><br><span class="line">                   nextTable = <span class="keyword">null</span>;</span><br><span class="line">                   table = nextTab;</span><br><span class="line">                   sizeCtl = (n &lt;&lt; <span class="number">1</span>) - (n &gt;&gt;&gt; <span class="number">1</span>);</span><br><span class="line">                   <span class="keyword">return</span>;</span><br><span class="line">               &#125;</span><br><span class="line">               <span class="keyword">if</span> (U.compareAndSwapInt(<span class="keyword">this</span>, SIZECTL, sc = sizeCtl, sc - <span class="number">1</span>)) &#123;</span><br><span class="line">                   <span class="keyword">if</span> ((sc - <span class="number">2</span>) != resizeStamp(n) &lt;&lt; RESIZE_STAMP_SHIFT)</span><br><span class="line">                       <span class="keyword">return</span>;</span><br><span class="line">                   finishing = advance = <span class="keyword">true</span>;</span><br><span class="line">                   i = n; <span class="comment">// recheck before commit</span></span><br><span class="line">               &#125;</span><br><span class="line">           &#125;</span><br><span class="line">           <span class="comment">//如果散列表旧表这个位置为空，则把ForwardingNode赋值给这个位置</span></span><br><span class="line">           <span class="keyword">else</span> <span class="keyword">if</span> ((f = tabAt(tab, i)) == <span class="keyword">null</span>)</span><br><span class="line">               advance = casTabAt(tab, i, <span class="keyword">null</span>, fwd);</span><br><span class="line">           <span class="comment">//如果散列表旧表这个位置为ForwardingNode，表示已经处理过了</span></span><br><span class="line">           <span class="keyword">else</span> <span class="keyword">if</span> ((fh = f.hash) == MOVED)</span><br><span class="line">               advance = <span class="keyword">true</span>; <span class="comment">// already processed</span></span><br><span class="line">           <span class="keyword">else</span> &#123;</span><br><span class="line">               <span class="keyword">synchronized</span> (f) &#123;</span><br><span class="line">                   <span class="comment">//如果散列表旧表这个位置为链表节点，CAS的方式迁移，位置变化和hashmap差不多，最后会追加在散列表旧表里面设置ForwardingNode表示已经处理过了</span></span><br><span class="line">                   <span class="keyword">if</span> (tabAt(tab, i) == f) &#123;</span><br><span class="line">                       Node&lt;K,V&gt; ln, hn;</span><br><span class="line">                       <span class="keyword">if</span> (fh &gt;= <span class="number">0</span>) &#123;</span><br><span class="line">                           <span class="keyword">int</span> runBit = fh &amp; n;</span><br><span class="line">                           Node&lt;K,V&gt; lastRun = f;</span><br><span class="line">                           <span class="keyword">for</span> (Node&lt;K,V&gt; p = f.next; p != <span class="keyword">null</span>; p = p.next) &#123;</span><br><span class="line">                               <span class="keyword">int</span> b = p.hash &amp; n;</span><br><span class="line">                               <span class="keyword">if</span> (b != runBit) &#123;</span><br><span class="line">                                   runBit = b;</span><br><span class="line">                                   lastRun = p;</span><br><span class="line">                               &#125;</span><br><span class="line">                           &#125;</span><br><span class="line">                           <span class="keyword">if</span> (runBit == <span class="number">0</span>) &#123;</span><br><span class="line">                               ln = lastRun;</span><br><span class="line">                               hn = <span class="keyword">null</span>;</span><br><span class="line">                           &#125;</span><br><span class="line">                           <span class="keyword">else</span> &#123;</span><br><span class="line">                               hn = lastRun;</span><br><span class="line">                               ln = <span class="keyword">null</span>;</span><br><span class="line">                           &#125;</span><br><span class="line">                           <span class="keyword">for</span> (Node&lt;K,V&gt; p = f; p != lastRun; p = p.next) &#123;</span><br><span class="line">                               <span class="keyword">int</span> ph = p.hash; K pk = p.key; V pv = p.val;</span><br><span class="line">                               <span class="keyword">if</span> ((ph &amp; n) == <span class="number">0</span>)</span><br><span class="line">                                   ln = <span class="keyword">new</span> Node&lt;K,V&gt;(ph, pk, pv, ln);</span><br><span class="line">                               <span class="keyword">else</span></span><br><span class="line">                                   hn = <span class="keyword">new</span> Node&lt;K,V&gt;(ph, pk, pv, hn);</span><br><span class="line">                           &#125;</span><br><span class="line">                           setTabAt(nextTab, i, ln);</span><br><span class="line">                           setTabAt(nextTab, i + n, hn);</span><br><span class="line">                           setTabAt(tab, i, fwd);</span><br><span class="line">                           advance = <span class="keyword">true</span>;</span><br><span class="line">                       &#125;</span><br><span class="line">                       <span class="comment">//如果散列表旧表这个位置为红黑树，CAS的方式迁移，最后会追加在散列表旧表里面设置ForwardingNode表示已经处理过了</span></span><br><span class="line">                       <span class="keyword">else</span> <span class="keyword">if</span> (f <span class="keyword">instanceof</span> TreeBin) &#123;</span><br><span class="line">                           TreeBin&lt;K,V&gt; t = (TreeBin&lt;K,V&gt;)f;</span><br><span class="line">                           TreeNode&lt;K,V&gt; lo = <span class="keyword">null</span>, loTail = <span class="keyword">null</span>;</span><br><span class="line">                           TreeNode&lt;K,V&gt; hi = <span class="keyword">null</span>, hiTail = <span class="keyword">null</span>;</span><br><span class="line">                           <span class="keyword">int</span> lc = <span class="number">0</span>, hc = <span class="number">0</span>;</span><br><span class="line">                           <span class="keyword">for</span> (Node&lt;K,V&gt; e = t.first; e != <span class="keyword">null</span>; e = e.next) &#123;</span><br><span class="line">                               <span class="keyword">int</span> h = e.hash;</span><br><span class="line">                               TreeNode&lt;K,V&gt; p = <span class="keyword">new</span> TreeNode&lt;K,V&gt;</span><br><span class="line">                                   (h, e.key, e.val, <span class="keyword">null</span>, <span class="keyword">null</span>);</span><br><span class="line">                               <span class="keyword">if</span> ((h &amp; n) == <span class="number">0</span>) &#123;</span><br><span class="line">                                   <span class="keyword">if</span> ((p.prev = loTail) == <span class="keyword">null</span>)</span><br><span class="line">                                       lo = p;</span><br><span class="line">                                   <span class="keyword">else</span></span><br><span class="line">                                       loTail.next = p;</span><br><span class="line">                                   loTail = p;</span><br><span class="line">                                   ++lc;</span><br><span class="line">                               &#125;</span><br><span class="line">                               <span class="keyword">else</span> &#123;</span><br><span class="line">                                   <span class="keyword">if</span> ((p.prev = hiTail) == <span class="keyword">null</span>)</span><br><span class="line">                                       hi = p;</span><br><span class="line">                                   <span class="keyword">else</span></span><br><span class="line">                                       hiTail.next = p;</span><br><span class="line">                                   hiTail = p;</span><br><span class="line">                                   ++hc;</span><br><span class="line">                               &#125;</span><br><span class="line">                           &#125;</span><br><span class="line">                           ln = (lc &lt;= UNTREEIFY_THRESHOLD) ? untreeify(lo) :</span><br><span class="line">                               (hc != <span class="number">0</span>) ? <span class="keyword">new</span> TreeBin&lt;K,V&gt;(lo) : t;</span><br><span class="line">                           hn = (hc &lt;= UNTREEIFY_THRESHOLD) ? untreeify(hi) :</span><br><span class="line">                               (lc != <span class="number">0</span>) ? <span class="keyword">new</span> TreeBin&lt;K,V&gt;(hi) : t;</span><br><span class="line">                           setTabAt(nextTab, i, ln);</span><br><span class="line">                           setTabAt(nextTab, i + n, hn);</span><br><span class="line">                           setTabAt(tab, i, fwd);</span><br><span class="line">                           advance = <span class="keyword">true</span>;</span><br><span class="line">                       &#125;</span><br><span class="line">                   &#125;</span><br><span class="line">               &#125;</span><br><span class="line">           &#125;</span><br><span class="line">       &#125;</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><p>这里主要是两个无限循环导致分支的控制有点复杂，在迁移的过程中还是要对数组旧表的位置处的结点加锁。整个迁移过程不加锁的原因是，根据hash函数，旧表迁移到新表，旧表中位置为i的节点在新表中只可能有两个位置，i和i+n，只需要对这个节点加锁，保证迁移过程就行。A线程负责i节点，B线程负责j节点，C线程负责k节点，只要节点没有重叠，迁移就不会有多线程的问题。完成后会把旧表中这个位置设置为ForwardingNode，这样别的线程扫描到这个节点也会发现处理过了，跳过它。</p></li></ol>]]></content>
    
    
    <summary type="html">&lt;p&gt;java8的hashmap和concurrentHashmap&lt;/p&gt;</summary>
    
    
    
    <category term="Java" scheme="http://example.com/categories/Java/"/>
    
    
  </entry>
  
  <entry>
    <title>常见排序算法的实现</title>
    <link href="http://example.com/2018/10/08/%E5%B8%B8%E8%A7%81%E6%8E%92%E5%BA%8F%E7%AE%97%E6%B3%95%E7%9A%84%E5%AE%9E%E7%8E%B0/"/>
    <id>http://example.com/2018/10/08/%E5%B8%B8%E8%A7%81%E6%8E%92%E5%BA%8F%E7%AE%97%E6%B3%95%E7%9A%84%E5%AE%9E%E7%8E%B0/</id>
    <published>2018-10-08T06:58:31.000Z</published>
    <updated>2018-10-16T06:18:21.678Z</updated>
    
    <content type="html"><![CDATA[<h1 id="排序算法"><a href="#排序算法" class="headerlink" title="排序算法"></a>排序算法</h1><p>之前写过的脚本语言全都忘了，这里打算利用排序算法复习一下。。。。</p><a id="more"></a><h2 id="冒泡排序"><a href="#冒泡排序" class="headerlink" title="冒泡排序"></a>冒泡排序</h2><p><a href="https://en.wikipedia.org/wiki/Bubble_sort">冒泡排序(En)</a></p><p><a href="https://zh.wikipedia.org/wiki/%E5%86%92%E6%B3%A1%E6%8E%92%E5%BA%8F">冒泡排序(CH)</a></p><p>优化点：</p><ol><li>每趟排序会使一个数字到达到达它的最终位置，所以每趟冒泡的次数最大是<code>length-1-i</code>；</li><li>在一趟冒泡中如果没有发生位置交换，则认为已经是有序队列，不再进行冒泡；</li></ol><p>Java版本：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Main</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span>[] numbers = getIntArray();</span><br><span class="line">        <span class="comment">// bubberSort(numbers);</span></span><br><span class="line">        bubberSort2(numbers);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">int</span>[] getIntArray() &#123;</span><br><span class="line">        Random random = <span class="keyword">new</span> Random();</span><br><span class="line">        <span class="keyword">int</span> length = <span class="number">20</span>;</span><br><span class="line">        <span class="keyword">int</span>[] numbers = <span class="keyword">new</span> <span class="keyword">int</span>[length];</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; length; i++) &#123;</span><br><span class="line">            numbers[i] = random.nextInt(<span class="number">100</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> numbers;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">bubberSort</span><span class="params">(numbers)</span><span class="params">(<span class="keyword">int</span>[] numbers)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> length = numbers.length;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; length - <span class="number">1</span>; i++) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; length - <span class="number">1</span> - i; j++) &#123;</span><br><span class="line">                <span class="keyword">if</span> (numbers[j] &gt; numbers[j + <span class="number">1</span>]) &#123;</span><br><span class="line">                    swap(numbers, j, j+<span class="number">1</span>);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        printArray(numbers);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">bubberSort2</span><span class="params">(<span class="keyword">int</span>[] numbers)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> length = numbers.length;</span><br><span class="line">        <span class="keyword">boolean</span> changed = <span class="keyword">false</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; length - <span class="number">1</span>; i++) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; length - <span class="number">1</span> - i; j++) &#123;</span><br><span class="line">                <span class="keyword">if</span> (numbers[j] &gt; numbers[j + <span class="number">1</span>]) &#123;</span><br><span class="line">                    swap(numbers, j, j + <span class="number">1</span>);</span><br><span class="line">                    changed = <span class="keyword">true</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (!changed) &#123;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            changed = <span class="keyword">false</span> ;</span><br><span class="line">        &#125;</span><br><span class="line">        printArray(numbers);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">printArray</span><span class="params">(<span class="keyword">int</span>[] arr)</span> </span>&#123;</span><br><span class="line">        IntStream.of(arr).forEach(x -&gt; System.out.print(<span class="string">&quot;,&quot;</span> + x));</span><br><span class="line">        System.out.println();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">swap</span><span class="params">(<span class="keyword">int</span>[] data, <span class="keyword">int</span> i, <span class="keyword">int</span> j)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (i == j) &#123;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        data[i] = data[i] + data[j];</span><br><span class="line">        data[j] = data[i] - data[j];</span><br><span class="line">        data[i] = data[i] - data[j];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>javaScript:</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> numbers = [<span class="number">82</span>,<span class="number">37</span>,<span class="number">10</span>,<span class="number">69</span>,<span class="number">1</span>,<span class="number">92</span>,<span class="number">6</span>,<span class="number">13</span>,<span class="number">77</span>,<span class="number">33</span>,<span class="number">47</span>,<span class="number">12</span>,<span class="number">23</span>,<span class="number">82</span>,<span class="number">71</span>,<span class="number">57</span>,<span class="number">58</span>,<span class="number">51</span>,<span class="number">57</span>,<span class="number">75</span>];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">bubber_sort</span>(<span class="params">arr</span>)</span>&#123;</span><br><span class="line"><span class="keyword">if</span> (arr <span class="keyword">instanceof</span> <span class="built_in">Array</span>)&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">let</span> i = <span class="number">0</span> ;i&lt; arr.length-<span class="number">1</span>;i++)&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">let</span> j=<span class="number">0</span>;j&lt;arr.length-i-<span class="number">1</span>;j++)&#123;</span><br><span class="line"><span class="keyword">if</span>(arr[j]&gt;arr[j+<span class="number">1</span>])&#123;</span><br><span class="line">(<span class="function"><span class="keyword">function</span>(<span class="params">arr,x,y</span>)</span>&#123;</span><br><span class="line">arr[x] = arr[x] ^ arr[y] ;</span><br><span class="line">arr[y] = arr[x] ^ arr[y] ;</span><br><span class="line">arr[x] = arr[x] ^ arr[y] ;</span><br><span class="line">&#125;)(arr,j,j+<span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">console</span>.log(arr.join());</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">bubber_sort(numbers);</span><br></pre></td></tr></table></figure><p>c++:</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> GET_LEN(array, len)                     \</span></span><br><span class="line">    &#123;                                           \</span><br><span class="line">        len = <span class="keyword">sizeof</span>(<span class="built_in">array</span>) / <span class="keyword">sizeof</span>(<span class="built_in">array</span>[<span class="number">0</span>]); \</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">swap</span><span class="params">(<span class="keyword">int</span> arr[], <span class="keyword">int</span> x, <span class="keyword">int</span> y)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    arr[x] = arr[x] ^ arr[y];</span><br><span class="line">    arr[y] = arr[x] ^ arr[y];</span><br><span class="line">    arr[x] = arr[x] ^ arr[y];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">swap</span><span class="params">(<span class="keyword">int</span> *a ,<span class="keyword">int</span> *b)</span></span>&#123;</span><br><span class="line">    *a = *a^*b ;</span><br><span class="line">    *b = *a^*b ;</span><br><span class="line">    *a = *a^*b ;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">swap</span><span class="params">(<span class="keyword">int</span> &amp;a ,<span class="keyword">int</span> &amp;b)</span></span>&#123;</span><br><span class="line">    a = a^b ;</span><br><span class="line">    b = a^b ;</span><br><span class="line">    a = a^b ;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">bubber_sort</span><span class="params">(<span class="keyword">int</span> numbers[],<span class="keyword">int</span> length)</span></span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; length - <span class="number">1</span>; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; length - <span class="number">1</span> - i; j++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span> (numbers[j] &gt; numbers[j + <span class="number">1</span>])</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="comment">// swap(numbers, j, j + 1);</span></span><br><span class="line">                <span class="comment">// swap(&amp;numbers[j],&amp;numbers[j+1]);</span></span><br><span class="line">                <span class="comment">// swap(numbers[j],numbers[j+1]);</span></span><br><span class="line">                <span class="built_in">std</span>::swap(numbers[j],numbers[j+<span class="number">1</span>]);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; length; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; numbers[i] &lt;&lt; <span class="string">&quot;,&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> numbers[] = &#123;<span class="number">82</span>,<span class="number">37</span>,<span class="number">10</span>,<span class="number">69</span>,<span class="number">1</span>,<span class="number">92</span>,<span class="number">6</span>,<span class="number">13</span>,<span class="number">77</span>,<span class="number">33</span>,<span class="number">47</span>,<span class="number">12</span>,<span class="number">23</span>,<span class="number">82</span>,<span class="number">71</span>,<span class="number">57</span>,<span class="number">58</span>,<span class="number">51</span>,<span class="number">57</span>,<span class="number">75</span>&#125;;</span><br><span class="line">    <span class="keyword">int</span> length;</span><br><span class="line">    GET_LEN(numbers, length);</span><br><span class="line">    bubber_sort(numbers,length);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>python:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">numbers = [<span class="number">82</span>,<span class="number">37</span>,<span class="number">10</span>,<span class="number">69</span>,<span class="number">1</span>,<span class="number">92</span>,<span class="number">6</span>,<span class="number">13</span>,<span class="number">77</span>,<span class="number">33</span>,<span class="number">47</span>,<span class="number">12</span>,<span class="number">23</span>,<span class="number">82</span>,<span class="number">71</span>,<span class="number">57</span>,<span class="number">58</span>,<span class="number">51</span>,<span class="number">57</span>,<span class="number">75</span>];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">bubber_sort</span>(<span class="params">numbers</span>):</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(numbers)-<span class="number">1</span>):</span><br><span class="line"><span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(numbers)-<span class="number">1</span>-i):</span><br><span class="line"><span class="keyword">if</span> numbers[j] &gt; numbers[j+<span class="number">1</span>]:</span><br><span class="line">numbers[j],numbers[j+<span class="number">1</span>] = numbers[j+<span class="number">1</span>],numbers[j]</span><br><span class="line">print(numbers)</span><br><span class="line"></span><br><span class="line">bubber_sort(numbers)</span><br></pre></td></tr></table></figure><p>TypeScript(啊，好像和js一样，改一下解构赋值凑个数…):</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> numbers = [<span class="number">82</span>,<span class="number">37</span>,<span class="number">10</span>,<span class="number">69</span>,<span class="number">1</span>,<span class="number">92</span>,<span class="number">6</span>,<span class="number">13</span>,<span class="number">77</span>,<span class="number">33</span>,<span class="number">47</span>,<span class="number">12</span>,<span class="number">23</span>,<span class="number">82</span>,<span class="number">71</span>,<span class="number">57</span>,<span class="number">58</span>,<span class="number">51</span>,<span class="number">57</span>,<span class="number">75</span>];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">bubber_sort</span>(<span class="params">arr:<span class="built_in">number</span>[]</span>)</span>&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">let</span> i = <span class="number">0</span> ;i&lt; arr.length-<span class="number">1</span>;i++)&#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">let</span> j=<span class="number">0</span>;j&lt;arr.length-i-<span class="number">1</span>;j++)&#123;</span><br><span class="line">        <span class="keyword">if</span>(arr[j]&gt;arr[j+<span class="number">1</span>])&#123;</span><br><span class="line">                [arr[j],arr[j+<span class="number">1</span>]]=[arr[j+<span class="number">1</span>],arr[j]]</span><br><span class="line">       &#125;</span><br><span class="line">       &#125;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="built_in">console</span>.log(arr.join());</span><br><span class="line">&#125;</span><br><span class="line">bubber_sort(numbers);</span><br></pre></td></tr></table></figure><h2 id="选择排序"><a href="#选择排序" class="headerlink" title="选择排序"></a>选择排序</h2><p><a href="https://en.wikipedia.org/wiki/Selection_sort">选择排序(En)</a></p><p><a href="https://zh.wikipedia.org/wiki/%E9%80%89%E6%8B%A9%E6%8E%92%E5%BA%8F">选择排序(CH)</a></p><p>每一趟选出一个最小(最大)的放到最终位置。</p><p>Java：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Main</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span>[] numbers = getIntArray();</span><br><span class="line">        selectionSort(numbers);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">int</span>[] getIntArray() &#123;</span><br><span class="line">        Random random = <span class="keyword">new</span> Random();</span><br><span class="line">        <span class="keyword">int</span> length = <span class="number">20</span>;</span><br><span class="line">        <span class="keyword">int</span>[] numbers = <span class="keyword">new</span> <span class="keyword">int</span>[length];</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; length; i++) &#123;</span><br><span class="line">            numbers[i] = random.nextInt(<span class="number">100</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> numbers;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">printArray</span><span class="params">(<span class="keyword">int</span>[] arr)</span> </span>&#123;</span><br><span class="line">        IntStream.of(arr).forEach(x -&gt; System.out.print(<span class="string">&quot;,&quot;</span> + x));</span><br><span class="line">        System.out.println();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">swap</span><span class="params">(<span class="keyword">int</span>[] data, <span class="keyword">int</span> i, <span class="keyword">int</span> j)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (i == j) &#123;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        data[i] = data[i] + data[j];</span><br><span class="line">        data[j] = data[i] - data[j];</span><br><span class="line">        data[i] = data[i] - data[j];</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">selectionSort</span><span class="params">(<span class="keyword">int</span>[] arr)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> min;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; arr.length; i++) &#123;</span><br><span class="line">            min = i;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j = i; j &lt; arr.length; j++) &#123;</span><br><span class="line">                <span class="keyword">if</span> (arr[j] &lt; arr[min]) &#123;</span><br><span class="line">                    min = j;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span>(min!=i)&#123;</span><br><span class="line">                swap(arr,min,i);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        printArray(arr);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>JavaScript:</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> numbers = [<span class="number">82</span>,<span class="number">37</span>,<span class="number">10</span>,<span class="number">69</span>,<span class="number">1</span>,<span class="number">92</span>,<span class="number">6</span>,<span class="number">13</span>,<span class="number">77</span>,<span class="number">33</span>,<span class="number">47</span>,<span class="number">12</span>,<span class="number">23</span>,<span class="number">82</span>,<span class="number">71</span>,<span class="number">57</span>,<span class="number">58</span>,<span class="number">51</span>,<span class="number">57</span>,<span class="number">75</span>];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">selection_sort</span>(<span class="params">arr</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">let</span> min = <span class="number">0</span> ;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">let</span> i = <span class="number">0</span> ;i&lt; arr.length;i++)&#123;</span><br><span class="line">        min = i ;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">let</span> j=i;j&lt;arr.length;j++)&#123;</span><br><span class="line">            <span class="keyword">if</span>(arr[j]&lt;arr[min])&#123;</span><br><span class="line">                min = j ;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(min != i)&#123;</span><br><span class="line">            [arr[i],arr[min]]=[arr[min],arr[i]]</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">console</span>.log(arr.join());</span><br><span class="line">&#125;</span><br><span class="line">selection_sort(numbers)</span><br></pre></td></tr></table></figure><p>Python:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">numbers = [<span class="number">82</span>,<span class="number">37</span>,<span class="number">10</span>,<span class="number">69</span>,<span class="number">1</span>,<span class="number">92</span>,<span class="number">6</span>,<span class="number">13</span>,<span class="number">77</span>,<span class="number">33</span>,<span class="number">47</span>,<span class="number">12</span>,<span class="number">23</span>,<span class="number">82</span>,<span class="number">71</span>,<span class="number">57</span>,<span class="number">58</span>,<span class="number">51</span>,<span class="number">57</span>,<span class="number">75</span>];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">selection_sort</span>(<span class="params">numbers</span>):</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(numbers)):</span><br><span class="line"><span class="built_in">min</span>=i</span><br><span class="line"><span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(i,<span class="built_in">len</span>(numbers)):</span><br><span class="line"><span class="keyword">if</span> numbers[<span class="built_in">min</span>] &gt; numbers[j]:</span><br><span class="line"><span class="built_in">min</span>=j</span><br><span class="line"><span class="keyword">if</span> <span class="built_in">min</span> != i :</span><br><span class="line">numbers[i],numbers[<span class="built_in">min</span>] = numbers[<span class="built_in">min</span>],numbers[i]</span><br><span class="line">print(numbers)</span><br><span class="line"></span><br><span class="line">selection_sort(numbers)</span><br></pre></td></tr></table></figure><p>C++:</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> GET_LEN(array, len)                     \</span></span><br><span class="line">    &#123;                                           \</span><br><span class="line">        len = <span class="keyword">sizeof</span>(<span class="built_in">array</span>) / <span class="keyword">sizeof</span>(<span class="built_in">array</span>[<span class="number">0</span>]); \</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">swap</span><span class="params">(<span class="keyword">int</span> &amp;a ,<span class="keyword">int</span> &amp;b)</span></span>&#123;</span><br><span class="line">    a = a^b ;</span><br><span class="line">    b = a^b ;</span><br><span class="line">    a = a^b ;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">selection_sort</span><span class="params">(<span class="keyword">int</span> numbers[],<span class="keyword">int</span> length)</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> min = <span class="number">0</span> ;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; length ; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        min=i;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = i; j &lt; length ; j++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span> (numbers[min] &gt; numbers[j])</span><br><span class="line">            &#123;</span><br><span class="line">                 min = j ;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(min != i)&#123;</span><br><span class="line">            swap(numbers[min],numbers[i]);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; length; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; numbers[i] &lt;&lt; <span class="string">&quot;,&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> numbers[] = &#123;<span class="number">82</span>,<span class="number">37</span>,<span class="number">10</span>,<span class="number">69</span>,<span class="number">1</span>,<span class="number">92</span>,<span class="number">6</span>,<span class="number">13</span>,<span class="number">77</span>,<span class="number">33</span>,<span class="number">47</span>,<span class="number">12</span>,<span class="number">23</span>,<span class="number">82</span>,<span class="number">71</span>,<span class="number">57</span>,<span class="number">58</span>,<span class="number">51</span>,<span class="number">57</span>,<span class="number">75</span>&#125;;</span><br><span class="line">    <span class="keyword">int</span> length;</span><br><span class="line">    GET_LEN(numbers, length);</span><br><span class="line">    selection_sort(numbers,length);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="插入排序"><a href="#插入排序" class="headerlink" title="插入排序"></a>插入排序</h2><p><a href="https://en.wikipedia.org/wiki/Insertion_sort">插入排序(En)</a></p><p><a href="https://zh.wikipedia.org/wiki/%E6%8F%92%E5%85%A5%E6%8E%92%E5%BA%8F">插入排序(CH)</a></p><p>Java</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Main</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span>[] numbers = getIntArray();</span><br><span class="line">        insertionSort(numbers);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">int</span>[] getIntArray() &#123;</span><br><span class="line">        Random random = <span class="keyword">new</span> Random();</span><br><span class="line">        <span class="keyword">int</span> length = <span class="number">20</span>;</span><br><span class="line">        <span class="keyword">int</span>[] numbers = <span class="keyword">new</span> <span class="keyword">int</span>[length];</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; length; i++) &#123;</span><br><span class="line">            numbers[i] = random.nextInt(<span class="number">100</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> numbers;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">printArray</span><span class="params">(<span class="keyword">int</span>[] arr)</span> </span>&#123;</span><br><span class="line">        IntStream.of(arr).forEach(x -&gt; System.out.print(<span class="string">&quot;,&quot;</span> + x));</span><br><span class="line">        System.out.println();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">swap</span><span class="params">(<span class="keyword">int</span>[] data, <span class="keyword">int</span> i, <span class="keyword">int</span> j)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (i == j) &#123;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        data[i] = data[i] + data[j];</span><br><span class="line">        data[j] = data[i] - data[j];</span><br><span class="line">        data[i] = data[i] - data[j];</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">insertionSort</span><span class="params">(<span class="keyword">int</span>[] arr)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; arr.length; i++) &#123;</span><br><span class="line">            <span class="keyword">int</span> insertIndex = i ;</span><br><span class="line">            <span class="keyword">int</span> temp = arr[i];</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j = i; j &gt; <span class="number">0</span>; j--) &#123;</span><br><span class="line">                <span class="keyword">if</span> (temp &lt; arr[j - <span class="number">1</span>]) &#123;</span><br><span class="line">                    arr[j] = arr[j - <span class="number">1</span>];</span><br><span class="line">                    insertIndex = j - <span class="number">1</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            arr[insertIndex] = temp;</span><br><span class="line">        &#125;</span><br><span class="line">        printArray(arr);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>JavaScript:</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> numbers = [<span class="number">82</span>,<span class="number">37</span>,<span class="number">10</span>,<span class="number">69</span>,<span class="number">1</span>,<span class="number">92</span>,<span class="number">6</span>,<span class="number">13</span>,<span class="number">77</span>,<span class="number">33</span>,<span class="number">47</span>,<span class="number">12</span>,<span class="number">23</span>,<span class="number">82</span>,<span class="number">71</span>,<span class="number">57</span>,<span class="number">58</span>,<span class="number">51</span>,<span class="number">57</span>,<span class="number">75</span>];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">insertion_sort</span>(<span class="params">arr</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">let</span> i = <span class="number">0</span> ;i&lt; arr.length;i++)&#123;</span><br><span class="line">        <span class="keyword">let</span> index = j ;</span><br><span class="line">        <span class="keyword">let</span> key = arr[i] ;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">let</span> j=i;j&gt;<span class="number">0</span>;j--)&#123;</span><br><span class="line">            <span class="keyword">if</span>(key&lt;arr[j-<span class="number">1</span>])&#123;</span><br><span class="line">                arr[j] = arr[j-<span class="number">1</span>] ;</span><br><span class="line">                index = j-<span class="number">1</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        arr[index] = key ;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">console</span>.log(arr.join());</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">insertion_sort(numbers)</span><br></pre></td></tr></table></figure><p>python:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">numbers = [<span class="number">82</span>,<span class="number">37</span>,<span class="number">10</span>,<span class="number">69</span>,<span class="number">1</span>,<span class="number">92</span>,<span class="number">6</span>,<span class="number">13</span>,<span class="number">77</span>,<span class="number">33</span>,<span class="number">47</span>,<span class="number">12</span>,<span class="number">23</span>,<span class="number">82</span>,<span class="number">71</span>,<span class="number">57</span>,<span class="number">58</span>,<span class="number">51</span>,<span class="number">57</span>,<span class="number">75</span>];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">insertion_sort</span>(<span class="params">numbers</span>):</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(numbers)):</span><br><span class="line">key = numbers[i]</span><br><span class="line">index = i</span><br><span class="line"><span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(i,<span class="number">0</span>,-<span class="number">1</span>):</span><br><span class="line"><span class="keyword">if</span> key &lt; numbers[j-<span class="number">1</span>]:</span><br><span class="line">numbers[j] = numbers[j-<span class="number">1</span>]</span><br><span class="line">index = j-<span class="number">1</span></span><br><span class="line">numbers[index] = key</span><br><span class="line">print(numbers)</span><br><span class="line"></span><br><span class="line">insertion_sort(numbers)</span><br></pre></td></tr></table></figure><p>C++</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> GET_LEN(array, len)                     \</span></span><br><span class="line">    &#123;                                           \</span><br><span class="line">        len = <span class="keyword">sizeof</span>(<span class="built_in">array</span>) / <span class="keyword">sizeof</span>(<span class="built_in">array</span>[<span class="number">0</span>]); \</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">insertion_sort</span><span class="params">(<span class="keyword">int</span> numbers[],<span class="keyword">int</span> length)</span></span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; length ; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">int</span> index=i;</span><br><span class="line">        <span class="keyword">int</span> key = numbers[i];</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = i; j &gt; <span class="number">0</span> ; j--)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span> (key &lt; numbers[j<span class="number">-1</span>])</span><br><span class="line">            &#123;</span><br><span class="line">                numbers[j] = numbers[j<span class="number">-1</span>] ;</span><br><span class="line">                index= j<span class="number">-1</span> ;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        numbers[index]= key ;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; length; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; numbers[i] &lt;&lt; <span class="string">&quot;,&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> numbers[] = &#123;<span class="number">82</span>,<span class="number">37</span>,<span class="number">10</span>,<span class="number">69</span>,<span class="number">1</span>,<span class="number">92</span>,<span class="number">6</span>,<span class="number">13</span>,<span class="number">77</span>,<span class="number">33</span>,<span class="number">47</span>,<span class="number">12</span>,<span class="number">23</span>,<span class="number">82</span>,<span class="number">71</span>,<span class="number">57</span>,<span class="number">58</span>,<span class="number">51</span>,<span class="number">57</span>,<span class="number">75</span>&#125;;</span><br><span class="line">    <span class="keyword">int</span> length;</span><br><span class="line">    GET_LEN(numbers, length);</span><br><span class="line">    insertion_sort(numbers,length);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="快速排序"><a href="#快速排序" class="headerlink" title="快速排序"></a>快速排序</h2><p><a href="https://en.wikipedia.org/wiki/Quicksort">快速排序(En)</a></p><p><a href="https://zh.wikipedia.org/wiki/%E5%BF%AB%E9%80%9F%E6%8E%92%E5%BA%8F">快速排序(CH)</a></p><p>快速排序需要注意的是，不要太过于看重左右节点交换的过程，每一趟排序只是为了分成左右两个子段。比如可以不用左右交换，直接从头到尾遍历，遇到比key小的值就放到key的左边，这样子也可以得到结果</p><p>Java:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Main</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span>[] numbers = getIntArray();</span><br><span class="line">        quickSort(numbers);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">int</span>[] getIntArray() &#123;</span><br><span class="line">        Random random = <span class="keyword">new</span> Random();</span><br><span class="line">        <span class="keyword">int</span> length = <span class="number">20</span>;</span><br><span class="line">        <span class="keyword">int</span>[] numbers = <span class="keyword">new</span> <span class="keyword">int</span>[length];</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; length; i++) &#123;</span><br><span class="line">            numbers[i] = random.nextInt(<span class="number">100</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> numbers;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">printArray</span><span class="params">(<span class="keyword">int</span>[] arr)</span> </span>&#123;</span><br><span class="line">        IntStream.of(arr).forEach(x -&gt; System.out.print(<span class="string">&quot;,&quot;</span> + x));</span><br><span class="line">        System.out.println();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">quickSort</span><span class="params">(<span class="keyword">int</span>[] arr)</span> </span>&#123;</span><br><span class="line">        quicksortInternal(arr, <span class="number">0</span>, arr.length - <span class="number">1</span>);</span><br><span class="line">        printArray(arr);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">quicksortInternal</span><span class="params">(<span class="keyword">int</span>[] arr, <span class="keyword">int</span> start, <span class="keyword">int</span> end)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (start &gt;= end) &#123;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">int</span> index = quicksortPartion(arr, start, end);</span><br><span class="line">        quicksortInternal(arr, start, index - <span class="number">1</span>);</span><br><span class="line">        quicksortInternal(arr, index + <span class="number">1</span>, end);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">quicksortPartion</span><span class="params">(<span class="keyword">int</span>[] arr, <span class="keyword">int</span> start, <span class="keyword">int</span> end)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> pivot = arr[start];</span><br><span class="line">        <span class="keyword">while</span> (start &lt; end) &#123;</span><br><span class="line">            <span class="keyword">while</span> (arr[end] &gt;= pivot &amp;&amp; start != end) &#123;</span><br><span class="line">                end--;</span><br><span class="line">            &#125;</span><br><span class="line">            arr[start] = arr[end];</span><br><span class="line">            <span class="keyword">while</span> (arr[start] &lt;= pivot &amp;&amp; start != end) &#123;</span><br><span class="line">                start++;</span><br><span class="line">            &#125;</span><br><span class="line">            arr[end] = arr[start];</span><br><span class="line">        &#125;</span><br><span class="line">        arr[start] = pivot;</span><br><span class="line">        <span class="keyword">return</span> start;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 这里也可以模仿下面的js方法写</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">quickSort2</span><span class="params">(<span class="keyword">int</span>[] numbers)</span></span>&#123;</span><br><span class="line">        List&lt;Integer&gt; arr = Arrays.stream(numbers).boxed().collect(Collectors.toList());</span><br><span class="line">        List&lt;Integer&gt; list = <span class="keyword">new</span> ArrayList&lt;&gt;(arr.size());</span><br><span class="line">        quickSortInternal2(arr,list);</span><br><span class="line">        System.out.println(list.toString());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">quickSortInternal2</span><span class="params">(List&lt;Integer&gt; arr,List&lt;Integer&gt; result)</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(arr.size() == <span class="number">0</span>)&#123;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(arr.size() == <span class="number">1</span>)&#123;</span><br><span class="line">            result.add(arr.get(<span class="number">0</span>));</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        quickSortInternal2(arr.stream().filter(x -&gt; x &lt; arr.get(<span class="number">0</span>)).collect(Collectors.toList()),result);</span><br><span class="line">        result.addAll(arr.stream().filter(x -&gt; x.equals(arr.get(<span class="number">0</span>))).collect(Collectors.toList()));</span><br><span class="line">        quickSortInternal2(arr.stream().filter(x -&gt; x &gt; arr.get(<span class="number">0</span>)).collect(Collectors.toList()),result);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>JavaScript:</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> numbers = [<span class="number">82</span>,<span class="number">37</span>,<span class="number">10</span>,<span class="number">69</span>,<span class="number">1</span>,<span class="number">92</span>,<span class="number">6</span>,<span class="number">13</span>,<span class="number">77</span>,<span class="number">33</span>,<span class="number">47</span>,<span class="number">12</span>,<span class="number">23</span>,<span class="number">82</span>,<span class="number">71</span>,<span class="number">57</span>,<span class="number">58</span>,<span class="number">51</span>,<span class="number">57</span>,<span class="number">75</span>];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">quick_sort</span>(<span class="params">arr</span>)</span>&#123;</span><br><span class="line">    quick_sort_internal(arr,<span class="number">0</span>,arr.length-<span class="number">1</span>);</span><br><span class="line">    <span class="built_in">console</span>.log(arr.join());</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">quick_sort_internal</span>(<span class="params">arr,lo,hi</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(lo &gt;= hi)&#123;</span><br><span class="line">       <span class="keyword">return</span> ;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">let</span> index = (<span class="function"><span class="keyword">function</span>(<span class="params">arr,lo,hi</span>)</span>&#123;</span><br><span class="line">        <span class="keyword">let</span> pivot = arr[lo];</span><br><span class="line">        <span class="keyword">while</span>(lo &lt; hi)&#123;</span><br><span class="line">            <span class="keyword">while</span>(arr[hi] &gt;= pivot &amp;&amp; lo &lt; hi )&#123;</span><br><span class="line">                hi--;</span><br><span class="line">            &#125;</span><br><span class="line">            arr[lo] = arr[hi]</span><br><span class="line">            <span class="keyword">while</span>(arr[lo] &lt;= pivot &amp;&amp; lo &lt; hi)&#123;</span><br><span class="line">                lo++;</span><br><span class="line">            &#125;</span><br><span class="line">            arr[hi] = arr[lo];</span><br><span class="line">        &#125;</span><br><span class="line">        arr[lo] = pivot;</span><br><span class="line">        <span class="keyword">return</span> lo;</span><br><span class="line">    &#125;)(arr,lo,hi)</span><br><span class="line">    quick_sort_internal(arr,lo,index-<span class="number">1</span>);</span><br><span class="line">    quick_sort_internal(arr,index+<span class="number">1</span>,hi);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">quick_sort(numbers)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//第二种方法。。。</span></span><br><span class="line"><span class="keyword">const</span> qsort = <span class="function"><span class="params">xs</span> =&gt;</span> xs.length===<span class="number">0</span>?xs: [</span><br><span class="line">    ...qsort(xs.filter(<span class="function"><span class="params">x</span>=&gt;</span>x&lt;xs[<span class="number">0</span>])),</span><br><span class="line">    ...xs.filter(<span class="function"><span class="params">x</span>=&gt;</span>x===xs[<span class="number">0</span>]),</span><br><span class="line">    ...qsort(xs.filter(<span class="function"><span class="params">x</span>=&gt;</span>x&gt;xs[<span class="number">0</span>]))</span><br><span class="line">]</span><br><span class="line">qsort([...numbers])</span><br></pre></td></tr></table></figure><p>Python:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line">numbers = [<span class="number">82</span>,<span class="number">37</span>,<span class="number">10</span>,<span class="number">69</span>,<span class="number">1</span>,<span class="number">92</span>,<span class="number">6</span>,<span class="number">13</span>,<span class="number">77</span>,<span class="number">33</span>,<span class="number">47</span>,<span class="number">12</span>,<span class="number">23</span>,<span class="number">82</span>,<span class="number">71</span>,<span class="number">57</span>,<span class="number">58</span>,<span class="number">51</span>,<span class="number">57</span>,<span class="number">75</span>];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">quick_sort</span>(<span class="params">numbers</span>):</span></span><br><span class="line">quick_sort_internal(numbers,<span class="number">0</span>,<span class="built_in">len</span>(numbers)-<span class="number">1</span>)</span><br><span class="line">print(numbers)</span><br><span class="line">    </span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">quick_sort_internal</span>(<span class="params">numbers,lo,hi</span>):</span></span><br><span class="line">    <span class="keyword">if</span> lo &gt;= hi :</span><br><span class="line">        <span class="keyword">return</span> </span><br><span class="line">    index = quick_sort_partition(numbers,lo,hi)</span><br><span class="line">    print(<span class="string">&#x27;index =&#x27;</span> + <span class="built_in">str</span>(index) )</span><br><span class="line">    quick_sort_internal(numbers,lo,index-<span class="number">1</span>)</span><br><span class="line">    quick_sort_internal(numbers,index+<span class="number">1</span>,hi)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">quick_sort_partition</span>(<span class="params">numbers,lo,hi</span>):</span></span><br><span class="line">    pivot = numbers[lo]</span><br><span class="line">    <span class="keyword">while</span> lo&lt;hi:</span><br><span class="line">        <span class="keyword">while</span> numbers[hi] &gt;= pivot <span class="keyword">and</span> lo &lt; hi :</span><br><span class="line">            hi=hi-<span class="number">1</span></span><br><span class="line">        numbers[lo]=numbers[hi]</span><br><span class="line">        <span class="keyword">while</span> numbers[lo] &lt;= pivot <span class="keyword">and</span> lo &lt; hi :</span><br><span class="line">            lo=lo+<span class="number">1</span></span><br><span class="line">        numbers[hi] = numbers[lo]</span><br><span class="line">    numbers[lo] = pivot</span><br><span class="line">    <span class="keyword">return</span> lo</span><br><span class="line"></span><br><span class="line">quick_sort(numbers[:])</span><br><span class="line"></span><br><span class="line"><span class="comment">## 这里也可以模仿上面的js方法写</span></span><br></pre></td></tr></table></figure><p>C++:</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> GET_LEN(array, len)                     \</span></span><br><span class="line">    &#123;                                           \</span><br><span class="line">        len = <span class="keyword">sizeof</span>(<span class="built_in">array</span>) / <span class="keyword">sizeof</span>(<span class="built_in">array</span>[<span class="number">0</span>]); \</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">quick_sort_partition</span><span class="params">(<span class="keyword">int</span> numbers[] ,<span class="keyword">int</span> lo,<span class="keyword">int</span> hi)</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> pivot = numbers[lo];</span><br><span class="line">    <span class="keyword">while</span>( lo &lt; hi)&#123;</span><br><span class="line">        <span class="keyword">while</span>( numbers[hi] &gt;= pivot &amp;&amp; lo &lt; hi)&#123;</span><br><span class="line">            hi--;</span><br><span class="line">        &#125;</span><br><span class="line">        numbers[lo] = numbers[hi];</span><br><span class="line">        <span class="keyword">while</span>( numbers[lo] &lt;= pivot &amp;&amp; lo &lt; hi)&#123;</span><br><span class="line">            lo++;</span><br><span class="line">        &#125;</span><br><span class="line">        numbers[hi] = numbers[lo];</span><br><span class="line">    &#125;</span><br><span class="line">    numbers[lo] = pivot ;</span><br><span class="line">    <span class="keyword">return</span> lo ;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">quick_sort_internal</span><span class="params">(<span class="keyword">int</span> numbers[],<span class="keyword">int</span> lo,<span class="keyword">int</span> hi)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(lo &gt;= hi)&#123;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">int</span> index = quick_sort_partition(numbers,lo,hi);</span><br><span class="line">    quick_sort_internal(numbers,lo,index<span class="number">-1</span>);</span><br><span class="line">    quick_sort_internal(numbers,index+<span class="number">1</span>,hi);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">quick_sort</span><span class="params">(<span class="keyword">int</span> numbers[],<span class="keyword">int</span> length)</span></span>&#123;</span><br><span class="line">    quick_sort_internal(numbers,<span class="number">0</span>,length<span class="number">-1</span>);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; length; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; numbers[i] &lt;&lt; <span class="string">&quot;,&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> numbers[] = &#123;<span class="number">82</span>,<span class="number">37</span>,<span class="number">10</span>,<span class="number">69</span>,<span class="number">1</span>,<span class="number">92</span>,<span class="number">6</span>,<span class="number">13</span>,<span class="number">77</span>,<span class="number">33</span>,<span class="number">47</span>,<span class="number">12</span>,<span class="number">23</span>,<span class="number">82</span>,<span class="number">71</span>,<span class="number">57</span>,<span class="number">58</span>,<span class="number">51</span>,<span class="number">57</span>,<span class="number">75</span>&#125;;</span><br><span class="line">    <span class="keyword">int</span> length;</span><br><span class="line">    GET_LEN(numbers, length);</span><br><span class="line">    quick_sort(numbers,length);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="希尔排序"><a href="#希尔排序" class="headerlink" title="希尔排序"></a>希尔排序</h2><p>Java:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure><p>JavaScript:</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure><p>Python</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure><p>C++:</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure><h2 id="归并排序"><a href="#归并排序" class="headerlink" title="归并排序"></a>归并排序</h2><p><a href="https://en.wikipedia.org/wiki/Merge_sort">归并排序(En)</a></p><p><a href="https://zh.wikipedia.org/wiki/%E5%BD%92%E5%B9%B6%E6%8E%92%E5%BA%8F">归并排序(CH)</a></p><p>Java:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Main</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span>[] numbers = getIntArray();</span><br><span class="line">        quickSort(numbers);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">int</span>[] getIntArray() &#123;</span><br><span class="line">        Random random = <span class="keyword">new</span> Random();</span><br><span class="line">        <span class="keyword">int</span> length = <span class="number">20</span>;</span><br><span class="line">        <span class="keyword">int</span>[] numbers = <span class="keyword">new</span> <span class="keyword">int</span>[length];</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; length; i++) &#123;</span><br><span class="line">            numbers[i] = random.nextInt(<span class="number">100</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> numbers;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">printArray</span><span class="params">(<span class="keyword">int</span>[] arr)</span> </span>&#123;</span><br><span class="line">        IntStream.of(arr).forEach(x -&gt; System.out.print(<span class="string">&quot;,&quot;</span> + x));</span><br><span class="line">        System.out.println();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">mergeSort</span><span class="params">(<span class="keyword">int</span>[] numbers)</span> </span>&#123;</span><br><span class="line">        mergeSortInternal(numbers, <span class="number">0</span>, numbers.length - <span class="number">1</span>);</span><br><span class="line">        printArray(numbers);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">mergeSortInternal</span><span class="params">(<span class="keyword">int</span>[] numbers, <span class="keyword">int</span> start, <span class="keyword">int</span> end)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (start &gt;= end) &#123;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">int</span> middle = (start + end) / <span class="number">2</span>;</span><br><span class="line">        mergeSortInternal(numbers, start, middle);</span><br><span class="line">        mergeSortInternal(numbers, middle+<span class="number">1</span>, end);</span><br><span class="line"><span class="comment">//        mergeLeftAndRight(numbers, start, end);</span></span><br><span class="line">        merge(numbers, start,middle, end);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//正经写法。。</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">merge</span><span class="params">(<span class="keyword">int</span>[] numbers, <span class="keyword">int</span> left, <span class="keyword">int</span> middle, <span class="keyword">int</span> right)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> lp = left;</span><br><span class="line">        <span class="keyword">int</span> rp = middle + <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">int</span> tp = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">int</span>[] temp = <span class="keyword">new</span> <span class="keyword">int</span>[right - left + <span class="number">1</span>];</span><br><span class="line"></span><br><span class="line">        <span class="keyword">while</span> (lp &lt;= middle &amp;&amp; rp &lt;= right) &#123;</span><br><span class="line">            <span class="keyword">if</span> (numbers[lp] &lt;= numbers[rp]) &#123;</span><br><span class="line">                temp[tp++] = numbers[lp++];</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                temp[tp++] = numbers[rp++];</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">while</span> (lp &lt;= middle) &#123;</span><br><span class="line">            temp[tp++] = numbers[lp++];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">while</span> (rp &lt;= right) &#123;</span><br><span class="line">            temp[tp++] = numbers[rp++];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; temp.length; i++) &#123;</span><br><span class="line">            numbers[i + left] = temp[i];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//使用插入排序来合并左右数组，效率会损失</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">mergeLeftAndRight</span><span class="params">(<span class="keyword">int</span>[] numbers, <span class="keyword">int</span> start, <span class="keyword">int</span> end)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = start + <span class="number">1</span>; i &lt; end + <span class="number">1</span>; i++) &#123;</span><br><span class="line">            <span class="keyword">int</span> insertIndex = i;</span><br><span class="line">            <span class="keyword">int</span> temp = numbers[i];</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j = i; j &gt; start; j--) &#123;</span><br><span class="line">                <span class="keyword">if</span> (temp &lt; numbers[j - <span class="number">1</span>]) &#123;</span><br><span class="line">                    numbers[j] = numbers[j - <span class="number">1</span>];</span><br><span class="line">                    insertIndex = j - <span class="number">1</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            numbers[insertIndex] = temp;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>JavaScript:</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> numbers = [<span class="number">82</span>,<span class="number">37</span>,<span class="number">10</span>,<span class="number">69</span>,<span class="number">1</span>,<span class="number">92</span>,<span class="number">6</span>,<span class="number">13</span>,<span class="number">77</span>,<span class="number">33</span>,<span class="number">47</span>,<span class="number">12</span>,<span class="number">23</span>,<span class="number">82</span>,<span class="number">71</span>,<span class="number">57</span>,<span class="number">58</span>,<span class="number">51</span>,<span class="number">57</span>,<span class="number">75</span>];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">merge_sort</span>(<span class="params">numbers</span>)</span>&#123;</span><br><span class="line">    merge_sort_internal(numbers,<span class="number">0</span>,numbers.length-<span class="number">1</span>);</span><br><span class="line">    <span class="built_in">console</span>.log(numbers.join());</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">merge_sort_internal</span>(<span class="params">numbers,left,right</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(left &gt;= right)&#123;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">let</span> middle = <span class="built_in">Math</span>.floor((left+right)/<span class="number">2</span>);</span><br><span class="line">    merge_sort_internal(numbers,left,middle);</span><br><span class="line">    merge_sort_internal(numbers,middle+<span class="number">1</span>,right);</span><br><span class="line">    (<span class="function"><span class="keyword">function</span>(<span class="params">numbers,l,m,r</span>)</span>&#123;</span><br><span class="line">        <span class="keyword">let</span> lp = l ;</span><br><span class="line">        <span class="keyword">let</span> rp = m+<span class="number">1</span> ;</span><br><span class="line">        <span class="keyword">let</span> temp = [];</span><br><span class="line">        <span class="keyword">while</span> (lp &lt;= m &amp;&amp; rp &lt;= r) &#123;</span><br><span class="line">            <span class="keyword">if</span> (numbers[lp] &lt;= numbers[rp]) &#123;</span><br><span class="line">                temp.push(numbers[lp++]);</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                temp.push(numbers[rp++]);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">while</span> (lp &lt;= m) &#123;</span><br><span class="line">            temp.push(numbers[lp++]);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">while</span> (rp &lt;= r) &#123;</span><br><span class="line">            temp.push(numbers[rp++]);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; temp.length; i++) &#123;</span><br><span class="line">            numbers[i + l] = temp[i];</span><br><span class="line">        &#125; </span><br><span class="line">    &#125;)(numbers,left,middle,right);</span><br><span class="line">&#125;</span><br><span class="line">merge_sort(numbers)</span><br></pre></td></tr></table></figure><p>Python</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line">numbers = [<span class="number">82</span>,<span class="number">37</span>,<span class="number">10</span>,<span class="number">69</span>,<span class="number">1</span>,<span class="number">92</span>,<span class="number">6</span>,<span class="number">13</span>,<span class="number">77</span>,<span class="number">33</span>,<span class="number">47</span>,<span class="number">12</span>,<span class="number">23</span>,<span class="number">82</span>,<span class="number">71</span>,<span class="number">57</span>,<span class="number">58</span>,<span class="number">51</span>,<span class="number">57</span>,<span class="number">75</span>];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">merge_sort</span>(<span class="params">numbers</span>):</span></span><br><span class="line">merge_sort_internal(numbers,<span class="number">0</span>,<span class="built_in">len</span>(numbers)-<span class="number">1</span>)</span><br><span class="line">print(numbers)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">merge_sort_internal</span>(<span class="params">nums,left,right</span>):</span></span><br><span class="line">    <span class="keyword">if</span> left&gt;=right :</span><br><span class="line">        <span class="keyword">return</span></span><br><span class="line">    middle = <span class="built_in">int</span>((left+right)/<span class="number">2</span>)</span><br><span class="line">    merge_sort_internal(nums,left,middle)</span><br><span class="line">    merge_sort_internal(nums,middle+<span class="number">1</span>,right)</span><br><span class="line">    merge_left_and_right(nums,left,middle,right)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">merge_left_and_right</span>(<span class="params">numbers,l,m,r</span>):</span></span><br><span class="line">    lp = l</span><br><span class="line">    rp = m+<span class="number">1</span></span><br><span class="line">    temp = []</span><br><span class="line">    <span class="keyword">while</span> lp &lt;=m <span class="keyword">and</span> rp &lt;=r:</span><br><span class="line">        <span class="keyword">if</span> numbers[lp] &lt;= numbers[rp] :</span><br><span class="line">            temp.append(numbers[lp]);</span><br><span class="line">            lp = lp+<span class="number">1</span></span><br><span class="line">        <span class="keyword">else</span> :</span><br><span class="line">            temp.append(numbers[rp])</span><br><span class="line">            rp = rp +<span class="number">1</span> </span><br><span class="line">    <span class="keyword">while</span> lp &lt;= m :</span><br><span class="line">        temp.append(numbers[lp])</span><br><span class="line">        lp = lp+<span class="number">1</span></span><br><span class="line">    <span class="keyword">while</span> rp &lt;= r :</span><br><span class="line">        temp.append(numbers[rp])</span><br><span class="line">        rp = rp+<span class="number">1</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(temp)) :</span><br><span class="line">        numbers[i + l] = temp[i]</span><br><span class="line"></span><br><span class="line">merge_sort(numbers[:])</span><br></pre></td></tr></table></figure><p>C++:</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> GET_LEN(array, len)                     \</span></span><br><span class="line">    &#123;                                           \</span><br><span class="line">        len = <span class="keyword">sizeof</span>(<span class="built_in">array</span>) / <span class="keyword">sizeof</span>(<span class="built_in">array</span>[<span class="number">0</span>]); \</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">merge_sort_merge</span><span class="params">(<span class="keyword">int</span> numbers[] ,<span class="keyword">int</span> left,<span class="keyword">int</span> middle,<span class="keyword">int</span> right)</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> lp = left;</span><br><span class="line">    <span class="keyword">int</span> rp = middle + <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">int</span> tp = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">int</span> * temp  = <span class="keyword">new</span> <span class="keyword">int</span>[right - left + <span class="number">1</span>];</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> (lp &lt;= middle &amp;&amp; rp &lt;= right) &#123;</span><br><span class="line">temp[tp++] = numbers[lp] &lt;= numbers[rp] ? numbers[lp++]:numbers[rp++];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">while</span> (lp &lt;= middle) &#123;</span><br><span class="line">        temp[tp++] = numbers[lp++];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">while</span> (rp &lt;= right) &#123;</span><br><span class="line">        temp[tp++] = numbers[rp++];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; right - left + <span class="number">1</span>; i++) &#123;</span><br><span class="line">        numbers[i + left] = temp[i];</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">delete</span>[] temp;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">merge_sort_internal</span><span class="params">(<span class="keyword">int</span> numbers[],<span class="keyword">int</span> left,<span class="keyword">int</span> right)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(left &gt;= right)&#123;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">int</span> middle = (left+right)/<span class="number">2</span>;</span><br><span class="line">    merge_sort_internal(numbers,left,middle);</span><br><span class="line">    merge_sort_internal(numbers,middle+<span class="number">1</span>,right);</span><br><span class="line">    merge_sort_merge(numbers,left,middle,right);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">merge_sort</span><span class="params">(<span class="keyword">int</span> numbers[],<span class="keyword">int</span> length)</span></span>&#123;</span><br><span class="line">    merge_sort_internal(numbers,<span class="number">0</span>,length<span class="number">-1</span>);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; length; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; numbers[i] &lt;&lt; <span class="string">&quot;,&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> numbers[] = &#123;<span class="number">82</span>,<span class="number">37</span>,<span class="number">10</span>,<span class="number">69</span>,<span class="number">1</span>,<span class="number">92</span>,<span class="number">6</span>,<span class="number">13</span>,<span class="number">77</span>,<span class="number">33</span>,<span class="number">47</span>,<span class="number">12</span>,<span class="number">23</span>,<span class="number">82</span>,<span class="number">71</span>,<span class="number">57</span>,<span class="number">58</span>,<span class="number">51</span>,<span class="number">57</span>,<span class="number">75</span>&#125;;</span><br><span class="line">    <span class="keyword">int</span> length;</span><br><span class="line">    GET_LEN(numbers, length);</span><br><span class="line">    merge_sort(numbers,length);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="堆排序"><a href="#堆排序" class="headerlink" title="堆排序"></a>堆排序</h2><p><a href="https://en.wikipedia.org/wiki/Heapsort">堆排序(En)</a></p><p><a href="https://zh.wikipedia.org/wiki/%E5%A0%86%E6%8E%92%E5%BA%8F">堆排序(CH)</a></p><p>堆分为大根堆和小根堆。</p><p>堆排序则是分为几个步骤：</p><ol><li><p>建堆</p><p>建堆有两种方式，一种是对数据从0开始执行插入操作，每次插入后调整。</p><p>一种是直接从 len/2 处向0处开始调整，大多数排序都是以这种方式建堆。</p></li><li><p>交换根节点和最末节点，然后对len-1的数据重新建堆，用大根堆的时候根节点最大，此时此最大值会在最末节点位置处。</p></li><li><p>重复第二步，直到建堆的数据数量等于1。</p></li></ol><p>Java:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Main</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span>[] numbers = getIntArray();</span><br><span class="line">        heapSort(numbers);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">int</span>[] getIntArray() &#123;</span><br><span class="line">        Random random = <span class="keyword">new</span> Random();</span><br><span class="line">        <span class="keyword">int</span> length = <span class="number">20</span>;</span><br><span class="line">        <span class="keyword">int</span>[] numbers = <span class="keyword">new</span> <span class="keyword">int</span>[length];</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; length; i++) &#123;</span><br><span class="line">            numbers[i] = random.nextInt(<span class="number">100</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> numbers;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">printArray</span><span class="params">(<span class="keyword">int</span>[] arr)</span> </span>&#123;</span><br><span class="line">        IntStream.of(arr).forEach(x -&gt; System.out.print(<span class="string">&quot;,&quot;</span> + x));</span><br><span class="line">        System.out.println();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">swap</span><span class="params">(<span class="keyword">int</span>[] data, <span class="keyword">int</span> i, <span class="keyword">int</span> j)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (i == j) &#123;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        data[i] = data[i] + data[j];</span><br><span class="line">        data[j] = data[i] - data[j];</span><br><span class="line">        data[i] = data[i] - data[j];</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">     <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">heapSort</span><span class="params">(<span class="keyword">int</span>[] arr)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> end = arr.length - <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">do</span> &#123;</span><br><span class="line">            buildMaxHeap(arr, end);</span><br><span class="line">            swap(arr, <span class="number">0</span>, end);</span><br><span class="line">            end--;</span><br><span class="line">        &#125; <span class="keyword">while</span> (end &gt; <span class="number">0</span>);</span><br><span class="line">        printArray(arr);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">buildMaxHeap</span><span class="params">(<span class="keyword">int</span>[] arr, <span class="keyword">int</span> end)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = end / <span class="number">2</span>; i &gt;= <span class="number">0</span>; i--) &#123;</span><br><span class="line">            HeapAdjust(arr, end, i);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">HeapAdjust</span><span class="params">(<span class="keyword">int</span>[] arr, <span class="keyword">int</span> end, <span class="keyword">int</span> adjustNode)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> left = <span class="number">2</span> * adjustNode + <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">int</span> right = <span class="number">2</span> * adjustNode + <span class="number">2</span>;</span><br><span class="line">        <span class="keyword">int</span> maxPosition = adjustNode;</span><br><span class="line">        <span class="keyword">if</span> (left &gt; end) &#123;</span><br><span class="line">            <span class="comment">//没有子节点</span></span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (right &gt; end) &#123;</span><br><span class="line">            <span class="comment">//只有一个左子节点</span></span><br><span class="line">            <span class="keyword">if</span> (arr[left] &gt; arr[adjustNode]) &#123;</span><br><span class="line">                swap(arr, left, adjustNode);</span><br><span class="line">                maxPosition = left;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">int</span> bigger = arr[left] &lt; arr[right] ? right : left;</span><br><span class="line">            <span class="keyword">if</span> (arr[adjustNode] &lt; arr[bigger]) &#123;</span><br><span class="line">                swap(arr, adjustNode, bigger);</span><br><span class="line">                maxPosition = bigger;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (maxPosition != adjustNode) &#123;  <span class="comment">//说明这个节点没有调整，最终一定会到叶子节点或者无须调整而停止递归</span></span><br><span class="line">            HeapAdjust(arr, end, maxPosition);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>JavaScript:</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> numbers = [<span class="number">82</span>,<span class="number">37</span>,<span class="number">10</span>,<span class="number">69</span>,<span class="number">1</span>,<span class="number">92</span>,<span class="number">6</span>,<span class="number">13</span>,<span class="number">77</span>,<span class="number">33</span>,<span class="number">47</span>,<span class="number">12</span>,<span class="number">23</span>,<span class="number">82</span>,<span class="number">71</span>,<span class="number">57</span>,<span class="number">58</span>,<span class="number">51</span>,<span class="number">57</span>,<span class="number">75</span>];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">heap_sort</span>(<span class="params">numbers</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">let</span> end = numbers.length - <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">do</span> &#123;</span><br><span class="line">        build_max_heap(numbers, end);</span><br><span class="line">        [numbers[<span class="number">0</span>],numbers[end]] =  [numbers[end],numbers[<span class="number">0</span>]] ;</span><br><span class="line">        end--;</span><br><span class="line">    &#125; <span class="keyword">while</span> (end &gt; <span class="number">0</span>);</span><br><span class="line">    <span class="built_in">console</span>.log(numbers.join());</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">build_max_heap</span>(<span class="params">arr,end</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="built_in">Math</span>.floor(end / <span class="number">2</span>); i &gt;= <span class="number">0</span>; i--) &#123;</span><br><span class="line">        heap_adjust(arr, end, i);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">heap_adjust</span>(<span class="params">arr, end, adjust_node</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">let</span> left = <span class="number">2</span> * adjust_node + <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">let</span> right = <span class="number">2</span> * adjust_node + <span class="number">2</span>;</span><br><span class="line">    <span class="keyword">let</span> maxPosition = adjust_node;</span><br><span class="line">    <span class="keyword">if</span> (left &gt; end) &#123;</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (right &gt; end) &#123;</span><br><span class="line">        <span class="keyword">if</span> (arr[left] &gt; arr[adjust_node]) &#123;</span><br><span class="line">            [arr[left],arr[adjust_node]] =  [arr[adjust_node],arr[left]] ;</span><br><span class="line">            maxPosition = left;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">let</span> bigger = arr[left] &lt; arr[right]?right:left;</span><br><span class="line">        <span class="keyword">if</span> (arr[adjust_node] &lt; arr[bigger]) &#123;</span><br><span class="line">            [arr[bigger],arr[adjust_node]] =  [arr[adjust_node],arr[bigger]] ;</span><br><span class="line">            maxPosition = bigger;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (maxPosition != adjust_node) &#123;  </span><br><span class="line">        heap_adjust(arr, end, maxPosition);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">heap_sort([...numbers])</span><br></pre></td></tr></table></figure><p>Python</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line">numbers = [<span class="number">82</span>,<span class="number">37</span>,<span class="number">10</span>,<span class="number">69</span>,<span class="number">1</span>,<span class="number">92</span>,<span class="number">6</span>,<span class="number">13</span>,<span class="number">77</span>,<span class="number">33</span>,<span class="number">47</span>,<span class="number">12</span>,<span class="number">23</span>,<span class="number">82</span>,<span class="number">71</span>,<span class="number">57</span>,<span class="number">58</span>,<span class="number">51</span>,<span class="number">57</span>,<span class="number">75</span>]</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">heap_sort</span>(<span class="params">numbers</span>):</span></span><br><span class="line">    end = <span class="built_in">len</span>(numbers) - <span class="number">1</span></span><br><span class="line">    <span class="keyword">while</span> <span class="literal">True</span> :</span><br><span class="line">        build_max_heap(numbers, end)</span><br><span class="line">        numbers[<span class="number">0</span>],numbers[end] =  numbers[end],numbers[<span class="number">0</span>] </span><br><span class="line">        end = end -<span class="number">1</span> </span><br><span class="line">        <span class="keyword">if</span> end &lt; <span class="number">0</span> :</span><br><span class="line">            <span class="keyword">break</span> </span><br><span class="line">    print(numbers)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">build_max_heap</span>(<span class="params">arr,end</span>) :</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">int</span>(end / <span class="number">2</span>),-<span class="number">1</span>,-<span class="number">1</span>):</span><br><span class="line">        heap_adjust(arr, end, i)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">heap_adjust</span>(<span class="params">arr, end, adjust_node</span>) :</span></span><br><span class="line">    left = <span class="number">2</span> * adjust_node + <span class="number">1</span></span><br><span class="line">    right = <span class="number">2</span> * adjust_node + <span class="number">2</span></span><br><span class="line">    maxPosition = adjust_node</span><br><span class="line">    <span class="keyword">if</span> left &gt; end :</span><br><span class="line">        <span class="keyword">pass</span></span><br><span class="line">    <span class="keyword">elif</span> right &gt; end :</span><br><span class="line">        <span class="keyword">if</span> arr[left] &gt; arr[adjust_node] :</span><br><span class="line">            arr[left],arr[adjust_node] =  arr[adjust_node],arr[left] </span><br><span class="line">            maxPosition = left</span><br><span class="line">    <span class="keyword">else</span> :</span><br><span class="line">        bigger = right <span class="keyword">if</span> arr[left] &lt; arr[right] <span class="keyword">else</span> left;</span><br><span class="line">        <span class="keyword">if</span> arr[adjust_node] &lt; arr[bigger] :</span><br><span class="line">            arr[bigger],arr[adjust_node] = arr[adjust_node],arr[bigger]</span><br><span class="line">            maxPosition = bigger</span><br><span class="line">    <span class="keyword">if</span> maxPosition != adjust_node :  </span><br><span class="line">        heap_adjust(arr, end, maxPosition)</span><br><span class="line"></span><br><span class="line">heap_sort(numbers[:])</span><br></pre></td></tr></table></figure><p>C++:</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> GET_LEN(array, len)                     \</span></span><br><span class="line">    &#123;                                           \</span><br><span class="line">        len = <span class="keyword">sizeof</span>(<span class="built_in">array</span>) / <span class="keyword">sizeof</span>(<span class="built_in">array</span>[<span class="number">0</span>]); \</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">swap</span><span class="params">(<span class="keyword">int</span> &amp;a ,<span class="keyword">int</span> &amp;b)</span></span>&#123;</span><br><span class="line">    a = a^b ;</span><br><span class="line">    b = a^b ;</span><br><span class="line">    a = a^b ;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">heap_adjust</span><span class="params">(<span class="keyword">int</span> arr[] ,<span class="keyword">int</span> end,<span class="keyword">int</span> adjust_node)</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> left = <span class="number">2</span> * adjust_node + <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">int</span> right = <span class="number">2</span> * adjust_node + <span class="number">2</span>;</span><br><span class="line">    <span class="keyword">int</span> maxPosition = adjust_node;</span><br><span class="line">    <span class="keyword">if</span> (left &gt; end) &#123;</span><br><span class="line">        <span class="comment">//没有子节点</span></span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (right &gt; end) &#123;</span><br><span class="line">        <span class="comment">//只有一个左子节点</span></span><br><span class="line">        <span class="keyword">if</span> (arr[left] &gt; arr[adjust_node]) &#123;</span><br><span class="line">            swap(arr[left], arr[adjust_node]);</span><br><span class="line">            maxPosition = left;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">int</span> bigger = arr[left] &lt; arr[right] ? right : left;</span><br><span class="line">        <span class="keyword">if</span> (arr[adjust_node] &lt; arr[bigger]) &#123;</span><br><span class="line">            swap(arr[adjust_node], arr[bigger]);</span><br><span class="line">            maxPosition = bigger;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (maxPosition != adjust_node) &#123;  </span><br><span class="line">        heap_adjust(arr, end, maxPosition);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">build_max_heap</span><span class="params">(<span class="keyword">int</span> numbers[],<span class="keyword">int</span> end)</span></span>&#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = end/<span class="number">2</span> ; i&gt;=<span class="number">0</span>; i--)&#123;</span><br><span class="line">        heap_adjust(numbers,end,i);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">heap_sort</span><span class="params">(<span class="keyword">int</span> numbers[],<span class="keyword">int</span> length)</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> end = length<span class="number">-1</span>;</span><br><span class="line">    <span class="keyword">do</span>&#123;</span><br><span class="line">        build_max_heap(numbers,end);</span><br><span class="line">        swap(numbers[<span class="number">0</span>],numbers[end]);</span><br><span class="line">        end--;</span><br><span class="line">    &#125;<span class="keyword">while</span>(end&gt;<span class="number">0</span>);</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; length; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; numbers[i] &lt;&lt; <span class="string">&quot;,&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> numbers[] = &#123;<span class="number">82</span>,<span class="number">37</span>,<span class="number">10</span>,<span class="number">69</span>,<span class="number">1</span>,<span class="number">92</span>,<span class="number">6</span>,<span class="number">13</span>,<span class="number">77</span>,<span class="number">33</span>,<span class="number">47</span>,<span class="number">12</span>,<span class="number">23</span>,<span class="number">82</span>,<span class="number">71</span>,<span class="number">57</span>,<span class="number">58</span>,<span class="number">51</span>,<span class="number">57</span>,<span class="number">75</span>&#125;;</span><br><span class="line">    <span class="keyword">int</span> length;</span><br><span class="line">    GET_LEN(numbers, length);</span><br><span class="line">    heap_sort(numbers,length);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>写的时候发现好多基本的语法都全忘光了。。<br>c++的交换，发现用异或来交换可能会导致问题，<br>比如我想象的过程是</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">arr[<span class="number">0</span>] = <span class="number">1</span> ;</span><br><span class="line">swap(arr[<span class="number">0</span>],arr[<span class="number">0</span>]) ;</span><br><span class="line"></span><br><span class="line">a = <span class="number">1</span>, b=<span class="number">1</span></span><br><span class="line"></span><br><span class="line">a = a ^ b = <span class="number">0</span></span><br><span class="line">b = a ^ b = <span class="number">0</span> ^ <span class="number">1</span> = <span class="number">1</span></span><br><span class="line">a = a ^ b = <span class="number">0</span> ^ <span class="number">1</span> = <span class="number">1</span></span><br></pre></td></tr></table></figure><p>结果实际执行的是</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">a = <span class="number">1</span>, b=a</span><br><span class="line"></span><br><span class="line">a = a ^ a = <span class="number">0</span></span><br><span class="line">b = a ^ a = <span class="number">0</span> </span><br><span class="line">a = a ^ a = <span class="number">0</span> </span><br><span class="line"></span><br></pre></td></tr></table></figure><p>另外js和python的版本基本都是直接复制的java的逻辑，没有用上它们特色的函数式编程等方式，比如js版本的快排，虽然它要了更多空间，但是js的那种实现明显更‘地道’.</p>]]></content>
    
    
    <summary type="html">&lt;h1 id=&quot;排序算法&quot;&gt;&lt;a href=&quot;#排序算法&quot; class=&quot;headerlink&quot; title=&quot;排序算法&quot;&gt;&lt;/a&gt;排序算法&lt;/h1&gt;&lt;p&gt;之前写过的脚本语言全都忘了，这里打算利用排序算法复习一下。。。。&lt;/p&gt;</summary>
    
    
    
    <category term="数据结构和算法" scheme="http://example.com/categories/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%92%8C%E7%AE%97%E6%B3%95/"/>
    
    
  </entry>
  
  <entry>
    <title>Android控件-RecyclerView3-缓存</title>
    <link href="http://example.com/2018/09/17/Android%E6%8E%A7%E4%BB%B6-RecyclerView3-%E7%BC%93%E5%AD%98/"/>
    <id>http://example.com/2018/09/17/Android%E6%8E%A7%E4%BB%B6-RecyclerView3-%E7%BC%93%E5%AD%98/</id>
    <published>2018-09-17T03:01:38.000Z</published>
    <updated>2018-11-05T14:15:38.261Z</updated>
    
    <content type="html"><![CDATA[<p>RecyclerView的缓存其实更多的是概念性的东西，新增了种类繁多的flag，和listview相比，区分了createViewHolder和bindViewHolder步骤，带来了部分性能上的提升。<a id="more"></a></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Recycler 用来管理 scrapped 或者 detached item views 并且把它们用于重用。</span></span><br><span class="line"><span class="comment">// scrapped view 是指依然 attach 到 RecyclerView 但是已经被标记为 remove 或者reuse 的view，这类view可以被重新绑定和使用</span></span><br><span class="line"><span class="comment">//通常 Recycler 会被 LayoutManager 用来获取view, 这些view代表adapter中一个特定位置或者ID所对应的的数据。如果将要被重用的//view 被认为是 &quot;dirty&quot; 的，此时会要求adapter重新绑定数据和view，否则这个view可以直接被LayoutManager重用。</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">final</span> <span class="class"><span class="keyword">class</span> <span class="title">Recycler</span> </span>&#123;</span><br><span class="line">    <span class="keyword">final</span> ArrayList&lt;ViewHolder&gt; mAttachedScrap = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">    ArrayList&lt;ViewHolder&gt; mChangedScrap = <span class="keyword">null</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">final</span> ArrayList&lt;ViewHolder&gt; mCachedViews = <span class="keyword">new</span> ArrayList&lt;ViewHolder&gt;();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> List&lt;ViewHolder&gt;</span><br><span class="line">            mUnmodifiableAttachedScrap = Collections.unmodifiableList(mAttachedScrap);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> mRequestedCacheMax = DEFAULT_CACHE_SIZE;</span><br><span class="line">    <span class="keyword">int</span> mViewCacheMax = DEFAULT_CACHE_SIZE;</span><br><span class="line"></span><br><span class="line">    RecycledViewPool mRecyclerPool;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> ViewCacheExtension mViewCacheExtension;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> DEFAULT_CACHE_SIZE = <span class="number">2</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>ViewHolder定义了一些flag状态，这些状态是RecyclerView缓存的核心内容 ：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">         * This ViewHolder has been bound to a position; mPosition, mItemId and mItemViewType</span></span><br><span class="line"><span class="comment">         * are all valid.</span></span><br><span class="line"><span class="comment">         ViewHolder 已经绑定到了一个位置，它的数据，mPosition，mItemId和 mItemViewType 都是有效的</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> FLAG_BOUND = <span class="number">1</span> &lt;&lt; <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * The data this ViewHolder&#x27;s view reflects is stale and needs to be rebound</span></span><br><span class="line"><span class="comment">         * by the adapter. mPosition and mItemId are consistent.</span></span><br><span class="line"><span class="comment">         ViewHolder 的view 对应的数据需要更新和重新绑定，mPosition和mItemId没变</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> FLAG_UPDATE = <span class="number">1</span> &lt;&lt; <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * This ViewHolder&#x27;s data is invalid. The identity implied by mPosition and mItemId</span></span><br><span class="line"><span class="comment">         * are not to be trusted and may no longer match the item view type.</span></span><br><span class="line"><span class="comment">         * This ViewHolder must be fully rebound to different data.</span></span><br><span class="line"><span class="comment">         ViewHolder 的数据完全无效，mPosition，mItemId，mItemViewType 都变了，必须重新完全绑定到一个不同的数据</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> FLAG_INVALID = <span class="number">1</span> &lt;&lt; <span class="number">2</span>;</span><br><span class="line"></span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * This ViewHolder points at data that represents an item previously removed from the</span></span><br><span class="line"><span class="comment">         * data set. Its view may still be used for things like outgoing animations.</span></span><br><span class="line"><span class="comment">         ViewHolder 的view 对应的数据被移除了，这个view可能仍然会被用在动画中</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> FLAG_REMOVED = <span class="number">1</span> &lt;&lt; <span class="number">3</span>;</span><br><span class="line"></span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * This ViewHolder should not be recycled. This flag is set via setIsRecyclable()</span></span><br><span class="line"><span class="comment">         * and is intended to keep views around during animations.</span></span><br><span class="line"><span class="comment">         ViewHolder 不应该被回收，用于在动画期间使用</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> FLAG_NOT_RECYCLABLE = <span class="number">1</span> &lt;&lt; <span class="number">4</span>;</span><br><span class="line"></span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * This ViewHolder is returned from scrap which means we are expecting an addView call</span></span><br><span class="line"><span class="comment">         * for this itemView. When returned from scrap, ViewHolder stays in the scrap list until</span></span><br><span class="line"><span class="comment">         * the end of the layout pass and then recycled by RecyclerView if it is not added back to</span></span><br><span class="line"><span class="comment">         * the RecyclerView.</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> FLAG_RETURNED_FROM_SCRAP = <span class="number">1</span> &lt;&lt; <span class="number">5</span>;</span><br><span class="line"></span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * This ViewHolder is fully managed by the LayoutManager. We do not scrap, recycle or remove</span></span><br><span class="line"><span class="comment">         * it unless LayoutManager is replaced.</span></span><br><span class="line"><span class="comment">         * It is still fully visible to the LayoutManager.</span></span><br><span class="line"><span class="comment">         ViewHolder 完全被 LayoutManager 控制，Recycler 不处理它</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> FLAG_IGNORE = <span class="number">1</span> &lt;&lt; <span class="number">7</span>;</span><br><span class="line"></span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * When the View is detached form the parent, we set this flag so that we can take correct</span></span><br><span class="line"><span class="comment">         * action when we need to remove it or add it back.</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> FLAG_TMP_DETACHED = <span class="number">1</span> &lt;&lt; <span class="number">8</span>;</span><br><span class="line"></span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * Set when we can no longer determine the adapter position of this ViewHolder until it is</span></span><br><span class="line"><span class="comment">         * rebound to a new position. It is different than FLAG_INVALID because FLAG_INVALID is</span></span><br><span class="line"><span class="comment">         * set even when the type does not match. Also, FLAG_ADAPTER_POSITION_UNKNOWN is set as soon</span></span><br><span class="line"><span class="comment">         * as adapter notification arrives vs FLAG_INVALID is set lazily before layout is</span></span><br><span class="line"><span class="comment">         * re-calculated.</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> FLAG_ADAPTER_POSITION_UNKNOWN = <span class="number">1</span> &lt;&lt; <span class="number">9</span>;</span><br><span class="line"></span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * Set when a addChangePayload(null) is called</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> FLAG_ADAPTER_FULLUPDATE = <span class="number">1</span> &lt;&lt; <span class="number">10</span>;</span><br><span class="line"></span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * Used by ItemAnimator when a ViewHolder&#x27;s position changes</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> FLAG_MOVED = <span class="number">1</span> &lt;&lt; <span class="number">11</span>;</span><br><span class="line"></span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * Used by ItemAnimator when a ViewHolder appears in pre-layout</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> FLAG_APPEARED_IN_PRE_LAYOUT = <span class="number">1</span> &lt;&lt; <span class="number">12</span>;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>虽然缓存机制是RecyclerView提供的，但是它还需要LayoutManager来配合调用相应的方法，在 LinearLayoutManager的 onlayoutChildren 方法里面 调用了 RecyclerView 的 detachAndScrapAttachedViews() :</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">detachAndScrapAttachedViews</span><span class="params">(Recycler recycler)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">final</span> <span class="keyword">int</span> childCount = getChildCount();</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = childCount - <span class="number">1</span>; i &gt;= <span class="number">0</span>; i--) &#123;</span><br><span class="line">        <span class="keyword">final</span> View v = getChildAt(i);</span><br><span class="line">        scrapOrRecycleView(recycler, i, v);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">scrapOrRecycleView</span><span class="params">(Recycler recycler, <span class="keyword">int</span> index, View view)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">final</span> ViewHolder viewHolder = getChildViewHolderInt(view);</span><br><span class="line">    <span class="keyword">if</span> (viewHolder.shouldIgnore()) &#123;</span><br><span class="line">        <span class="keyword">if</span> (DEBUG) &#123;</span><br><span class="line">            Log.d(TAG, <span class="string">&quot;ignoring view &quot;</span> + viewHolder);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (viewHolder.isInvalid() &amp;&amp; !viewHolder.isRemoved()</span><br><span class="line">            &amp;&amp; !mRecyclerView.mAdapter.hasStableIds()) &#123;</span><br><span class="line">        removeViewAt(index);</span><br><span class="line">        recycler.recycleViewHolderInternal(viewHolder);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        detachViewAt(index);</span><br><span class="line">        recycler.scrapView(view);</span><br><span class="line">        mRecyclerView.mViewInfoStore.onViewDetached(viewHolder);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"> <span class="function"><span class="keyword">void</span> <span class="title">scrapView</span><span class="params">(View view)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">final</span> ViewHolder holder = getChildViewHolderInt(view);</span><br><span class="line">    <span class="keyword">if</span> (holder.hasAnyOfTheFlags(ViewHolder.FLAG_REMOVED | ViewHolder.FLAG_INVALID)</span><br><span class="line">            || !holder.isUpdated() || canReuseUpdatedViewHolder(holder)) &#123;</span><br><span class="line">        <span class="keyword">if</span> (holder.isInvalid() &amp;&amp; !holder.isRemoved() &amp;&amp; !mAdapter.hasStableIds()) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> IllegalArgumentException(<span class="string">&quot;Called scrap view with an invalid view.&quot;</span></span><br><span class="line">                    + <span class="string">&quot; Invalid views cannot be reused from scrap, they should rebound from&quot;</span></span><br><span class="line">                    + <span class="string">&quot; recycler pool.&quot;</span> + exceptionLabel());</span><br><span class="line">        &#125;</span><br><span class="line">        holder.setScrapContainer(<span class="keyword">this</span>, <span class="keyword">false</span>);</span><br><span class="line">        mAttachedScrap.add(holder);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (mChangedScrap == <span class="keyword">null</span>) &#123;</span><br><span class="line">            mChangedScrap = <span class="keyword">new</span> ArrayList&lt;ViewHolder&gt;();</span><br><span class="line">        &#125;</span><br><span class="line">        holder.setScrapContainer(<span class="keyword">this</span>, <span class="keyword">true</span>);</span><br><span class="line">        mChangedScrap.add(holder);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>detachAndScrapAttachedViews会对 RecyclerView所有的 <strong>可见view</strong> 进行scrap或者 recycle 操作，同时满足三个条件的viewHolder会被recycle，否则会被scrap:</p><ol><li>viewHolder被标记为无效了，一个典型的场景就是adapter调用了notifydatasetChanged()方法，调用markKnownViewsInvalid()对所有的holder添加 invalidate 和 update标记。</li><li>viewHolder对应的item 没有被移除出adapter</li><li>Adapter没有指定hasStableIds，默认没有指定</li></ol><p>对于recycle的viewHolder,如果能够添加到 mCachedViews，则添加进去，否则添加到 RecycledViewPool 里面去。mCachedViews有一个默认最大值是2，如果超过了，会把位置0的数据放到 RecycledViewPool 里面去</p><p>对于被scrap的viewHolder又做了两种区分，被标记为 FLAG_REMOVED|FLAG_INVALID 或者 没有 FLAG_UPDATE 标记 或者 canReuseUpdatedViewHolder()的holder会被添加到 mAttachedScrap ，否则添加到 mChangedScrap 。这里完全没看出来这两种有什么区别，在使用上，获取viewHolder缓存的时候， prelayout 阶段会先从 mChangedScrap 中去查找， 其他阶段会跳过 mChangedScrap 直接从 mAttachedScrap 中查找。</p><p>在LinearLayoutManager的onlayoutChildren方法中，添加view的时候会尝试去获取viewHolder,最终会调用到Recycler的获取缓存的方法中：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//LinearLayoutManager::layoutChunk</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">layoutChunk</span><span class="params">(RecyclerView.Recycler recycler, RecyclerView.State state,</span></span></span><br><span class="line"><span class="function"><span class="params">        LayoutState layoutState, LayoutChunkResult result)</span> </span>&#123;</span><br><span class="line">    View view = layoutState.next(recycler);</span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//Recycler::tryGetViewHolderForPositionByDeadline</span></span><br><span class="line"><span class="function">ViewHolder <span class="title">tryGetViewHolderForPositionByDeadline</span><span class="params">(<span class="keyword">int</span> position,</span></span></span><br><span class="line"><span class="function"><span class="params">                <span class="keyword">boolean</span> dryRun, <span class="keyword">long</span> deadlineNs)</span> </span>&#123;</span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在 tryGetViewHolderForPositionByDeadline 中，就是尝试依次从各种缓存里面取出viewHolder的过程，如果是从 RecyclerPool 或者 createViewHolder 中取得的VH,都是未绑定的状态，此时一定会执行bind操作，对于其他的来源(scrap,hiddenview,cached)，则会根据条件筛选来决定是不是要执行bind操作。这里就是与ListView区别的地方了，listView在getView方法中会全部重新绑定一遍数据，这里是如果VH带有update标记或者invalidate标记才重新bind,否则这个VH包含的view可以直接使用。</p><p>对于RecyclerView其实还有很多的东西，比如position的计算过程，滑动中的缓存过程，嵌套滑动的处理，这些有空再看</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;RecyclerView的缓存其实更多的是概念性的东西，新增了种类繁多的flag，和listview相比，区分了createViewHolder和bindViewHolder步骤，带来了部分性能上的提升。&lt;/p&gt;</summary>
    
    
    
    <category term="android_app" scheme="http://example.com/categories/android-app/"/>
    
    
    <category term="列表控件" scheme="http://example.com/tags/%E5%88%97%E8%A1%A8%E6%8E%A7%E4%BB%B6/"/>
    
  </entry>
  
  <entry>
    <title>翻译--RecyclerView Animations</title>
    <link href="http://example.com/2018/09/12/%E7%BF%BB%E8%AF%91-RecyclerView-Animations/"/>
    <id>http://example.com/2018/09/12/%E7%BF%BB%E8%AF%91-RecyclerView-Animations/</id>
    <published>2018-09-12T02:11:35.000Z</published>
    <updated>2018-11-05T14:45:25.575Z</updated>
    
    <content type="html"><![CDATA[<p><a href="https://www.birbit.com/recyclerview-animations-part-1-how-animations-work">原文</a>是 RecyclerView 的作者写的，解释了这个控件里面的一些概念。这里翻译一下(注意这是旧的源码，例如新的版本中layout分成了三步而不是两步，大致是把这里提到的prelayout拆分成了step1和step2)</p><a id="more"></a><h2 id="第一部分"><a href="#第一部分" class="headerlink" title="第一部分"></a>第一部分</h2><p>ListView 是Android里面最受欢迎的控件之一，即使它有许多的功能和特性，但是使用起来非常复杂并且很难自定义。随着UI的进化和手机的发展，这个缺点开始越来越明显。通过实现一些简单的约定，我们可以控制很多行为：</p><ol><li>items是怎么布局的</li><li>动画</li><li>item 装饰</li><li>回收策略<br>…</li></ol><p>当然，这种灵活性的代价也伴随着更复杂的类结构，同时，也有更多的东西需要学习。</p><p>在这片文章里面，我将会深入RecyclerView的内部细节，特别是动画是怎么运作的。</p><p>在 Honeycomb 版本的时候，Android Framework 引入了 LayoutTransition 动画，它可以非常容易的把 ViewGroup 内部的的变化通过动画表现出来。 它工作的方式是在ViewGroup布局变化的前后分别取一个快照，然后创造一个动画集合来表示这两种状态的变化过程。这种方式和RecycleView对Adapter的变化所执行的动画的原理是类似的。</p><p><img src="/2018/09/12/%E7%BF%BB%E8%AF%91-RecyclerView-Animations/trans_man_default.gif" alt="LayoutTransirion example"></p><p>不幸的是，LayoutTransitions动画和list有点不兼容，主要是list里面的子条目和ViewGroup里面的子view不一样。用对views使用的这一套动画机制去对items使用时，理解这个区别非常重要。</p><p>在正常的ViewGroup中，如果一个view是刚被添加到视图树的，那么它就可以被当作新添加的view然后执行相应的动画(比如淡入效果).对于视图集合来说，情况有点不一样。 比如，一个子条目的view变的可见可能是因为它前面的某个子条目被从adapter中移出了。在这种情况下，为新的item 执行一个淡入动画可能会导致一些误解，因为它本来就是在list中的，虽然这个view是刚刚在屏幕中可见。RecyclerView知道这个item是不是新添加的，但是如果item不是新添加的，它就不知道这个item之前在哪里(注:意思是没有缓存view的引用？)。同样的情况也发生在view消失的时候，RecyclerView不知道这个view会到那里去如果它没有被从Adapter中移出的话。</p><p><img src="/2018/09/12/%E7%BF%BB%E8%AF%91-RecyclerView-Animations/trans_man_default.gif" alt="LayoutTransition failure for a list"></p><p>为了解决这个问题，RecyclerView 可以向 LayoutManager 请求新出现的view 的之前的位置。虽然这样做可行，但这会需要在LayoutManager中存一些记录，并且对于一些更复杂的LayoutManager来说这些记录计算起来可能会很麻烦。</p><p>RecyclerView用来处理item显示和消失动画(指对list中过去和现在一直都存在的items所对应的views执行出现和消失的动画)的方法是通过layoutManager来执行预布局逻辑。一方面来说，RecyclerView想要在这次变化之前知道这些view被布局在哪里，另一方面，如果LayoutManager把当前不可见的view布局出来，RecyclerView想要知道在这次变化之后这些view将会被布局到哪里。</p><p>为了使 LayoutManager 更容易的提供这些信息，当adapter有应该执行动画的数据变化的时候，RecyclerView 通过两个步骤来处理。这两个步骤是：</p><ol><li>在第一步（preLayout阶段），RecyclerView 要求 LayoutManager依据额外的信息来局部之前的状态，对于上面的例子来说，这个意思是告诉它 “重新布局这些items,顺便说下，C已经被移除了”.LayoutManager 则正常运行布局过程，但是它知道C将会被移除掉，所以它会用view把C空出来的过程填充起来。这个过程中比较有趣的部分是，RecyclerView依然表现的好像C仍然在Adapter中一样，如果这时候LayoutManager请求在位置2的view,RecyclerView会返回C的view给它(getViewForPosition(2) == View(‘C’))，如果LayoutManager请求位置4的view，RecyclerView会返回E对应的view给它（虽然现在Adapter中D是第四个(注:这里好像有错？C移除后D是第三个了))，返回的view的LayoutParams有个isItemRemoved方法，LayoutManager可以用它来检查这个view是不是对应一个马上要消失的item。</li><li>在第二步（postLayout阶段）,RecyclerView 会请求 LayoutManager 重新布局它的子条目。这一次“C”已经不在Adapter中了，getViewForPosition(2)会返回“D”，getViewForPosition(4)会返回“F”，记住，这时候子条目C已经从Adapter中移除了，但是因为RecyclerView仍然持有C对应的View的引用，所以它可以表现的仿佛C依然在一样。换句话说，RecyclerView也会对LayoutManager做记录</li></ol><p>每次LayoutManager调用onLayoutChildren的时候，它都会先暂时的detach掉所有的view然后再从scratch中取出来重新布局。没有变化的view会被scrap缓存中返回回来，它们的测量结果依然有效，所以对这种view的重新布局会相对简单。</p><p><img src="/2018/09/12/%E7%BF%BB%E8%AF%91-RecyclerView-Animations/pre-layout.jpg" alt="pre-layout"><br>LinearLayoutManager preLayout的结果: (红色部分表示对用户可见的区域)* </p><p><img src="/2018/09/12/%E7%BF%BB%E8%AF%91-RecyclerView-Animations/post-layout.jpg" alt="post-layout"><br>LinearLayoutManager postlayout的结果</p><p>在这两个阶段过后，RecyclerView知道了View从哪里来，所以可以执行正确的动画。</p><p><img src="/2018/09/12/%E7%BF%BB%E8%AF%91-RecyclerView-Animations/predictive_animations.gif" alt="Predictive Animation"></p><p>你可能会问，C对应的View都没有被LayoutManager布局了，它怎么还是可见的？</p><p>需要明确说明的是，在pre-layout阶段LayoutManager依然布局C的原因是它看起来仍然在Adapter，在post-layout阶段LayoutManager不布局的原因则是C的确不在Adapter里面了。对于LayoutManger来说C不再是它的子view了，但是对RecyclerView来说却不是这样。当一个view被从LayoutManager中移除的时候，如果 ItemAnimator想要它执行动画，RecyclerView会仍然把它作为一个子view(这样子动画才能够正常执行)。更多的细节在第二部分会描述。</p><h3 id="消失子条目的处理"><a href="#消失子条目的处理" class="headerlink" title="消失子条目的处理"></a>消失子条目的处理</h3><p>在两个阶段执行以后，RecyclerView 可以正确的执行添加动画了，但现在还有个问题就是消失动画。考虑一下下面的情况，当一个新的item被添加到list中，会导致其他的一些子条目被挤出可见区域，动画过程如下：</p><p><img src="/2018/09/12/%E7%BF%BB%E8%AF%91-RecyclerView-Animations/layout_transition_add.gif" alt="Predictive Animation"></p><p>当X被添加到A之后的时候，会导致F被挤出屏幕外，因为LayoutManager不会布局F，所以LayoutTransition认为它被UI移除了然后执行一个淡出动画，实际上，F仍然在adapter中但是被推出了可见区域而已。</p><p>为了解决这个问题，RecyclerView为Layoutmanager提供了一些额外的api来获取这些信息。在postlayout阶段的末尾，LayourManager可以调用getScrapList来获取出于这种情况下的view列表（没有被LayoutManager布局出来但是仍然在adapter中),然后它仍然会布局这些view,就好像RecyclerView很大可以容纳他们一样。</p><p>LinearLayoutManager postLayout的结果: (红色部分表示对用户可见的区域)*<br><img src="/2018/09/12/%E7%BF%BB%E8%AF%91-RecyclerView-Animations/add_post_layout_with_frame.png" alt="Predictive Animation"></p><p>一个重要的细节是，由于这些view在动画结束后就没必要存在了，LayoutManager会调用addDisappearingView而不是addView。这会告诉RecyclerView，这个view应该在动画结束后移除掉。这个view会被RecyclerView添加到hidden views，因此它会在这个方法调用结束后马上从LayoutManager的子view列表中移除掉。通过这种方式，LayoutManager可以清除掉它。</p><p><img src="/2018/09/12/%E7%BF%BB%E8%AF%91-RecyclerView-Animations/predictive_add.gif" alt="Predictive Animation"></p><p>刚开始的时候，你可能认为 LayoutManager 可以计算出 View 从哪里来或者要去哪里，这样子就不需要两个layout步骤来计算了。不幸的是，在同一个步骤中，如果adapter的多种类型发生变化，会有很多边界情况发生。对于一个更复杂的LayoutManager（比如StaggeredGridLayout)来说，计算一个Item放在哪个位置不是一件容易的事情，通过两步layout的方式可以为LayoutManager减轻很多压力并且能够很容易的支持合适的动画而不用花太多力气。</p><p>目前位置，我已经提到了RecyclerView中预处理动画的原理的主要内容，但对于LayoutManager来说仍然有很多事情要做。你可以在第二部分了解到背后仍然需要做的事情。</p><h2 id="第二部分"><a href="#第二部分" class="headerlink" title="第二部分"></a>第二部分</h2><ol><li><p>RecyclerView 即使在一些child 被LayoutManager移除掉的时候依然保持它们的attached状态，具体的过程是什么？这样不会破坏RecyclerView和 LayoutManager 之间的状态吗？<br> 是的，在某种程度上的确有点这个意思，但是：</p><p> RecyclerView 的确保留了它们作为ViewGroup的子view,但是把它们都对LayoutManager隐藏了，每次LayoutManager调用方法获取它们的children的时候，RecyclerView会把隐藏的view也考虑在内（是指考虑屏蔽）。让我们看一下part 1 中 C被移出adapter的例子：</p><p> <img src="/2018/09/12/%E7%BF%BB%E8%AF%91-RecyclerView-Animations/predictive_animations.gif" alt="Predictive Animation"></p><p> 在这里C淡出了，如果LayoutManager调用getChildCount(),RecyclerView会返回6虽然它有7个children,如果LayoutManager调用getChildAt(int),Recycler会进行合适的偏移来跳过C（或者任何隐藏的children）。如果LayoutManager调用addView(view,position),RecyclerView也会在ViewGroup调用addView之前进行适当的偏移。</p><p> 当动画结束的时候，RecyclerView会移出这个View然后回收它</p><p> 更多的细节你可以看ChildHelper这个内部类的实现</p></li><li><p>在Pre-layout阶段，RecyclerView对item的位置是怎么处理的？这时候item在Adapter中的位置不一样。<br> 这得益于adapter新增的特定事件的通知，当Adapter派发notify xx 事件的时候，RecyclerView会记录它们并且为这个变化请求一次布局，在下一个布局阶段之前到来的事件都会在一起执行。</p><p> 当onLayout被系统调用的时候，RecyclerView执行以下步骤：</p><ol><li><p>对这些事件重新排序，把move事件放到事件list的末尾。移动move事件到结尾仅仅是一个简化步骤，因此这里不打算讨论它的细节。你可以在OpReorderer类中找到感兴趣的细节。 </p></li><li><p>按顺序一个一个处理事件，并且更新已经存在的ViewHolder的位置。如果一个ViewHolder被移除掉，它也会被标记为移除状态。当这么做的时候，RecyclerView也会决定adapter数据的变化是不是要在preLayout步骤之前或者之后分发给LayoutManager,这个过程如下：</p><ul><li>如果是一个add操作，它会被延期执行因为item不应该在preLayout阶段存在。</li><li>如果是一个update或者remove操作并且这个操作会影响到已经存在的ViewHolder，这个操作会被推迟执行。如果这个操作不会影响到已经存在的ViewHolder,它就会被分发到LayoutManager，这是因为RecyclerView不能复现这个item之前的状态（它没有代表这个item之前的状态的ViewHolder）</li><li>如果是一个move操作，它会被延期执行因为RecyclerView可以在prelayout阶段弄一个假的位置。比如，如果把位置3的item移动到位置5，在prelayout阶段如果位置3的view被请求的话，RecyclerView返回位置5的view</li><li>RecyclerView会在必要的时候重写这些操作。比如，一个更新或者删除操作影响到了一些ViewHolder,RecyclerView会拆分这些操作。如果一个操作应该被分发给LayoutManager但是一个延迟的操作会影响它，RecyclerView会重排序这些操作使它们依然是一致的。</li></ul></li><li><p>比如说，如果有一个在位置3添加1的操作，这个操作被延迟了，紧接着有一个不能被延迟的删除位置5的1的操作，RecyclerView会把删除位置4的1分发给LayoutManager，这么做是因为Adapter在添加1到位置3之后执行删除位置5的1并且通知它。因此RecyclerView没有告诉layoutManager关于添加1到位置3的事情，它重写了remove操作来保证一致。</p><p>这种做法使得对于layoutManager来说追踪一个item会很容易。adapter和layoutManager之间的抽象关系使得这一切称为可能，因此ReclcyclerView不需要把Adapter的引用传给layoutManager,相反的，RecyclerView提供了一些通过State和Recycler类来接触Adapter的方法。</p><p>ViewHolders也有它们自己的旧位置，prelayout位置和最终adpater位置。当viewHolder.getPosition被调用的时候，它们会返回prelayout位置或者最终adapter位置，这取决于当时处在layout的哪个状态（pre 还是post).LayoutManager不需要知道这些因为它总是保持和之前的分发给它的事件保持一致。</p></li><li><p>在Adapter的更新处理完后，RecyclerView保存已经存在的View的位置和大小信息并在之后把它们用于动画。</p></li><li><p>RecyclerView在preLayout阶段会调用LayoutManager.onLayoutChildren，在上一段中提到过，layoutmanager会执行它的正常layout逻辑，它要做的就是为更多的比如正在删除或者变化的item(isItemRemoved,isItemChanged)进行布局，删除的或者变化的item依然出现在Adapter提供给LayoutManager的api中。这种情况下，layoutManager仅仅是把它们当作普通的view来处理</p></li><li><p>在pre-layout结束后，RecyclerView再次记录这些view的位置信息然后把剩下的Adapter 更新分发给LayoutManager.</p></li><li><p>RecyclerView 再次调用layoutManager的 onLayout（postLayout阶段），这一次，在postlayout结束后，所有的item的位置都会和adapter中的数据一致，layoutManager再次执行正常的布局逻辑</p></li><li><p>postLayout结束后，RecycerView再次检查view的位置信息，然后决定哪些item是add,remove,changed,moved.它会隐藏掉remove的view,并且把没有添加到LayoutManager的view添加到RecyclerView（因为要执行动画）.</p></li><li><p>要执行动画的items会被传给ItemAnimator来开始动画效果。动画结束后，Item Animator调用一个回调告诉RecyclerView移除和回收不再需要的view</p></li></ol></li></ol><ol start="3"><li><p>如果LayoutManager 在内部数据结构中使用item 的位置信息会发生什么？ </p><p> 因为RecyclerView会重写adapter的变化，layoutManager要做的就是当一个adapter数据变化的回调到来的时候更新它自己的记录。RecyclerView保证这些更新会在合适的时机以合适的顺序调用。</p><p> 在layout的任何时间点，如果layoutManager想要获取Adapter的一些额外数据，它可以调用Recycler.convertPreLayoutPositionToPostLayout来获取item在adapter中的位置。比如，GridLayoutManager就使用了这个接口来获取item的信息。</p></li><li><p>notifyDataSetChanged 被调用的时候会发生什么?预处理动画会执行吗？</p><p> 不会，这是为什么notifyDataSetChanged应该是你最后才考虑调用的方法。当notifyDataSetChanged调用的时候，RecyclerView无法知道items移动到哪里去了因此它没法正确的模拟getViewForPosition的调用。此时它仅仅是执行一个普通布局容器动画将会做的事情</p></li></ol><h2 id="第三部分-这里是我自己加的"><a href="#第三部分-这里是我自己加的" class="headerlink" title="第三部分( 这里是我自己加的 )"></a>第三部分( 这里是我自己加的 )</h2><ol><li><p>为什么要执行多次layout ?<br> 为了正确的执行动画，所以必须知道条目的信息，包括数据改变之前和之后的，主要是记录position对应的holder和 RecyclerView.State，对于默认的实现DefaultAnimation()来说，主要是用到了top和left，translationX等，可见SimpleAnimation类的animateChange()方法，对于之前的，为什么不直接拿当前的信息呢？只能猜测是为了要recyclerview最初的状态，当前状态可能是用户交互过的，view的信息可能已经变化了，在step1中完成 ，对于之后的，就是拿新数据layout更新一次可以拿到，在step2中完成。</p></li><li><p>notifyItemXXX 和 notifyDataSetChanged 的区别？<br> 主要区别还是在于执行动画，对于notifyDataSetChanged，一般来说不执行动画(Recyclerview的dispatchLayoutStep1中做的判断），而对于 notifyItemXXX ，则根据 item变化的类型决定是不是要执行动画，此时RecyclerView其实也并不知道data数据集哪里变化了，需要开发者主动去告诉它，哪个item insert,remove等等，如果你在data list尾部插入数据，然后notifyItemInsert(0),这时候数据也会错乱，RecyclerView会误认为data list的0位置是新插入的数据，然后生成位置0对应的view,插入进去。。</p></li></ol>]]></content>
    
    
    <summary type="html">&lt;p&gt;&lt;a href=&quot;https://www.birbit.com/recyclerview-animations-part-1-how-animations-work&quot;&gt;原文&lt;/a&gt;是 RecyclerView 的作者写的，解释了这个控件里面的一些概念。这里翻译一下(注意这是旧的源码，例如新的版本中layout分成了三步而不是两步，大致是把这里提到的prelayout拆分成了step1和step2)&lt;/p&gt;</summary>
    
    
    
    <category term="android_app" scheme="http://example.com/categories/android-app/"/>
    
    
    <category term="列表控件" scheme="http://example.com/tags/%E5%88%97%E8%A1%A8%E6%8E%A7%E4%BB%B6/"/>
    
  </entry>
  
  <entry>
    <title>Android控件-RecyclerView2-ItemDecoration</title>
    <link href="http://example.com/2018/09/10/Android%E6%8E%A7%E4%BB%B6-RecyclerView2-ItemDecoration/"/>
    <id>http://example.com/2018/09/10/Android%E6%8E%A7%E4%BB%B6-RecyclerView2-ItemDecoration/</id>
    <published>2018-09-10T03:35:32.000Z</published>
    <updated>2018-11-05T14:15:34.541Z</updated>
    
    <content type="html"><![CDATA[<p>在 <a href="https://nangonghuang.github.io/2018/09/05/Android%E6%8E%A7%E4%BB%B6-RecyclerView/">RecyclerView</a> 中， 我们可以通过 recyclerView.addItemDecoration() 的方式添加 ItemDecoration ，比如下划线，字母索引等。</p><a id="more"></a><h2 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h2><p>自己实现 ItemDecoration ,只需要实现两个方法:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">Example</span> <span class="keyword">extends</span> <span class="title">RecyclerView</span>.<span class="title">ItemDecoration</span></span>&#123;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onDraw</span><span class="params">(Canvas c, RecyclerView parent, RecyclerView.State state)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>.onDraw(c, parent, state);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">getItemOffsets</span><span class="params">(Rect outRect, View view, RecyclerView parent, RecyclerView.State state)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>.getItemOffsets(outRect, view, parent, state);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>其中 onDraw() 提供了一个canvas 用于绘制，getItemOffsets则提供了设置 ItemDecoration 大小的机会，以官方的 DividerItemDecoration 为例：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DividerItemDecoration</span> <span class="keyword">extends</span> <span class="title">RecyclerView</span>.<span class="title">ItemDecoration</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">drawVertical</span><span class="params">(Canvas canvas, RecyclerView parent)</span> </span>&#123;</span><br><span class="line">        canvas.save();</span><br><span class="line">        <span class="keyword">final</span> <span class="keyword">int</span> left;</span><br><span class="line">        <span class="keyword">final</span> <span class="keyword">int</span> right;</span><br><span class="line">        <span class="comment">//noinspection AndroidLintNewApi - NewApi lint fails to handle overrides.</span></span><br><span class="line">        <span class="keyword">if</span> (parent.getClipToPadding()) &#123;</span><br><span class="line">            left = parent.getPaddingLeft();</span><br><span class="line">            right = parent.getWidth() - parent.getPaddingRight();</span><br><span class="line">            canvas.clipRect(left, parent.getPaddingTop(), right,</span><br><span class="line">                    parent.getHeight() - parent.getPaddingBottom());</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            left = <span class="number">0</span>;</span><br><span class="line">            right = parent.getWidth();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">final</span> <span class="keyword">int</span> childCount = parent.getChildCount();</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; childCount; i++) &#123;</span><br><span class="line">            <span class="keyword">final</span> View child = parent.getChildAt(i);</span><br><span class="line">            parent.getDecoratedBoundsWithMargins(child, mBounds);</span><br><span class="line">            <span class="keyword">final</span> <span class="keyword">int</span> bottom = mBounds.bottom + Math.round(child.getTranslationY());</span><br><span class="line">            <span class="keyword">final</span> <span class="keyword">int</span> top = bottom - mDivider.getIntrinsicHeight();</span><br><span class="line">            mDivider.setBounds(left, top, right, bottom);</span><br><span class="line">            mDivider.draw(canvas);</span><br><span class="line">        &#125;</span><br><span class="line">        canvas.restore();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">getItemOffsets</span><span class="params">(Rect outRect, View view, RecyclerView parent,</span></span></span><br><span class="line"><span class="function"><span class="params">            RecyclerView.State state)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (mDivider == <span class="keyword">null</span>) &#123;</span><br><span class="line">            outRect.set(<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>);</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (mOrientation == VERTICAL) &#123;</span><br><span class="line">            outRect.set(<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, mDivider.getIntrinsicHeight());</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            outRect.set(<span class="number">0</span>, <span class="number">0</span>, mDivider.getIntrinsicWidth(), <span class="number">0</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">getDecoratedBoundsWithMarginsInt</span><span class="params">(View view, Rect outBounds)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">final</span> LayoutParams lp = (LayoutParams) view.getLayoutParams();</span><br><span class="line">        <span class="keyword">final</span> Rect insets = lp.mDecorInsets;</span><br><span class="line">        outBounds.set(view.getLeft() - insets.left - lp.leftMargin,</span><br><span class="line">                view.getTop() - insets.top - lp.topMargin,</span><br><span class="line">                view.getRight() + insets.right + lp.rightMargin,</span><br><span class="line">                view.getBottom() + insets.bottom + lp.bottomMargin);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>在 drawVertical() 中，先是根据 getClipToPadding() 来判断，要不要把Item绘制到 RecyclerView 的padding 里面，顺便做一个过度绘制的优化，然后调用 getDecoratedBoundsWithMargins() 取得 bottom 的值用于计算绘制的区域，计算的时候用到了 lp.mDecorInsets ，在单个ItemDecoration的情况下，这个值就是在 getItemOffsets() 中设置的 outRect 的值 。需要注意的是，虽然 outRect 的数据结构表示一个矩形，但是这里实际上是表示在child四个方向上的距离值，可以理解为setpadding(left,top,right,bottom),这么命名实在是很让人混乱。。</p><p><img src="/2018/09/10/Android%E6%8E%A7%E4%BB%B6-RecyclerView2-ItemDecoration/itemdecoration.jpg" alt="itemdecoration"></p><p>在这里可以看到，对于简单的分割线，这里只是为每一个 child 绘制了下面的区域 ,其他的区域也都是设置为0.官方的接口其实就只是提供了你绘制的区域(这个还要自己计算)和canvas,让你自己去绘制。关于使用，就是这些了，下面看一下 RecyclerView 是怎么调用这些方法的。</p><h2 id="原理"><a href="#原理" class="headerlink" title="原理"></a>原理</h2><p>一般来说，作为容器 Container 基本上只需要绘制自己的 background 的， RecyclerView 继承了 ViewGroup 后给我们使用的不仅仅是一个容器，还带了点私货，这个私货就是 itemDecoration , 对于每一个 item ,  RecyclerView 新定义了 layoutParam，在自己的layoutparams 中保存了一个 mDecorInsets 的变量，用来记载 itemDecoration 的范围。在 measure,layout 的时候都会考虑到这些值进行测量和布局，最后在ondraw里面把 canvas 交给开发者自己去实现。不过它留的接口传的参数实在是怪异，需要知道详情才知道怎么去绘制。</p><p>由于child的测量和绘制也是由LayoutManager去自定义实现的，但是系统也提供了LinearLayoutManager等实现，这里以LinearLayoutManager为例：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//child的测量 </span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">measureChildWithMargins</span><span class="params">(View child, <span class="keyword">int</span> widthUsed, <span class="keyword">int</span> heightUsed)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">final</span> LayoutParams lp = (LayoutParams) child.getLayoutParams();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">final</span> Rect insets = mRecyclerView.getItemDecorInsetsForChild(child);</span><br><span class="line">    widthUsed += insets.left + insets.right;</span><br><span class="line">    heightUsed += insets.top + insets.bottom;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">final</span> <span class="keyword">int</span> widthSpec = getChildMeasureSpec(getWidth(), getWidthMode(),</span><br><span class="line">            getPaddingLeft() + getPaddingRight()</span><br><span class="line">                    + lp.leftMargin + lp.rightMargin + widthUsed, lp.width,</span><br><span class="line">            canScrollHorizontally());</span><br><span class="line">    <span class="keyword">final</span> <span class="keyword">int</span> heightSpec = getChildMeasureSpec(getHeight(), getHeightMode(),</span><br><span class="line">            getPaddingTop() + getPaddingBottom()</span><br><span class="line">                    + lp.topMargin + lp.bottomMargin + heightUsed, lp.height,</span><br><span class="line">            canScrollVertically());</span><br><span class="line">    <span class="keyword">if</span> (shouldMeasureChild(child, widthSpec, heightSpec, lp)) &#123;</span><br><span class="line">        child.measure(widthSpec, heightSpec);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//child的布局</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">layoutDecoratedWithMargins</span><span class="params">(View child, <span class="keyword">int</span> left, <span class="keyword">int</span> top, <span class="keyword">int</span> right,<span class="keyword">int</span> bottom)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">final</span> LayoutParams lp = (LayoutParams) child.getLayoutParams();</span><br><span class="line">    <span class="keyword">final</span> Rect insets = lp.mDecorInsets;</span><br><span class="line">    child.layout(left + insets.left + lp.leftMargin, top + insets.top + lp.topMargin,</span><br><span class="line">            right - insets.right - lp.rightMargin,</span><br><span class="line">            bottom - insets.bottom - lp.bottomMargin);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>可以看到都是把 mDecorInsets 考虑在里面了的，如果我们自定义LayoutManager,也需要考虑到对itemDecoration的支持，不然可能会出现显示问题。</p><p>关于 itemDecoration 的绘制，这个就在 RecyclerView 的 ondraw() 函数里面，非常简单：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onDraw</span><span class="params">(Canvas c)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">super</span>.onDraw(c);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">final</span> <span class="keyword">int</span> count = mItemDecorations.size();</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; count; i++) &#123;</span><br><span class="line">        mItemDecorations.get(i).onDraw(c, <span class="keyword">this</span>, mState);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>如果有多个 ItemDecoration , 会依次绘制，这个需要每一个 ItemDecoration 自己计算好绘制的区域。</p><p>另外一个方法 getItemOffset() 的唯一调用处：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">Rect <span class="title">getItemDecorInsetsForChild</span><span class="params">(View child)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">final</span> LayoutParams lp = (LayoutParams) child.getLayoutParams();</span><br><span class="line">    <span class="keyword">if</span> (!lp.mInsetsDirty) &#123;</span><br><span class="line">        <span class="keyword">return</span> lp.mDecorInsets;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (mState.isPreLayout() &amp;&amp; (lp.isItemChanged() || lp.isViewInvalid())) &#123;</span><br><span class="line">        <span class="comment">// changed/invalid items should not be updated until they are rebound.</span></span><br><span class="line">        <span class="keyword">return</span> lp.mDecorInsets;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">final</span> Rect insets = lp.mDecorInsets;</span><br><span class="line">    insets.set(<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>);</span><br><span class="line">    <span class="keyword">final</span> <span class="keyword">int</span> decorCount = mItemDecorations.size();</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; decorCount; i++) &#123;</span><br><span class="line">        mTempRect.set(<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>);</span><br><span class="line">        mItemDecorations.get(i).getItemOffsets(mTempRect, child, <span class="keyword">this</span>, mState);</span><br><span class="line">        insets.left += mTempRect.left;</span><br><span class="line">        insets.top += mTempRect.top;</span><br><span class="line">        insets.right += mTempRect.right;</span><br><span class="line">        insets.bottom += mTempRect.bottom;</span><br><span class="line">    &#125;</span><br><span class="line">    lp.mInsetsDirty = <span class="keyword">false</span>;</span><br><span class="line">    <span class="keyword">return</span> insets;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这里仅仅是取了每一种 ItemDecoration 类的 getItemOffsets() 传进来的 rect 数据，然后依次叠加，只有一种 ItemDecoration 的时候，rect 其实就是 mDecorInsets 的值。</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;在 &lt;a href=&quot;https://nangonghuang.github.io/2018/09/05/Android%E6%8E%A7%E4%BB%B6-RecyclerView/&quot;&gt;RecyclerView&lt;/a&gt; 中， 我们可以通过 recyclerView.addItemDecoration() 的方式添加 ItemDecoration ，比如下划线，字母索引等。&lt;/p&gt;</summary>
    
    
    
    <category term="android_app" scheme="http://example.com/categories/android-app/"/>
    
    
    <category term="列表控件" scheme="http://example.com/tags/%E5%88%97%E8%A1%A8%E6%8E%A7%E4%BB%B6/"/>
    
  </entry>
  
  <entry>
    <title>Android控件总结2</title>
    <link href="http://example.com/2018/09/05/Android%E6%8E%A7%E4%BB%B6%E6%80%BB%E7%BB%932/"/>
    <id>http://example.com/2018/09/05/Android%E6%8E%A7%E4%BB%B6%E6%80%BB%E7%BB%932/</id>
    <published>2018-09-05T08:28:37.000Z</published>
    <updated>2018-11-05T14:17:06.200Z</updated>
    
    <content type="html"><![CDATA[<p>再<a href="https://nangonghuang.github.io/2018/08/20/Android%E6%8E%A7%E4%BB%B6%E6%80%BB%E7%BB%93/">上一篇</a>中，分析了整体上的流程，这里来分析下细节性的问题。<a id="more"></a></p><ol><li>onMeasure()中的 MeasureSpec 是怎么来的？<br> 在之前的流程中，通过requestLayout() 触发 performTravsals(),在 performTravsals() 里面会可能多次调用 <code>performMeasure(...)</code>,而  <code>performMeasure(...)</code> 会调用<code>mView.measure(childWidthMeasureSpec, childHeightMeasureSpec);</code>进入到view和它的子控件的层层调用中，这里的mView在Activity等中就是指DecoreView，在自己创建的window中就是setView()传的view，这里就是最初的源头了。<br> performMeasure中传入的参数来源 :  <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">getRootMeasureSpec</span><span class="params">(<span class="keyword">int</span> windowSize, <span class="keyword">int</span> rootDimension)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> measureSpec;</span><br><span class="line">    <span class="keyword">switch</span> (rootDimension) &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">case</span> ViewGroup.LayoutParams.MATCH_PARENT:</span><br><span class="line">        <span class="comment">// Window can&#x27;t resize. Force root view to be windowSize.</span></span><br><span class="line">        measureSpec = MeasureSpec.makeMeasureSpec(windowSize, MeasureSpec.EXACTLY);</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">case</span> ViewGroup.LayoutParams.WRAP_CONTENT:</span><br><span class="line">        <span class="comment">// Window can resize. Set max size for root view.</span></span><br><span class="line">        measureSpec = MeasureSpec.makeMeasureSpec(windowSize, MeasureSpec.AT_MOST);</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">default</span>:</span><br><span class="line">        <span class="comment">// Window wants to be an exact size. Force root view to be that size.</span></span><br><span class="line">        measureSpec = MeasureSpec.makeMeasureSpec(rootDimension, MeasureSpec.EXACTLY);</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> measureSpec;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure> 这里的 windowSize 是指wms计算后返回的window的大小，而rootDimension则是相应的window的windowManager.Layoutparam,(<strong>未验证</strong>)值是ViewGroup.LayoutParams.MATCH_PARENT(<strong>未验证</strong>)，对于Activity来说，这里得到的最初的参数应该是size = 分辨率大小减去状态栏，导航栏)，mode =  MeasureSpec.EXACTLY。在ViewGroup中为子控件生成measureSpec的默认方法： <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">getChildMeasureSpec</span><span class="params">(<span class="keyword">int</span> spec, <span class="keyword">int</span> padding, <span class="keyword">int</span> childDimension)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> specMode = MeasureSpec.getMode(spec);</span><br><span class="line">    <span class="keyword">int</span> specSize = MeasureSpec.getSize(spec);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">int</span> size = Math.max(<span class="number">0</span>, specSize - padding);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">int</span> resultSize = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">int</span> resultMode = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">switch</span> (specMode) &#123;</span><br><span class="line">    <span class="comment">// Parent has imposed an exact size on us</span></span><br><span class="line">    <span class="keyword">case</span> MeasureSpec.EXACTLY:</span><br><span class="line">        <span class="keyword">if</span> (childDimension &gt;= <span class="number">0</span>) &#123;</span><br><span class="line">            resultSize = childDimension;</span><br><span class="line">            resultMode = MeasureSpec.EXACTLY;</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (childDimension == LayoutParams.MATCH_PARENT) &#123;</span><br><span class="line">            <span class="comment">// Child wants to be our size. So be it.</span></span><br><span class="line">            resultSize = size;</span><br><span class="line">            resultMode = MeasureSpec.EXACTLY;</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (childDimension == LayoutParams.WRAP_CONTENT) &#123;</span><br><span class="line">            <span class="comment">// Child wants to determine its own size. It can&#x27;t be</span></span><br><span class="line">            <span class="comment">// bigger than us.</span></span><br><span class="line">            resultSize = size;</span><br><span class="line">            resultMode = MeasureSpec.AT_MOST;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Parent has imposed a maximum size on us</span></span><br><span class="line">    <span class="keyword">case</span> MeasureSpec.AT_MOST:</span><br><span class="line">        <span class="keyword">if</span> (childDimension &gt;= <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="comment">// Child wants a specific size... so be it</span></span><br><span class="line">            resultSize = childDimension;</span><br><span class="line">            resultMode = MeasureSpec.EXACTLY;</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (childDimension == LayoutParams.MATCH_PARENT) &#123;</span><br><span class="line">            <span class="comment">// Child wants to be our size, but our size is not fixed.</span></span><br><span class="line">            <span class="comment">// Constrain child to not be bigger than us.</span></span><br><span class="line">            resultSize = size;</span><br><span class="line">            resultMode = MeasureSpec.AT_MOST;</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (childDimension == LayoutParams.WRAP_CONTENT) &#123;</span><br><span class="line">            <span class="comment">// Child wants to determine its own size. It can&#x27;t be</span></span><br><span class="line">            <span class="comment">// bigger than us.</span></span><br><span class="line">            resultSize = size;</span><br><span class="line">            resultMode = MeasureSpec.AT_MOST;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Parent asked to see how big we want to be</span></span><br><span class="line">    <span class="keyword">case</span> MeasureSpec.UNSPECIFIED:</span><br><span class="line">        <span class="keyword">if</span> (childDimension &gt;= <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="comment">// Child wants a specific size... let him have it</span></span><br><span class="line">            resultSize = childDimension;</span><br><span class="line">            resultMode = MeasureSpec.EXACTLY;</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (childDimension == LayoutParams.MATCH_PARENT) &#123;</span><br><span class="line">            <span class="comment">// Child wants to be our size... find out how big it should</span></span><br><span class="line">            <span class="comment">// be</span></span><br><span class="line">            resultSize = View.sUseZeroUnspecifiedMeasureSpec ? <span class="number">0</span> : size;</span><br><span class="line">            resultMode = MeasureSpec.UNSPECIFIED;</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (childDimension == LayoutParams.WRAP_CONTENT) &#123;</span><br><span class="line">            <span class="comment">// Child wants to determine its own size.... find out how</span></span><br><span class="line">            <span class="comment">// big it should be</span></span><br><span class="line">            resultSize = View.sUseZeroUnspecifiedMeasureSpec ? <span class="number">0</span> : size;</span><br><span class="line">            resultMode = MeasureSpec.UNSPECIFIED;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//noinspection ResourceType</span></span><br><span class="line">    <span class="keyword">return</span> MeasureSpec.makeMeasureSpec(resultSize, resultMode);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure> 这里返回的值最终会传给子view的 onMeasure()方法，可以看到，生成的值是受到父控件和子控件共同控制的。因此 MeasureSpec 最初是屏幕的分辨率，而后传给子控件的过程中会根据 父控件和子控件 的参数发生变化。</li></ol>]]></content>
    
    
    <summary type="html">&lt;p&gt;再&lt;a href=&quot;https://nangonghuang.github.io/2018/08/20/Android%E6%8E%A7%E4%BB%B6%E6%80%BB%E7%BB%93/&quot;&gt;上一篇&lt;/a&gt;中，分析了整体上的流程，这里来分析下细节性的问题。&lt;/p&gt;</summary>
    
    
    
    <category term="android_framework" scheme="http://example.com/categories/android-framework/"/>
    
    
  </entry>
  
  <entry>
    <title>Android控件-RecyclerView</title>
    <link href="http://example.com/2018/09/05/Android%E6%8E%A7%E4%BB%B6-RecyclerView/"/>
    <id>http://example.com/2018/09/05/Android%E6%8E%A7%E4%BB%B6-RecyclerView/</id>
    <published>2018-09-05T06:40:47.000Z</published>
    <updated>2018-11-05T14:15:30.368Z</updated>
    
    <content type="html"><![CDATA[<p>RecyclerView 是谷歌官方推出的控件，可以完全取代listView,根据不同的layoutManager实现不同的显示效果。<a href="https://www.bilibili.com/video/av24828197">这里</a> 有一个谷歌的RecyclerView视频介绍<a id="more"></a> ，里面提到ListView的主要问题在于，它只是知道数据变了却不知道哪里变了，因此难以设置动画， RecyclerView 则很好的解决了这个问题。然后是listview生成view的时候还需要开发者去写contentView相关的代码，很麻烦，RecyclerView 中则不需要。</p><p>这里打算按照操作顺序来阅读。对RecyclerView的基本使用是:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">RecyclerView recyclerView = <span class="keyword">new</span> RecyclerView(<span class="keyword">this</span>);</span><br><span class="line">recyclerView.setLayoutManager(<span class="keyword">new</span> LinearLayoutManager(<span class="keyword">this</span>));</span><br><span class="line">recyclerView.setAdapter(<span class="keyword">new</span> RecyclerView.Adapter() &#123;</span><br><span class="line">    <span class="meta">@NonNull</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> RecyclerView.<span class="function">ViewHolder <span class="title">onCreateViewHolder</span><span class="params">(<span class="meta">@NonNull</span> ViewGroup parent, <span class="keyword">int</span> viewType)</span> </span>&#123;</span><br><span class="line">        TextView textView = <span class="keyword">new</span> TextView(parent.getContext());</span><br><span class="line">        textView.setText(<span class="string">&quot;123&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> RecyclerView.ViewHolder(textView) &#123;</span><br><span class="line">        &#125;;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onBindViewHolder</span><span class="params">(<span class="meta">@NonNull</span> RecyclerView.ViewHolder holder, <span class="keyword">int</span> position)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getItemCount</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">3</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><ol><li><p>首先是调用了构造函数，构造函数里面初始化了一些变量，这个没什么好说的，</p> <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">RecyclerView</span><span class="params">(...)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">super</span>(context, attrs, defStyle);</span><br><span class="line">    ...</span><br><span class="line">    setWillNotDraw(getOverScrollMode() == View.OVER_SCROLL_NEVER);</span><br><span class="line">    mItemAnimator.setListener(mItemAnimatorListener);</span><br><span class="line">    initAdapterManager();</span><br><span class="line">    initChildrenHelper();</span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p> 其中，AdapterHelper主要用来处理Adapter的操作，入队，更新等并且通过callback回调回RecyclerView来。它还定义了一个内部类UpdateOp，用来封装数据的增删改和移动的操作，并且维护了一个UpdateOp的数组。<br> ChildHelper则主要帮助RecyclerView来管理子view,它内部维护了一个 List<View> mHiddenViews 数组。</View></p></li><li><p>然后是setLayoutManager:</p> <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setLayoutManager</span><span class="params">(LayoutManager layout)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (layout == mLayout) &#123;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    stopScroll();</span><br><span class="line">    <span class="comment">// TODO We should do this switch a dispatchLayout pass and animate children. There is a good</span></span><br><span class="line">    <span class="comment">// chance that LayoutManagers will re-use views.</span></span><br><span class="line">    <span class="keyword">if</span> (mLayout != <span class="keyword">null</span>) &#123;</span><br><span class="line">        ...</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        mRecycler.clear();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// this is just a defensive measure for faulty item animators.</span></span><br><span class="line">    mChildHelper.removeAllViewsUnfiltered();</span><br><span class="line">    mLayout = layout;</span><br><span class="line">    <span class="keyword">if</span> (layout != <span class="keyword">null</span>) &#123;</span><br><span class="line">        <span class="keyword">if</span> (layout.mRecyclerView != <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> IllegalArgumentException(<span class="string">&quot;LayoutManager &quot;</span> + layout</span><br><span class="line">                    + <span class="string">&quot; is already attached to a RecyclerView:&quot;</span></span><br><span class="line">                    + layout.mRecyclerView.exceptionLabel());</span><br><span class="line">        &#125;</span><br><span class="line">        mLayout.setRecyclerView(<span class="keyword">this</span>);</span><br><span class="line">        <span class="keyword">if</span> (mIsAttached) &#123;</span><br><span class="line">            mLayout.dispatchAttachedToWindow(<span class="keyword">this</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    mRecycler.updateViewCacheSize();</span><br><span class="line">    requestLayout();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p> 这里就是把 mLayout 赋值给 RecyclerView ，同时也把 RecyclerView 的引用交给 mLayout 。需要注意的是如果这个时候RecyclerView已经attach到窗口了，会再分发一次dispatchAttachedToWindow()消息。最后调用了requestLayout()</p></li><li><p>然后是 recyclerView.setAdapter():</p> <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setAdapter</span><span class="params">(Adapter adapter)</span> </span>&#123;</span><br><span class="line">    <span class="comment">// bail out if layout is frozen</span></span><br><span class="line">    setLayoutFrozen(<span class="keyword">false</span>);</span><br><span class="line">    setAdapterInternal(adapter, <span class="keyword">false</span>, <span class="keyword">true</span>);</span><br><span class="line">    processDataSetCompletelyChanged(<span class="keyword">false</span>);</span><br><span class="line">    requestLayout();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p> 这里主要的流程当然是<code>setAdapterInternal(adapter, false, true)</code>,不过还是先看看setLayoutFrozen()和requestLayout(),后面会反复用到里面的变量。</p> <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">//采用类似引用技术的方式来控制 requestLayout() 的调用，本身 requestLayout() 是有防止重复调用的机制的，这里为了提高效率减少刷新又增加了一层机制</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">int</span> mInterceptRequestLayoutDepth = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 如果  mInterceptRequestLayoutDepth == 0 并且 mLayoutFrozen是false，才真正requestLayout</span></span><br><span class="line"><span class="comment">// 否则 仅仅是把标志位mLayoutWasDefered改成false</span></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">requestLayout</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (mInterceptRequestLayoutDepth == <span class="number">0</span> &amp;&amp; !mLayoutFrozen) &#123;</span><br><span class="line">        <span class="keyword">super</span>.requestLayout();</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        mLayoutWasDefered = <span class="keyword">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">startInterceptRequestLayout</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    mInterceptRequestLayoutDepth++;</span><br><span class="line">    <span class="keyword">if</span> (mInterceptRequestLayoutDepth == <span class="number">1</span> &amp;&amp; !mLayoutFrozen) &#123;</span><br><span class="line">        mLayoutWasDefered = <span class="keyword">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">stopInterceptRequestLayout</span><span class="params">(<span class="keyword">boolean</span> performLayoutChildren)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (mInterceptRequestLayoutDepth &lt; <span class="number">1</span>) &#123;</span><br><span class="line">        <span class="comment">//noinspection PointlessBooleanExpression</span></span><br><span class="line">        <span class="keyword">if</span> (DEBUG) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> IllegalStateException(<span class="string">&quot;stopInterceptRequestLayout was called more &quot;</span></span><br><span class="line">                    + <span class="string">&quot;times than startInterceptRequestLayout.&quot;</span></span><br><span class="line">                    + exceptionLabel());</span><br><span class="line">        &#125;</span><br><span class="line">        mInterceptRequestLayoutDepth = <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (!performLayoutChildren &amp;&amp; !mLayoutFrozen) &#123;</span><br><span class="line">        <span class="comment">// Reset the layout request eaten counter.</span></span><br><span class="line">        <span class="comment">// This is necessary since eatRequest calls can be nested in which case the other</span></span><br><span class="line">        <span class="comment">// call will override the inner one.</span></span><br><span class="line">        <span class="comment">// for instance:</span></span><br><span class="line">        <span class="comment">// eat layout for process adapter updates</span></span><br><span class="line">        <span class="comment">//   eat layout for dispatchLayout</span></span><br><span class="line">        <span class="comment">//     a bunch of req layout calls arrive</span></span><br><span class="line"></span><br><span class="line">        mLayoutWasDefered = <span class="keyword">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (mInterceptRequestLayoutDepth == <span class="number">1</span>) &#123;</span><br><span class="line">        <span class="comment">// when layout is frozen we should delay dispatchLayout()</span></span><br><span class="line">        <span class="keyword">if</span> (performLayoutChildren &amp;&amp; mLayoutWasDefered &amp;&amp; !mLayoutFrozen</span><br><span class="line">                &amp;&amp; mLayout != <span class="keyword">null</span> &amp;&amp; mAdapter != <span class="keyword">null</span>) &#123;</span><br><span class="line">            dispatchLayout();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (!mLayoutFrozen) &#123;</span><br><span class="line">            mLayoutWasDefered = <span class="keyword">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    mInterceptRequestLayoutDepth--;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">* True if a call to requestLayout was intercepted and prevented from executing like normal and</span></span><br><span class="line"><span class="comment">* we plan on continuing with normal execution later.</span></span><br><span class="line"><span class="comment">* True表示一个requestLayout调用被拦截了，后面会在合适的时候执行 requestLayout</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">boolean</span> mLayoutWasDefered;</span><br><span class="line"></span><br><span class="line"><span class="comment">// setAdapter的时候会调用 setLayoutFrozen(false)，其他地方暂时没看到。</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setLayoutFrozen</span><span class="params">(<span class="keyword">boolean</span> frozen)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (frozen != mLayoutFrozen) &#123;</span><br><span class="line">        assertNotInLayoutOrScroll(<span class="string">&quot;Do not setLayoutFrozen in layout or scroll&quot;</span>);</span><br><span class="line">        <span class="keyword">if</span> (!frozen) &#123;</span><br><span class="line">            mLayoutFrozen = <span class="keyword">false</span>;</span><br><span class="line">            <span class="keyword">if</span> (mLayoutWasDefered &amp;&amp; mLayout != <span class="keyword">null</span> &amp;&amp; mAdapter != <span class="keyword">null</span>) &#123;</span><br><span class="line">                requestLayout();</span><br><span class="line">            &#125;</span><br><span class="line">            mLayoutWasDefered = <span class="keyword">false</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">final</span> <span class="keyword">long</span> now = SystemClock.uptimeMillis();</span><br><span class="line">            MotionEvent cancelEvent = MotionEvent.obtain(now, now,</span><br><span class="line">                    MotionEvent.ACTION_CANCEL, <span class="number">0.0f</span>, <span class="number">0.0f</span>, <span class="number">0</span>);</span><br><span class="line">            onTouchEvent(cancelEvent);</span><br><span class="line">            mLayoutFrozen = <span class="keyword">true</span>;</span><br><span class="line">            mIgnoreMotionEventTillDown = <span class="keyword">true</span>;</span><br><span class="line">            stopScroll();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125; </span><br></pre></td></tr></table></figure><p>总结一下， 上面这几步基本就是初始化一些变量，然后requestLayout()更新界面。接下来则会进入onMeasure()流程，中间的具体过程可以参考 <a href="https://nangonghuang.github.io/2018/08/20/Android%E6%8E%A7%E4%BB%B6%E6%80%BB%E7%BB%93/">Android控件总结</a></p></li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onMeasure</span><span class="params">(<span class="keyword">int</span> widthSpec, <span class="keyword">int</span> heightSpec)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (mLayout == <span class="keyword">null</span>) &#123;</span><br><span class="line">        defaultOnMeasure(widthSpec, heightSpec);</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (mLayout.isAutoMeasureEnabled()) &#123;</span><br><span class="line">        <span class="keyword">final</span> <span class="keyword">int</span> widthMode = MeasureSpec.getMode(widthSpec);</span><br><span class="line">        <span class="keyword">final</span> <span class="keyword">int</span> heightMode = MeasureSpec.getMode(heightSpec);</span><br><span class="line"></span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">            * This specific call should be considered deprecated and replaced with</span></span><br><span class="line"><span class="comment">            * &#123;<span class="doctag">@link</span> #defaultOnMeasure(int, int)&#125;. It can&#x27;t actually be replaced as it could</span></span><br><span class="line"><span class="comment">            * break existing third party code but all documentation directs developers to not</span></span><br><span class="line"><span class="comment">            * override &#123;<span class="doctag">@link</span> LayoutManager#onMeasure(int, int)&#125; when</span></span><br><span class="line"><span class="comment">            * &#123;<span class="doctag">@link</span> LayoutManager#isAutoMeasureEnabled()&#125; returns true.</span></span><br><span class="line"><span class="comment">            */</span></span><br><span class="line">        mLayout.onMeasure(mRecycler, mState, widthSpec, heightSpec);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">final</span> <span class="keyword">boolean</span> measureSpecModeIsExactly =</span><br><span class="line">                widthMode == MeasureSpec.EXACTLY &amp;&amp; heightMode == MeasureSpec.EXACTLY;</span><br><span class="line">        <span class="keyword">if</span> (measureSpecModeIsExactly || mAdapter == <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (mState.mLayoutStep == State.STEP_START) &#123;</span><br><span class="line">            dispatchLayoutStep1();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// set dimensions in 2nd step. Pre-layout should happen with old dimensions for</span></span><br><span class="line">        <span class="comment">// consistency</span></span><br><span class="line">        mLayout.setMeasureSpecs(widthSpec, heightSpec);</span><br><span class="line">        mState.mIsMeasuring = <span class="keyword">true</span>;</span><br><span class="line">        dispatchLayoutStep2();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// now we can get the width and height from the children.</span></span><br><span class="line">        mLayout.setMeasuredDimensionFromChildren(widthSpec, heightSpec);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// if RecyclerView has non-exact width and height and if there is at least one child</span></span><br><span class="line">        <span class="comment">// which also has non-exact width &amp; height, we have to re-measure.</span></span><br><span class="line">        <span class="keyword">if</span> (mLayout.shouldMeasureTwice()) &#123;</span><br><span class="line">            mLayout.setMeasureSpecs(</span><br><span class="line">                    MeasureSpec.makeMeasureSpec(getMeasuredWidth(), MeasureSpec.EXACTLY),</span><br><span class="line">                    MeasureSpec.makeMeasureSpec(getMeasuredHeight(), MeasureSpec.EXACTLY));</span><br><span class="line">            mState.mIsMeasuring = <span class="keyword">true</span>;</span><br><span class="line">            dispatchLayoutStep2();</span><br><span class="line">            <span class="comment">// now we can get the width and height from the children.</span></span><br><span class="line">            mLayout.setMeasuredDimensionFromChildren(widthSpec, heightSpec);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        ...</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">defaultOnMeasure</span><span class="params">(<span class="keyword">int</span> widthSpec, <span class="keyword">int</span> heightSpec)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// calling LayoutManager here is not pretty but that API is already public and it is better</span></span><br><span class="line">        <span class="comment">// than creating another method since this is internal.</span></span><br><span class="line">        <span class="keyword">final</span> <span class="keyword">int</span> width = LayoutManager.chooseSize(widthSpec,</span><br><span class="line">                getPaddingLeft() + getPaddingRight(),</span><br><span class="line">                ViewCompat.getMinimumWidth(<span class="keyword">this</span>));</span><br><span class="line">        <span class="keyword">final</span> <span class="keyword">int</span> height = LayoutManager.chooseSize(heightSpec,</span><br><span class="line">                getPaddingTop() + getPaddingBottom(),</span><br><span class="line">               </span><br><span class="line">                ViewCompat.getMinimumHeight(<span class="keyword">this</span>));</span><br><span class="line"></span><br><span class="line">        setMeasuredDimension(width, height);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">chooseSize</span><span class="params">(<span class="keyword">int</span> spec, <span class="keyword">int</span> desired, <span class="keyword">int</span> min)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">final</span> <span class="keyword">int</span> mode = View.MeasureSpec.getMode(spec);</span><br><span class="line">        <span class="keyword">final</span> <span class="keyword">int</span> size = View.MeasureSpec.getSize(spec);</span><br><span class="line">        <span class="keyword">switch</span> (mode) &#123;</span><br><span class="line">            <span class="keyword">case</span> View.MeasureSpec.EXACTLY:</span><br><span class="line">                <span class="keyword">return</span> size;</span><br><span class="line">            <span class="keyword">case</span> View.MeasureSpec.AT_MOST:</span><br><span class="line">                <span class="keyword">return</span> Math.min(size, Math.max(desired, min));</span><br><span class="line">            <span class="keyword">case</span> View.MeasureSpec.UNSPECIFIED:</span><br><span class="line">            <span class="keyword">default</span>:</span><br><span class="line">                <span class="keyword">return</span> Math.max(desired, min);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>因为 LinearLayoutManager 的 <code>mLayout.isAutoMeasureEnabled()</code>方法直接返回了true,因此这里只看这个分支。这里面首先是调用mLayout.onMeasure()得到 defaultOnMeasure()拿到一个默认值。然后是一个判断跳过的条件，如果RecyclerView的长宽measure mode 都是 MeasureSpec.EXACTLY，那么这个控件的大小就是跟child无关的，可以直接跳过。否则的话直接在这里走 dispatchLayoutStep()的流程，而 dispatchLayoutStep2() 中会添加 childView，添加了之后再次重新 mLayout.setMeasuredDimensionFromChildren().最后判断是不是需要再次测量，再次进行测量的条件是 RecyclerView的长宽 measure mode 都不是 MeasureSpec.EXACTLY 并且子view的长宽也没有指定具体数值。</p><p>看一下 dispatchLayoutStep1 和 dispatchLayoutStep2</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">  * The first step of a layout where we;</span></span><br><span class="line"><span class="comment">  * - process adapter updates</span></span><br><span class="line"><span class="comment">  * - decide which animation should run</span></span><br><span class="line"><span class="comment">  * - save information about current views</span></span><br><span class="line"><span class="comment">  * - If necessary, run predictive layout and save its information</span></span><br><span class="line"><span class="comment">  */</span></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">dispatchLayoutStep1</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    mState.assertLayoutStep(State.STEP_START);</span><br><span class="line">    fillRemainingScrollValues(mState);</span><br><span class="line">    mState.mIsMeasuring = <span class="keyword">false</span>;</span><br><span class="line">    startInterceptRequestLayout();</span><br><span class="line">    mViewInfoStore.clear();</span><br><span class="line">    onEnterLayoutOrScroll();</span><br><span class="line">    processAdapterUpdatesAndSetAnimationFlags(); <span class="comment">// step 1 and step 2</span></span><br><span class="line">    saveFocusInfo();</span><br><span class="line">    mState.mTrackOldChangeHolders = mState.mRunSimpleAnimations &amp;&amp; mItemsChanged;</span><br><span class="line">    mItemsAddedOrRemoved = mItemsChanged = <span class="keyword">false</span>;</span><br><span class="line">    mState.mInPreLayout = mState.mRunPredictiveAnimations;</span><br><span class="line">    mState.mItemCount = mAdapter.getItemCount();</span><br><span class="line">    findMinMaxChildLayoutPositions(mMinMaxLayoutPositions);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (mState.mRunSimpleAnimations) &#123;</span><br><span class="line">        <span class="comment">// Step 0: Find out where all non-removed items are, pre-layout</span></span><br><span class="line">        <span class="keyword">int</span> count = mChildHelper.getChildCount();</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; count; ++i) &#123;</span><br><span class="line">            <span class="keyword">final</span> ViewHolder holder = getChildViewHolderInt(mChildHelper.getChildAt(i));</span><br><span class="line">            <span class="keyword">if</span> (holder.shouldIgnore() || (holder.isInvalid() &amp;&amp; !mAdapter.hasStableIds())) &#123;</span><br><span class="line">                <span class="keyword">continue</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">final</span> ItemHolderInfo animationInfo = mItemAnimator</span><br><span class="line">                    .recordPreLayoutInformation(mState, holder,</span><br><span class="line">                            ItemAnimator.buildAdapterChangeFlagsForAnimations(holder),</span><br><span class="line">                            holder.getUnmodifiedPayloads());</span><br><span class="line">            mViewInfoStore.addToPreLayout(holder, animationInfo);</span><br><span class="line">            <span class="keyword">if</span> (mState.mTrackOldChangeHolders &amp;&amp; holder.isUpdated() &amp;&amp; !holder.isRemoved()</span><br><span class="line">                    &amp;&amp; !holder.shouldIgnore() &amp;&amp; !holder.isInvalid()) &#123;</span><br><span class="line">                <span class="keyword">long</span> key = getChangedHolderKey(holder);</span><br><span class="line">                <span class="comment">// This is NOT the only place where a ViewHolder is added to old change holders</span></span><br><span class="line">                <span class="comment">// list. There is another case where:</span></span><br><span class="line">                <span class="comment">//    * A VH is currently hidden but not deleted</span></span><br><span class="line">                <span class="comment">//    * The hidden item is changed in the adapter</span></span><br><span class="line">                <span class="comment">//    * Layout manager decides to layout the item in the pre-Layout pass (step1)</span></span><br><span class="line">                <span class="comment">// When this case is detected, RV will un-hide that view and add to the old</span></span><br><span class="line">                <span class="comment">// change holders list.</span></span><br><span class="line">                mViewInfoStore.addToOldChangeHolders(key, holder);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (mState.mRunPredictiveAnimations) &#123;</span><br><span class="line">        <span class="comment">// Step 1: run prelayout: This will use the old positions of items. The layout manager</span></span><br><span class="line">        <span class="comment">// is expected to layout everything, even removed items (though not to add removed</span></span><br><span class="line">        <span class="comment">// items back to the container). This gives the pre-layout position of APPEARING views</span></span><br><span class="line">        <span class="comment">// which come into existence as part of the real layout.</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// Save old positions so that LayoutManager can run its mapping logic.</span></span><br><span class="line">        saveOldPositions();</span><br><span class="line">        <span class="keyword">final</span> <span class="keyword">boolean</span> didStructureChange = mState.mStructureChanged;</span><br><span class="line">        mState.mStructureChanged = <span class="keyword">false</span>;</span><br><span class="line">        <span class="comment">// temporarily disable flag because we are asking for previous layout</span></span><br><span class="line">        mLayout.onLayoutChildren(mRecycler, mState);</span><br><span class="line">        mState.mStructureChanged = didStructureChange;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; mChildHelper.getChildCount(); ++i) &#123;</span><br><span class="line">            <span class="keyword">final</span> View child = mChildHelper.getChildAt(i);</span><br><span class="line">            <span class="keyword">final</span> ViewHolder viewHolder = getChildViewHolderInt(child);</span><br><span class="line">            <span class="keyword">if</span> (viewHolder.shouldIgnore()) &#123;</span><br><span class="line">                <span class="keyword">continue</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (!mViewInfoStore.isInPreLayout(viewHolder)) &#123;</span><br><span class="line">                <span class="keyword">int</span> flags = ItemAnimator.buildAdapterChangeFlagsForAnimations(viewHolder);</span><br><span class="line">                <span class="keyword">boolean</span> wasHidden = viewHolder</span><br><span class="line">                        .hasAnyOfTheFlags(ViewHolder.FLAG_BOUNCED_FROM_HIDDEN_LIST);</span><br><span class="line">                <span class="keyword">if</span> (!wasHidden) &#123;</span><br><span class="line">                    flags |= ItemAnimator.FLAG_APPEARED_IN_PRE_LAYOUT;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">final</span> ItemHolderInfo animationInfo = mItemAnimator.recordPreLayoutInformation(</span><br><span class="line">                        mState, viewHolder, flags, viewHolder.getUnmodifiedPayloads());</span><br><span class="line">                <span class="keyword">if</span> (wasHidden) &#123;</span><br><span class="line">                    recordAnimationInfoIfBouncedHiddenView(viewHolder, animationInfo);</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    mViewInfoStore.addToAppearedInPreLayoutHolders(viewHolder, animationInfo);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// we don&#x27;t process disappearing list because they may re-appear in post layout pass.</span></span><br><span class="line">        clearOldPositions();</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        clearOldPositions();</span><br><span class="line">    &#125;</span><br><span class="line">    onExitLayoutOrScroll();</span><br><span class="line">    stopInterceptRequestLayout(<span class="keyword">false</span>);</span><br><span class="line">    mState.mLayoutStep = State.STEP_LAYOUT;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">processAdapterUpdatesAndSetAnimationFlags</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (mDataSetHasChangedAfterLayout) &#123;</span><br><span class="line">        <span class="comment">// Processing these items have no value since data set changed unexpectedly.</span></span><br><span class="line">        <span class="comment">// Instead, we just reset it.</span></span><br><span class="line">        mAdapterHelper.reset();</span><br><span class="line">        <span class="keyword">if</span> (mDispatchItemsChangedEvent) &#123;</span><br><span class="line">            mLayout.onItemsChanged(<span class="keyword">this</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// simple animations are a subset of advanced animations (which will cause a</span></span><br><span class="line">    <span class="comment">// pre-layout step)</span></span><br><span class="line">    <span class="comment">// If layout supports predictive animations, pre-process to decide if we want to run them</span></span><br><span class="line">    <span class="keyword">if</span> (predictiveItemAnimationsEnabled()) &#123;</span><br><span class="line">        mAdapterHelper.preProcess();</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        mAdapterHelper.consumeUpdatesInOnePass();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">boolean</span> animationTypeSupported = mItemsAddedOrRemoved || mItemsChanged;</span><br><span class="line">    mState.mRunSimpleAnimations = mFirstLayoutComplete</span><br><span class="line">            &amp;&amp; mItemAnimator != <span class="keyword">null</span></span><br><span class="line">            &amp;&amp; (mDataSetHasChangedAfterLayout</span><br><span class="line">            || animationTypeSupported</span><br><span class="line">            || mLayout.mRequestedSimpleAnimations)</span><br><span class="line">            &amp;&amp; (!mDataSetHasChangedAfterLayout</span><br><span class="line">            || mAdapter.hasStableIds());</span><br><span class="line">    mState.mRunPredictiveAnimations = mState.mRunSimpleAnimations</span><br><span class="line">            &amp;&amp; animationTypeSupported</span><br><span class="line">            &amp;&amp; !mDataSetHasChangedAfterLayout</span><br><span class="line">            &amp;&amp; predictiveItemAnimationsEnabled();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p> dispatchLayoutStep1(),第一次在onMeasure()里面执行的时候，因为这个时候 childview 还没有添加进来，很多逻辑都会跳过，此时会把step设置成 STEP_LAYOUT ，后面再次执行 onMeasure() 的时候， dispatchLayoutStep1() 主要做了两件事，一个是处理adapter数据的变化，这个主要是通过 <code>mAdapterHelper.preProcess()</code>来完成的，主要是把操作队列中 item 的 MOVE 操作移到最后，然后就是生成一个 animationInfo 数据并且把它保存在 mViewInfoStore 中。</p><p> dispatchLayoutStep2()，这里则是layoutChild实际执行的地方，会对child 执行 measure ，addview 和 layout 操作 ,出于灵活性的考虑，这里RecyclerView并没有实现，而是交给了 layout.onLayoutChildren() 方法去实现它，这样子就可以有不同的显示效果。需要注意的是这个方法可能会被调用多次，因此如果是自定义实现LayoutManager的话需要考虑到这种情况避免重复添加和layout。</p><p>在onMeasure()执行完之后，接下来会进入到 onLayout() :</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onLayout</span><span class="params">(<span class="keyword">boolean</span> changed, <span class="keyword">int</span> l, <span class="keyword">int</span> t, <span class="keyword">int</span> r, <span class="keyword">int</span> b)</span> </span>&#123;</span><br><span class="line">    TraceCompat.beginSection(TRACE_ON_LAYOUT_TAG);</span><br><span class="line">    dispatchLayout();</span><br><span class="line">    TraceCompat.endSection();</span><br><span class="line">    mFirstLayoutComplete = <span class="keyword">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">dispatchLayout</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (mAdapter == <span class="keyword">null</span>) &#123;</span><br><span class="line">        Log.e(TAG, <span class="string">&quot;No adapter attached; skipping layout&quot;</span>);</span><br><span class="line">        <span class="comment">// leave the state in START</span></span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (mLayout == <span class="keyword">null</span>) &#123;</span><br><span class="line">        Log.e(TAG, <span class="string">&quot;No layout manager attached; skipping layout&quot;</span>);</span><br><span class="line">        <span class="comment">// leave the state in START</span></span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    mState.mIsMeasuring = <span class="keyword">false</span>;</span><br><span class="line">    <span class="keyword">if</span> (mState.mLayoutStep == State.STEP_START) &#123;</span><br><span class="line">        dispatchLayoutStep1();</span><br><span class="line">        mLayout.setExactMeasureSpecsFrom(<span class="keyword">this</span>);</span><br><span class="line">        dispatchLayoutStep2();</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (mAdapterHelper.hasUpdates() || mLayout.getWidth() != getWidth()</span><br><span class="line">            || mLayout.getHeight() != getHeight()) &#123;</span><br><span class="line">        <span class="comment">// First 2 steps are done in onMeasure but looks like we have to run again due to</span></span><br><span class="line">        <span class="comment">// changed size.</span></span><br><span class="line">        mLayout.setExactMeasureSpecsFrom(<span class="keyword">this</span>);</span><br><span class="line">        dispatchLayoutStep2();</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="comment">// always make sure we sync them (to ensure mode is exact)</span></span><br><span class="line">        mLayout.setExactMeasureSpecsFrom(<span class="keyword">this</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    dispatchLayoutStep3();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>onLayout() 里面首先是 更新 mIsMeasuring 的状态为false,然后是根据 mState.mLayoutStep 来决定是不是要重新执行 dispatchLayoutStep1() 和 dispatchLayoutStep2() , 因为 mState.mLayoutStep 在 dispatchLayoutStep3() 中会被重置为STEP_START，所以这里其实是为了保障1和3有序执行。如果layout里面保存的宽高和 RecyclerView当前的宽高不一致(意思是大小变化了)，则会重新进入dispatchLayoutStep2()再次执行 layout.onLayoutChildren() 方法。然后执行 dispatchLayoutStep3() ，最后更新 mFirstLayoutComplete 为true :</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br></pre></td><td class="code"><pre><span class="line"> <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">dispatchLayoutStep3</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    mState.assertLayoutStep(State.STEP_ANIMATIONS);</span><br><span class="line">    eatRequestLayout();</span><br><span class="line">    onEnterLayoutOrScroll();</span><br><span class="line">    mState.mLayoutStep = State.STEP_START;</span><br><span class="line">    <span class="keyword">if</span> (mState.mRunSimpleAnimations) &#123;</span><br><span class="line">        <span class="comment">// Step 3: Find out where things are now, and process change animations.</span></span><br><span class="line">        <span class="comment">// traverse list in reverse because we may call animateChange in the loop which may</span></span><br><span class="line">        <span class="comment">// remove the target view holder.</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = mChildHelper.getChildCount() - <span class="number">1</span>; i &gt;= <span class="number">0</span>; i--) &#123;</span><br><span class="line">            ViewHolder holder = getChildViewHolderInt(mChildHelper.getChildAt(i));</span><br><span class="line">            <span class="keyword">if</span> (holder.shouldIgnore()) &#123;</span><br><span class="line">                <span class="keyword">continue</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">long</span> key = getChangedHolderKey(holder);</span><br><span class="line">            <span class="keyword">final</span> ItemHolderInfo animationInfo = mItemAnimator</span><br><span class="line">                    .recordPostLayoutInformation(mState, holder);</span><br><span class="line">            ViewHolder oldChangeViewHolder = mViewInfoStore.getFromOldChangeHolders(key);</span><br><span class="line">            <span class="keyword">if</span> (oldChangeViewHolder != <span class="keyword">null</span> &amp;&amp; !oldChangeViewHolder.shouldIgnore()) &#123;</span><br><span class="line">                <span class="comment">// run a change animation</span></span><br><span class="line"></span><br><span class="line">                <span class="comment">// If an Item is CHANGED but the updated version is disappearing, it creates</span></span><br><span class="line">                <span class="comment">// a conflicting case.</span></span><br><span class="line">                <span class="comment">// Since a view that is marked as disappearing is likely to be going out of</span></span><br><span class="line">                <span class="comment">// bounds, we run a change animation. Both views will be cleaned automatically</span></span><br><span class="line">                <span class="comment">// once their animations finish.</span></span><br><span class="line">                <span class="comment">// On the other hand, if it is the same view holder instance, we run a</span></span><br><span class="line">                <span class="comment">// disappearing animation instead because we are not going to rebind the updated</span></span><br><span class="line">                <span class="comment">// VH unless it is enforced by the layout manager.</span></span><br><span class="line">                <span class="keyword">final</span> <span class="keyword">boolean</span> oldDisappearing = mViewInfoStore.isDisappearing(</span><br><span class="line">                        oldChangeViewHolder);</span><br><span class="line">                <span class="keyword">final</span> <span class="keyword">boolean</span> newDisappearing = mViewInfoStore.isDisappearing(holder);</span><br><span class="line">                <span class="keyword">if</span> (oldDisappearing &amp;&amp; oldChangeViewHolder == holder) &#123;</span><br><span class="line">                    <span class="comment">// run disappear animation instead of change</span></span><br><span class="line">                    mViewInfoStore.addToPostLayout(holder, animationInfo);</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    <span class="keyword">final</span> ItemHolderInfo preInfo = mViewInfoStore.popFromPreLayout(</span><br><span class="line">                            oldChangeViewHolder);</span><br><span class="line">                    <span class="comment">// we add and remove so that any post info is merged.</span></span><br><span class="line">                    mViewInfoStore.addToPostLayout(holder, animationInfo);</span><br><span class="line">                    ItemHolderInfo postInfo = mViewInfoStore.popFromPostLayout(holder);</span><br><span class="line">                    <span class="keyword">if</span> (preInfo == <span class="keyword">null</span>) &#123;</span><br><span class="line">                        handleMissingPreInfoForChangeError(key, holder, oldChangeViewHolder);</span><br><span class="line">                    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                        animateChange(oldChangeViewHolder, holder, preInfo, postInfo,</span><br><span class="line">                                oldDisappearing, newDisappearing);</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                mViewInfoStore.addToPostLayout(holder, animationInfo);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// Step 4: Process view info lists and trigger animations</span></span><br><span class="line">        mViewInfoStore.process(mViewInfoProcessCallback);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    mLayout.removeAndRecycleScrapInt(mRecycler);</span><br><span class="line">    mState.mPreviousLayoutItemCount = mState.mItemCount;</span><br><span class="line">    mDataSetHasChangedAfterLayout = <span class="keyword">false</span>;</span><br><span class="line">    mState.mRunSimpleAnimations = <span class="keyword">false</span>;</span><br><span class="line"></span><br><span class="line">    mState.mRunPredictiveAnimations = <span class="keyword">false</span>;</span><br><span class="line">    mLayout.mRequestedSimpleAnimations = <span class="keyword">false</span>;</span><br><span class="line">    <span class="keyword">if</span> (mRecycler.mChangedScrap != <span class="keyword">null</span>) &#123;</span><br><span class="line">        mRecycler.mChangedScrap.clear();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (mLayout.mPrefetchMaxObservedInInitialPrefetch) &#123;</span><br><span class="line">        <span class="comment">// Initial prefetch has expanded cache, so reset until next prefetch.</span></span><br><span class="line">        <span class="comment">// This prevents initial prefetches from expanding the cache permanently.</span></span><br><span class="line">        mLayout.mPrefetchMaxCountObserved = <span class="number">0</span>;</span><br><span class="line">        mLayout.mPrefetchMaxObservedInInitialPrefetch = <span class="keyword">false</span>;</span><br><span class="line">        mRecycler.updateViewCacheSize();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    mLayout.onLayoutCompleted(mState);</span><br><span class="line">    onExitLayoutOrScroll();</span><br><span class="line">    resumeRequestLayout(<span class="keyword">false</span>);</span><br><span class="line">    mViewInfoStore.clear();</span><br><span class="line">    <span class="keyword">if</span> (didChildRangeChange(mMinMaxLayoutPositions[<span class="number">0</span>], mMinMaxLayoutPositions[<span class="number">1</span>])) &#123;</span><br><span class="line">        dispatchOnScrolled(<span class="number">0</span>, <span class="number">0</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    recoverFocusFromState();</span><br><span class="line">    resetFocusInfo();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>step3 首先是重置 layoutStep为 State.STEP_START，这样下次可以进入step1()了，然后是保存当前的 animationInfo 信息(此时已经经过step2添加了childview,信息会有变化)，然后根据 状态信息的变化调用 animateChange() 触发动画的执行。之后是清理，重置相关的变量，为下一次 dispathLayout() 做准备。</p><p>最后是 onDraw() 方法，不过搜索 onDraw() 方法的时候却发现 RecyclerView 还重写了 draw() 方法,回顾一下控件的<a href="https://nangonghuang.github.io/2018/08/20/Android%E6%8E%A7%E4%BB%B6%E6%80%BB%E7%BB%93/">整个一般性流程</a>：</p><p><img src="/2018/09/05/Android%E6%8E%A7%E4%BB%B6-RecyclerView/performTraversals.jpg" alt="performTraversals"></p><p>结合 RecyclerView 中的代码:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">draw</span><span class="params">(Canvas c)</span> </span>&#123;</span><br><span class="line">      <span class="keyword">super</span>.draw(c);</span><br><span class="line"></span><br><span class="line">      <span class="keyword">final</span> <span class="keyword">int</span> count = mItemDecorations.size();</span><br><span class="line">      <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; count; i++) &#123;</span><br><span class="line">          mItemDecorations.get(i).onDrawOver(c, <span class="keyword">this</span>, mState);</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">      ...</span><br><span class="line"></span><br><span class="line">      <span class="comment">// If some views are animating, ItemDecorators are likely to move/change with them.</span></span><br><span class="line">      <span class="comment">// Invalidate RecyclerView to re-draw decorators. This is still efficient because children&#x27;s</span></span><br><span class="line">      <span class="comment">// display lists are not invalidated.</span></span><br><span class="line">      <span class="keyword">if</span> (!needsInvalidate &amp;&amp; mItemAnimator != <span class="keyword">null</span> &amp;&amp; mItemDecorations.size() &gt; <span class="number">0</span></span><br><span class="line">              &amp;&amp; mItemAnimator.isRunning()) &#123;</span><br><span class="line">          needsInvalidate = <span class="keyword">true</span>;</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">      <span class="keyword">if</span> (needsInvalidate) &#123;</span><br><span class="line">          ViewCompat.postInvalidateOnAnimation(<span class="keyword">this</span>);</span><br><span class="line">      &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@Override</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onDraw</span><span class="params">(Canvas c)</span> </span>&#123;</span><br><span class="line">      <span class="keyword">super</span>.onDraw(c);</span><br><span class="line"></span><br><span class="line">      <span class="keyword">final</span> <span class="keyword">int</span> count = mItemDecorations.size();</span><br><span class="line">      <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; count; i++) &#123;</span><br><span class="line">          mItemDecorations.get(i).onDraw(c, <span class="keyword">this</span>, mState);</span><br><span class="line">      &#125;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><p>可以看到，这里的调用顺序是 进入 draw(c) ,先调用 super.draw(c) 开始走 onDraw() 流程 , 然后 dispatchDraw() 分发给子view 去绘制自己， 最后再接着调用 onDrawOver() 进行回调。绘制的流程中主要是 ItemDecoration 的绘制，这个在<a href="https://nangonghuang.github.io/2018/09/10/Android%E6%8E%A7%E4%BB%B6-RecyclerView2-ItemDecoration/">下一篇</a>说。</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;RecyclerView 是谷歌官方推出的控件，可以完全取代listView,根据不同的layoutManager实现不同的显示效果。&lt;a href=&quot;https://www.bilibili.com/video/av24828197&quot;&gt;这里&lt;/a&gt; 有一个谷歌的RecyclerView视频介绍&lt;/p&gt;</summary>
    
    
    
    <category term="android_app" scheme="http://example.com/categories/android-app/"/>
    
    
    <category term="列表控件" scheme="http://example.com/tags/%E5%88%97%E8%A1%A8%E6%8E%A7%E4%BB%B6/"/>
    
  </entry>
  
</feed>
