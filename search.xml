<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>Android-DiskLruCache</title>
    <url>/2017/12/06/Android-DiskLruCache/</url>
    <content><![CDATA[<p>DiskLruCache是用来在磁盘上缓存文件的类，<a id="more"></a>在网上看到说的都是谷歌写的，不过我找到的DiskLruCache目前都是jakewharton的库，但里面的注释都是Android Open Source Project，不是很清楚这之间的原因。</p>
<p>一个是独立的库，文件流的操作采用Java IO , 通过</p>
<blockquote>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">api &#39;com.jakewharton:disklrucache:2.0.2&#39;</span><br></pre></td></tr></table></figure>
<p>使用，另外一个是okhttp里面的，文件流操作采用ok.io，两者都是类似的。</p>
</blockquote>
<p>一次写入操作的代码是</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"> <span class="comment">/**</span></span><br><span class="line"><span class="comment">  * 在这段代码里面，需要关注的，</span></span><br><span class="line"><span class="comment">  * 一是Editor是什么；在DiskLruCache里面，Editor是用来对Entry进行操作的类，而Entry又是对缓存文件</span></span><br><span class="line"><span class="comment">  * 的封装，包括cleanFile和dirtyFile，我们每次拿imageUrl生成一个key,然后根据这个key创建一个Entry条 	</span></span><br><span class="line"><span class="comment">  * 目，然后用Editor控制缓存文件的读写。文件的写入是先写到DirtyFile，然后再通过Editor.commit提</span></span><br><span class="line"><span class="comment">  * 交，提交成功则把DirtyFile重命名为cleanFile,失败则丢弃，同时也会写到相应的日志文件里面去</span></span><br><span class="line"><span class="comment">  */</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">new</span> Thread(<span class="keyword">new</span> Runnable() &#123;  </span><br><span class="line">    <span class="meta">@Override</span>  </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;  </span><br><span class="line">        <span class="keyword">try</span> &#123;  </span><br><span class="line">            String imageUrl = <span class="string">&quot;http://img.my.csdn.net/uploads/201309/01/1378037235_7476.jpg&quot;</span>;  </span><br><span class="line">            String key = hashKeyForDisk(imageUrl);  </span><br><span class="line">            DiskLruCache.Editor editor = mDiskLruCache.edit(key);  </span><br><span class="line">            <span class="keyword">if</span> (editor != <span class="keyword">null</span>) &#123;  </span><br><span class="line">                OutputStream outputStream = editor.newOutputStream(<span class="number">0</span>);  </span><br><span class="line">                <span class="keyword">if</span> (downloadUrlToStream(imageUrl, outputStream)) &#123;  </span><br><span class="line">                    editor.commit();  </span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;  </span><br><span class="line">                    editor.abort();  </span><br><span class="line">                &#125;  </span><br><span class="line">            &#125;  </span><br><span class="line">            mDiskLruCache.flush();  </span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;  </span><br><span class="line">            e.printStackTrace();  </span><br><span class="line">        &#125;  </span><br><span class="line">    &#125;  </span><br><span class="line">&#125;).start();</span><br></pre></td></tr></table></figure>
<p>读取操作：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"> <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * 这里涉及到Snapshot类，Snapshot是在mDiskLruCache.get(key)的时候才生成的，主要作用是根据</span></span><br><span class="line"><span class="comment">         * key取到的Entry，对这个Entry做一个封装，把Entry的一些参数暴露出来给Snapshot,比如拿到文件</span></span><br><span class="line"><span class="comment">         * 输入流给你，至于为什么要这么做，猜测一是为了隐藏Entry类，只把需要的参数暴露出来，二是承担</span></span><br><span class="line"><span class="comment">         * 读取的作用，让Editor专心去写。很多文件写入的封装都是用一个Editor去写并且不负责读，写的好处</span></span><br><span class="line"><span class="comment">         * 在于隔离了数据生效的及时性，可以通过Editor来控制同步或者异步写入数据的过程，同时也能在中间</span></span><br><span class="line"><span class="comment">         * 做一些处理，至于为什么不让Editor类负责读数据...只能猜测就是这么设计这个类的功能的。。。</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">try</span> &#123;  </span><br><span class="line">    String imageUrl = <span class="string">&quot;http://img.my.csdn.net/uploads/201309/01/1378037235_7476.jpg&quot;</span>;  </span><br><span class="line">    String key = hashKeyForDisk(imageUrl);  </span><br><span class="line">    DiskLruCache.Snapshot snapShot = mDiskLruCache.get(key);  </span><br><span class="line">    <span class="keyword">if</span> (snapShot != <span class="keyword">null</span>) &#123;  </span><br><span class="line">        InputStream is = snapShot.getInputStream(<span class="number">0</span>);  </span><br><span class="line">        Bitmap bitmap = BitmapFactory.decodeStream(is);  </span><br><span class="line">        mImage.setImageBitmap(bitmap);  </span><br><span class="line">    &#125;  </span><br><span class="line">&#125; <span class="keyword">catch</span> (IOException e) &#123;  </span><br><span class="line">    e.printStackTrace();  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>和读写缓存相关的就是这些类了，另外在DiskLruCache中很大的一部分内容是缓存日志的读写操作，下面的日志文件的注释</p>
<blockquote>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;**</span><br><span class="line"> * 这个缓存用了一个名字较journal的日志文件，一个典型的日志文件是这样的格式：</span><br><span class="line"> *     libcore.io.DiskLruCache</span><br><span class="line"> *     1</span><br><span class="line"> *     100</span><br><span class="line"> *     2</span><br><span class="line"> *</span><br><span class="line"> *     CLEAN 3400330d1dfc7f3f7f4b8d4d803dfcf6 832 21054</span><br><span class="line"> *     DIRTY 335c4c6028171cfddfbaae1a9c313c52</span><br><span class="line"> *     CLEAN 335c4c6028171cfddfbaae1a9c313c52 3934 2342</span><br><span class="line"> *     REMOVE 335c4c6028171cfddfbaae1a9c313c52</span><br><span class="line"> *     DIRTY 1ab96a171faeeee38496d8b330771a7a</span><br><span class="line"> *     CLEAN 1ab96a171faeeee38496d8b330771a7a 1600 234</span><br><span class="line"> *     READ 335c4c6028171cfddfbaae1a9c313c52</span><br><span class="line"> *     READ 3400330d1dfc7f3f7f4b8d4d803dfcf6</span><br><span class="line"> *</span><br><span class="line"> * 头五行构成了日志文件的header。它们是固定的字符串&quot;libcore.io.DiskLruCache&quot;，磁盘缓存的</span><br><span class="line"> * 版本号，应用程序的版本号，valueCount（一个key对应几套读写缓存文件），空白行</span><br><span class="line"> *</span><br><span class="line"> * 下面的连续行每一行都表示对一个canche Entry的状态的记录，包括三个数据，状态，key，和可选的</span><br><span class="line"> * 状态相关的数值</span><br><span class="line"> *   DIRTY行  表示一个Entry正在被创建或者更新。每一个成功的DIRTY动作都应该紧跟着一个CLEAN行</span><br><span class="line"> *          或者REMOVE行，如果缺失CLEAN或者REMOVE表示这一行的key对应的缓存文件需要被删除掉</span><br><span class="line"> *   CLEAN行  表示一个Entry已经成功的记录下来并且可读了，后面跟着的数据表示每一个文件的长度</span><br><span class="line"> *   READ行   表示一次成功的读取记录</span><br><span class="line"> *   REMOVE行  表示已经删除掉的Entry的记录</span><br><span class="line"> *</span><br><span class="line"> * The journal file is appended to as cache operations occur. The journal may</span><br><span class="line"> * occasionally be compacted by dropping redundant lines. A temporary file named</span><br><span class="line"> * &quot;journal.tmp&quot; will be used during compaction; that file should be deleted if</span><br><span class="line"> * it exists when the cache is opened.</span><br><span class="line"> *&#x2F;</span><br></pre></td></tr></table></figure>
<p>读取这个日志文件用到了一个工具类函数</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"> <span class="comment">/**</span></span><br><span class="line"><span class="comment">   * Reads the next line. A line ends with &#123;<span class="doctag">@code</span> &quot;\n&quot;&#125; or &#123;<span class="doctag">@code</span> &quot;\r\n&quot;&#125;,</span></span><br><span class="line"><span class="comment">   * this end of line marker is not included in the result.</span></span><br><span class="line"><span class="comment">   *</span></span><br><span class="line"><span class="comment">   * <span class="doctag">@return</span> the next line from the input.</span></span><br><span class="line"><span class="comment">   * <span class="doctag">@throws</span> IOException for underlying &#123;<span class="doctag">@code</span> InputStream&#125; errors.</span></span><br><span class="line"><span class="comment">   * <span class="doctag">@throws</span> EOFException for the end of source stream.</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line"><span class="comment">//读取一行数据</span></span><br><span class="line"><span class="comment">// 从输入流里面读8192的数据到buf[]里面去，检查有没有换行符，有就输出，没有再new ByteArrayOutputStream</span></span><br><span class="line"><span class="comment">// 类，循环的读数据到buf再写到output流里面去，一直读到文件末尾都没有换行符则抛出Exception</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> String <span class="title">readLine</span><span class="params">()</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">    <span class="keyword">synchronized</span> (in) &#123;</span><br><span class="line">      <span class="keyword">if</span> (buf == <span class="keyword">null</span>) &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> IOException(<span class="string">&quot;LineReader is closed&quot;</span>);</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">      <span class="comment">// Read more data if we are at the end of the buffered data.</span></span><br><span class="line">      <span class="comment">// Though it&#x27;s an error to read after an exception, we will let &#123;@code fillBuf()&#125;</span></span><br><span class="line">      <span class="comment">// throw again if that happens; thus we need to handle end == -1 as well as end == pos.</span></span><br><span class="line">      <span class="keyword">if</span> (pos &gt;= end) &#123;</span><br><span class="line">        fillBuf();</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="comment">// Try to find LF in the buffered data and return the line if successful.</span></span><br><span class="line">      <span class="keyword">for</span> (<span class="keyword">int</span> i = pos; i != end; ++i) &#123;</span><br><span class="line">        <span class="keyword">if</span> (buf[i] == LF) &#123;</span><br><span class="line">          <span class="keyword">int</span> lineEnd = (i != pos &amp;&amp; buf[i - <span class="number">1</span>] == CR) ? i - <span class="number">1</span> : i;</span><br><span class="line">          String res = <span class="keyword">new</span> String(buf, pos, lineEnd - pos, charset.name());</span><br><span class="line">          pos = i + <span class="number">1</span>;</span><br><span class="line">          <span class="keyword">return</span> res;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">      <span class="comment">// Let&#x27;s anticipate up to 80 characters on top of those already read.</span></span><br><span class="line">      ByteArrayOutputStream out = <span class="keyword">new</span> ByteArrayOutputStream(end - pos + <span class="number">80</span>) &#123;</span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</span><br><span class="line">          <span class="keyword">int</span> length = (count &gt; <span class="number">0</span> &amp;&amp; buf[count - <span class="number">1</span>] == CR) ? count - <span class="number">1</span> : count;</span><br><span class="line">          <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> String(buf, <span class="number">0</span>, length, charset.name());</span><br><span class="line">          &#125; <span class="keyword">catch</span> (UnsupportedEncodingException e) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> AssertionError(e); <span class="comment">// Since we control the charset this will never happen.</span></span><br><span class="line">          &#125;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;;</span><br><span class="line"></span><br><span class="line">      <span class="keyword">while</span> (<span class="keyword">true</span>) &#123;</span><br><span class="line">        out.write(buf, pos, end - pos);</span><br><span class="line">        <span class="comment">// Mark unterminated line in case fillBuf throws EOFException or IOException.</span></span><br><span class="line">        end = -<span class="number">1</span>;</span><br><span class="line">        fillBuf();</span><br><span class="line">        <span class="comment">// Try to find LF in the buffered data and return the line if successful.</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = pos; i != end; ++i) &#123;</span><br><span class="line">          <span class="keyword">if</span> (buf[i] == LF) &#123;</span><br><span class="line">            <span class="keyword">if</span> (i != pos) &#123;</span><br><span class="line">              out.write(buf, pos, i - pos);</span><br><span class="line">            &#125;</span><br><span class="line">            pos = i + <span class="number">1</span>;</span><br><span class="line">            <span class="keyword">return</span> out.toString();</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">   * Reads new input data into the buffer. Call only with pos == end or end == -1,</span></span><br><span class="line"><span class="comment">   * depending on the desired outcome if the function throws.</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">  <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">fillBuf</span><span class="params">()</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> result = in.read(buf, <span class="number">0</span>, buf.length);</span><br><span class="line">    <span class="keyword">if</span> (result == -<span class="number">1</span>) &#123;</span><br><span class="line">      <span class="keyword">throw</span> <span class="keyword">new</span> EOFException();</span><br><span class="line">    &#125;</span><br><span class="line">    pos = <span class="number">0</span>;</span><br><span class="line">    end = result;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure>
<p>其他更详细的细节需要去看源码了。</p>
<p>感谢 <a href="http://blog.csdn.net/guolin_blog/article/details/28863651">郭霖的博客</a></p>
]]></content>
      <categories>
        <category>android_app</category>
      </categories>
  </entry>
  <entry>
    <title>Android-ANR分析</title>
    <url>/2017/11/24/Android-ANR%E5%88%86%E6%9E%90/</url>
    <content><![CDATA[<p><a href="http://blog.csdn.net/dadoneo/article/details/8270107">来源</a>,在这里看到的一些总结，觉得有些收获</p>
<a id="more"></a>

<h2 id="ANR类型"><a href="#ANR类型" class="headerlink" title="ANR类型"></a>ANR类型</h2><p>ANR一般有三种类型：</p>
<ol>
<li><p>KeyDispatchTimeout(5 seconds) –<strong>主要类型</strong></p>
<p>按键或触摸事件在特定时间内无响应</p>
</li>
<li><p>BroadcastTimeout(10 seconds)</p>
<p>BroadcastReceiver在特定时间内无法处理完成</p>
</li>
<li><p>ServiceTimeout(20 seconds) –<strong>小概率类型</strong></p>
<p>Service在特定的时间内无法处理完成</p>
</li>
</ol>
<h2 id="如何去分析ANR"><a href="#如何去分析ANR" class="headerlink" title="如何去分析ANR"></a>如何去分析ANR</h2><p>先看个LOG:</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">04-01 13:12:11.572** I&#x2F;InputDispatcher( 220): Application is not responding**:Window&#123;2b263310com.android.email&#x2F;com.android.email.activity.SplitScreenActivitypaused&#x3D;false&#125;.  5009.8ms since event, 5009.5ms since waitstarted</span><br><span class="line"></span><br><span class="line">04-0113:12:11.572 I&#x2F;WindowManager( 220): Input event dispatching timedout sending tocom.android.email&#x2F;com.android.email.activity.SplitScreenActivity</span><br><span class="line"></span><br><span class="line">04-01 **13:12:14.123 I&#x2F;Process(  220): Sending signal. PID: 21404 SIG: 3---**发生**ANR**的时间和生成**trace.txt**的时间</span><br><span class="line"></span><br><span class="line">04-01 13:12:14.123 I&#x2F;dalvikvm(21404):threadid&#x3D;4: reacting to signal 3 </span><br><span class="line"></span><br><span class="line">……</span><br><span class="line"></span><br><span class="line">04-0113:12:15.872 E&#x2F;ActivityManager(  220): ANR in com.android.email(com.android.email&#x2F;.activity.SplitScreenActivity)</span><br><span class="line"></span><br><span class="line">04-0113:12:15.872 E&#x2F;ActivityManager(  220): Reason:keyDispatchingTimedOut</span><br><span class="line"></span><br><span class="line">04-0113:12:15.872 E&#x2F;ActivityManager(  220): Load: 8.68 &#x2F; 8.37 &#x2F; 8.53</span><br><span class="line"></span><br><span class="line">04-0113:12:15.872 E&#x2F;ActivityManager(  220): **CPUusage from 4361ms to 699ms ago** ----CPU在ANR发生前的使用情况</span><br><span class="line"></span><br><span class="line">04-0113:12:15.872 E&#x2F;ActivityManager(  220):   5.5%21404&#x2F;com.android.email: 1.3% user + 4.1% kernel &#x2F; faults: 10 minor</span><br><span class="line"></span><br><span class="line">04-0113:12:15.872 E&#x2F;ActivityManager(  220):   4.3%220&#x2F;system_server: 2.7% user + 1.5% kernel &#x2F; faults: 11 minor 2 major</span><br><span class="line"></span><br><span class="line">04-0113:12:15.872 E&#x2F;ActivityManager(  220):   0.9%52&#x2F;spi_qsd.0: 0% user + 0.9% kernel</span><br><span class="line"></span><br><span class="line">04-0113:12:15.872 E&#x2F;ActivityManager(  220):   0.5%65&#x2F;irq&#x2F;170-cyttsp-: 0% user + 0.5% kernel</span><br><span class="line"></span><br><span class="line">04-0113:12:15.872 E&#x2F;ActivityManager(  220):   0.5%296&#x2F;com.android.systemui: 0.5% user + 0% kernel</span><br><span class="line"></span><br><span class="line">04-0113:12:15.872 E&#x2F;ActivityManager(  220): **100%TOTAL: 4.8% user + 7.6% kernel + 87% iowait**</span><br><span class="line"></span><br><span class="line">04-0113:12:15.872 E&#x2F;ActivityManager(  220): **CPUusage from 3697ms to 4223ms later**:-- ANR后CPU的使用量</span><br><span class="line"></span><br><span class="line">04-0113:12:15.872 E&#x2F;ActivityManager(  220):   25%21404&#x2F;com.android.email: 25% user + 0% kernel &#x2F; faults: 191 minor</span><br><span class="line"></span><br><span class="line">04-0113:12:15.872 E&#x2F;ActivityManager(  220):    16% 21603&#x2F;__eas(par.hakan: 16% user + 0% kernel</span><br><span class="line"></span><br><span class="line">04-0113:12:15.872 E&#x2F;ActivityManager(  220):    7.2% 21406&#x2F;GC: 7.2% user + 0% kernel</span><br><span class="line"></span><br><span class="line">04-0113:12:15.872 E&#x2F;ActivityManager(  220):    1.8% 21409&#x2F;Compiler: 1.8% user + 0% kernel</span><br><span class="line"></span><br><span class="line">04-0113:12:15.872 E&#x2F;ActivityManager(  220):   5.5%220&#x2F;system_server: 0% user + 5.5% kernel &#x2F; faults: 1 minor</span><br><span class="line"></span><br><span class="line">04-0113:12:15.872 E&#x2F;ActivityManager(  220):    5.5% 263&#x2F;InputDispatcher: 0% user + 5.5% kernel</span><br><span class="line"></span><br><span class="line">04-0113:12:15.872 E&#x2F;ActivityManager(  220): **32%TOTAL: 28% user + 3.7% kernel**</span><br></pre></td></tr></table></figure>
<p>从LOG可以看出ANR的类型，CPU的使用情况，如果CPU使用量接近100%，说明当前设备很忙，有可能是CPU饥饿导致了ANR</p>
<p>如果CPU使用量很少，说明主线程被BLOCK了</p>
<p>如果IOwait很高，说明ANR有可能是主线程在进行I/O操作造成的</p>
<p>除了看LOG，解决ANR还得需要trace.txt文件，data/anr/traces.txt </p>
<h2 id="如何调查并解决ANR"><a href="#如何调查并解决ANR" class="headerlink" title="如何调查并解决ANR"></a>如何调查并解决ANR</h2><ol>
<li>首先分析log，根据Log里面ANR发生的时间去trace.txt文件里面查到对应的段落</li>
<li>从trace.txt文件对应的段落里查看调用stack.</li>
<li>看代码</li>
<li>仔细查看ANR的成因（iowait?block?memoryleak?）</li>
</ol>
<p>例子：</p>
<p>打开log文件 ， 由于是ANR错误，因此搜索”ANR “ ， 为何要加空格呢，你加上和去掉比较一下就知道了 。 可以屏蔽掉不少保存到anr.log文件的无效信息。</p>
<p>定位到关键的事件信息如下：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">01-15 16:49:02.433 E&#x2F;ActivityManager( 2466): ANR in com.android.mms (com.android.mms&#x2F;.ui.SlideshowActivity)</span><br><span class="line"></span><br><span class="line">01-15 16:49:02.433 E&#x2F;ActivityManager( 2466): Reason: keyDispatchingTimedOut</span><br><span class="line"></span><br><span class="line">01-15 16:49:02.433 E&#x2F;ActivityManager( 2466): Load: 0.6 &#x2F; 0.61 &#x2F; 0.42</span><br><span class="line"></span><br><span class="line">01-15 16:49:02.433 E&#x2F;ActivityManager( 2466): CPU usage from 1337225ms to 57ms ago:</span><br><span class="line"></span><br><span class="line">01-15 16:49:02.433 E&#x2F;ActivityManager( 2466):   sensorserver_ya: 8% &#x3D; 0% user + 8%</span><br><span class="line"> kernel &#x2F; faults: 40 minor</span><br><span class="line"></span><br><span class="line">......</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">01-15 16:49:02.433 E&#x2F;ActivityManager( 2466):  -com.android.mms: 0% &#x3D; 0% user + 0%</span><br><span class="line"> kernel</span><br><span class="line"></span><br><span class="line">01-15 16:49:02.433 E&#x2F;ActivityManager( 2466):  -flush-179:8: 0% &#x3D; 0% user + 0% kernel</span><br><span class="line"></span><br><span class="line">01-15 16:49:02.433 E&#x2F;ActivityManager( 2466): TOTAL: 25% &#x3D; 10% user + 14% kernel +</span><br><span class="line"> 0% iowait + 0% irq + 0% softirq</span><br><span class="line"></span><br><span class="line">01-15 16:49:02.436 I&#x2F;        ( 2466): dumpmesg &gt; &quot;&#x2F;data&#x2F;log&#x2F;dumpstate_app_anr.log&quot;</span><br><span class="line"></span><br></pre></td></tr></table></figure>


<p>我们用自然语言来描述一下日志，这也算是一种能力吧 。 </p>
<p>01-15 16:49:02.433 E/ActivityManager( 2466): ANR in com.android.mms (com.android.mms/.ui.SlideshowActivity)</p>
<p>翻译：在16:49分2秒433毫秒的时候 ActivityManager （进程号为2466) 发生了如下错误：com.android.mms包下面的.ui.SlideshowActivity<br> 无响应 。</p>
<p>01-15 16:49:02.433 E/ActivityManager( 2466): Reason: keyDispatchingTimedOut</p>
<p>翻译：原因 ， keyDispatchingTimeOut - 按键分配超时 </p>
<p>01-15 16:49:02.433 E/ActivityManager( 2466): Load: 0.6 / 0.61 / 0.42</p>
<p>翻译：5分钟，10分钟，15分钟内的平均负载分别为：0.6 , 0.61 , 0.42</p>
<p>在这里我们大概知道问题是什么了，结合我们之前的操作流程，我们知道问题是在点击按钮某时候可能处理不过来按钮事件，导致超时无响应 。那么现在似乎已经可以进行工作了 。<br> 我们知道Activity中是通过重载dispatchTouchEvent(MotionEvent ev)来处理点击屏幕事件  。 然后我们可以顺藤摸瓜，一点点分析去查找原因 。 但这样够了么 ？</p>
<p>其实不够 ， 至少我们不能准确的知道到底问题在哪儿 ， 只是猜测 ，比如这个应用程序中，我就在顺藤摸瓜的时候发现了多个IO操作的地方都在主线程中，可能引起问题，但不好判断到底是哪个  ，所以我们目前掌握的信息还不够<br> 。 </p>
<p>于是我们再分析虚拟机信息 ， 搜索“Dalvik Thread”关键词，快速定位到本应用程序的虚拟机信息日志，如下：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">----- pid 2922 at 2011-01-13 13:51:07 -----</span><br><span class="line"></span><br><span class="line">Cmd line: com.android.mms</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">DALVIK THREADS:</span><br><span class="line"></span><br><span class="line">&quot;main&quot; prio&#x3D;5 tid&#x3D;1 NATIVE</span><br><span class="line"></span><br><span class="line">  | group&#x3D;&quot;main&quot; sCount&#x3D;1 dsCount&#x3D;0 s&#x3D;N obj&#x3D;0x4001d8d0 self&#x3D;0xccc8</span><br><span class="line"></span><br><span class="line">  | sysTid&#x3D;2922 nice&#x3D;0 sched&#x3D;0&#x2F;0 cgrp&#x3D;default handle&#x3D;-1345017808</span><br><span class="line"></span><br><span class="line">  | schedstat&#x3D;( 3497492306 15312897923 10358 )</span><br><span class="line"></span><br><span class="line">  at android.media.MediaPlayer._release(Native Method)</span><br><span class="line"></span><br><span class="line">  at android.media.MediaPlayer.release(MediaPlayer.java:1206)</span><br><span class="line"></span><br><span class="line">  at android.widget.VideoView.stopPlayback(VideoView.java:196)</span><br><span class="line"></span><br><span class="line">  at com.android.mms.ui.SlideView.stopVideo(SlideView.java:640)</span><br><span class="line"></span><br><span class="line">  at com.android.mms.ui.SlideshowPresenter.presentVideo(SlideshowPresenter.java:443)</span><br><span class="line"></span><br><span class="line">  at com.android.mms.ui.SlideshowPresenter.presentRegionMedia(SlideshowPresenter.java:219)</span><br><span class="line"></span><br><span class="line">  at com.android.mms.ui.SlideshowPresenter$4.run(SlideshowPresenter.java:516)</span><br><span class="line"></span><br><span class="line">  at android.os.Handler.handleCallback(Handler.java:587)</span><br><span class="line"></span><br><span class="line">  at android.os.Handler.dispatchMessage(Handler.java:92)</span><br><span class="line"></span><br><span class="line">  at android.os.Looper.loop(Looper.java:123)</span><br><span class="line"></span><br><span class="line">  at android.app.ActivityThread.main(ActivityThread.java:4627)</span><br><span class="line"></span><br><span class="line">  at java.lang.reflect.Method.invokeNative(Native Method)</span><br><span class="line"></span><br><span class="line">  at java.lang.reflect.Method.invoke(Method.java:521)</span><br><span class="line"></span><br><span class="line">  at com.android.internal.os.ZygoteInit$MethodAndArgsCaller.run(ZygoteInit.java:858)</span><br><span class="line"></span><br><span class="line">  at com.android.internal.os.ZygoteInit.main(ZygoteInit.java:616)</span><br><span class="line"></span><br><span class="line">  at dalvik.system.NativeStart.main(Native Method)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&quot;Binder Thread #3&quot; prio&#x3D;5 tid&#x3D;11 NATIVE</span><br><span class="line"></span><br><span class="line">  | group&#x3D;&quot;main&quot; sCount&#x3D;1 dsCount&#x3D;0 s&#x3D;N obj&#x3D;0x4837f808 self&#x3D;0x242280</span><br><span class="line"></span><br><span class="line">  | sysTid&#x3D;3239 nice&#x3D;0 sched&#x3D;0&#x2F;0 cgrp&#x3D;default handle&#x3D;2341032</span><br><span class="line"></span><br><span class="line">  | schedstat&#x3D;( 32410506 932842514 164 )</span><br><span class="line"></span><br><span class="line">  at dalvik.system.NativeStart.run(Native Method)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&quot;AsyncQueryWorker&quot; prio&#x3D;5 tid&#x3D;9 WAIT</span><br><span class="line"></span><br><span class="line">  | group&#x3D;&quot;main&quot; sCount&#x3D;1 dsCount&#x3D;0 s&#x3D;N obj&#x3D;0x482f4b80 self&#x3D;0x253e10</span><br><span class="line"></span><br><span class="line">  | sysTid&#x3D;3236 nice&#x3D;0 sched&#x3D;0&#x2F;0 cgrp&#x3D;default handle&#x3D;2432120</span><br><span class="line"></span><br><span class="line">  | schedstat&#x3D;( 3225061 26561350 27 )</span><br><span class="line"></span><br><span class="line">  at java.lang.Object.wait(Native Method)</span><br><span class="line"></span><br><span class="line">  - waiting on &lt;0x482f4da8&gt; (a android.os.MessageQueue)</span><br><span class="line"></span><br><span class="line">  at java.lang.Object.wait(Object.java:288)</span><br><span class="line"></span><br><span class="line">  at android.os.MessageQueue.next(MessageQueue.java:146)</span><br><span class="line"></span><br><span class="line">  at android.os.Looper.loop(Looper.java:110)</span><br><span class="line"></span><br><span class="line">  at android.os.HandlerThread.run(HandlerThread.java:60)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&quot;Thread-9&quot; prio&#x3D;5 tid&#x3D;8 WAIT</span><br><span class="line"></span><br><span class="line">  | group&#x3D;&quot;main&quot; sCount&#x3D;1 dsCount&#x3D;0 s&#x3D;N obj&#x3D;0x4836e2b0 self&#x3D;0x25af70</span><br><span class="line"></span><br><span class="line">  | sysTid&#x3D;2929 nice&#x3D;0 sched&#x3D;0&#x2F;0 cgrp&#x3D;default handle&#x3D;2370896</span><br><span class="line"></span><br><span class="line">  | schedstat&#x3D;( 130248 4389035 2 )</span><br><span class="line"></span><br><span class="line">  at java.lang.Object.wait(Native Method)</span><br><span class="line"></span><br><span class="line">  - waiting on &lt;0x4836e240&gt; (a java.util.ArrayList)</span><br><span class="line"></span><br><span class="line">  at java.lang.Object.wait(Object.java:288)</span><br><span class="line"></span><br><span class="line">  at com.android.mms.data.Contact$ContactsCache$TaskStack$1.run(Contact.java:488)</span><br><span class="line"></span><br><span class="line">  at java.lang.Thread.run(Thread.java:1096)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&quot;Binder Thread #2&quot; prio&#x3D;5 tid&#x3D;7 NATIVE</span><br><span class="line"></span><br><span class="line">  | group&#x3D;&quot;main&quot; sCount&#x3D;1 dsCount&#x3D;0 s&#x3D;N obj&#x3D;0x482f8ca0 self&#x3D;0x130fd0</span><br><span class="line"></span><br><span class="line">  | sysTid&#x3D;2928 nice&#x3D;0 sched&#x3D;0&#x2F;0 cgrp&#x3D;default handle&#x3D;1215968</span><br><span class="line"></span><br><span class="line">  | schedstat&#x3D;( 40610049 1837703846 195 )</span><br><span class="line"></span><br><span class="line">  at dalvik.system.NativeStart.run(Native Method)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&quot;Binder Thread #1&quot; prio&#x3D;5 tid&#x3D;6 NATIVE</span><br><span class="line"></span><br><span class="line">  | group&#x3D;&quot;main&quot; sCount&#x3D;1 dsCount&#x3D;0 s&#x3D;N obj&#x3D;0x482f4a78 self&#x3D;0x128a50</span><br><span class="line"></span><br><span class="line">  | sysTid&#x3D;2927 nice&#x3D;0 sched&#x3D;0&#x2F;0 cgrp&#x3D;default handle&#x3D;1201352</span><br><span class="line"></span><br><span class="line">  | schedstat&#x3D;( 40928066 928867585 190 )</span><br><span class="line"></span><br><span class="line">  at dalvik.system.NativeStart.run(Native Method)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&quot;Compiler&quot; daemon prio&#x3D;5 tid&#x3D;5 VMWAIT</span><br><span class="line"></span><br><span class="line">  | group&#x3D;&quot;system&quot; sCount&#x3D;1 dsCount&#x3D;0 s&#x3D;N obj&#x3D;0x482f1348 self&#x3D;0x118960</span><br><span class="line"></span><br><span class="line">  | sysTid&#x3D;2926 nice&#x3D;0 sched&#x3D;0&#x2F;0 cgrp&#x3D;default handle&#x3D;1149216</span><br><span class="line"></span><br><span class="line">  | schedstat&#x3D;( 753021350 3774113668 6686 )</span><br><span class="line"></span><br><span class="line">  at dalvik.system.NativeStart.run(Native Method)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&quot;JDWP&quot; daemon prio&#x3D;5 tid&#x3D;4 VMWAIT</span><br><span class="line"></span><br><span class="line">  | group&#x3D;&quot;system&quot; sCount&#x3D;1 dsCount&#x3D;0 s&#x3D;N obj&#x3D;0x482f12a0 self&#x3D;0x132940</span><br><span class="line"></span><br><span class="line">  | sysTid&#x3D;2925 nice&#x3D;0 sched&#x3D;0&#x2F;0 cgrp&#x3D;default handle&#x3D;1255680</span><br><span class="line"></span><br><span class="line">  | schedstat&#x3D;( 2827103 29553323 19 )</span><br><span class="line"></span><br><span class="line">  at dalvik.system.NativeStart.run(Native Method)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&quot;Signal Catcher&quot; daemon prio&#x3D;5 tid&#x3D;3 RUNNABLE</span><br><span class="line"></span><br><span class="line">  | group&#x3D;&quot;system&quot; sCount&#x3D;0 dsCount&#x3D;0 s&#x3D;N obj&#x3D;0x482f11e8 self&#x3D;0x135988</span><br><span class="line"></span><br><span class="line">  | sysTid&#x3D;2924 nice&#x3D;0 sched&#x3D;0&#x2F;0 cgrp&#x3D;default handle&#x3D;1173688</span><br><span class="line"></span><br><span class="line">  | schedstat&#x3D;( 11793815 12456169 7 )</span><br><span class="line"></span><br><span class="line">  at dalvik.system.NativeStart.run(Native Method)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&quot;HeapWorker&quot; daemon prio&#x3D;5 tid&#x3D;2 VMWAIT</span><br><span class="line"></span><br><span class="line">  | group&#x3D;&quot;system&quot; sCount&#x3D;1 dsCount&#x3D;0 s&#x3D;N obj&#x3D;0x45496028 self&#x3D;0x135848</span><br><span class="line"></span><br><span class="line">  | sysTid&#x3D;2923 nice&#x3D;0 sched&#x3D;0&#x2F;0 cgrp&#x3D;default handle&#x3D;1222608</span><br><span class="line"></span><br><span class="line">  | schedstat&#x3D;( 79049792 1520840200 95 )</span><br><span class="line"></span><br><span class="line">  at dalvik.system.NativeStart.run(Native Method)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">----- end 2922 -----</span><br></pre></td></tr></table></figure>

<p>每一段都是一个线程 ，当然我们还是看线程号为1的主线程了。通过分析发现关键问题是这样：</p>
<p>  at com.android.mms.ui.SlideshowPresenter$3.run(SlideshowPresenter.java:531)</p>
<p>定位到代码：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">mHandler.post(new Runnable() &#123;</span><br><span class="line"></span><br><span class="line">​                    public void run() &#123;</span><br><span class="line"></span><br><span class="line">​                        try &#123;</span><br><span class="line"></span><br><span class="line">​                            presentRegionMedia(view, (RegionMediaModel) model, dataChanged);</span><br><span class="line"></span><br><span class="line">​                        &#125; catch (OMADRMException e) &#123;</span><br><span class="line"></span><br><span class="line">​                            Log.e(TAG, e.getMessage(), e);</span><br><span class="line"></span><br><span class="line">​                            Toast.makeText(mContext,</span><br><span class="line"></span><br><span class="line">​                                    mContext.getString(R.string.insufficient_drm_rights),</span><br><span class="line"></span><br><span class="line">​                                    Toast.LENGTH_SHORT).show();</span><br><span class="line"></span><br><span class="line">​                        &#125; catch (IOException e)&#123;</span><br><span class="line"></span><br><span class="line">​                            Log.e(TAG, e.getMessage(), e);</span><br><span class="line"></span><br><span class="line">​                            Toast.makeText(mContext,</span><br><span class="line"></span><br><span class="line">​                                    mContext.getString(R.string.insufficient_drm_rights),</span><br><span class="line"></span><br><span class="line">​                                    Toast.LENGTH_SHORT).show();</span><br><span class="line">​                        &#125;</span><br><span class="line"></span><br><span class="line">​                    &#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>很清楚了， Handler.post 方法之后执行时间太长的问题 。 继续看presentRegionMedia(view, (RegionMediaModel)<br> model, dataChanged);方法 ， 发现最终是调用的framework 中MediaPlayer.stop方法 。</p>
<p>至此，我们的日志分析算是告一段落 。 可以开始思考解决办法了</p>
]]></content>
      <categories>
        <category>Android_性能优化</category>
      </categories>
  </entry>
  <entry>
    <title>Android-HandlerThread</title>
    <url>/2017/12/01/Android-HandlerThread/</url>
    <content><![CDATA[<p>假如我们有这样一个需要，我们想要一个带消息队列的子线程，带消息队列是因为我们还希望和子线程有一个交互，如果只是一个runnable,那么就是一次性的任务。</p>
<p>这个时候很容易想到Looper，Handler之类的，</p>
<p>考虑到需要进行任务的处理，我们需要继承Handler来处理任务，</p>
<p>因为是子线程，所以需要这个子线程能够提供Looper来构造handler,</p>
<p>如果有这样一个接口，那么我们在Thread的runnable函数里面，就要执行Looper.prepar和Looper.loop,这两个函数，一个是new Looper出来，一个是启动消息循环，没有消息时会阻塞，因此runnable不会执行完流程而导致线程退出。</p>
<a id="more"></a>

<p>那么，除了这些，还有什么需要考虑的呢？可以考虑一个退出的接口，Looper类已经提供了looper.quit方法</p>
<p>这些基本就是HandlerThread的大致内容了，我们可以看看源码</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Handy class for starting a new thread that has a looper. The looper can then be </span></span><br><span class="line"><span class="comment"> * used to create handler classes. Note that start() must still be called.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HandlerThread</span> <span class="keyword">extends</span> <span class="title">Thread</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> mPriority;</span><br><span class="line">    <span class="keyword">int</span> mTid = -<span class="number">1</span>;</span><br><span class="line">    Looper mLooper;</span><br><span class="line">    <span class="keyword">private</span> <span class="meta">@Nullable</span> Handler mHandler;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">HandlerThread</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>(name);</span><br><span class="line">        mPriority = Process.THREAD_PRIORITY_DEFAULT;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Constructs a HandlerThread.</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> name</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> priority The priority to run the thread at. The value supplied must be from </span></span><br><span class="line"><span class="comment">     * &#123;<span class="doctag">@link</span> android.os.Process&#125; and not from java.lang.Thread.</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">HandlerThread</span><span class="params">(String name, <span class="keyword">int</span> priority)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>(name);</span><br><span class="line">        mPriority = priority;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Call back method that can be explicitly overridden if needed to execute some</span></span><br><span class="line"><span class="comment">     * setup before Looper loops.</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onLooperPrepared</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        mTid = Process.myTid();</span><br><span class="line">        Looper.prepare();</span><br><span class="line">        <span class="keyword">synchronized</span> (<span class="keyword">this</span>) &#123;</span><br><span class="line">            mLooper = Looper.myLooper();</span><br><span class="line">            notifyAll();</span><br><span class="line">        &#125;</span><br><span class="line">        Process.setThreadPriority(mPriority);</span><br><span class="line">        onLooperPrepared();</span><br><span class="line">        Looper.loop();</span><br><span class="line">        mTid = -<span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * This method returns the Looper associated with this thread. If this thread not been started</span></span><br><span class="line"><span class="comment">     * or for any reason isAlive() returns false, this method will return null. If this thread</span></span><br><span class="line"><span class="comment">     * has been started, this method will block until the looper has been initialized.  </span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> The looper.</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Looper <span class="title">getLooper</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (!isAlive()) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// If the thread has been started, wait until the looper has been created.</span></span><br><span class="line">        <span class="keyword">synchronized</span> (<span class="keyword">this</span>) &#123;</span><br><span class="line">            <span class="keyword">while</span> (isAlive() &amp;&amp; mLooper == <span class="keyword">null</span>) &#123;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    wait();</span><br><span class="line">                &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> mLooper;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> a shared &#123;<span class="doctag">@link</span> Handler&#125; associated with this thread</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@hide</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@NonNull</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Handler <span class="title">getThreadHandler</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (mHandler == <span class="keyword">null</span>) &#123;</span><br><span class="line">            mHandler = <span class="keyword">new</span> Handler(getLooper());</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> mHandler;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Quits the handler thread&#x27;s looper.</span></span><br><span class="line"><span class="comment">     * &lt;p&gt;</span></span><br><span class="line"><span class="comment">     * Causes the handler thread&#x27;s looper to terminate without processing any</span></span><br><span class="line"><span class="comment">     * more messages in the message queue.</span></span><br><span class="line"><span class="comment">     * &lt;/p&gt;&lt;p&gt;</span></span><br><span class="line"><span class="comment">     * Any attempt to post messages to the queue after the looper is asked to quit will fail.</span></span><br><span class="line"><span class="comment">     * For example, the &#123;<span class="doctag">@link</span> Handler#sendMessage(Message)&#125; method will return false.</span></span><br><span class="line"><span class="comment">     * &lt;/p&gt;&lt;p class=&quot;note&quot;&gt;</span></span><br><span class="line"><span class="comment">     * Using this method may be unsafe because some messages may not be delivered</span></span><br><span class="line"><span class="comment">     * before the looper terminates.  Consider using &#123;<span class="doctag">@link</span> #quitSafely&#125; instead to ensure</span></span><br><span class="line"><span class="comment">     * that all pending work is completed in an orderly manner.</span></span><br><span class="line"><span class="comment">     * &lt;/p&gt;</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> True if the looper looper has been asked to quit or false if the</span></span><br><span class="line"><span class="comment">     * thread had not yet started running.</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@see</span> #quitSafely</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">quit</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        Looper looper = getLooper();</span><br><span class="line">        <span class="keyword">if</span> (looper != <span class="keyword">null</span>) &#123;</span><br><span class="line">            looper.quit();</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Quits the handler thread&#x27;s looper safely.</span></span><br><span class="line"><span class="comment">     * &lt;p&gt;</span></span><br><span class="line"><span class="comment">     * Causes the handler thread&#x27;s looper to terminate as soon as all remaining messages</span></span><br><span class="line"><span class="comment">     * in the message queue that are already due to be delivered have been handled.</span></span><br><span class="line"><span class="comment">     * Pending delayed messages with due times in the future will not be delivered.</span></span><br><span class="line"><span class="comment">     * &lt;/p&gt;&lt;p&gt;</span></span><br><span class="line"><span class="comment">     * Any attempt to post messages to the queue after the looper is asked to quit will fail.</span></span><br><span class="line"><span class="comment">     * For example, the &#123;<span class="doctag">@link</span> Handler#sendMessage(Message)&#125; method will return false.</span></span><br><span class="line"><span class="comment">     * &lt;/p&gt;&lt;p&gt;</span></span><br><span class="line"><span class="comment">     * If the thread has not been started or has finished (that is if</span></span><br><span class="line"><span class="comment">     * &#123;<span class="doctag">@link</span> #getLooper&#125; returns null), then false is returned.</span></span><br><span class="line"><span class="comment">     * Otherwise the looper is asked to quit and true is returned.</span></span><br><span class="line"><span class="comment">     * &lt;/p&gt;</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> True if the looper looper has been asked to quit or false if the</span></span><br><span class="line"><span class="comment">     * thread had not yet started running.</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">quitSafely</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        Looper looper = getLooper();</span><br><span class="line">        <span class="keyword">if</span> (looper != <span class="keyword">null</span>) &#123;</span><br><span class="line">            looper.quitSafely();</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Returns the identifier of this thread. See Process.myTid().</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getThreadId</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> mTid;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>系统的源码里面除了上面说的内容以外，还额外的有线程pid,priority参数。值得注意的是getLooper方法，除了有线程存活的判断以外，还有调用wait方法等待，因为考虑到有可能线程刚刚new 出来，或者还没有执行到Looper.prepare方法，而在run()里面Looper.prepare执行后则调用了notifyAll来唤醒。</p>
<p>使用方法就是 </p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">HandlerThread handlerThread = <span class="keyword">new</span> HanderThread();</span><br><span class="line">handlerThread.start();</span><br><span class="line">Handler handler  = <span class="keyword">new</span> Handler(handlerThread.getLooper())&#123;</span><br><span class="line">   <span class="meta">@Override</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">handleMessage</span><span class="params">()</span></span>&#123;</span><br><span class="line">     doSomething();</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>android_app</category>
      </categories>
  </entry>
  <entry>
    <title>Android-SparseArray</title>
    <url>/2018/10/29/Android-SparseArray/</url>
    <content><![CDATA[<p>SparseArray 是Android里面加入的数据结构<a id="more"></a>,在插入的时候会对Key做hash，然后按照二分查找的算法去找到合适的位置插入或者更新对应的value值。和Hashmap相比较的话，用到的内存会比散列表小，因为少了那部分阈值的空数组位，但是数据量大起来后，二分查找比起散列表直接hash取位置还是要慢一些</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//内部维护一个int[]类型的key数组，一个object[]类型的value数组，key会保持有序并且无重复</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SparseArray</span>&lt;<span class="title">E</span>&gt; <span class="keyword">implements</span> <span class="title">Cloneable</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> Object DELETED = <span class="keyword">new</span> Object();  <span class="comment">//用于删除的标记</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">boolean</span> mGarbage = <span class="keyword">false</span>;</span><br><span class="line"> </span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span>[] mKeys;</span><br><span class="line">    <span class="keyword">private</span> Object[] mValues;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> mSize;</span><br><span class="line"> </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">SparseArray</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>(<span class="number">10</span>);</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">SparseArray</span><span class="params">(<span class="keyword">int</span> initialCapacity)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (initialCapacity == <span class="number">0</span>) &#123;</span><br><span class="line">            mKeys = EmptyArray.INT;</span><br><span class="line">            mValues = EmptyArray.OBJECT;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            mValues = ArrayUtils.newUnpaddedObjectArray(initialCapacity);</span><br><span class="line">            mKeys = <span class="keyword">new</span> <span class="keyword">int</span>[mValues.length];</span><br><span class="line">        &#125;</span><br><span class="line">        mSize = <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> SparseArray&lt;E&gt; <span class="title">clone</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        SparseArray&lt;E&gt; clone = <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            clone = (SparseArray&lt;E&gt;) <span class="keyword">super</span>.clone();</span><br><span class="line">            clone.mKeys = mKeys.clone();</span><br><span class="line">            clone.mValues = mValues.clone();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (CloneNotSupportedException cnse) &#123;</span><br><span class="line">            <span class="comment">/* ignore */</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> clone;</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    <span class="function"><span class="keyword">public</span> E <span class="title">get</span><span class="params">(<span class="keyword">int</span> key)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> get(key, <span class="keyword">null</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> E <span class="title">get</span><span class="params">(<span class="keyword">int</span> key, E valueIfKeyNotFound)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> i = ContainerHelpers.binarySearch(mKeys, mSize, key);</span><br><span class="line"> </span><br><span class="line">        <span class="keyword">if</span> (i &lt; <span class="number">0</span> || mValues[i] == DELETED) &#123;</span><br><span class="line">            <span class="keyword">return</span> valueIfKeyNotFound;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> (E) mValues[i];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">delete</span><span class="params">(<span class="keyword">int</span> key)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> i = ContainerHelpers.binarySearch(mKeys, mSize, key);</span><br><span class="line"> </span><br><span class="line">        <span class="keyword">if</span> (i &gt;= <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">if</span> (mValues[i] != DELETED) &#123;</span><br><span class="line">                mValues[i] = DELETED;</span><br><span class="line">                mGarbage = <span class="keyword">true</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">remove</span><span class="params">(<span class="keyword">int</span> key)</span> </span>&#123;</span><br><span class="line">        delete(key);</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">removeAt</span><span class="params">(<span class="keyword">int</span> index)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (mValues[index] != DELETED) &#123;</span><br><span class="line">            mValues[index] = DELETED;</span><br><span class="line">            mGarbage = <span class="keyword">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">removeAtRange</span><span class="params">(<span class="keyword">int</span> index, <span class="keyword">int</span> size)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">final</span> <span class="keyword">int</span> end = Math.min(mSize, index + size);</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = index; i &lt; end; i++) &#123;</span><br><span class="line">            removeAt(i);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line"><span class="comment">//把数组标记为DELETED的元素置为null，非标记的元素向前移动，然后更新属性</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">gc</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> n = mSize;</span><br><span class="line">        <span class="keyword">int</span> o = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">int</span>[] keys = mKeys;</span><br><span class="line">        Object[] values = mValues;</span><br><span class="line"> </span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">            Object val = values[i];</span><br><span class="line"> </span><br><span class="line">            <span class="keyword">if</span> (val != DELETED) &#123;</span><br><span class="line">                <span class="keyword">if</span> (i != o) &#123;</span><br><span class="line">                    keys[o] = keys[i];</span><br><span class="line">                    values[o] = val;</span><br><span class="line">                    values[i] = <span class="keyword">null</span>;</span><br><span class="line">                &#125;</span><br><span class="line"> </span><br><span class="line">                o++;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"> </span><br><span class="line">        mGarbage = <span class="keyword">false</span>;</span><br><span class="line">        mSize = o;</span><br><span class="line">     &#125;</span><br><span class="line"> </span><br><span class="line"><span class="comment">//首先会查找，如果找到了相同的key，会直接替换value的值，因此不会存在相同的key的情况，没找到的情况下，如果i&lt;size并且最后一次二分查找的低位标记为DELETED的话，直接把key,value赋值过去，否则gc()一次，然后调用工具类把key,value插入到i位置，这样的话key依然是有序的</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">put</span><span class="params">(<span class="keyword">int</span> key, E value)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> i = ContainerHelpers.binarySearch(mKeys, mSize, key);</span><br><span class="line"> </span><br><span class="line">        <span class="keyword">if</span> (i &gt;= <span class="number">0</span>) &#123;</span><br><span class="line">            mValues[i] = value;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            i = ~i;</span><br><span class="line"> </span><br><span class="line">            <span class="keyword">if</span> (i &lt; mSize &amp;&amp; mValues[i] == DELETED) &#123;</span><br><span class="line">                mKeys[i] = key;</span><br><span class="line">                mValues[i] = value;</span><br><span class="line">                <span class="keyword">return</span>;</span><br><span class="line">            &#125;</span><br><span class="line"> </span><br><span class="line">            <span class="keyword">if</span> (mGarbage &amp;&amp; mSize &gt;= mKeys.length) &#123;</span><br><span class="line">                gc();</span><br><span class="line"> </span><br><span class="line">                <span class="comment">// Search again because indices may have changed.</span></span><br><span class="line">                i = ~ContainerHelpers.binarySearch(mKeys, mSize, key);</span><br><span class="line">            &#125;</span><br><span class="line"> </span><br><span class="line">            mKeys = GrowingArrayUtils.insert(mKeys, mSize, i, key);</span><br><span class="line">            mValues = GrowingArrayUtils.insert(mValues, mSize, i, value);</span><br><span class="line">            mSize++;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">size</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (mGarbage) &#123;</span><br><span class="line">            gc();</span><br><span class="line">        &#125;</span><br><span class="line"> </span><br><span class="line">        <span class="keyword">return</span> mSize;</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">keyAt</span><span class="params">(<span class="keyword">int</span> index)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (mGarbage) &#123;</span><br><span class="line">            gc();</span><br><span class="line">        &#125;</span><br><span class="line"> </span><br><span class="line">        <span class="keyword">return</span> mKeys[index];</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    <span class="function"><span class="keyword">public</span> E <span class="title">valueAt</span><span class="params">(<span class="keyword">int</span> index)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (mGarbage) &#123;</span><br><span class="line">            gc();</span><br><span class="line">        &#125;</span><br><span class="line"> </span><br><span class="line">        <span class="keyword">return</span> (E) mValues[index];</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setValueAt</span><span class="params">(<span class="keyword">int</span> index, E value)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (mGarbage) &#123;</span><br><span class="line">            gc();</span><br><span class="line">        &#125;</span><br><span class="line"> </span><br><span class="line">        mValues[index] = value;</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">indexOfKey</span><span class="params">(<span class="keyword">int</span> key)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (mGarbage) &#123;</span><br><span class="line">            gc();</span><br><span class="line">        &#125;</span><br><span class="line"> </span><br><span class="line">        <span class="keyword">return</span> ContainerHelpers.binarySearch(mKeys, mSize, key);</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">indexOfValue</span><span class="params">(E value)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (mGarbage) &#123;</span><br><span class="line">            gc();</span><br><span class="line">        &#125;</span><br><span class="line"> </span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; mSize; i++)</span><br><span class="line">            <span class="keyword">if</span> (mValues[i] == value)</span><br><span class="line">                <span class="keyword">return</span> i;</span><br><span class="line"> </span><br><span class="line">        <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">clear</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> n = mSize;</span><br><span class="line">        Object[] values = mValues;</span><br><span class="line"> </span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">            values[i] = <span class="keyword">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line"> </span><br><span class="line">        mSize = <span class="number">0</span>;</span><br><span class="line">        mGarbage = <span class="keyword">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">append</span><span class="params">(<span class="keyword">int</span> key, E value)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (mSize != <span class="number">0</span> &amp;&amp; key &lt;= mKeys[mSize - <span class="number">1</span>]) &#123;</span><br><span class="line">            put(key, value);</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line"> </span><br><span class="line">        <span class="keyword">if</span> (mGarbage &amp;&amp; mSize &gt;= mKeys.length) &#123;</span><br><span class="line">            gc();</span><br><span class="line">        &#125;</span><br><span class="line"> </span><br><span class="line">        mKeys = GrowingArrayUtils.append(mKeys, mSize, key);</span><br><span class="line">        mValues = GrowingArrayUtils.append(mValues, mSize, value);</span><br><span class="line">        mSize++;</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (size() &lt;= <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="string">&quot;&#123;&#125;&quot;</span>;</span><br><span class="line">        &#125;</span><br><span class="line"> </span><br><span class="line">        StringBuilder buffer = <span class="keyword">new</span> StringBuilder(mSize * <span class="number">28</span>);</span><br><span class="line">        buffer.append(<span class="string">&#x27;&#123;&#x27;</span>);</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;mSize; i++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (i &gt; <span class="number">0</span>) &#123;</span><br><span class="line">                buffer.append(<span class="string">&quot;, &quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">int</span> key = keyAt(i);</span><br><span class="line">            buffer.append(key);</span><br><span class="line">            buffer.append(<span class="string">&#x27;=&#x27;</span>);</span><br><span class="line">            Object value = valueAt(i);</span><br><span class="line">            <span class="keyword">if</span> (value != <span class="keyword">this</span>) &#123;</span><br><span class="line">                buffer.append(value);</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                buffer.append(<span class="string">&quot;(this Map)&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        buffer.append(<span class="string">&#x27;&#125;&#x27;</span>);</span><br><span class="line">        <span class="keyword">return</span> buffer.toString();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">----------------------------------------------------------------------</span><br><span class="line"><span class="comment">//上面用到的工具类的二分查找算法</span></span><br><span class="line">    <span class="function"><span class="keyword">static</span> <span class="keyword">int</span> <span class="title">binarySearch</span><span class="params">(<span class="keyword">int</span>[] array, <span class="keyword">int</span> size, <span class="keyword">int</span> value)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> lo = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">int</span> hi = size - <span class="number">1</span>;</span><br><span class="line"> </span><br><span class="line">        <span class="keyword">while</span> (lo &lt;= hi) &#123;</span><br><span class="line">            <span class="keyword">final</span> <span class="keyword">int</span> mid = (lo + hi) &gt;&gt;&gt; <span class="number">1</span>;  <span class="comment">//算数右移</span></span><br><span class="line">            <span class="keyword">final</span> <span class="keyword">int</span> midVal = array[mid];</span><br><span class="line"> </span><br><span class="line">            <span class="keyword">if</span> (midVal &lt; value) &#123;</span><br><span class="line">                lo = mid + <span class="number">1</span>;</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (midVal &gt; value) &#123;</span><br><span class="line">                hi = mid - <span class="number">1</span>;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="keyword">return</span> mid;  <span class="comment">// value found</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> ~lo;  <span class="comment">// value not present   取反为负数，再取反可以获取二分的最后一次位置，直接插入新的值</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>android_app</category>
      </categories>
  </entry>
  <entry>
    <title>Android NestedScrolling</title>
    <url>/2018/09/03/Android-NestedScrolling/</url>
    <content><![CDATA[<p>NestedScrolling 是谷歌推出的用于解决嵌套滑动的解决方案，在CoordinatorLayout中有使用。在 sdk api 21 之后，直接更新到了 View 和 ViewGroup源码里面，同时也在android.support.v4 包中提供了两个接口NestedScrollingChild和NestedScrollingParent, 还和两个辅助类 NestedScrollingChildHelper 和 NestedScrollingParentHelper 用来帮助开发者实现相关功能. 因此在 sdk21之后 系统原生控件是直接支持嵌套滑动的，如果自己需要实现，用那几个相关类就可以了。<a id="more"></a></p>
<h2 id="原理"><a href="#原理" class="headerlink" title="原理"></a>原理</h2><p>在Android触摸事件的处理中，无论是父类还是子类，一旦拦截了 Action_DOWN ,后续的事件都会发给这个控件，出于兼容的目的，这个流程不会大改，想要在滑动的过程中父类和子类联动，于是新增了接口方法，在 ACITION_MOVE 中进行调用，并且不改变整个onInterceptTouchEvent()和onTouchEvent()的返回值，这样既不会影响到原有流程，又可以让父类和子类进行交互。对于 Fling 的处理则是在 ACTION_UP 中，这个应该很好理解~</p>
<p>主要的过程则是子控件接收到滑动一段距离的请求时, 先询问父控件是否要滑动, 如果滑动了父控件就通知子控件它消耗了一部分滑动距离, 子控件就处理剩下的滑动距离, 然后子控件滑动完毕后再把剩余的滑动距离传给父控件.这个过程由子控件发起。</p>
<h2 id="主要类和方法"><a href="#主要类和方法" class="headerlink" title="主要类和方法"></a>主要类和方法</h2><h3 id="NestedScrollingChild"><a href="#NestedScrollingChild" class="headerlink" title="NestedScrollingChild"></a>NestedScrollingChild</h3><ul>
<li>startNestedScroll : 起始方法, 主要作用是找到接收滑动距离信息的父控件.</li>
<li>dispatchNestedPreScroll : 在内控件处理滑动前把滑动信息分发给父控件.</li>
<li>dispatchNestedScroll : 在内控件处理完滑动后把剩下的滑动距离信息分发给父控件.</li>
<li>stopNestedScroll : 结束方法, 主要作用就是清空嵌套滑动的相关状态</li>
</ul>
<p>NestedScrollingChildHelper是对NestedScrollingChild的方法的实现</p>
<h3 id="NestedScrollingParent"><a href="#NestedScrollingParent" class="headerlink" title="NestedScrollingParent"></a>NestedScrollingParent</h3><p>父控件接口主要是定义了一些响应子控件的方法，以onXXXXX命名和子控件的方法一一对应。</p>
<p>NestedScrollingParentHelper是对NestedScrollingParent的方法的实现</p>
<h2 id="源码"><a href="#源码" class="headerlink" title="源码"></a>源码</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Begin a nestable scroll operation along the given axes.</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * &lt;p&gt;A view starting a nested scroll promises to abide by the following contract:&lt;/p&gt;</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * &lt;p&gt;The view will call startNestedScroll upon initiating a scroll operation. In the case</span></span><br><span class="line"><span class="comment"> * of a touch scroll this corresponds to the initial &#123;<span class="doctag">@link</span> MotionEvent#ACTION_DOWN&#125;.</span></span><br><span class="line"><span class="comment"> * In the case of touch scrolling the nested scroll will be terminated automatically in</span></span><br><span class="line"><span class="comment"> * the same manner as &#123;<span class="doctag">@link</span> ViewParent#requestDisallowInterceptTouchEvent(boolean)&#125;.</span></span><br><span class="line"><span class="comment"> * In the event of programmatic scrolling the caller must explicitly call</span></span><br><span class="line"><span class="comment"> * &#123;<span class="doctag">@link</span> #stopNestedScroll()&#125; to indicate the end of the nested scroll.&lt;/p&gt;</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * &lt;p&gt;If &lt;code&gt;startNestedScroll&lt;/code&gt; returns true, a cooperative parent was found.</span></span><br><span class="line"><span class="comment"> * If it returns false the caller may ignore the rest of this contract until the next scroll.</span></span><br><span class="line"><span class="comment"> * Calling startNestedScroll while a nested scroll is already in progress will return true.&lt;/p&gt;</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * &lt;p&gt;At each incremental step of the scroll the caller should invoke</span></span><br><span class="line"><span class="comment"> * &#123;<span class="doctag">@link</span> #dispatchNestedPreScroll(int, int, int[], int[]) dispatchNestedPreScroll&#125;</span></span><br><span class="line"><span class="comment"> * once it has calculated the requested scrolling delta. If it returns true the nested scrolling</span></span><br><span class="line"><span class="comment"> * parent at least partially consumed the scroll and the caller should adjust the amount it</span></span><br><span class="line"><span class="comment"> * scrolls by.&lt;/p&gt;</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * &lt;p&gt;After applying the remainder of the scroll delta the caller should invoke</span></span><br><span class="line"><span class="comment"> * &#123;<span class="doctag">@link</span> #dispatchNestedScroll(int, int, int, int, int[]) dispatchNestedScroll&#125;, passing</span></span><br><span class="line"><span class="comment"> * both the delta consumed and the delta unconsumed. A nested scrolling parent may treat</span></span><br><span class="line"><span class="comment"> * these values differently. See &#123;<span class="doctag">@link</span> ViewParent#onNestedScroll(View, int, int, int, int)&#125;.</span></span><br><span class="line"><span class="comment"> * &lt;/p&gt;</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> axes Flags consisting of a combination of &#123;<span class="doctag">@link</span> #SCROLL_AXIS_HORIZONTAL&#125; and/or</span></span><br><span class="line"><span class="comment"> *             &#123;<span class="doctag">@link</span> #SCROLL_AXIS_VERTICAL&#125;.</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> true if a cooperative parent was found and nested scrolling has been enabled for</span></span><br><span class="line"><span class="comment"> *         the current gesture.</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@see</span> #stopNestedScroll()</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@see</span> #dispatchNestedPreScroll(int, int, int[], int[])</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@see</span> #dispatchNestedScroll(int, int, int, int, int[])</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"> <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">startNestedScroll</span><span class="params">(<span class="keyword">int</span> axes)</span> </span>&#123;</span><br><span class="line">     <span class="keyword">if</span> (hasNestedScrollingParent()) &#123;</span><br><span class="line">         <span class="comment">// Already in progress</span></span><br><span class="line">         <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">     &#125;</span><br><span class="line">     <span class="keyword">if</span> (isNestedScrollingEnabled()) &#123;</span><br><span class="line">         ViewParent p = getParent();</span><br><span class="line">         View child = <span class="keyword">this</span>;</span><br><span class="line">         <span class="keyword">while</span> (p != <span class="keyword">null</span>) &#123;</span><br><span class="line">             <span class="keyword">try</span> &#123;</span><br><span class="line">                 <span class="keyword">if</span> (p.onStartNestedScroll(child, <span class="keyword">this</span>, axes)) &#123;</span><br><span class="line">                     mNestedScrollingParent = p;</span><br><span class="line">                     p.onNestedScrollAccepted(child, <span class="keyword">this</span>, axes);</span><br><span class="line">                     <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">                 &#125;</span><br><span class="line">             &#125; <span class="keyword">catch</span> (AbstractMethodError e) &#123;</span><br><span class="line">                 Log.e(VIEW_LOG_TAG, <span class="string">&quot;ViewParent &quot;</span> + p + <span class="string">&quot; does not implement interface &quot;</span> +</span><br><span class="line">                         <span class="string">&quot;method onStartNestedScroll&quot;</span>, e);</span><br><span class="line">                 <span class="comment">// Allow the search upward to continue</span></span><br><span class="line">             &#125;</span><br><span class="line">             <span class="keyword">if</span> (p <span class="keyword">instanceof</span> View) &#123;</span><br><span class="line">                 child = (View) p;</span><br><span class="line">             &#125;</span><br><span class="line">             p = p.getParent();</span><br><span class="line">         &#125;</span><br><span class="line">     &#125;</span><br><span class="line">     <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure>
<p>注释说的很清楚了。。<br>axes:  <code>SCROLL_AXIS_HORIZONTAL</code>和<code>SCROLL_AXIS_VERTICAL</code>的值之一。</p>
<p>返回值 :  如果父控件可以响应嵌套滑动并且是enabled状态就返回true</p>
<p>在Action_DWON和onInterceptTouchEvent中调用，表示嵌套滑动的开始，从代码来看，做的仅仅是一直getParent()，如果父类的<code>onStartNestedScroll()</code>返回true,就接着调用<code>onNestedScrollAccepted()</code>进行初始化，否则继续向上寻找，没找到返回false。</p>
<p>后续应该调用  dispatchNestedPreScroll() ,如果它返回 true 则表示父控件至少消耗的部分或者全部的滑动距离</p>
<p>接着应该调用 dispatchNestedScroll() , 自己处理后再返回给父控件去处理。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">  * 在子控件消耗任何部分的滑动之前分发嵌套滑动，这个方法给父控件提供了预先处理的机会</span></span><br><span class="line"><span class="comment">  * <span class="doctag">@param</span> dx Horizontal scroll distance in pixels</span></span><br><span class="line"><span class="comment">  * <span class="doctag">@param</span> dy Vertical scroll distance in pixels</span></span><br><span class="line"><span class="comment">  * <span class="doctag">@param</span> consumed 用于输出的数组。如果不为空，consumed[0]会包含dx的消耗值，consumed[1]是dy的消耗值</span></span><br><span class="line"><span class="comment">  * <span class="doctag">@param</span> offsetInWindow 可选，如果不为空，则返回的值是view在这个方法操作前后的坐标的插值。View可能会用这个值来调整输入坐标值</span></span><br><span class="line"><span class="comment">  * <span class="doctag">@return</span> 只要父控件消耗了滑动的坐标就会返回true </span></span><br><span class="line"><span class="comment">  */</span></span><br><span class="line"> <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">dispatchNestedPreScroll</span><span class="params">(<span class="keyword">int</span> dx, <span class="keyword">int</span> dy,</span></span></span><br><span class="line"><span class="function"><span class="params">         <span class="meta">@Nullable</span> <span class="meta">@Size(2)</span> <span class="keyword">int</span>[] consumed, <span class="meta">@Nullable</span> <span class="meta">@Size(2)</span> <span class="keyword">int</span>[] offsetInWindow)</span> </span>&#123;</span><br><span class="line">     <span class="keyword">if</span> (isNestedScrollingEnabled() &amp;&amp; mNestedScrollingParent != <span class="keyword">null</span>) &#123;</span><br><span class="line">         <span class="keyword">if</span> (dx != <span class="number">0</span> || dy != <span class="number">0</span>) &#123;</span><br><span class="line">             <span class="keyword">int</span> startX = <span class="number">0</span>;</span><br><span class="line">             <span class="keyword">int</span> startY = <span class="number">0</span>;</span><br><span class="line">             <span class="keyword">if</span> (offsetInWindow != <span class="keyword">null</span>) &#123;</span><br><span class="line">                 getLocationInWindow(offsetInWindow);</span><br><span class="line">                 startX = offsetInWindow[<span class="number">0</span>];</span><br><span class="line">                 startY = offsetInWindow[<span class="number">1</span>];</span><br><span class="line">             &#125;</span><br><span class="line"></span><br><span class="line">             <span class="keyword">if</span> (consumed == <span class="keyword">null</span>) &#123;</span><br><span class="line">                 <span class="keyword">if</span> (mTempNestedScrollConsumed == <span class="keyword">null</span>) &#123;</span><br><span class="line">                     mTempNestedScrollConsumed = <span class="keyword">new</span> <span class="keyword">int</span>[<span class="number">2</span>];</span><br><span class="line">                 &#125;</span><br><span class="line">                 consumed = mTempNestedScrollConsumed;</span><br><span class="line">             &#125;</span><br><span class="line">             consumed[<span class="number">0</span>] = <span class="number">0</span>;</span><br><span class="line">             consumed[<span class="number">1</span>] = <span class="number">0</span>;</span><br><span class="line">             mNestedScrollingParent.onNestedPreScroll(<span class="keyword">this</span>, dx, dy, consumed);</span><br><span class="line"></span><br><span class="line">             <span class="keyword">if</span> (offsetInWindow != <span class="keyword">null</span>) &#123;</span><br><span class="line">                 getLocationInWindow(offsetInWindow);</span><br><span class="line">                 offsetInWindow[<span class="number">0</span>] -= startX;</span><br><span class="line">                 offsetInWindow[<span class="number">1</span>] -= startY;</span><br><span class="line">             &#125;</span><br><span class="line">             <span class="keyword">return</span> consumed[<span class="number">0</span>] != <span class="number">0</span> || consumed[<span class="number">1</span>] != <span class="number">0</span>;</span><br><span class="line">         &#125; <span class="keyword">else</span> <span class="keyword">if</span> (offsetInWindow != <span class="keyword">null</span>) &#123;</span><br><span class="line">             offsetInWindow[<span class="number">0</span>] = <span class="number">0</span>;</span><br><span class="line">             offsetInWindow[<span class="number">1</span>] = <span class="number">0</span>;</span><br><span class="line">         &#125;</span><br><span class="line">     &#125;</span><br><span class="line">     <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line"> &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"> <span class="comment">/**</span></span><br><span class="line"><span class="comment">  * 在子控件消耗任何部分的滑动的时候 分发嵌套滑动，这个方法给父控件提供了后处理的机会，逻辑和上面类似</span></span><br><span class="line"><span class="comment">  */</span></span><br><span class="line"> <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">dispatchNestedScroll</span><span class="params">(<span class="keyword">int</span> dxConsumed, <span class="keyword">int</span> dyConsumed,</span></span></span><br><span class="line"><span class="function"><span class="params">         <span class="keyword">int</span> dxUnconsumed, <span class="keyword">int</span> dyUnconsumed, <span class="meta">@Nullable</span> <span class="meta">@Size(2)</span> <span class="keyword">int</span>[] offsetInWindow)</span> </span>&#123;</span><br><span class="line">     <span class="keyword">if</span> (isNestedScrollingEnabled() &amp;&amp; mNestedScrollingParent != <span class="keyword">null</span>) &#123;</span><br><span class="line">         <span class="keyword">if</span> (dxConsumed != <span class="number">0</span> || dyConsumed != <span class="number">0</span> || dxUnconsumed != <span class="number">0</span> || dyUnconsumed != <span class="number">0</span>) &#123;</span><br><span class="line">             <span class="keyword">int</span> startX = <span class="number">0</span>;</span><br><span class="line">             <span class="keyword">int</span> startY = <span class="number">0</span>;</span><br><span class="line">             <span class="keyword">if</span> (offsetInWindow != <span class="keyword">null</span>) &#123;</span><br><span class="line">                 getLocationInWindow(offsetInWindow);</span><br><span class="line">                 startX = offsetInWindow[<span class="number">0</span>];</span><br><span class="line">                 startY = offsetInWindow[<span class="number">1</span>];</span><br><span class="line">             &#125;</span><br><span class="line"></span><br><span class="line">             mNestedScrollingParent.onNestedScroll(<span class="keyword">this</span>, dxConsumed, dyConsumed,</span><br><span class="line">                     dxUnconsumed, dyUnconsumed);</span><br><span class="line"></span><br><span class="line">             <span class="keyword">if</span> (offsetInWindow != <span class="keyword">null</span>) &#123;</span><br><span class="line">                 getLocationInWindow(offsetInWindow);</span><br><span class="line">                 offsetInWindow[<span class="number">0</span>] -= startX;</span><br><span class="line">                 offsetInWindow[<span class="number">1</span>] -= startY;</span><br><span class="line">             &#125;</span><br><span class="line">             <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">         &#125; <span class="keyword">else</span> <span class="keyword">if</span> (offsetInWindow != <span class="keyword">null</span>) &#123;</span><br><span class="line">             <span class="comment">// No motion, no dispatch. Keep offsetInWindow up to date.</span></span><br><span class="line">             offsetInWindow[<span class="number">0</span>] = <span class="number">0</span>;</span><br><span class="line">             offsetInWindow[<span class="number">1</span>] = <span class="number">0</span>;</span><br><span class="line">         &#125;</span><br><span class="line">     &#125;</span><br><span class="line">     <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure>
<h2 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h2><p>上面说的断断续续，其实用起来很容易。</p>
<h3 id="NestedScrollingChild-1"><a href="#NestedScrollingChild-1" class="headerlink" title="NestedScrollingChild"></a>NestedScrollingChild</h3><p>对于 NestedScrollingChild 来说，它需要做的是 ：</p>
<ol>
<li>setNestedScrollingEnabled()设置为true</li>
<li>在ACTION_DOWN中调用 startNestedScroll()</li>
<li>在ACTION_MOVE中调用 dispatchNestedPreScroll() 和 dispatchNestedScroll()</li>
<li>在ACTOPN_UP|ACTION_CANCEL 中看情况调用 stopNestedScroll()</li>
</ol>
<p>在sdk21之后，View类里面 onTouchEvent() 默认实现了这些步骤，如果不需要重写 onTouchEvent() 的话，本身就是支持这个功能的，如果重写的话，则需要自己看情况加入这些流程的调用。具体的例子可以看 RecyclerView 。作为support包的类，为了兼容性它自己实现了NestedScrollingChild接口，其实也就是调用 NestedScrollingChildHelper 类的相关方法，逻辑和sdk21之后的View的默认实现是类似的。</p>
<h3 id="NestedScrollingParent-1"><a href="#NestedScrollingParent-1" class="headerlink" title="NestedScrollingParent"></a>NestedScrollingParent</h3><p>对于 NestedScrollingParent 来说，它需要做的就是 重写onXXXScroll()方法 ，这个根据不同的控件会有不同的效果，都需要自己去实现，对于sdk21之后的ViewGroup,提供了默认实现，就是直接调用 View的默认实现  dispatchNestedPreScroll() 和 dispatchNestedScroll() 继续向父控件分发，不满足条件则直接返回false,什么也不做。具体的例子可以看 ActionBarOverlayLayout 这个类，不过鉴于这个类不是很熟悉，可以看 ScrollView,SwipeRefreshLayout ，但这两个类都不仅仅可以作为 NestedScrollingParent，也可以作为NestedScrollingChild，看的时候不要弄混了。还有个 CoordinatorLayout，这个又做了一层封装，可以自己选择哪个类把。</p>
<p>后面有空可以自己实现一个来看看效果</p>
]]></content>
      <categories>
        <category>android_app</category>
      </categories>
  </entry>
  <entry>
    <title>Android-wms总结</title>
    <url>/2018/08/14/Android-wms%E6%80%BB%E7%BB%93/</url>
    <content><![CDATA[<p>Android 中的窗口是屏幕上一块用于 显示各种视图 并且可以响应用户输出的 矩形区域。从原理上来说，窗口的是独占一个Surface实例的显示区域。而WindowsManagerService则是运行在系统进程中的用于 为窗口分配Surface,控制Surface的Z-order，位置，尺寸，窗口动画等功能的 一项重要服务，并且还是输入系统的一个中转站，负责转发输入系统的消息到具体的窗口进行响应。<a id="more"></a></p>
<p>Android中显示出一个窗口内容主要经过以下几个步骤：</p>
<ol>
<li>获取wms服务：<code>IWindowManager wms = IWindowManager.Stub.asInterface(ServiceManager.getService(Context.WINDOW_SERVICE))</code></li>
<li>获取窗口的Session：<code>mSession = WindowManagerGlobal.getWindowSession(Looper.myLooper)</code></li>
<li>添加窗口: <code>wms.addWindowToken() ; mSession.add(...)</code></li>
<li>确定窗口大小，尺寸:<code>mSession.relayout(...)</code></li>
<li>renderFrames : <code>mChoreographer.postCallback(renderRunnable,...)</code></li>
</ol>
<p>在后面，我们分析RootView的时候会看到这些过程</p>
<p>Android的显示层次可以分为三层:</p>
<ol>
<li>UI框架层，这里是在surface上绘制的ui元素和相应输入事件</li>
<li>wms, 这里是管理surface的分配，层级顺序等</li>
<li>surfaceflinger , 负责将多个Suface混合并输出</li>
</ol>
<h2 id="wms的重要成员"><a href="#wms的重要成员" class="headerlink" title="wms的重要成员"></a>wms的重要成员</h2><ol>
<li>mInputManager  , InputManagerService的实例</li>
<li>mChoreographer  , Choreographer的实例</li>
<li>mPolicy , WindowsPolicyManager的实例，目前只有PhoneWindowManager一个实现类。负责窗口的相关策略，比如告诉wms一个窗口的z-order是多少，为wms监听屏幕的旋转状态，矫正窗口属性，预处理Home,Back按键的默认行为等</li>
<li>mTokenMap , 一个Hashmap, 保存了窗口的令牌，一个窗口必须隶属于某个令牌。其中还有一些子集，比如有些是保存的windowToken,有些是保存的AppWindowToken等，其中AppWindowToken是有序的，和AMS中的mHistory列表保持一直，反映了系统中的Activity的顺序。和ams交互会用到</li>
<li>mWindowMap , 保存了 windowState 实例，用于窗口的管理，它也有一些自己，窗口在这个列表中的位置决定了窗口最终显示的Z序， windowState 主要用于wms通知客户端执行一些方法</li>
<li>mSessions , IWindowSession 的Bn端， IWindowSession 主要用于客户端通知wms执行一些方法</li>
</ol>
<p><img src="/2018/08/14/Android-wms%E6%80%BB%E7%BB%93/wms%E6%88%90%E5%91%98.png" alt="wms成员"></p>
<h3 id="WindowToken"><a href="#WindowToken" class="headerlink" title="WindowToken"></a>WindowToken</h3><ol>
<li>WindowToken 具有令牌的作用，是对应用组件的行为进行规范管理的一个手段。应用组件再需要新窗口时，必须提供WindowToken表明自己的身份，wms也会检查WindowToken和窗口的type直接的关联，保证一致。比如，Wallpaper只能创建 Type_WALLPAPER 类型的窗口，并且只有当前的Wallpaper才能创建窗口，因为其他的窗口没有有效的token.</li>
<li>WindowToken 将属于同一个应用组件的窗口组织在一起。比如在z-order排序的时候。</li>
<li>对于客户端而言，Token仅仅是一个任意的Binder实例，对于wms而言，会生成一个对应的WindowToken并存储在map中。</li>
<li>AppWindowToken ,  AppWindowToken是为了管理Activity而创建的，它继承WindowToken并增加了一些新的功能。 对于AMS来说，AMS会为每一个Activity创建一个ActivityStack,这其中则包含了一个类型为IApplicationToken.Stub的appToken对象，在启动的过程中会把这个对象传给wms，wms则为它创建一个AppWindowToken，其中包含了IApplicationToken对象，这个对象实际上是一个远程代理接口，因此，wms可以在窗口变化的时候通知ams,而ams也可以通过ActivityStack在wms中找到对应的AppWindowToken，进而控制这个窗口的绘制和排序</li>
</ol>
<h3 id="WindowState"><a href="#WindowState" class="headerlink" title="WindowState"></a>WindowState</h3><p>上面说到WindowToken是wms与ams交互的数据结构，这里WindowState就是wms通知客户端的数据结构。客户端addWindow时会传入IWindow的Bn端，wms则会拿到IWindow的Bp端，当wms有需要的时候，则可以通过Bp端去调用Bn端的方法控制客户端，比如尺寸变化，焦点变化等。</p>
<h2 id="窗口的显示顺序"><a href="#窗口的显示顺序" class="headerlink" title="窗口的显示顺序"></a>窗口的显示顺序</h2><p>Android系统会依据窗口的类型确定主序mBaseLayer,依据子窗口类型确定子序mSubLayer,最后根据一定的算法由主序子序以及其他参数（比如同类型的窗口出现的顺序，壁纸类型的窗口等）来计算出最终显示次序mLayer.</p>
<h2 id="窗口的布局"><a href="#窗口的布局" class="headerlink" title="窗口的布局"></a>窗口的布局</h2><p>窗口的布局本身其实就是一个计算窗口尺寸和位置的过程，但是因为窗口之间的关系，层次等原因，导致计算涉及到的变量特别多，因此变的非常复杂。主要的过程是：</p>
<ol>
<li>准备所需要的参数，比如屏幕尺寸，顶部状态栏/底部导航栏大小/可见性，屏幕旋转等</li>
<li>计算顶级窗口的属性，保存在WindowState</li>
<li>计算子窗口的属性，需要依赖第二步计算出的结果。</li>
<li>完成一次布局，清理变量和资源</li>
</ol>
<p>在一次布局完成后，窗口的属性计算并没有结束，因为窗口还有flag 属性没有计算进去，但是窗口的flag属性会影响窗口尺寸的计算，反过来窗口尺寸的计算也会影响到flag的有效性，因此 一次布局完成后，还需要根据flag再次进行布局计算，直到flag和窗口的属性都能一致为止。</p>
]]></content>
      <categories>
        <category>android_framework</category>
      </categories>
  </entry>
  <entry>
    <title>Android-binder总结</title>
    <url>/2018/11/02/Android-binder%E6%80%BB%E7%BB%93/</url>
    <content><![CDATA[<p>一些描述性的总结,大多数前面两篇已经描述过了</p>
<a id="more"></a>
<h2 id="进程结构："><a href="#进程结构：" class="headerlink" title="进程结构："></a>进程结构：</h2><p><img src="/2018/11/02/Android-binder%E6%80%BB%E7%BB%93/binder_11.png" alt="binder_16"></p>
<blockquote>
<p>binder_proces 是保存在binder驱动中的一个全局的链表</p>
</blockquote>
<p><img src="/2018/11/02/Android-binder%E6%80%BB%E7%BB%93/%E8%BF%9B%E7%A8%8B%E7%BB%93%E6%9E%84%E7%A4%BA%E6%84%8F%E5%9B%BE.jpg" alt="binder_16"></p>
<blockquote>
<p>注册服务的时候，会在service_manager中创建ref,在服务的进程中创建node,客户进程请求服务的时候会在自己的进程创建ref，都保存在各自的proc的红黑树的结构中</p>
</blockquote>
<p><img src="/2018/11/02/Android-binder%E6%80%BB%E7%BB%93/binder_13.png" alt="binder_13"></p>
<h2 id="数据流向"><a href="#数据流向" class="headerlink" title="数据流向"></a>数据流向</h2><ol>
<li>BBinder会转成一个flat_binder_object，然后加上 name 序列化到 Parcel里</li>
<li>然后加上 target= 0和code=ADD_SERVICE 转成 binder_transation_data 对象，</li>
<li>然后加上 cmd = BC_TRANSACTION 写入到IPC_ThreadState的mOut 里面,mOut和mIn 构造一个 binder_write_read 对象， 发送给 binder 驱动</li>
<li>binder 驱动拷贝这个数据到内核，构造一个 binder_transaction_data 发送给服务进程的todo队列，同时向用户进程回复BR_COMPLETE</li>
<li>服务进程构造 binder_transaction_data 和 BC_REPLY 回复给 binder 驱动</li>
</ol>
<h2 id="请求过程"><a href="#请求过程" class="headerlink" title="请求过程"></a>请求过程</h2><p><img src="/2018/11/02/Android-binder%E6%80%BB%E7%BB%93/media_player_service_ipc.jpg" alt="binder_13"></p>
<h2 id="传输数据的大小限制"><a href="#传输数据的大小限制" class="headerlink" title="传输数据的大小限制"></a>传输数据的大小限制</h2><p>取决于<code>binder_open</code>的参数:</p>
<ol>
<li>ServiceManager 初始化的时候传入的是 128*1024，也就是128k， 这个我们用不上</li>
<li>其他系统服务初始化的时候传入的是 BINDER_VM_SIZE(1*1024*1024-4096*2)，也就是 1M-8K</li>
</ol>
<h2 id="系统服务与bindService等启动的服务的区别"><a href="#系统服务与bindService等启动的服务的区别" class="headerlink" title="系统服务与bindService等启动的服务的区别"></a>系统服务与bindService等启动的服务的区别</h2><p><img src="/2018/11/02/Android-binder%E6%80%BB%E7%BB%93/binder_20.jpg" alt="binder_20"></p>
<p><a href="https://blog.csdn.net/happylishang/article/details/62234127">深入理解Binder通信原理及面试问题</a><br><a href="http://gityuan.com/2015/11/28/binder-summary/">Binder系列10—总结</a></p>
]]></content>
      <categories>
        <category>android_framework</category>
      </categories>
      <tags>
        <tag>binder</tag>
      </tags>
  </entry>
  <entry>
    <title>Android-贝塞尔曲线</title>
    <url>/2017/11/14/Android-%E8%B4%9D%E5%A1%9E%E5%B0%94%E6%9B%B2%E7%BA%BF/</url>
    <content><![CDATA[<p>贝塞尔曲线是在计算机图形学和相关领域内常用的一种参数曲线，它的主要应用有</p>
<ul>
<li>生成光滑的曲线</li>
<li>动画</li>
<li>圆滑的字体，比如TrueType</li>
</ul>
<a id="more"></a>

<p>它由一系列控制点P0到PN组成(n=1时是一阶，n=2时是2阶,etc)，第一个和最后一个控制点总是曲线的终端节点，而中间的控制点通常不会出现在曲线上。</p>
<ul>
<li>一阶贝塞尔曲线</li>
</ul>
<p><img src="/2017/11/14/Android-%E8%B4%9D%E5%A1%9E%E5%B0%94%E6%9B%B2%E7%BA%BF/Android-%E8%B4%9D%E5%A1%9E%E5%B0%94%E6%9B%B2%E7%BA%BF%5C1.png"></p>
<p> 它表示的点B随着t变化的位置如图所示：</p>
<p><img src="/2017/11/14/Android-%E8%B4%9D%E5%A1%9E%E5%B0%94%E6%9B%B2%E7%BA%BF/B%C3%A9zier_1_big.gif" alt="Animation of a linear Bézier curve"></p>
<ul>
<li>二阶贝塞尔曲线</li>
</ul>
<p><img src="/2017/11/14/Android-%E8%B4%9D%E5%A1%9E%E5%B0%94%E6%9B%B2%E7%BA%BF/Android-%E8%B4%9D%E5%A1%9E%E5%B0%94%E6%9B%B2%E7%BA%BF%5C2.svg" alt="贝塞尔曲线"></p>
<p>计算后得到：</p>
<p><img src="/2017/11/14/Android-%E8%B4%9D%E5%A1%9E%E5%B0%94%E6%9B%B2%E7%BA%BF/Android-%E8%B4%9D%E5%A1%9E%E5%B0%94%E6%9B%B2%E7%BA%BF%5C05aa724a6da0e00bcce53ec6510c8ae479aea5c3.svg" alt="贝塞尔曲线"></p>
<p>它表示的点B随着t变化的位置如图所示</p>
<p><img src="/2017/11/14/Android-%E8%B4%9D%E5%A1%9E%E5%B0%94%E6%9B%B2%E7%BA%BF/B%C3%A9zier_2_big.gif" alt="Animation of a quadratic Bézier curve"></p>
<ul>
<li>三阶贝塞尔曲线</li>
</ul>
<p><img src="/2017/11/14/Android-%E8%B4%9D%E5%A1%9E%E5%B0%94%E6%9B%B2%E7%BA%BF/Android-%E8%B4%9D%E5%A1%9E%E5%B0%94%E6%9B%B2%E7%BA%BF%5C6bc6ed7d58a9c9727a80878258754f9f79b472df.svg" alt="05aa724a6da0e00bcce53ec6510c8ae479aea5c3"></p>
<p><img src="/2017/11/14/Android-%E8%B4%9D%E5%A1%9E%E5%B0%94%E6%9B%B2%E7%BA%BF/Android-%E8%B4%9D%E5%A1%9E%E5%B0%94%E6%9B%B2%E7%BA%BF%5C504c44ca5c5f1da2b6cb1702ad9d1afa27cc1ee0.svg" alt="504c44ca5c5f1da2b6cb1702ad9d1afa27cc1ee0"></p>
<p><img src="/2017/11/14/Android-%E8%B4%9D%E5%A1%9E%E5%B0%94%E6%9B%B2%E7%BA%BF/B%C3%A9zier_3_big.gif" alt="Animation of a cubic Bézier curve"></p>
<blockquote>
<p>资料来源于  <a href="https://en.wikipedia.org/wiki/B%C3%A9zier_curve">https://en.wikipedia.org/wiki/B%C3%A9zier_curve</a></p>
</blockquote>
<hr>
<p>Android 中的Path类可以直接绘制一阶到三阶的贝塞尔曲线，在onDraw(Canvas canvas) 方法中使用,其中start,endpoint分别表示起始点和终点，一般也叫做数据点，controlPoint则是中间的控制点:</p>
<ul>
<li><p>绘制一阶贝塞尔曲线：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">canvas.drawLine(start.x,start.y,end.x,end.y);</span><br></pre></td></tr></table></figure></li>
<li><p>绘制二阶贝塞尔曲线：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">mPath.moveTo(startPoint.x, startPoint.y);&#x2F;&#x2F;起点</span><br><span class="line">mPath.quadTo(controlPoint1.x, controlPoint1.y, endPoint.x, endPoint.y);</span><br><span class="line">canvas.drawPath(mPath, mPaint);</span><br></pre></td></tr></table></figure></li>
<li><p>绘制三阶贝塞尔曲线：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">mPath.moveTo(startPoint.x, startPoint.y);&#x2F;&#x2F;起点</span><br><span class="line">mPath.cubicTo(controlPoint1.x, controlPoint1.y, controlPoint2.x, controlPoint2.y, endPoint.x, endPoint.y);</span><br><span class="line">canvas.drawPath(mPath, mPaint);</span><br></pre></td></tr></table></figure>
<p>当我们知道不在一条直线上的三个或者以上固定的点的时候，就可以利用api绘制出一条曲线，不过大多数的情况下，这三个点的坐标通常不是固定的，因此就可以不断地绘制一段一段连接起来的光滑的曲线，连续绘制的时候，quadTo或者cubicTo的终点就是下一段的起点。</p>
</li>
</ul>
<hr>
<p>因为网上已经有很多的例子了，这次先看<a href="http://blog.csdn.net/eclipsexys/article/details/51956908">这里</a>,建议下载源码到Android Studio里面去看，这里主要是分析一下源码</p>
<ul>
<li>二阶模拟和三阶模拟 ：</li>
</ul>
<p>没什么好说的，主要是基于控制点坐标的变化不断的重新绘制曲线，可以理解一下基础的变化。</p>
<ul>
<li>圆滑绘图  :</li>
</ul>
<p>里面的一段关键代码:</p>
<pre><code> case MotionEvent.ACTION_MOVE:
     float x1 = event.getX();
     float y1 = event.getY();
     float preX = mX;
     float preY = mY;
     float dx = Math.abs(x1 - preX);
     float dy = Math.abs(y1 - preY);
     if (dx &gt;= offset || dy &gt;= offset) &#123;
     // 贝塞尔曲线的控制点为起点和终点的中点
     float cX = (x1 + preX) / 2;
     float cY = (y1 + preY) / 2;
     mPath.quadTo(preX, preY, cX, cY);
     mX = x1;
     mY = y1;
     &#125;</code></pre>
<p>刚开始看的时候不是很理解为什么是mPath.quadTo(preX, preY, cX, cY)，明明注释里面说控制点是（cX, cY），我们假设在绘图的时候有下面这种情形</p>
<p><img src="/2017/11/14/Android-%E8%B4%9D%E5%A1%9E%E5%B0%94%E6%9B%B2%E7%BA%BF/Android-%E8%B4%9D%E5%A1%9E%E5%B0%94%E6%9B%B2%E7%BA%BF%5CQQ20171115094552.jpg"></p>
<p>mPath.quadTo(preX, preY, cX, cY) 第一次调用是时候，起始点控制点终点分别是AAD,这样子画出来是AD直线，第二次调用的时候起始点控制点终点则变成了DBE，然后就是ECF，实际上是以各个线段的中点作为数据点绘制的，这样子就把折线的角度改成了圆滑的曲线。</p>
<ul>
<li>曲线变形</li>
</ul>
<p>这里用到了属性动画</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">mAnimator &#x3D; ValueAnimator.ofFloat(mStartPointY, (float) h);</span><br><span class="line">    mAnimator.setInterpolator(new BounceInterpolator());</span><br><span class="line">    mAnimator.setDuration(1000);</span><br><span class="line">    mAnimator.addUpdateListener(new ValueAnimator.AnimatorUpdateListener() &#123;</span><br><span class="line">        @Override</span><br><span class="line">        public void onAnimationUpdate(ValueAnimator valueAnimator) &#123;</span><br><span class="line">            mAuxiliaryOneY &#x3D; (float) valueAnimator.getAnimatedValue();</span><br><span class="line">            mAuxiliaryTwoY &#x3D; (float) valueAnimator.getAnimatedValue();</span><br><span class="line">            invalidate();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br></pre></td></tr></table></figure>
<p>从起点mStartPointY到屏幕底部h的一段属性动画，利用动画中y值的变化更新控制点的坐标</p>
<ul>
<li>波浪动画 </li>
</ul>
<p><a href="http://blog.csdn.net/IT_XF/article/details/75014160">这里</a>有个更详细的版本，对于</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">@Override</span><br><span class="line">   protected void onDraw(Canvas canvas) &#123;</span><br><span class="line">       super.onDraw(canvas);</span><br><span class="line">       mPath.reset();</span><br><span class="line">       mPath.moveTo(-mWaveLength + mOffset, mCenterY);</span><br><span class="line">       for (int i &#x3D; 0; i &lt; mWaveCount; i++) &#123;</span><br><span class="line">           &#x2F;&#x2F; + (i * mWaveLength)</span><br><span class="line">           &#x2F;&#x2F; + mOffset</span><br><span class="line">           mPath.quadTo((-mWaveLength * 3 &#x2F; 4) + (i * mWaveLength) + mOffset, mCenterY + 60, (-mWaveLength &#x2F; 2) + (i * mWaveLength) + mOffset, mCenterY);</span><br><span class="line">           mPath.quadTo((-mWaveLength &#x2F; 4) + (i * mWaveLength) + mOffset, mCenterY - 60, i * mWaveLength + mOffset, mCenterY);</span><br><span class="line">       &#125;</span><br><span class="line">       mPath.lineTo(mScreenWidth, mScreenHeight);</span><br><span class="line">       mPath.lineTo(0, mScreenHeight);</span><br><span class="line">       mPath.close();</span><br><span class="line">       canvas.drawPath(mPath, mPaint);</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure>
<p>mPath.quadTo这个方法里面，需要明确的是虽然i是变化的，但实际上offset不变的时候，绘制出来的就是一条固定形状的曲线。从屏幕外面的左边一直绘制到屏幕外面的右边，当offset随着属性动画变化的时候，mPath.quadTo绘制的所需要的起始点控制点终点的x坐标都在以相同的大小增加，这样绘制出来的曲线也会随着平移，去除掉屏幕外面的部分，屏幕内显示的就是波浪动画了。</p>
<ul>
<li>路径动画</li>
</ul>
<p>这里算是真真正正用到了上面所提到的B(t)的求值公式。主要是重写了估值器，</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">public class BezierEvaluator implements TypeEvaluator&lt;PointF&gt; &#123;</span><br><span class="line"></span><br><span class="line">    private PointF mControlPoint;</span><br><span class="line"></span><br><span class="line">    public BezierEvaluator(PointF controlPoint) &#123;</span><br><span class="line">        this.mControlPoint &#x3D; controlPoint;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    public PointF evaluate(float t, PointF startValue, PointF endValue) &#123;</span><br><span class="line">        return BezierUtil.CalculateBezierPointForQuadratic(t, startValue, mControlPoint, endValue);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>其中3个控制点都固定了位置，正好插值器传过来的t的值[0,1]，根据上面所提到的二阶贝塞尔的公式，就可以得到曲线上的点B(t)的值，然后返回给valueAnimator.getAnimatedValue()，把这个点变化的过程绘制出来就是贝塞尔曲线了。当把固定的小球，曲线都不绘制出来的时候，视觉效果就出来了。</p>
<ul>
<li>切线拟合</li>
</ul>
<p>纯数学。两个圆通过属性动画已经画出来，主要是一个圆的坐标变化导致的连接块的范围变化。</p>
<p>实现了两个简单的动画效果：</p>
<p><img src="/2017/11/14/Android-%E8%B4%9D%E5%A1%9E%E5%B0%94%E6%9B%B2%E7%BA%BF/Heart.gif" alt="圆形渐变"></p>
<p>这个动画主要用到的知识是用四段三阶贝塞尔曲线去画一个圆，在<a href="http://www.cnblogs.com/ArthurQQ/articles/1730214.html">这里</a>和<a href="http://spencermortensen.com/articles/bezier-circle/">这里</a>给出了绘制的思路,圆画出来之后，就是常规的改变控制点的位置来重绘曲线了，虽然这个动画挺简单的，不过三阶曲线去拟合一个圆，这个思路在后面很多的地方都会用到。</p>
<p>然后是这样一个心型上升动画</p>
<p><img src="/2017/11/14/Android-%E8%B4%9D%E5%A1%9E%E5%B0%94%E6%9B%B2%E7%BA%BF/heartview.gif" alt="圆形渐变"></p>
<p>用来练练手。其实就是一个起点固定，两个控制点和终点都不固定的三阶贝塞尔曲线，不过需要注意的是因为添加了view，动画结束后需要remove掉。</p>
<p>代码上传到了<a href="https://github.com/nangonghuang/BezierCurve">github</a></p>
<p>感谢： </p>
<p><a href="https://en.wikipedia.org/wiki/B%C3%A9zier_curve">https://en.wikipedia.org/wiki/B%C3%A9zier_curve</a></p>
<p><a href="https://github.com/xuyisheng/BezierArt">https://github.com/xuyisheng/BezierArt</a></p>
<p><a href="http://blog.csdn.net/eclipsexys/article/details/51956908">http://blog.csdn.net/eclipsexys/article/details/51956908</a></p>
<p><a href="http://blog.csdn.net/IT_XF/article/details/75014160">http://blog.csdn.net/IT_XF/article/details/75014160</a></p>
]]></content>
      <categories>
        <category>android_app</category>
      </categories>
      <tags>
        <tag>贝塞尔曲线</tag>
      </tags>
  </entry>
  <entry>
    <title>Android性能优化典范1阅读</title>
    <url>/2017/11/21/Android%E6%80%A7%E8%83%BD%E4%BC%98%E5%8C%96%E5%85%B8%E8%8C%831%E9%98%85%E8%AF%BB/</url>
    <content><![CDATA[<p>这里是<a href="http://hukai.me/android-performance-patterns/">原文地址</a></p>
<h1 id="界面卡顿问题"><a href="#界面卡顿问题" class="headerlink" title="界面卡顿问题"></a>界面卡顿问题</h1><p>大多数用户感知到的卡顿等性能问题的最主要根源都是因为渲染性能。Android系统每隔16ms发出VSYNC信号，触发对UI进行渲染，如果每次渲染都成功，这样就能够达到流畅的画面所需要的60fps，为了能够实现60fps，这意味着程序的大多数操作都必须在16ms内完成。如果你的某个操作花费时间是24ms，系统在得到VSYNC信号的时候就无法进行正常渲染，这样就发生了丢帧现象。那么用户在32ms内看到的会是同一帧画面。</p>
<a id="more"></a>

<p>用户容易在UI执行动画或者滑动ListView的时候感知到卡顿不流畅，是因为这里的操作相对复杂，容易发生丢帧的现象，从而感觉卡顿。有很多原因可以导致丢帧，也许是因为你的layout太过复杂，无法在16ms内完成渲染，有可能是因为你的UI上有层叠太多的绘制单元，还有可能是因为动画执行的次数过多。这些都会导致CPU或者GPU负载过重。</p>
<p>我们可以通过一些工具来定位问题，比如可以，也可以。你还可以使用TraceView来观察CPU的执行情况，更加快捷的找到性能瓶颈。</p>
<h2 id="检查渲染时间"><a href="#检查渲染时间" class="headerlink" title="检查渲染时间"></a>检查渲染时间</h2><p>打开手机里面的开发者选项，选择Profile GPU Rendering，选中On screen as bars的选项。</p>
<p><strong>Resterization栅格化</strong>是绘制那些Button，Shape，Path，String，Bitmap等组件最基础的操作。它把那些组件拆分到不同的像素上进行显示。这是一个很费时的操作，GPU的引入就是为了加快栅格化的操作。CPU负责把UI组件计算成Polygons，Texture纹理，然后交给GPU进行栅格化渲染。然而每次从CPU转移到GPU是一件很麻烦的事情，所幸的是OpenGL ES可以把那些需要渲染的纹理Hold在GPU Memory里面，在下次需要渲染的时候直接进行操作。所以如果你更新了GPU所hold住的纹理内容，那么之前保存的状态就丢失了。</p>
<h2 id="检查Activity中的布局是否过于复杂"><a href="#检查Activity中的布局是否过于复杂" class="headerlink" title="检查Activity中的布局是否过于复杂"></a>检查Activity中的布局是否过于复杂</h2><p>使用HierarchyViewer，使得布局尽量扁平化，避免出现重复的嵌套布局。移除非必需的UI组件，这些操作能够减少Measure，Layout的计算时间。</p>
<h2 id="检查过度绘制的情况"><a href="#检查过度绘制的情况" class="headerlink" title="检查过度绘制的情况"></a>检查过度绘制的情况</h2><p>使用手机设置里面的开发者选项，打开Show GPU Overdraw等选项进行观察</p>
<p>Overdraw描述的是屏幕上的某个像素在同一帧的时间内被绘制了多次。在多层次的UI结构里面，如果不可见的UI也在做绘制的操作，这就会导致某些像素区域被绘制了多次。这就浪费大量的CPU以及GPU资源。</p>
<p>对于自定义的View(重写了onDraw方法)，我们可以通过<a href="http://developer.android.com/reference/android/graphics/Canvas.html">canvas.clipRect()</a>来帮助系统识别那些可见的区域。这个方法可以指定一块矩形区域，只有在这个区域内才会被绘制，其他的区域会被忽视。这个API可以很好的帮助那些有多组重叠组件的自定义View来控制显示的区域。同时clipRect方法还可以帮助节约CPU与GPU资源，在clipRect区域之外的绘制指令都不会被执行，那些部分内容在矩形区域内的组件，仍然会得到绘制。</p>
<p>可以尝试的方法：</p>
<ul>
<li>移除Window默认的Background</li>
<li>移除XML布局文件中非必需的Background</li>
<li>按需显示占位背景图片</li>
</ul>
<h2 id="内存抖动和GC"><a href="#内存抖动和GC" class="headerlink" title="内存抖动和GC"></a>内存抖动和GC</h2><ul>
<li><strong>Memory Monitor：</strong>跟踪整个app的内存变化情况。</li>
<li><strong>Heap Viewer：</strong>查看当前内存快照，便于对比分析哪些对象有可能发生了泄漏。</li>
<li><strong>Allocation Tracker：</strong>追踪内存对象的来源。</li>
</ul>
<p>通常来说，单个的GC并不会占用太多时间，但是大量不停的GC操作则会显著占用帧间隔时间(16ms)。如果在帧间隔时间里面做了过多的GC操作，那么自然其他类似计算，渲染等操作的可用时间就变得少了。</p>
<p>导致GC频繁执行有两个原因：</p>
<ul>
<li><strong>Memory Churn内存抖动</strong>，内存抖动是因为大量的对象被创建又在短时间内马上被释放。</li>
<li>瞬间产生大量的对象会严重占用Young Generation的内存区域，当达到阀值，剩余空间不够的时候，也会触发GC。即使每次分配的对象占用了很少的内存，但是他们叠加在一起会增加Heap的压力，从而触发更多其他类型的GC。这个操作有可能会影响到帧率，并使得用户感知到性能问题。</li>
</ul>
<h2 id="检查内存泄漏的情况"><a href="#检查内存泄漏的情况" class="headerlink" title="检查内存泄漏的情况"></a>检查内存泄漏的情况</h2><p>使用Heap Tool查看当前内存快照，便于对比分析哪些对象有可能是泄漏了的</p>
<p>内存泄漏指的是那些程序不再使用的对象无法被GC识别，这样就导致这个对象一直留在内存当中，占用了宝贵的内存空间。</p>
<h1 id="电池优化"><a href="#电池优化" class="headerlink" title="电池优化"></a>电池优化</h1><p>可以通过<strong>Battery Historian Tool</strong>来查看详细的电量消耗。有下面一些措施能够显著减少电量的消耗：</p>
<ol>
<li>我们应该尽量减少唤醒屏幕的次数与持续的时间，使用WakeLock来处理唤醒的问题，能够正确执行唤醒操作并根据设定及时关闭操作进入睡眠状态。</li>
<li>某些非必须马上执行的操作，例如上传歌曲，图片处理等，可以等到设备处于充电状态或者电量充足的时候才进行。</li>
<li>触发网络请求的操作，每次都会保持无线信号持续一段时间，我们可以把零散的网络请求打包进行一次操作，避免过多的无线信号引起的电量消耗。</li>
</ol>
]]></content>
      <categories>
        <category>Android_性能优化</category>
      </categories>
  </entry>
  <entry>
    <title>Android控件-ListView阅读</title>
    <url>/2018/09/01/Android%E6%8E%A7%E4%BB%B6-ListView%E9%98%85%E8%AF%BB/</url>
    <content><![CDATA[<p>ListView是早期版本时候的常用控件，虽然现在基本都不用了，但我觉得用来学习肯定会有收获。本来想自己写，但是看到别人已经有写的很好的版本了，鉴于郭神的博客应该不会404，所以这里直接贴链接了。<a href="https://blog.csdn.net/guolin_blog/article/details/44996879">Android ListView工作原理完全解析</a> <a id="more"></a></p>
<p><img src="/2018/09/01/Android%E6%8E%A7%E4%BB%B6-ListView%E9%98%85%E8%AF%BB/ListView%E7%B1%BB%E5%9B%BE.jpg" alt="ListView类图"></p>
<p>因为不知道内部类怎么画，所以这里用了虚线箭头表示 DataSetObserver 类可以调用到 AdapterView 中。这里 DataSetObservable 和 DataSetObserver 是Java提供的观察者模式的实现类。当我们调用 BaseAdapter.notifyDataSetChanged()的时候，就可以沿着箭头一路找到AdapterView，进而调用到它的子类中去。</p>
<p>AdapterView 和 AbsListView 都是虚基类，其中 AdapterView 提供了 emptyView 和 Adapter 等相关的机制，AbsListView 提供了View复用的 RecycleBin 的机制 。ListView则提供了具体的Layout方法和HeaderView,FooterView等机制。</p>
<p>这里通过观察者模式实现了View和数据的分离，View的操作如果修改了数据，则需要通过BaseAdapter的接口来处理，而BaseAdapter如果数据发生了变动，则通过notifyDataSetChanged()来通知View更新界面。</p>
<p>在ListView的代码中，有点意外的是添加子view的过程是在onLayout中调用的，在 onMeasure() 的时候 ListView 只能通过 Adapter的引用来拿到 itemView ，计算它们的大小。这也表示作为一个容器其实 子view 只是一个概念而已。 对于 Adapter提供的 count() 个数的view, ListView 仅仅添加在界面上显示出来的view作为子view,没有显示出来的甚至不是它的childView。</p>
<p>ListView 在使用 RecycleBin 缓存的时候，使用的是Viewgroup 的 attachview 和 detachView ,这两个方法和 addview ,removeView的区别在于它不会主动要求重绘。</p>
<p>在Listview中设置 emptyView的时候，根本没有把emptyView添加到控件树里面，只是根据 item 的数量来更新 emptyView 的visibility.</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">    *</span></span><br><span class="line"><span class="comment">    * RecycleBin 有两级缓存 ： ActiveViews 和 ScrapViews 。 ActiveViews 是指最初显示在屏幕上的布局中的那些view，layout结束阶* 段，所有的ActiveViews都会降级成 ScrapViews。 ScrapViews 表示旧的views，他们是可能被重用的view的集合。</span></span><br><span class="line"><span class="comment">    *</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@see</span> android.widget.AbsListView#setRecyclerListener(android.widget.AbsListView.RecyclerListener)</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@see</span> android.widget.AbsListView.RecyclerListener</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">   <span class="class"><span class="keyword">class</span> <span class="title">RecycleBin</span> </span>&#123;</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>android_app</category>
      </categories>
      <tags>
        <tag>列表控件</tag>
      </tags>
  </entry>
  <entry>
    <title>Android控件-RecyclerView2-ItemDecoration</title>
    <url>/2018/09/10/Android%E6%8E%A7%E4%BB%B6-RecyclerView2-ItemDecoration/</url>
    <content><![CDATA[<p>在 <a href="https://nangonghuang.github.io/2018/09/05/Android%E6%8E%A7%E4%BB%B6-RecyclerView/">RecyclerView</a> 中， 我们可以通过 recyclerView.addItemDecoration() 的方式添加 ItemDecoration ，比如下划线，字母索引等。</p>
<a id="more"></a>

<h2 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h2><p>自己实现 ItemDecoration ,只需要实现两个方法:</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">Example</span> <span class="keyword">extends</span> <span class="title">RecyclerView</span>.<span class="title">ItemDecoration</span></span>&#123;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onDraw</span><span class="params">(Canvas c, RecyclerView parent, RecyclerView.State state)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>.onDraw(c, parent, state);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">getItemOffsets</span><span class="params">(Rect outRect, View view, RecyclerView parent, RecyclerView.State state)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>.getItemOffsets(outRect, view, parent, state);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>其中 onDraw() 提供了一个canvas 用于绘制，getItemOffsets则提供了设置 ItemDecoration 大小的机会，以官方的 DividerItemDecoration 为例：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DividerItemDecoration</span> <span class="keyword">extends</span> <span class="title">RecyclerView</span>.<span class="title">ItemDecoration</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">drawVertical</span><span class="params">(Canvas canvas, RecyclerView parent)</span> </span>&#123;</span><br><span class="line">        canvas.save();</span><br><span class="line">        <span class="keyword">final</span> <span class="keyword">int</span> left;</span><br><span class="line">        <span class="keyword">final</span> <span class="keyword">int</span> right;</span><br><span class="line">        <span class="comment">//noinspection AndroidLintNewApi - NewApi lint fails to handle overrides.</span></span><br><span class="line">        <span class="keyword">if</span> (parent.getClipToPadding()) &#123;</span><br><span class="line">            left = parent.getPaddingLeft();</span><br><span class="line">            right = parent.getWidth() - parent.getPaddingRight();</span><br><span class="line">            canvas.clipRect(left, parent.getPaddingTop(), right,</span><br><span class="line">                    parent.getHeight() - parent.getPaddingBottom());</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            left = <span class="number">0</span>;</span><br><span class="line">            right = parent.getWidth();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">final</span> <span class="keyword">int</span> childCount = parent.getChildCount();</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; childCount; i++) &#123;</span><br><span class="line">            <span class="keyword">final</span> View child = parent.getChildAt(i);</span><br><span class="line">            parent.getDecoratedBoundsWithMargins(child, mBounds);</span><br><span class="line">            <span class="keyword">final</span> <span class="keyword">int</span> bottom = mBounds.bottom + Math.round(child.getTranslationY());</span><br><span class="line">            <span class="keyword">final</span> <span class="keyword">int</span> top = bottom - mDivider.getIntrinsicHeight();</span><br><span class="line">            mDivider.setBounds(left, top, right, bottom);</span><br><span class="line">            mDivider.draw(canvas);</span><br><span class="line">        &#125;</span><br><span class="line">        canvas.restore();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">getItemOffsets</span><span class="params">(Rect outRect, View view, RecyclerView parent,</span></span></span><br><span class="line"><span class="function"><span class="params">            RecyclerView.State state)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (mDivider == <span class="keyword">null</span>) &#123;</span><br><span class="line">            outRect.set(<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>);</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (mOrientation == VERTICAL) &#123;</span><br><span class="line">            outRect.set(<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, mDivider.getIntrinsicHeight());</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            outRect.set(<span class="number">0</span>, <span class="number">0</span>, mDivider.getIntrinsicWidth(), <span class="number">0</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">getDecoratedBoundsWithMarginsInt</span><span class="params">(View view, Rect outBounds)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">final</span> LayoutParams lp = (LayoutParams) view.getLayoutParams();</span><br><span class="line">        <span class="keyword">final</span> Rect insets = lp.mDecorInsets;</span><br><span class="line">        outBounds.set(view.getLeft() - insets.left - lp.leftMargin,</span><br><span class="line">                view.getTop() - insets.top - lp.topMargin,</span><br><span class="line">                view.getRight() + insets.right + lp.rightMargin,</span><br><span class="line">                view.getBottom() + insets.bottom + lp.bottomMargin);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>在 drawVertical() 中，先是根据 getClipToPadding() 来判断，要不要把Item绘制到 RecyclerView 的padding 里面，顺便做一个过度绘制的优化，然后调用 getDecoratedBoundsWithMargins() 取得 bottom 的值用于计算绘制的区域，计算的时候用到了 lp.mDecorInsets ，在单个ItemDecoration的情况下，这个值就是在 getItemOffsets() 中设置的 outRect 的值 。需要注意的是，虽然 outRect 的数据结构表示一个矩形，但是这里实际上是表示在child四个方向上的距离值，可以理解为setpadding(left,top,right,bottom),这么命名实在是很让人混乱。。</p>
<p><img src="/2018/09/10/Android%E6%8E%A7%E4%BB%B6-RecyclerView2-ItemDecoration/itemdecoration.jpg" alt="itemdecoration"></p>
<p>在这里可以看到，对于简单的分割线，这里只是为每一个 child 绘制了下面的区域 ,其他的区域也都是设置为0.官方的接口其实就只是提供了你绘制的区域(这个还要自己计算)和canvas,让你自己去绘制。关于使用，就是这些了，下面看一下 RecyclerView 是怎么调用这些方法的。</p>
<h2 id="原理"><a href="#原理" class="headerlink" title="原理"></a>原理</h2><p>一般来说，作为容器 Container 基本上只需要绘制自己的 background 的， RecyclerView 继承了 ViewGroup 后给我们使用的不仅仅是一个容器，还带了点私货，这个私货就是 itemDecoration , 对于每一个 item ,  RecyclerView 新定义了 layoutParam，在自己的layoutparams 中保存了一个 mDecorInsets 的变量，用来记载 itemDecoration 的范围。在 measure,layout 的时候都会考虑到这些值进行测量和布局，最后在ondraw里面把 canvas 交给开发者自己去实现。不过它留的接口传的参数实在是怪异，需要知道详情才知道怎么去绘制。</p>
<p>由于child的测量和绘制也是由LayoutManager去自定义实现的，但是系统也提供了LinearLayoutManager等实现，这里以LinearLayoutManager为例：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//child的测量 </span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">measureChildWithMargins</span><span class="params">(View child, <span class="keyword">int</span> widthUsed, <span class="keyword">int</span> heightUsed)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">final</span> LayoutParams lp = (LayoutParams) child.getLayoutParams();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">final</span> Rect insets = mRecyclerView.getItemDecorInsetsForChild(child);</span><br><span class="line">    widthUsed += insets.left + insets.right;</span><br><span class="line">    heightUsed += insets.top + insets.bottom;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">final</span> <span class="keyword">int</span> widthSpec = getChildMeasureSpec(getWidth(), getWidthMode(),</span><br><span class="line">            getPaddingLeft() + getPaddingRight()</span><br><span class="line">                    + lp.leftMargin + lp.rightMargin + widthUsed, lp.width,</span><br><span class="line">            canScrollHorizontally());</span><br><span class="line">    <span class="keyword">final</span> <span class="keyword">int</span> heightSpec = getChildMeasureSpec(getHeight(), getHeightMode(),</span><br><span class="line">            getPaddingTop() + getPaddingBottom()</span><br><span class="line">                    + lp.topMargin + lp.bottomMargin + heightUsed, lp.height,</span><br><span class="line">            canScrollVertically());</span><br><span class="line">    <span class="keyword">if</span> (shouldMeasureChild(child, widthSpec, heightSpec, lp)) &#123;</span><br><span class="line">        child.measure(widthSpec, heightSpec);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//child的布局</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">layoutDecoratedWithMargins</span><span class="params">(View child, <span class="keyword">int</span> left, <span class="keyword">int</span> top, <span class="keyword">int</span> right,<span class="keyword">int</span> bottom)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">final</span> LayoutParams lp = (LayoutParams) child.getLayoutParams();</span><br><span class="line">    <span class="keyword">final</span> Rect insets = lp.mDecorInsets;</span><br><span class="line">    child.layout(left + insets.left + lp.leftMargin, top + insets.top + lp.topMargin,</span><br><span class="line">            right - insets.right - lp.rightMargin,</span><br><span class="line">            bottom - insets.bottom - lp.bottomMargin);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>可以看到都是把 mDecorInsets 考虑在里面了的，如果我们自定义LayoutManager,也需要考虑到对itemDecoration的支持，不然可能会出现显示问题。</p>
<p>关于 itemDecoration 的绘制，这个就在 RecyclerView 的 ondraw() 函数里面，非常简单：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onDraw</span><span class="params">(Canvas c)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">super</span>.onDraw(c);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">final</span> <span class="keyword">int</span> count = mItemDecorations.size();</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; count; i++) &#123;</span><br><span class="line">        mItemDecorations.get(i).onDraw(c, <span class="keyword">this</span>, mState);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>如果有多个 ItemDecoration , 会依次绘制，这个需要每一个 ItemDecoration 自己计算好绘制的区域。</p>
<p>另外一个方法 getItemOffset() 的唯一调用处：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function">Rect <span class="title">getItemDecorInsetsForChild</span><span class="params">(View child)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">final</span> LayoutParams lp = (LayoutParams) child.getLayoutParams();</span><br><span class="line">    <span class="keyword">if</span> (!lp.mInsetsDirty) &#123;</span><br><span class="line">        <span class="keyword">return</span> lp.mDecorInsets;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (mState.isPreLayout() &amp;&amp; (lp.isItemChanged() || lp.isViewInvalid())) &#123;</span><br><span class="line">        <span class="comment">// changed/invalid items should not be updated until they are rebound.</span></span><br><span class="line">        <span class="keyword">return</span> lp.mDecorInsets;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">final</span> Rect insets = lp.mDecorInsets;</span><br><span class="line">    insets.set(<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>);</span><br><span class="line">    <span class="keyword">final</span> <span class="keyword">int</span> decorCount = mItemDecorations.size();</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; decorCount; i++) &#123;</span><br><span class="line">        mTempRect.set(<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>);</span><br><span class="line">        mItemDecorations.get(i).getItemOffsets(mTempRect, child, <span class="keyword">this</span>, mState);</span><br><span class="line">        insets.left += mTempRect.left;</span><br><span class="line">        insets.top += mTempRect.top;</span><br><span class="line">        insets.right += mTempRect.right;</span><br><span class="line">        insets.bottom += mTempRect.bottom;</span><br><span class="line">    &#125;</span><br><span class="line">    lp.mInsetsDirty = <span class="keyword">false</span>;</span><br><span class="line">    <span class="keyword">return</span> insets;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>这里仅仅是取了每一种 ItemDecoration 类的 getItemOffsets() 传进来的 rect 数据，然后依次叠加，只有一种 ItemDecoration 的时候，rect 其实就是 mDecorInsets 的值。</p>
]]></content>
      <categories>
        <category>android_app</category>
      </categories>
      <tags>
        <tag>列表控件</tag>
      </tags>
  </entry>
  <entry>
    <title>Android控件总结2</title>
    <url>/2018/09/05/Android%E6%8E%A7%E4%BB%B6%E6%80%BB%E7%BB%932/</url>
    <content><![CDATA[<p>再<a href="https://nangonghuang.github.io/2018/08/20/Android%E6%8E%A7%E4%BB%B6%E6%80%BB%E7%BB%93/">上一篇</a>中，分析了整体上的流程，这里来分析下细节性的问题。<a id="more"></a></p>
<ol>
<li>onMeasure()中的 MeasureSpec 是怎么来的？<br> 在之前的流程中，通过requestLayout() 触发 performTravsals(),在 performTravsals() 里面会可能多次调用 <code>performMeasure(...)</code>,而  <code>performMeasure(...)</code> 会调用<code>mView.measure(childWidthMeasureSpec, childHeightMeasureSpec);</code>进入到view和它的子控件的层层调用中，这里的mView在Activity等中就是指DecoreView，在自己创建的window中就是setView()传的view，这里就是最初的源头了。<br> performMeasure中传入的参数来源 :  <figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">getRootMeasureSpec</span><span class="params">(<span class="keyword">int</span> windowSize, <span class="keyword">int</span> rootDimension)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> measureSpec;</span><br><span class="line">    <span class="keyword">switch</span> (rootDimension) &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">case</span> ViewGroup.LayoutParams.MATCH_PARENT:</span><br><span class="line">        <span class="comment">// Window can&#x27;t resize. Force root view to be windowSize.</span></span><br><span class="line">        measureSpec = MeasureSpec.makeMeasureSpec(windowSize, MeasureSpec.EXACTLY);</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">case</span> ViewGroup.LayoutParams.WRAP_CONTENT:</span><br><span class="line">        <span class="comment">// Window can resize. Set max size for root view.</span></span><br><span class="line">        measureSpec = MeasureSpec.makeMeasureSpec(windowSize, MeasureSpec.AT_MOST);</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">default</span>:</span><br><span class="line">        <span class="comment">// Window wants to be an exact size. Force root view to be that size.</span></span><br><span class="line">        measureSpec = MeasureSpec.makeMeasureSpec(rootDimension, MeasureSpec.EXACTLY);</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> measureSpec;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
 这里的 windowSize 是指wms计算后返回的window的大小，而rootDimension则是相应的window的windowManager.Layoutparam,(<strong>未验证</strong>)值是ViewGroup.LayoutParams.MATCH_PARENT(<strong>未验证</strong>)，对于Activity来说，这里得到的最初的参数应该是size = 分辨率大小减去状态栏，导航栏)，mode =  MeasureSpec.EXACTLY。在ViewGroup中为子控件生成measureSpec的默认方法： <figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">getChildMeasureSpec</span><span class="params">(<span class="keyword">int</span> spec, <span class="keyword">int</span> padding, <span class="keyword">int</span> childDimension)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> specMode = MeasureSpec.getMode(spec);</span><br><span class="line">    <span class="keyword">int</span> specSize = MeasureSpec.getSize(spec);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">int</span> size = Math.max(<span class="number">0</span>, specSize - padding);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">int</span> resultSize = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">int</span> resultMode = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">switch</span> (specMode) &#123;</span><br><span class="line">    <span class="comment">// Parent has imposed an exact size on us</span></span><br><span class="line">    <span class="keyword">case</span> MeasureSpec.EXACTLY:</span><br><span class="line">        <span class="keyword">if</span> (childDimension &gt;= <span class="number">0</span>) &#123;</span><br><span class="line">            resultSize = childDimension;</span><br><span class="line">            resultMode = MeasureSpec.EXACTLY;</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (childDimension == LayoutParams.MATCH_PARENT) &#123;</span><br><span class="line">            <span class="comment">// Child wants to be our size. So be it.</span></span><br><span class="line">            resultSize = size;</span><br><span class="line">            resultMode = MeasureSpec.EXACTLY;</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (childDimension == LayoutParams.WRAP_CONTENT) &#123;</span><br><span class="line">            <span class="comment">// Child wants to determine its own size. It can&#x27;t be</span></span><br><span class="line">            <span class="comment">// bigger than us.</span></span><br><span class="line">            resultSize = size;</span><br><span class="line">            resultMode = MeasureSpec.AT_MOST;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Parent has imposed a maximum size on us</span></span><br><span class="line">    <span class="keyword">case</span> MeasureSpec.AT_MOST:</span><br><span class="line">        <span class="keyword">if</span> (childDimension &gt;= <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="comment">// Child wants a specific size... so be it</span></span><br><span class="line">            resultSize = childDimension;</span><br><span class="line">            resultMode = MeasureSpec.EXACTLY;</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (childDimension == LayoutParams.MATCH_PARENT) &#123;</span><br><span class="line">            <span class="comment">// Child wants to be our size, but our size is not fixed.</span></span><br><span class="line">            <span class="comment">// Constrain child to not be bigger than us.</span></span><br><span class="line">            resultSize = size;</span><br><span class="line">            resultMode = MeasureSpec.AT_MOST;</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (childDimension == LayoutParams.WRAP_CONTENT) &#123;</span><br><span class="line">            <span class="comment">// Child wants to determine its own size. It can&#x27;t be</span></span><br><span class="line">            <span class="comment">// bigger than us.</span></span><br><span class="line">            resultSize = size;</span><br><span class="line">            resultMode = MeasureSpec.AT_MOST;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Parent asked to see how big we want to be</span></span><br><span class="line">    <span class="keyword">case</span> MeasureSpec.UNSPECIFIED:</span><br><span class="line">        <span class="keyword">if</span> (childDimension &gt;= <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="comment">// Child wants a specific size... let him have it</span></span><br><span class="line">            resultSize = childDimension;</span><br><span class="line">            resultMode = MeasureSpec.EXACTLY;</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (childDimension == LayoutParams.MATCH_PARENT) &#123;</span><br><span class="line">            <span class="comment">// Child wants to be our size... find out how big it should</span></span><br><span class="line">            <span class="comment">// be</span></span><br><span class="line">            resultSize = View.sUseZeroUnspecifiedMeasureSpec ? <span class="number">0</span> : size;</span><br><span class="line">            resultMode = MeasureSpec.UNSPECIFIED;</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (childDimension == LayoutParams.WRAP_CONTENT) &#123;</span><br><span class="line">            <span class="comment">// Child wants to determine its own size.... find out how</span></span><br><span class="line">            <span class="comment">// big it should be</span></span><br><span class="line">            resultSize = View.sUseZeroUnspecifiedMeasureSpec ? <span class="number">0</span> : size;</span><br><span class="line">            resultMode = MeasureSpec.UNSPECIFIED;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//noinspection ResourceType</span></span><br><span class="line">    <span class="keyword">return</span> MeasureSpec.makeMeasureSpec(resultSize, resultMode);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
 这里返回的值最终会传给子view的 onMeasure()方法，可以看到，生成的值是受到父控件和子控件共同控制的。因此 MeasureSpec 最初是屏幕的分辨率，而后传给子控件的过程中会根据 父控件和子控件 的参数发生变化。</li>
</ol>
]]></content>
      <categories>
        <category>android_framework</category>
      </categories>
  </entry>
  <entry>
    <title>Android控件-RecyclerView3-缓存</title>
    <url>/2018/09/17/Android%E6%8E%A7%E4%BB%B6-RecyclerView3-%E7%BC%93%E5%AD%98/</url>
    <content><![CDATA[<p>RecyclerView的缓存其实更多的是概念性的东西，新增了种类繁多的flag，和listview相比，区分了createViewHolder和bindViewHolder步骤，带来了部分性能上的提升。<a id="more"></a></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// Recycler 用来管理 scrapped 或者 detached item views 并且把它们用于重用。</span></span><br><span class="line"><span class="comment">// scrapped view 是指依然 attach 到 RecyclerView 但是已经被标记为 remove 或者reuse 的view，这类view可以被重新绑定和使用</span></span><br><span class="line"><span class="comment">//通常 Recycler 会被 LayoutManager 用来获取view, 这些view代表adapter中一个特定位置或者ID所对应的的数据。如果将要被重用的//view 被认为是 &quot;dirty&quot; 的，此时会要求adapter重新绑定数据和view，否则这个view可以直接被LayoutManager重用。</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">final</span> <span class="class"><span class="keyword">class</span> <span class="title">Recycler</span> </span>&#123;</span><br><span class="line">    <span class="keyword">final</span> ArrayList&lt;ViewHolder&gt; mAttachedScrap = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">    ArrayList&lt;ViewHolder&gt; mChangedScrap = <span class="keyword">null</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">final</span> ArrayList&lt;ViewHolder&gt; mCachedViews = <span class="keyword">new</span> ArrayList&lt;ViewHolder&gt;();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> List&lt;ViewHolder&gt;</span><br><span class="line">            mUnmodifiableAttachedScrap = Collections.unmodifiableList(mAttachedScrap);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> mRequestedCacheMax = DEFAULT_CACHE_SIZE;</span><br><span class="line">    <span class="keyword">int</span> mViewCacheMax = DEFAULT_CACHE_SIZE;</span><br><span class="line"></span><br><span class="line">    RecycledViewPool mRecyclerPool;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> ViewCacheExtension mViewCacheExtension;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> DEFAULT_CACHE_SIZE = <span class="number">2</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>ViewHolder定义了一些flag状态，这些状态是RecyclerView缓存的核心内容 ：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">         * This ViewHolder has been bound to a position; mPosition, mItemId and mItemViewType</span></span><br><span class="line"><span class="comment">         * are all valid.</span></span><br><span class="line"><span class="comment">         ViewHolder 已经绑定到了一个位置，它的数据，mPosition，mItemId和 mItemViewType 都是有效的</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> FLAG_BOUND = <span class="number">1</span> &lt;&lt; <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * The data this ViewHolder&#x27;s view reflects is stale and needs to be rebound</span></span><br><span class="line"><span class="comment">         * by the adapter. mPosition and mItemId are consistent.</span></span><br><span class="line"><span class="comment">         ViewHolder 的view 对应的数据需要更新和重新绑定，mPosition和mItemId没变</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> FLAG_UPDATE = <span class="number">1</span> &lt;&lt; <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * This ViewHolder&#x27;s data is invalid. The identity implied by mPosition and mItemId</span></span><br><span class="line"><span class="comment">         * are not to be trusted and may no longer match the item view type.</span></span><br><span class="line"><span class="comment">         * This ViewHolder must be fully rebound to different data.</span></span><br><span class="line"><span class="comment">         ViewHolder 的数据完全无效，mPosition，mItemId，mItemViewType 都变了，必须重新完全绑定到一个不同的数据</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> FLAG_INVALID = <span class="number">1</span> &lt;&lt; <span class="number">2</span>;</span><br><span class="line"></span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * This ViewHolder points at data that represents an item previously removed from the</span></span><br><span class="line"><span class="comment">         * data set. Its view may still be used for things like outgoing animations.</span></span><br><span class="line"><span class="comment">         ViewHolder 的view 对应的数据被移除了，这个view可能仍然会被用在动画中</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> FLAG_REMOVED = <span class="number">1</span> &lt;&lt; <span class="number">3</span>;</span><br><span class="line"></span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * This ViewHolder should not be recycled. This flag is set via setIsRecyclable()</span></span><br><span class="line"><span class="comment">         * and is intended to keep views around during animations.</span></span><br><span class="line"><span class="comment">         ViewHolder 不应该被回收，用于在动画期间使用</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> FLAG_NOT_RECYCLABLE = <span class="number">1</span> &lt;&lt; <span class="number">4</span>;</span><br><span class="line"></span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * This ViewHolder is returned from scrap which means we are expecting an addView call</span></span><br><span class="line"><span class="comment">         * for this itemView. When returned from scrap, ViewHolder stays in the scrap list until</span></span><br><span class="line"><span class="comment">         * the end of the layout pass and then recycled by RecyclerView if it is not added back to</span></span><br><span class="line"><span class="comment">         * the RecyclerView.</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> FLAG_RETURNED_FROM_SCRAP = <span class="number">1</span> &lt;&lt; <span class="number">5</span>;</span><br><span class="line"></span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * This ViewHolder is fully managed by the LayoutManager. We do not scrap, recycle or remove</span></span><br><span class="line"><span class="comment">         * it unless LayoutManager is replaced.</span></span><br><span class="line"><span class="comment">         * It is still fully visible to the LayoutManager.</span></span><br><span class="line"><span class="comment">         ViewHolder 完全被 LayoutManager 控制，Recycler 不处理它</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> FLAG_IGNORE = <span class="number">1</span> &lt;&lt; <span class="number">7</span>;</span><br><span class="line"></span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * When the View is detached form the parent, we set this flag so that we can take correct</span></span><br><span class="line"><span class="comment">         * action when we need to remove it or add it back.</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> FLAG_TMP_DETACHED = <span class="number">1</span> &lt;&lt; <span class="number">8</span>;</span><br><span class="line"></span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * Set when we can no longer determine the adapter position of this ViewHolder until it is</span></span><br><span class="line"><span class="comment">         * rebound to a new position. It is different than FLAG_INVALID because FLAG_INVALID is</span></span><br><span class="line"><span class="comment">         * set even when the type does not match. Also, FLAG_ADAPTER_POSITION_UNKNOWN is set as soon</span></span><br><span class="line"><span class="comment">         * as adapter notification arrives vs FLAG_INVALID is set lazily before layout is</span></span><br><span class="line"><span class="comment">         * re-calculated.</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> FLAG_ADAPTER_POSITION_UNKNOWN = <span class="number">1</span> &lt;&lt; <span class="number">9</span>;</span><br><span class="line"></span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * Set when a addChangePayload(null) is called</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> FLAG_ADAPTER_FULLUPDATE = <span class="number">1</span> &lt;&lt; <span class="number">10</span>;</span><br><span class="line"></span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * Used by ItemAnimator when a ViewHolder&#x27;s position changes</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> FLAG_MOVED = <span class="number">1</span> &lt;&lt; <span class="number">11</span>;</span><br><span class="line"></span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * Used by ItemAnimator when a ViewHolder appears in pre-layout</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> FLAG_APPEARED_IN_PRE_LAYOUT = <span class="number">1</span> &lt;&lt; <span class="number">12</span>;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>虽然缓存机制是RecyclerView提供的，但是它还需要LayoutManager来配合调用相应的方法，在 LinearLayoutManager的 onlayoutChildren 方法里面 调用了 RecyclerView 的 detachAndScrapAttachedViews() :</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">detachAndScrapAttachedViews</span><span class="params">(Recycler recycler)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">final</span> <span class="keyword">int</span> childCount = getChildCount();</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = childCount - <span class="number">1</span>; i &gt;= <span class="number">0</span>; i--) &#123;</span><br><span class="line">        <span class="keyword">final</span> View v = getChildAt(i);</span><br><span class="line">        scrapOrRecycleView(recycler, i, v);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">scrapOrRecycleView</span><span class="params">(Recycler recycler, <span class="keyword">int</span> index, View view)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">final</span> ViewHolder viewHolder = getChildViewHolderInt(view);</span><br><span class="line">    <span class="keyword">if</span> (viewHolder.shouldIgnore()) &#123;</span><br><span class="line">        <span class="keyword">if</span> (DEBUG) &#123;</span><br><span class="line">            Log.d(TAG, <span class="string">&quot;ignoring view &quot;</span> + viewHolder);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (viewHolder.isInvalid() &amp;&amp; !viewHolder.isRemoved()</span><br><span class="line">            &amp;&amp; !mRecyclerView.mAdapter.hasStableIds()) &#123;</span><br><span class="line">        removeViewAt(index);</span><br><span class="line">        recycler.recycleViewHolderInternal(viewHolder);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        detachViewAt(index);</span><br><span class="line">        recycler.scrapView(view);</span><br><span class="line">        mRecyclerView.mViewInfoStore.onViewDetached(viewHolder);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"> <span class="function"><span class="keyword">void</span> <span class="title">scrapView</span><span class="params">(View view)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">final</span> ViewHolder holder = getChildViewHolderInt(view);</span><br><span class="line">    <span class="keyword">if</span> (holder.hasAnyOfTheFlags(ViewHolder.FLAG_REMOVED | ViewHolder.FLAG_INVALID)</span><br><span class="line">            || !holder.isUpdated() || canReuseUpdatedViewHolder(holder)) &#123;</span><br><span class="line">        <span class="keyword">if</span> (holder.isInvalid() &amp;&amp; !holder.isRemoved() &amp;&amp; !mAdapter.hasStableIds()) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> IllegalArgumentException(<span class="string">&quot;Called scrap view with an invalid view.&quot;</span></span><br><span class="line">                    + <span class="string">&quot; Invalid views cannot be reused from scrap, they should rebound from&quot;</span></span><br><span class="line">                    + <span class="string">&quot; recycler pool.&quot;</span> + exceptionLabel());</span><br><span class="line">        &#125;</span><br><span class="line">        holder.setScrapContainer(<span class="keyword">this</span>, <span class="keyword">false</span>);</span><br><span class="line">        mAttachedScrap.add(holder);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (mChangedScrap == <span class="keyword">null</span>) &#123;</span><br><span class="line">            mChangedScrap = <span class="keyword">new</span> ArrayList&lt;ViewHolder&gt;();</span><br><span class="line">        &#125;</span><br><span class="line">        holder.setScrapContainer(<span class="keyword">this</span>, <span class="keyword">true</span>);</span><br><span class="line">        mChangedScrap.add(holder);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>detachAndScrapAttachedViews会对 RecyclerView所有的 <strong>可见view</strong> 进行scrap或者 recycle 操作，同时满足三个条件的viewHolder会被recycle，否则会被scrap:</p>
<ol>
<li>viewHolder被标记为无效了，一个典型的场景就是adapter调用了notifydatasetChanged()方法，调用markKnownViewsInvalid()对所有的holder添加 invalidate 和 update标记。</li>
<li>viewHolder对应的item 没有被移除出adapter</li>
<li>Adapter没有指定hasStableIds，默认没有指定</li>
</ol>
<p>对于recycle的viewHolder,如果能够添加到 mCachedViews，则添加进去，否则添加到 RecycledViewPool 里面去。mCachedViews有一个默认最大值是2，如果超过了，会把位置0的数据放到 RecycledViewPool 里面去</p>
<p>对于被scrap的viewHolder又做了两种区分，被标记为 FLAG_REMOVED|FLAG_INVALID 或者 没有 FLAG_UPDATE 标记 或者 canReuseUpdatedViewHolder()的holder会被添加到 mAttachedScrap ，否则添加到 mChangedScrap 。这里完全没看出来这两种有什么区别，在使用上，获取viewHolder缓存的时候， prelayout 阶段会先从 mChangedScrap 中去查找， 其他阶段会跳过 mChangedScrap 直接从 mAttachedScrap 中查找。</p>
<p>在LinearLayoutManager的onlayoutChildren方法中，添加view的时候会尝试去获取viewHolder,最终会调用到Recycler的获取缓存的方法中：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//LinearLayoutManager::layoutChunk</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">layoutChunk</span><span class="params">(RecyclerView.Recycler recycler, RecyclerView.State state,</span></span></span><br><span class="line"><span class="function"><span class="params">        LayoutState layoutState, LayoutChunkResult result)</span> </span>&#123;</span><br><span class="line">    View view = layoutState.next(recycler);</span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//Recycler::tryGetViewHolderForPositionByDeadline</span></span><br><span class="line"><span class="function">ViewHolder <span class="title">tryGetViewHolderForPositionByDeadline</span><span class="params">(<span class="keyword">int</span> position,</span></span></span><br><span class="line"><span class="function"><span class="params">                <span class="keyword">boolean</span> dryRun, <span class="keyword">long</span> deadlineNs)</span> </span>&#123;</span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>在 tryGetViewHolderForPositionByDeadline 中，就是尝试依次从各种缓存里面取出viewHolder的过程，如果是从 RecyclerPool 或者 createViewHolder 中取得的VH,都是未绑定的状态，此时一定会执行bind操作，对于其他的来源(scrap,hiddenview,cached)，则会根据条件筛选来决定是不是要执行bind操作。这里就是与ListView区别的地方了，listView在getView方法中会全部重新绑定一遍数据，这里是如果VH带有update标记或者invalidate标记才重新bind,否则这个VH包含的view可以直接使用。</p>
<p>对于RecyclerView其实还有很多的东西，比如position的计算过程，滑动中的缓存过程，嵌套滑动的处理，这些有空再看</p>
]]></content>
      <categories>
        <category>android_app</category>
      </categories>
      <tags>
        <tag>列表控件</tag>
      </tags>
  </entry>
  <entry>
    <title>Java内存模型</title>
    <url>/2021/01/24/Java%E5%86%85%E5%AD%98%E6%A8%A1%E5%9E%8B/</url>
    <content><![CDATA[<h1 id="Java-内存模型"><a href="#Java-内存模型" class="headerlink" title="Java 内存模型"></a>Java 内存模型</h1><h3 id="1-Java内存模型是为了解决什么问题"><a href="#1-Java内存模型是为了解决什么问题" class="headerlink" title="1. Java内存模型是为了解决什么问题"></a>1. Java内存模型是为了解决什么问题</h3><ul>
<li><strong>缓存一致性问题</strong></li>
</ul>
<p>在现代计算机中，并发的处理任务是一个很常见的场景，但是并发的处理任务，就涉及到处理器和存储设备之间的数据交换，由于处理器运算速度远远的大于存储设备，所以不得不设计了多层次的缓冲，比如磁盘，内存，高速缓存。在程序运行的过程中，处理器需要把数据从内存读到高速缓存中，然后进行运算，之后需要把运算结果再从缓存写到内存中。<a id="more"></a></p>
<p><img src="/2021/01/24/Java%E5%86%85%E5%AD%98%E6%A8%A1%E5%9E%8B/%E5%A4%84%E7%90%86%E5%99%A8%E9%AB%98%E9%80%9F%E7%BC%93%E5%AD%98%E5%92%8C%E5%86%85%E5%AD%98.jpg" alt="处理器高速缓存和内存"></p>
<p>而多处理器系统中，每个处理器都有自己的高速缓存，它们又共用一个主存，假如多个处理器的运算任务涉及到同一块主存地址，那么到底哪一个高速缓存的值才是我们想要的呢？这种情况下就可能会带来内存一致性的问题。为了解决这个问题，Java虚拟机规范中定义了一种内存模型，试图屏蔽掉各种硬件和操作系统的内存访问差异，以达到跨平台一致性的效果。</p>
<ul>
<li><strong>指令重排序问题</strong>：</li>
</ul>
<p>为了使得处理器内部的运算单元能尽量被充分利用，处理器可能会对输入代码进行乱序执行（Out-Of-Order Execution）优化，处理器会在计算之后将乱序执行的结果重组，保证该结果与顺序执行的结果是一致的，但并不保证程序中各个语句计算的先后顺序与输入代码中的顺序一致。因此，如果存在一个计算任务依赖另一个计算任务的中间结果，那么其顺序性并不能靠代码的先后顺序来保证。</p>
<h3 id="2-Java内存模型"><a href="#2-Java内存模型" class="headerlink" title="2.Java内存模型"></a>2.Java内存模型</h3><p>Java内存模型的主要目标是定义程序中各个变量的访问规则，规定了所有的变量都存储在主内存中，每个线程还有自己的工作内存，工作内存中保存了该线程用到的变量的主内存副本拷贝，线程不能直接读写主内存中的变量，不同的线程之间也无法访问对方工作内存中的变量，线程之间的变量值传递需要通过主存来完成，他们的关系如下：</p>
<p><img src="/2021/01/24/Java%E5%86%85%E5%AD%98%E6%A8%A1%E5%9E%8B/Java%E7%BA%BF%E7%A8%8B%E5%92%8C%E5%86%85%E5%AD%98.jpg" alt="Java线程和内存"></p>
<p>注意这里和前面的图的区别，前面的图是具体的硬件，这里是对前面的图的一种抽象</p>
<p>关于主内存与工作内存之间的具体交互协议，即一个变量如何从主内存拷贝到工作内存、如何从工作内存同步到主内存之间的实现细节，Java内存模型定义了以下八种操作来完成：</p>
<ul>
<li><strong>lock（锁定）</strong></li>
<li><strong>unlock（解锁）</strong></li>
<li><strong>read（读取）</strong></li>
<li><strong>load（载入）</strong></li>
<li><strong>use（使用）</strong></li>
<li><strong>assign（赋值）</strong></li>
<li><strong>store（存储）</strong></li>
<li><strong>write（写入）</strong></li>
</ul>
<h3 id="3-原子性-可见性和有序性"><a href="#3-原子性-可见性和有序性" class="headerlink" title="3. 原子性 可见性和有序性"></a>3. 原子性 可见性和有序性</h3><p>Java 内存模型主要围绕着在并发过程中如何处理原子性可见性和有序性这3个特征来建立的：</p>
<ul>
<li>原子性</li>
</ul>
<p>内存模型规定的八种操作都可以保证原子性。如果应用需要更大范围的原子性，可以使用lock和unlock，体现在代码上就是 synchronized关键字</p>
<ul>
<li>可见性</li>
</ul>
<p>可见性是指当一个线程修改了共享变量的值，其他线程能够立即得知这个修改。Java内存模型是通过在变量修改后将新值同步回主内存，在变量读取前从主内存刷新变量值这种依赖主内存作为传递媒介的方式来实现可见性的，无论是普通变量还是volatile变量都是如此，<strong>普通变量与volatile变量的区别是</strong>：volatile的特殊规则保证了新值能立即同步到主内存，以及每个线程在每次使用volatile变量前都立即从主内存刷新。因此我们可以说volatile保证了多线程操作时变量的可见性，而普通变量则不能保证这一点。</p>
<ul>
<li>有序性</li>
</ul>
<p>Java程序中天然的有序性可以总结为一句话：如果在本地线程内观察，所有操作都是有序的；如果在一个线程中观察另一个线程，所有操作都是无序的（“指令重排序”现象和“线程工作内存与主内存同步延迟”现象）。</p>
<p>Java语言提供了volatile和synchronized两个关键字来保证线程之间操作的有序性：</p>
<ul>
<li>volatile关键字本身就包含了禁止指令重排序的语义</li>
<li>synchronized则是由“一个变量在同一个时刻只允许一条线程对其进行lock操作”这条规则获得的，这个规则决定了持有同一个锁的两个同步块只能串行地进入</li>
</ul>
<h3 id="4-对于volatile变量的特殊规则"><a href="#4-对于volatile变量的特殊规则" class="headerlink" title="4. 对于volatile变量的特殊规则"></a>4. 对于volatile变量的特殊规则</h3><p>volatile变量的两个语义：</p>
<ul>
<li>保证此变量对所有线程的可见性</li>
</ul>
<p>这里的可见性是指当一条线程修改了这个变量的值，新值能立即同步到主内存，以及每个线程在每次使用volatile变量前都立即从主内存刷新。但是可见性并不能完全保证volatile变量就是完全同步的。比如我们在A，B两个个线程中分别对一个 volatile变量做++的操作，假如这个变量的值是1，AB同时读到都是1，A线程做了++操作变成了2写入到主内存中，B可能之前已经从主存读了这个1的值也在++，然后得到2，最后结果是执行了两次++操作，但是得到了2</p>
<ul>
<li>禁止指令重排序优化</li>
</ul>
<p>主要是通过 volatile变量在赋值后，增加一句内存屏障的指令来实现的，在做重排序的时候，不能把后面的指令重排序到内存屏障之前的位置。</p>
]]></content>
      <categories>
        <category>Java</category>
      </categories>
      <tags>
        <tag>深入理解Java虚拟机</tag>
        <tag>面试</tag>
      </tags>
  </entry>
  <entry>
    <title>Android消息队列和链表</title>
    <url>/2017/11/19/Android%E6%B6%88%E6%81%AF%E9%98%9F%E5%88%97%E5%92%8C%E9%93%BE%E8%A1%A8/</url>
    <content><![CDATA[<p>链表是很常用的数据结构，JDK已经提供了LinkedList，也就是双向链表。今天写了个单链表，主要是想写一下单链表的逆置：</p>
<a id="more"></a>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyList</span>&lt;<span class="title">E</span>&gt; <span class="keyword">implements</span> <span class="title">MyListInterface</span>&lt;<span class="title">E</span>&gt; </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> Node&lt;E&gt; first;</span><br><span class="line">    <span class="keyword">private</span> Node&lt;E&gt; last;  <span class="comment">//用于添加到尾节点</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> size;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">add</span><span class="params">(E e)</span> </span>&#123;</span><br><span class="line">        linkInLast(<span class="keyword">new</span> Node&lt;&gt;(e, <span class="keyword">null</span>));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span> index, E e)</span> </span>&#123;</span><br><span class="line">        Node temp = first;</span><br><span class="line">        Node prev = <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; index; i++) &#123;</span><br><span class="line">            prev = temp;</span><br><span class="line">            temp = temp.next;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        Node&lt;E&gt; node = <span class="keyword">new</span> Node&lt;&gt;(e, <span class="keyword">null</span>);</span><br><span class="line">        link(prev, node);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">link</span><span class="params">(Node&lt;E&gt; prev, Node&lt;E&gt; current)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (prev == <span class="keyword">null</span>) &#123;</span><br><span class="line">            linkInFirst(current);</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (current.next == <span class="keyword">null</span>) &#123;</span><br><span class="line">            linkInLast(current);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            current.next = prev.next;</span><br><span class="line">            prev.next = current;</span><br><span class="line">            size++;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">linkInFirst</span><span class="params">(Node&lt;E&gt; node)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (first == <span class="keyword">null</span>) &#123;</span><br><span class="line">            first = node;</span><br><span class="line">            last = node;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            node.next = first;</span><br><span class="line">            first = node;</span><br><span class="line">        &#125;</span><br><span class="line">        size++;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">linkInLast</span><span class="params">(Node&lt;E&gt; node)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (last == <span class="keyword">null</span>) &#123;</span><br><span class="line">            first = node;</span><br><span class="line">            last = node;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            last.next = node;</span><br><span class="line">            last = node;</span><br><span class="line">        &#125;</span><br><span class="line">        size++;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">remove</span><span class="params">(E e)</span> </span>&#123;</span><br><span class="line">        Node temp = first;</span><br><span class="line">        Node prev = <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">while</span> ((temp != <span class="keyword">null</span>)) &#123;</span><br><span class="line">            <span class="keyword">if</span> (temp.data.equals(e)) &#123;</span><br><span class="line">                unlink(prev, temp);</span><br><span class="line">            &#125;</span><br><span class="line">            prev = temp;</span><br><span class="line">            temp = temp.next;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">unlink</span><span class="params">(Node&lt;E&gt; prev, Node&lt;E&gt; current)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (prev == <span class="keyword">null</span>) &#123;  <span class="comment">//说明要删掉的节点是头结点</span></span><br><span class="line">            first = current.next;</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (current.next == <span class="keyword">null</span>) &#123;  <span class="comment">//说明要删掉的节点是尾节点</span></span><br><span class="line">            prev.next = <span class="keyword">null</span>;</span><br><span class="line">            last = prev;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            prev.next = current.next;</span><br><span class="line">        &#125;</span><br><span class="line">        current.data = <span class="keyword">null</span>;</span><br><span class="line">        size--;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (size == <span class="number">0</span>) &#123;</span><br><span class="line">            first = last = <span class="keyword">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">contains</span><span class="params">(E e)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> (indexOf(e) != -<span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">indexOf</span><span class="params">(E e)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> index = <span class="number">0</span>;</span><br><span class="line">        Node temp = first;</span><br><span class="line">        <span class="keyword">while</span> ((temp != <span class="keyword">null</span>)) &#123;</span><br><span class="line">            <span class="keyword">if</span> (temp.data.equals(e)) &#123;</span><br><span class="line">                <span class="keyword">return</span> index;</span><br><span class="line">            &#125;</span><br><span class="line">            temp = temp.next;</span><br><span class="line">            index++;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">size</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> size;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">print</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        Node temp = first;</span><br><span class="line">        <span class="keyword">if</span> (first != <span class="keyword">null</span>) &#123;</span><br><span class="line">            System.out.print(<span class="string">&quot;first.data : &quot;</span> + first.data);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            System.out.print(<span class="string">&quot;first : null &quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (last != <span class="keyword">null</span>) &#123;</span><br><span class="line">            System.out.print(<span class="string">&quot;,last.data : &quot;</span> + last.data);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            System.out.print(<span class="string">&quot;,last : null &quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.print(<span class="string">&quot;, size = &quot;</span> + size());</span><br><span class="line">        System.out.print(<span class="string">&quot;, list: &quot;</span>);</span><br><span class="line">        <span class="keyword">while</span> ((temp != <span class="keyword">null</span>)) &#123;</span><br><span class="line">            System.out.print(temp.data);</span><br><span class="line">            System.out.print(<span class="string">&quot; &quot;</span>);</span><br><span class="line">            temp = temp.next;</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">reverse</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (size == <span class="number">0</span> || size == <span class="number">1</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (size == <span class="number">2</span>) &#123;</span><br><span class="line">            last.next = first;</span><br><span class="line">            first.next = <span class="keyword">null</span>;</span><br><span class="line">            first = last;</span><br><span class="line">            last = first.next;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            last = first;</span><br><span class="line">            Node current = first;</span><br><span class="line">            Node prev = <span class="keyword">null</span>;</span><br><span class="line">            Node next = current.next;</span><br><span class="line">            <span class="keyword">while</span> (next != <span class="keyword">null</span>) &#123;</span><br><span class="line">              <span class="comment">//实际的操作就这一步，然后就是不停的循环赋值了</span></span><br><span class="line">                current.next = prev;</span><br><span class="line">                prev = current;</span><br><span class="line">                current = next;</span><br><span class="line">                next = next.next;</span><br><span class="line">            &#125;</span><br><span class="line">            current.next = prev;</span><br><span class="line">            first = current;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">Node</span>&lt;<span class="title">E</span>&gt; </span>&#123;</span><br><span class="line">        E data;</span><br><span class="line">        Node next;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="title">Node</span><span class="params">(E e, Node next)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">this</span>.data = e;</span><br><span class="line">            <span class="keyword">this</span>.next = next;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>不过在网上看了下，好像别人实现的都是一个Node类不停next就完了，我这里还写了个List类感觉有点格格不入。。Android里面在MessageQueue和Message类里面都有用到链表:</p>
<p>MessageQueue::mMessages</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">final</span> <span class="class"><span class="keyword">class</span> <span class="title">MessageQueue</span> </span>&#123;</span><br><span class="line">  	...</span><br><span class="line">    <span class="comment">//链表的头节点</span></span><br><span class="line">    Message mMessages;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> ArrayList&lt;IdleHandler&gt; mIdleHandlers = <span class="keyword">new</span> ArrayList&lt;IdleHandler&gt;();</span><br><span class="line"> 	...</span><br><span class="line">    <span class="function">Message <span class="title">next</span><span class="params">()</span> </span>&#123;</span><br><span class="line">     		...</span><br><span class="line">            <span class="keyword">synchronized</span> (<span class="keyword">this</span>) &#123;</span><br><span class="line">			   ...</span><br><span class="line">                Message msg = mMessages;</span><br><span class="line">                ...</span><br><span class="line">                <span class="keyword">if</span> (msg != <span class="keyword">null</span>) &#123;</span><br><span class="line">                  		...</span><br><span class="line">                          <span class="comment">//链表取节点操作</span></span><br><span class="line">                        mMessages = msg.next;</span><br><span class="line">                        msg.next = <span class="keyword">null</span>;</span><br><span class="line">                        <span class="keyword">if</span> (DEBUG) Log.v(TAG, <span class="string">&quot;Returning message: &quot;</span> + msg);</span><br><span class="line">                        msg.markInUse();</span><br><span class="line">                        <span class="keyword">return</span> msg;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125; </span><br><span class="line">			   ...</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    ...</span><br><span class="line">    <span class="function"><span class="keyword">boolean</span> <span class="title">enqueueMessage</span><span class="params">(Message msg, <span class="keyword">long</span> when)</span> </span>&#123;</span><br><span class="line">        ...</span><br><span class="line">        <span class="keyword">synchronized</span> (<span class="keyword">this</span>) &#123;</span><br><span class="line">           ...</span><br><span class="line">            msg.markInUse();</span><br><span class="line">            msg.when = when;</span><br><span class="line">            Message p = mMessages;</span><br><span class="line">            ...</span><br><span class="line">            <span class="keyword">if</span> (p == <span class="keyword">null</span> || when == <span class="number">0</span> || when &lt; p.when) &#123;</span><br><span class="line">                <span class="comment">// New head, wake up the event queue if blocked.</span></span><br><span class="line">              <span class="comment">//如果mMessages为空，那么新发送的这个消息就成为头结点</span></span><br><span class="line">                msg.next = p;</span><br><span class="line">                mMessages = msg;</span><br><span class="line">                needWake = mBlocked;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="keyword">for</span> (;;) &#123;</span><br><span class="line">                    prev = p;</span><br><span class="line">                    p = p.next;</span><br><span class="line">                    <span class="keyword">if</span> (p == <span class="keyword">null</span> || when &lt; p.when) &#123;</span><br><span class="line">                        <span class="keyword">break</span>;</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="keyword">if</span> (needWake &amp;&amp; p.isAsynchronous()) &#123;</span><br><span class="line">                        needWake = <span class="keyword">false</span>;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">              <span class="comment">//否则根据时间找个合适的位置插入到链表中</span></span><br><span class="line">                msg.next = p; <span class="comment">// invariant: p == prev.next</span></span><br><span class="line">                prev.next = msg;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="comment">// We can assume mPtr != 0 because mQuitting is false.</span></span><br><span class="line">            <span class="keyword">if</span> (needWake) &#123;</span><br><span class="line">                nativeWake(mPtr);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>


<p>Message类里面也有类似的成员变量 Message::sPool</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">final</span> <span class="class"><span class="keyword">class</span> <span class="title">Message</span> <span class="keyword">implements</span> <span class="title">Parcelable</span> </span>&#123;</span><br><span class="line">   ...</span><br><span class="line">    <span class="comment">// sometimes we store linked lists of these things</span></span><br><span class="line">     <span class="comment">//链表节点定义</span></span><br><span class="line">    <span class="comment">/*package*/</span> Message next;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> Object sPoolSync = <span class="keyword">new</span> Object();</span><br><span class="line">    <span class="comment">//这是一个静态成员变量，用于指示消息池里面的消息链表的头指针</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> Message sPool;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">int</span> sPoolSize = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> MAX_POOL_SIZE = <span class="number">50</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">boolean</span> gCheckRecycle = <span class="keyword">true</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Return a new Message instance from the global pool. Allows us to</span></span><br><span class="line"><span class="comment">     * avoid allocating new objects in many cases.</span></span><br><span class="line"><span class="comment">       取出消息时，取出sPool所指向的那个消息</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Message <span class="title">obtain</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">synchronized</span> (sPoolSync) &#123;</span><br><span class="line">            <span class="keyword">if</span> (sPool != <span class="keyword">null</span>) &#123;</span><br><span class="line">                Message m = sPool;</span><br><span class="line">                sPool = m.next;</span><br><span class="line">                m.next = <span class="keyword">null</span>;</span><br><span class="line">                m.flags = <span class="number">0</span>; <span class="comment">// clear in-use flag</span></span><br><span class="line">                sPoolSize--;</span><br><span class="line">                <span class="keyword">return</span> m;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> Message();</span><br><span class="line">    &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="comment">//由MessageQueue调用，回收消息加入到消息池</span></span><br><span class="line">   <span class="function"><span class="keyword">void</span> <span class="title">recycleUnchecked</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">// Mark the message as in use while it remains in the recycled object pool.</span></span><br><span class="line">        <span class="comment">// Clear out all other details.</span></span><br><span class="line">        flags = FLAG_IN_USE;</span><br><span class="line">        what = <span class="number">0</span>;</span><br><span class="line">        arg1 = <span class="number">0</span>;</span><br><span class="line">        arg2 = <span class="number">0</span>;</span><br><span class="line">        obj = <span class="keyword">null</span>;</span><br><span class="line">        replyTo = <span class="keyword">null</span>;</span><br><span class="line">        sendingUid = -<span class="number">1</span>;</span><br><span class="line">        when = <span class="number">0</span>;</span><br><span class="line">        target = <span class="keyword">null</span>;</span><br><span class="line">        callback = <span class="keyword">null</span>;</span><br><span class="line">        data = <span class="keyword">null</span>;</span><br><span class="line">		<span class="comment">//sPool是一个头节点</span></span><br><span class="line">        <span class="comment">//回收时，设置自己的next节点为sPool所指向的节点，然后把自己成为新的sPool</span></span><br><span class="line">        <span class="keyword">synchronized</span> (sPoolSync) &#123;</span><br><span class="line">            <span class="keyword">if</span> (sPoolSize &lt; MAX_POOL_SIZE) &#123;</span><br><span class="line">                next = sPool;</span><br><span class="line">                sPool = <span class="keyword">this</span>;</span><br><span class="line">                sPoolSize++;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>
<p>我到底想说啥……</p>
]]></content>
      <categories>
        <category>数据结构和算法</category>
      </categories>
  </entry>
  <entry>
    <title>Java虚拟机-GC相关</title>
    <url>/2017/11/18/Java%E8%99%9A%E6%8B%9F%E6%9C%BA-GC%E7%9B%B8%E5%85%B3/</url>
    <content><![CDATA[<p>来源：《深入理解Java虚拟机(第2版)》</p>
<p>通常来说，人们会把Java和垃圾收集器(GC)绑定在一起，事实上GC的历史比Java要更久远。GC一般需要完成三件事：</p>
<ul>
<li>哪些内存需要回收</li>
<li>什么时候进行回收</li>
<li>怎么回收</li>
</ul>
<p>对于Java来说，</p>
<ul>
<li><p>程序计数器，虚拟机栈，本地方法栈3个区域，因为它们都是线程私有的，线程结束了它们也就回收了，而栈的栈帧随着方法的调用有序的执行入栈和出栈的操作，因此方法结束时，这部分也回收了；</p>
</li>
<li><p>Java堆和方法区，这部分的内存分配和回收都是动态的，不确定的，因此也是GC所关注的区域。</p>
<a id="more"></a>

</li>
</ul>
<h2 id="对象存活判定"><a href="#对象存活判定" class="headerlink" title="对象存活判定"></a>对象存活判定</h2><h3 id="引用计数法"><a href="#引用计数法" class="headerlink" title="引用计数法"></a>引用计数法</h3><p>简单的引用计数法是这样的：给对象添加一个引用计数器，引用时+1,失效时-1，计数器为0时则对象可以被回收。在实际应用中可能会更复杂一些，比如可以把引用分为多种类型（比如弱引用），根据不同类型引用的数量来决定不同的内存回收策略。目前来说，主流的Java虚拟机都没有采用引用计数法来管理内存，其中最主要的原因是解决对象间相互循环引用的问题会很复杂。</p>
<h3 id="可达性分析"><a href="#可达性分析" class="headerlink" title="可达性分析"></a>可达性分析</h3><p>基本思想是：通过GC Roots对象作为起点，从这些节点开始向下搜索，搜索的路径称为引用链。当一个对象到GC Roots没有任何引用链连接时，称这个对象不可达。Java中做为GCRoots的对象：</p>
<p>   a.虚拟机栈(栈桢中的本地变量表)中的引用的对象<br>   b.方法区中的类静态属性引用的对象<br>   c.方法区中的常量引用的对象<br>   d.本地方法栈中JNI的引用的对象 </p>
<p><img src="/2017/11/18/Java%E8%99%9A%E6%8B%9F%E6%9C%BA-GC%E7%9B%B8%E5%85%B3/20160514180110374.png" alt="20160514180110374"></p>
<p><code>Object 1234可达，567不可达</code></p>
<h3 id="引用"><a href="#引用" class="headerlink" title="引用"></a>引用</h3><p>无论是通过引用计数算法判断对象的引用数量，还是通过根搜索算法判断对象的引用链是否可达，判定对象是否存活都与“引用”有关。 JDK 1.2之后，Java对引用的概念进行了扩充，将引用分为强引用（Strong Reference）、软引用（Soft Reference）、弱引用（Weak Reference）、虚引用（Phantom Reference）四种，这四种引用强度依次逐渐减弱。  </p>
<ul>
<li>强引用就是指在程序代码之中普遍存在的，类似“Object obj = new Object()”这类的引用，只要强引用还存在，垃圾收集器永远不会回收掉被引用的对象。</li>
<li>软引用用来描述一些还有用，但并非必需的对象。对于软引用关联着的对象，在系统将要发生内存溢出异常之前，将会把这些对象列进回收范围之中并进行第二次回收。如果这次回收还是没有足够的内存，才会抛出内存溢出异常。在JDK 1.2之后，提供了SoftReference类来实现软引用。</li>
<li>弱引用也是用来描述非必需对象的，但是它的强度比软引用更弱一些，被弱引用关联的对象只能生存到下一次垃圾收集发生之前。当垃圾收集器工作时，无论当前内存是否足够，都会回收掉只被弱引用关联的对象。在JDK 1.2之后，提供了WeakReference类来实现弱引用。</li>
<li>虚引用也称为幽灵引用或者幻影引用，它是最弱的一种引用关系。一个对象是否有虚引用的存在，完全不会对其生存时间构成影响，也无法通过虚引用来取得一个对象实例。为一个对象设置虚引用关联的唯一目的就是希望能在这个对象被收集器回收时收到一个系统通知。在JDK 1.2之后，提供了PhantomReference类来实现虚引用。</li>
</ul>
<h2 id="GC算法"><a href="#GC算法" class="headerlink" title="GC算法"></a>GC算法</h2><ul>
<li>标记-清除算法</li>
</ul>
<p>算法分为“标记”和“清除”两个阶段：首先标记出所有需要回收的对象，在标记完成后统一回收掉所有被标记的对象。它的主要缺点有两个：一个是效率问题，标记和清除过程的效率都不高；另外一个是空间问题，标记清除之后会产生大量不连续的内存碎片，空间碎片太多可能会导致，当程序在以后的运行过程中需要分配较大对象时无法找到足够的连续内存而不得不提前触发另一次垃圾收集动作。</p>
<ul>
<li>复制算法</li>
</ul>
<p>将可用内存按容量划分为大小相等的两块，每次只使用其中的一块。当这一块的内存用完了，就将还存活着的对象复制到另外一块上面，然后再把已使用过的内存空间一次清理掉。这样使得每次都是对其中的一块进行内存回收，内存分配时也就不用考虑内存碎片等复杂情况，只要移动堆顶指针，按顺序分配内存即可，实现简单，运行高效。只是这种算法的代价是将内存缩小为原来的一半，未免太高了一点。</p>
<p>现代商业虚拟机多半采用这种收集算法来回收新生代。因为新生代中的对象大部分生存周期都很短，因此不需要按照1:1的比例来划分，而是将内存分为一块较大的Eden区和两块较小的Survivor区，每次使用Eden和一块Survivor区，回收的时候，将它们中还存活的对象复制到另外一块Survivor区上，然后清理掉Eden和刚才用过的Survivor区。HotSpot虚拟机默认的Eden和Survivor大小的比例是8：1，也就是说，新生代可用空间会90%，只有10%会用来保存。</p>
<ul>
<li>标记-整理算法</li>
</ul>
<p>标记过程仍然与“标记-清除”算法一样，但后续步骤不是直接对可回收对象进行清理，而是让所有存活的对象都向一端移动，然后直接清理掉端边界以外的内存。</p>
<ul>
<li>分代收集算法</li>
</ul>
<p>当前商业虚拟机的垃圾收集都采用“分代收集”（Generational Collection）算法，根据对象的存活周期的不同将内存划分为几块。一般是把Java堆分为新生代和老年代，这样就可以根据各个年代的特点采用最适当的收集算法。在新生代中，每次垃圾收集时都发现有大批对象死去，只有少量存活，那就选用复制算法，只需要付出少量存活对象的复制成本就可以完成收集。而老年代中因为对象存活率高、没有额外空间对它进行分配担保，就必须使用“标记-清理”或“标记-整理”算法来进行回收</p>
<h2 id="HotSpot实现"><a href="#HotSpot实现" class="headerlink" title="HotSpot实现"></a>HotSpot实现</h2><h3 id="枚举根节点"><a href="#枚举根节点" class="headerlink" title="枚举根节点"></a>枚举根节点</h3><p>枚举根节点面临的主要问题有两个：</p>
<ul>
<li>可作为GC Roots的节点太多，主要在全局性的引用（例如常量或类静态属性）与执行上下文（例如栈帧中的本地变量表）中，现在很多应用仅仅方法区就有数百兆，如果要逐个检查这里面的引用，那么必然会消耗很多时间。在HotSpot的实现中，是使用一组称为OopMap的数据结构来达到这个目的的，在类加载完成的时候，HotSpot就把对象内什么偏移量上是什么类型的数据计算出来，在JIT编译过程中，也会在特定的位置记录下栈和寄存器中哪些位置是引用。这样，GC在扫描时就可以直接得知这些信息了，这是典型的空间换时间的做法；</li>
<li>GC停顿，因为这项分析工作必须在一个能确保一致性的快照中进行——这里“一致性”的意思是指在整个分析期间整个执行系统看起来就像被冻结在某个时间点上，不可以出现分析过程中对象引用关系还在不断变化的情况，该点不满足的话分析结果准确性就无法得到保证。这点是导致GC进行时必须停顿所有Java执行线程（Sun将这件事情称为“Stop The World”）的其中一个重要原因，即使是在号称（几乎）不会发生停顿的CMS收集器中，枚举根节点时也是必须要停顿的。</li>
</ul>
<h3 id="安全点"><a href="#安全点" class="headerlink" title="安全点"></a>安全点</h3><ul>
<li><p>程序执行时并非在所有的地方都能停下来开始GC，只有在安全点是才能暂停，它的定义是：</p>
<p>A point during program execution at which all GC roots are known and all heap object contents are consistent. From a global point of view, all threads must block at a safepoint before the GC can run.</p>
</li>
</ul>
<ul>
<li><p>在哪里设置安全点 </p>
<p>安全点的设置既不能太少以至于让GC长时间等待，也不能太多以至于过分增大运行时的负荷</p>
</li>
<li><p>如何在GC发生时让所有的线程都停到安全点：</p>
<ul>
<li>抢先式中断   GC发生时，直接把所有的线程中断，如果发现有线程中断的地方不在安全点上，就恢复线程，让它跑到安全点上。现在几乎没有虚拟机采用这种方式</li>
<li>主动式中断    GC需要中断线程的时候，仅仅简单的设置一个标志，让Java线程运行到safepoint的时候主动检查这个标志位，如果标志被设置，那么线程停顿，如果没有被设置，那么继续执行。</li>
</ul>
</li>
</ul>
<h3 id="安全区域"><a href="#安全区域" class="headerlink" title="安全区域"></a>安全区域</h3><p>安全区域是指在一段代码片段之中，引用关系不会发生变化，在这个区域的任何时间开始GC都是安全的。</p>
<p>当程序执行到safe region中的代码时，首先标识自己已经进入了safe region，当jvm要发起gc时，则可以不用管标识了这种状态的线程了。在线程要离开safe region时，它需要检查当前GC状态，如果不能离开就必须等待直到收到信号可以离开为止。</p>
<p>Safepoint机制保证了程序在执行的时候，在不太长的时间里就可以进入到GC的安全点，但是如果此时程序没有被分配时间，比如线程处于sleep或者block状态，则无法响应jvm的请求。这时候需要安全区域来解决，我们可以把安全区域看成是扩展了的安全点。</p>
<h2 id="垃圾收集器"><a href="#垃圾收集器" class="headerlink" title="垃圾收集器"></a>垃圾收集器</h2><p>不同的虚拟机会包含不同的垃圾收集器，<a href="https://blogs.oracle.com/whats-cool-in-java-8-new-in-java-9">在最新的Java 9 中，使用G1作为默认的收集器</a>。</p>
<h2 id="内存的回收和分配策略"><a href="#内存的回收和分配策略" class="headerlink" title="内存的回收和分配策略"></a>内存的回收和分配策略</h2><ul>
<li>对象优先在Eden分配</li>
</ul>
<p>大多数情况下，对象在新生代的Eden区分配，当Eden区没有足够的空间分配时，虚拟机将发起一次GC，如果GC期间发现Survivor空间不够保存，此时会转移对象到老年代。</p>
<ul>
<li>大对象直接进入老年代</li>
</ul>
<p>大对象是指需要大量连续内存空间的Java对象，比如很长的字符串和数组，经常出现大对象容易导致内存还有不少空间时就触发垃圾收集以获取足够的连续空间；</p>
<ul>
<li>长期存活的对象将进入老年代</li>
</ul>
<p>虚拟机给每个对象定义了一个对象年龄计数器，一次GC后，年龄加1，当Survivor中的对象经过多次gc时就会被转移到老年代中。</p>
<blockquote>
<p>Minor GC 和 Full GC ：</p>
<p>新生代GC（Minor GC）：是指发生在新生代的GC，因为新生代对象朝生夕灭的特性，所以Minor GC发生的很频繁，回收速度也比较快</p>
<p>老年代GC（Major GC / Full GC）：是指发生在老年代的GC,此GC的速度一般会比Minor GC慢10倍以上</p>
</blockquote>
<p>扩展阅读：</p>
<p><a href="http://blog.csdn.net/lqp276/article/details/52249438">http://blog.csdn.net/lqp276/article/details/52249438</a></p>
<p><a href="http://blog.csdn.net/iter_zc/article/details/41847887">http://blog.csdn.net/iter_zc/article/details/41847887</a></p>
<p><a href="https://www.zhihu.com/question/29268019">https://www.zhihu.com/question/29268019</a></p>
<p><a href="https://www.zhihu.com/question/51914583/answer/128083814">https://www.zhihu.com/question/51914583/answer/128083814</a></p>
<p>呃，在面试里面被问到，哪些对象可以作为GC roots的对象，为什么它们可以作为gc roots对象？解释一下为什么Activity里面handler会导致内存泄露的问题,它们的gcRoot路径是什么样的？</p>
<p>当时没有答出来…..以下是个人根据网上的一些资料的想法整理，不是答案：</p>
<blockquote>
<p>tracing gc的基本思路是，以当前存活的对象集为root，遍历出他们（引用）关联的所有对象（Heap中的对象），没有遍历到的对象即为非存活对象，这部分对象可以gc掉。这里的<strong>初始存活对象集</strong>就是GC Roots。</p>
<p>1.JAVA虚拟机栈中的本地变量引用对象； 2.方法区中静态变量引用的对象； 3.方法区中常量引用的对象； 4.本地方法栈中JNI引用的对象；</p>
<p>选择这些对象的依据是什么？</p>
<p>当前栈帧中的引用型变量；静态变量引用的对象；本地方法栈JNI的引用对象，很明显是当前存活对象。所以他们比如是GC Roots的一部分。</p>
</blockquote>
<p><a href="https://www.zhihu.com/question/33093157">https://www.zhihu.com/question/33093157</a></p>
<p>还有这里</p>
<blockquote>
<p>作者：Accelerator链接：<a href="https://www.zhihu.com/question/50381439/answer/120846441%E6%9D%A5%E6%BA%90%EF%BC%9A%E7%9F%A5%E4%B9%8E%E8%91%97%E4%BD%9C%E6%9D%83%E5%BD%92%E4%BD%9C%E8%80%85%E6%89%80%E6%9C%89%E3%80%82%E5%95%86%E4%B8%9A%E8%BD%AC%E8%BD%BD%E8%AF%B7%E8%81%94%E7%B3%BB%E4%BD%9C%E8%80%85%E8%8E%B7%E5%BE%97%E6%8E%88%E6%9D%83%EF%BC%8C%E9%9D%9E%E5%95%86%E4%B8%9A%E8%BD%AC%E8%BD%BD%E8%AF%B7%E6%B3%A8%E6%98%8E%E5%87%BA%E5%A4%84%E3%80%82">https://www.zhihu.com/question/50381439/answer/120846441来源：知乎著作权归作者所有。商业转载请联系作者获得授权，非商业转载请注明出处。</a></p>
<p>A garbage collection root is an object that is accessible from outside the heap. The following reasons make an object a GC root:</p>
<p>1.System Class<br>———-Class loaded by bootstrap/system class loader. For example, everything from the rt.jar like java.util.* .<br>2.JNI Local<br>———-Local variable in native code, such as user defined JNI code or JVM internal code.<br>3.JNI Global<br>———-Global variable in native code, such as user defined JNI code or JVM internal code.<br>4.Thread Block<br>———-Object referred to from a currently active thread block.<br>Thread<br>———-A started, but not stopped, thread.<br>5.Busy Monitor<br>———-Everything that has called wait() or notify() or that is synchronized. For example, by calling synchronized(Object) or by entering a synchronized method. Static method means class, non-static method means object.<br>6.Java Local<br>———-Local variable. For example, input parameters or locally created objects of methods that are still in the stack of a thread.<br>7.Native Stack<br>———-In or out parameters in native code, such as user defined JNI code or JVM internal code. This is often the case as many methods have native parts and the objects handled as method parameters become GC roots. For example, parameters used for file/network I/O methods or reflection.<br>7.Finalizable<br>———-An object which is in a queue awaiting its finalizer to be run.<br>8.Unfinalized<br>———-An object which has a finalize method, but has not been finalized and is not yet on the finalizer queue.<br>9.Unreachable<br>———-An object which is unreachable from any other root, but has been marked as a root by MAT to retain objects which otherwise would not be included in the analysis.<br>10.Java Stack Frame<br>———-A Java stack frame, holding local variables. Only generated when the dump is parsed with the preference set to treat Java stack frames as objects.<br>11.Unknown<br>———-An object of unknown root type. Some dumps, such as IBM Portable Heap Dump files, do not have root information. For these dumps the MAT parser marks objects which are have no inbound references or are unreachable from any other root as roots of this type. This ensures that MAT retains all the objects in the dump.</p>
</blockquote>
<p> Activity和Handler之间会有泄露的场景是Handler作为一个内部类而不是静态内部类，因而持有了Activity的引用，所以即使Activity销毁了，这个handler也会有引用指向它，而handler自己在sendMessage的时候会把自己作为target设置到message里面去，因此message会持有handler的引用，而message又会被MessageQueue引用，所以在message没有被主线程处理的情况下，根据上面的第四条，可以得到这样一条gcRoots路径，因此GC不会回收掉Activity</p>
]]></content>
      <categories>
        <category>Java</category>
      </categories>
      <tags>
        <tag>深入理解Java虚拟机</tag>
        <tag>面试</tag>
      </tags>
  </entry>
  <entry>
    <title>按XML格式打印view和它的子view</title>
    <url>/2018/10/16/Q-A-%E6%8C%89XML%E6%A0%BC%E5%BC%8F%E6%89%93%E5%8D%B0view%E5%92%8C%E5%AE%83%E7%9A%84%E5%AD%90view/</url>
    <content><![CDATA[<p>逻辑很简单，就是递归就结束了，很麻烦的是xml的格式调整，换行和缩进花了很久。没有要求写文件，不过写了看看效果</p>
<a id="more"></a>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onCreate</span><span class="params">(Bundle savedInstanceState)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">super</span>.onCreate(savedInstanceState);</span><br><span class="line">    setContentView(R.layout.activity_main);</span><br><span class="line">    View view = findViewById(R.id.layout);</span><br><span class="line">    ViewGroup viewGroup = (ViewGroup) getWindow().getDecorView();</span><br><span class="line"></span><br><span class="line">    String str = printViewHierarchy(viewGroup);</span><br><span class="line">    writeFile(str);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">private</span> String <span class="title">printViewHierarchy</span><span class="params">(ViewGroup viewGroup)</span> </span>&#123;</span><br><span class="line">    String lineStarter = <span class="string">&quot;&quot;</span>;</span><br><span class="line">    String blank = <span class="string">&quot;  &quot;</span>;</span><br><span class="line">    StringBuilder builder = <span class="keyword">new</span> StringBuilder();</span><br><span class="line">    builder.append(<span class="string">&quot;&lt;?xml version=\&quot;1.0\&quot; encoding=\&quot;utf-8\&quot;?&gt;&quot;</span>);</span><br><span class="line">    builder.append(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line">    travelView(viewGroup, builder, lineStarter, blank);</span><br><span class="line">    <span class="keyword">return</span> builder.toString();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">writeFile</span><span class="params">(String str)</span> </span>&#123;</span><br><span class="line">    File output = <span class="keyword">new</span> File(Environment.getExternalStorageDirectory(), <span class="string">&quot;treeView.xml&quot;</span>);</span><br><span class="line">    <span class="keyword">if</span> (output.exists()) &#123;</span><br><span class="line">        output.delete();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        FileOutputStream outputStream = <span class="keyword">new</span> FileOutputStream(output);</span><br><span class="line">        outputStream.write(str.getBytes());</span><br><span class="line">        outputStream.close();</span><br><span class="line">    &#125; <span class="keyword">catch</span> (FileNotFoundException e) &#123;</span><br><span class="line">        e.printStackTrace();</span><br><span class="line">    &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">        e.printStackTrace();</span><br><span class="line">    &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">travelView</span><span class="params">(View view, StringBuilder builder, String lineStarter, String blank)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (view <span class="keyword">instanceof</span> ViewGroup) &#123;</span><br><span class="line">        ViewGroup viewGroup = ((ViewGroup) view);</span><br><span class="line">        builder.append(getStartTag(lineStarter, view));</span><br><span class="line">        <span class="keyword">if</span> (viewGroup.getChildCount() != <span class="number">0</span>) &#123;</span><br><span class="line">            builder.append(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">boolean</span> newLine = <span class="keyword">true</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; viewGroup.getChildCount(); i++) &#123;</span><br><span class="line">            View child = viewGroup.getChildAt(i);</span><br><span class="line">            <span class="keyword">if</span> (newLine) &#123;</span><br><span class="line">                lineStarter += blank;</span><br><span class="line">                newLine = <span class="keyword">false</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            travelView(child, builder,lineStarter,blank);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (viewGroup.getChildCount() != <span class="number">0</span>) &#123;</span><br><span class="line">            lineStarter = lineStarter.substring(<span class="number">0</span>, lineStarter.length() - blank.length());</span><br><span class="line">            builder.append(getEndTag(lineStarter, view));</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            builder.append(getEndTag(<span class="string">&quot; &quot;</span>, view));</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        builder.append(getStartTag(lineStarter, view));</span><br><span class="line">        builder.append(getEndTag(<span class="string">&quot; &quot;</span>, view));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">private</span> String <span class="title">getEndTag</span><span class="params">(String pre, View view)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> (pre + <span class="string">&quot;&lt;/&quot;</span> + getViewName(view) + <span class="string">&quot;&gt;&quot;</span> + <span class="string">&quot;\n&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">private</span> String <span class="title">getStartTag</span><span class="params">(String pre, View view)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> (pre + <span class="string">&quot;&lt;&quot;</span> + getViewName(view) + <span class="string">&quot;&gt;&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">private</span> String <span class="title">getViewName</span><span class="params">(View view)</span> </span>&#123;</span><br><span class="line">    String s = view.toString();</span><br><span class="line">    <span class="keyword">int</span> index = s.indexOf(<span class="string">&quot;&#123;&quot;</span>);</span><br><span class="line">    index = (index == -<span class="number">1</span>) ? s.length() : index;</span><br><span class="line">    s = s.subSequence(<span class="number">0</span>, index).toString();</span><br><span class="line">    <span class="keyword">int</span> start = s.lastIndexOf(<span class="string">&quot;.&quot;</span>);</span><br><span class="line">    <span class="keyword">if</span> (start != -<span class="number">1</span>) &#123;</span><br><span class="line">        s = s.substring(start + <span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> s;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>数据结构和算法</category>
      </categories>
  </entry>
  <entry>
    <title>LruCache和LinkedHashMap</title>
    <url>/2017/12/05/LruCache%E5%92%8CLinkedHashMap/</url>
    <content><![CDATA[<p>昨天笔试的时候，有一题是补充LruCache的实现，我想了想，应该不至于要写到链表实现把，于是写了LinkedHashMap进去了，<a id="more"></a>面试的时候面试官问我，这题你是不是用手机查过了……。</p>
<p>于是今天补充下记忆，前提知识：知道LinkedHashMap本身有实现LRU算法，这个会在后面去写</p>
<p>Android下LruCache源码也就300多行，在android.util包下</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//看了源码后可以发现LruCache实际上就是对LinkedHashMap的包装，只是增加了一些统计数据比如命中率，丢失率</span></span><br><span class="line"><span class="comment">//因为几乎每个方法都加锁，是一个线程安全的类</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">LruCache</span>&lt;<span class="title">K</span>, <span class="title">V</span>&gt; </span>&#123;</span><br><span class="line">   <span class="keyword">private</span> <span class="keyword">final</span> LinkedHashMap&lt;K, V&gt; map;</span><br><span class="line">   <span class="keyword">private</span> <span class="keyword">int</span> size; <span class="comment">//数据的条目数</span></span><br><span class="line">   <span class="keyword">private</span> <span class="keyword">int</span> maxSize;  <span class="comment">//LruCache的大小</span></span><br><span class="line">  <span class="comment">//构造函数很简单，就是new了一个LinkedHashMap,初始化大小为0，装载因子是0.75，最后一个参数表示</span></span><br><span class="line">  <span class="comment">//使用LRU算法 </span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="title">LruCache</span><span class="params">(<span class="keyword">int</span> maxSize)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (maxSize &lt;= <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> IllegalArgumentException(<span class="string">&quot;maxSize &lt;= 0&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">this</span>.maxSize = maxSize;</span><br><span class="line">        <span class="keyword">this</span>.map = <span class="keyword">new</span> LinkedHashMap&lt;K, V&gt;(<span class="number">0</span>, <span class="number">0.75f</span>, <span class="keyword">true</span>);</span><br><span class="line">    &#125;</span><br><span class="line">  </span><br><span class="line">  </span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Returns the value for &#123;<span class="doctag">@code</span> key&#125; if it exists in the cache or can be</span></span><br><span class="line"><span class="comment">     * created by &#123;<span class="doctag">@code</span> #create&#125;. If a value was returned, it is moved to the</span></span><br><span class="line"><span class="comment">     * head of the queue. This returns null if a value is not cached and cannot</span></span><br><span class="line"><span class="comment">     * be created.</span></span><br><span class="line"><span class="comment">     * 这里可以看到get仅仅是调用了LinkedHashMap的map.get(key)方法，加了锁，读取value本身</span></span><br><span class="line"><span class="comment">     * 应该是不用加锁的，猜测加锁是为了同步hitcount这些统计数据</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">final</span> V <span class="title">get</span><span class="params">(K key)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (key == <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> NullPointerException(<span class="string">&quot;key == null&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        V mapValue;</span><br><span class="line">        <span class="keyword">synchronized</span> (<span class="keyword">this</span>) &#123;</span><br><span class="line">            mapValue = map.get(key);</span><br><span class="line">            <span class="keyword">if</span> (mapValue != <span class="keyword">null</span>) &#123;</span><br><span class="line">                hitCount++;</span><br><span class="line">                <span class="keyword">return</span> mapValue;</span><br><span class="line">            &#125;</span><br><span class="line">            missCount++;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">/*</span></span><br><span class="line"><span class="comment">         * Attempt to create a value. This may take a long time, and the map</span></span><br><span class="line"><span class="comment">         * may be different when create() returns. If a conflicting value was</span></span><br><span class="line"><span class="comment">         * added to the map while create() was working, we leave that value in</span></span><br><span class="line"><span class="comment">         * the map and release the created value.</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">		<span class="comment">//create(key)默认实现就是直接返回null,因此这里会直接return掉</span></span><br><span class="line">        V createdValue = create(key);</span><br><span class="line">        <span class="keyword">if</span> (createdValue == <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">		...</span><br><span class="line">    &#125;</span><br><span class="line">  </span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Caches &#123;<span class="doctag">@code</span> value&#125; for &#123;<span class="doctag">@code</span> key&#125;. The value is moved to the head of</span></span><br><span class="line"><span class="comment">     * the queue.</span></span><br><span class="line"><span class="comment">     * 写操作，加锁，map.put(key, value)后返回了key之前对应的value  previous,safeSizeOf</span></span><br><span class="line"><span class="comment">     * 默认实现return 1,entryRemoved默认空实现，</span></span><br><span class="line"><span class="comment">     * 写入后检查如果超出了maxSize，就把最久的条目移出map直到size = maxSize </span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> the previous value mapped by &#123;<span class="doctag">@code</span> key&#125;.</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">final</span> V <span class="title">put</span><span class="params">(K key, V value)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (key == <span class="keyword">null</span> || value == <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> NullPointerException(<span class="string">&quot;key == null || value == null&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        V previous;</span><br><span class="line">        <span class="keyword">synchronized</span> (<span class="keyword">this</span>) &#123;</span><br><span class="line">            putCount++;</span><br><span class="line">            size += safeSizeOf(key, value);</span><br><span class="line">            previous = map.put(key, value);</span><br><span class="line">            <span class="keyword">if</span> (previous != <span class="keyword">null</span>) &#123;</span><br><span class="line">                size -= safeSizeOf(key, previous);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (previous != <span class="keyword">null</span>) &#123;</span><br><span class="line">            entryRemoved(<span class="keyword">false</span>, key, previous, value);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        trimToSize(maxSize);</span><br><span class="line">        <span class="keyword">return</span> previous;</span><br><span class="line">    &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Remove the eldest entries until the total of remaining entries is at or</span></span><br><span class="line"><span class="comment">     * below the requested size.</span></span><br><span class="line"><span class="comment">     * 缩小LruCache到maxSize</span></span><br><span class="line"><span class="comment">     * 一个while循环，remove掉map.eldest()</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> maxSize the maximum size of the cache before returning. May be -1</span></span><br><span class="line"><span class="comment">     *            to evict even 0-sized elements.</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">trimToSize</span><span class="params">(<span class="keyword">int</span> maxSize)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">while</span> (<span class="keyword">true</span>) &#123;</span><br><span class="line">            K key;</span><br><span class="line">            V value;</span><br><span class="line">            <span class="keyword">synchronized</span> (<span class="keyword">this</span>) &#123;</span><br><span class="line">                <span class="keyword">if</span> (size &lt; <span class="number">0</span> || (map.isEmpty() &amp;&amp; size != <span class="number">0</span>)) &#123;</span><br><span class="line">                    <span class="keyword">throw</span> <span class="keyword">new</span> IllegalStateException(getClass().getName()</span><br><span class="line">                            + <span class="string">&quot;.sizeOf() is reporting inconsistent results!&quot;</span>);</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">                <span class="keyword">if</span> (size &lt;= maxSize) &#123;</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">                Map.Entry&lt;K, V&gt; toEvict = map.eldest();</span><br><span class="line">                <span class="keyword">if</span> (toEvict == <span class="keyword">null</span>) &#123;</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">                key = toEvict.getKey();</span><br><span class="line">                value = toEvict.getValue();</span><br><span class="line">                map.remove(key);</span><br><span class="line">                size -= safeSizeOf(key, value);</span><br><span class="line">                evictionCount++;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            entryRemoved(<span class="keyword">true</span>, key, value, <span class="keyword">null</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Removes the entry for &#123;<span class="doctag">@code</span> key&#125; if it exists.</span></span><br><span class="line"><span class="comment">     *	调用map.remove(key);</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> the previous value mapped by &#123;<span class="doctag">@code</span> key&#125;.</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">final</span> V <span class="title">remove</span><span class="params">(K key)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (key == <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> NullPointerException(<span class="string">&quot;key == null&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        V previous;</span><br><span class="line">        <span class="keyword">synchronized</span> (<span class="keyword">this</span>) &#123;</span><br><span class="line">            previous = map.remove(key);</span><br><span class="line">            <span class="keyword">if</span> (previous != <span class="keyword">null</span>) &#123;</span><br><span class="line">                size -= safeSizeOf(key, previous);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (previous != <span class="keyword">null</span>) &#123;</span><br><span class="line">            entryRemoved(<span class="keyword">false</span>, key, previous, <span class="keyword">null</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> previous;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>
<p>接下来，我们来看LinkeHashMap是怎么实现LRU算法的</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//LinkedHashMap继承自HashMap</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">LinkedHashMap</span>&lt;<span class="title">K</span>,<span class="title">V</span>&gt; <span class="keyword">extends</span> <span class="title">HashMap</span>&lt;<span class="title">K</span>,<span class="title">V</span>&gt; <span class="keyword">implements</span> <span class="title">Map</span>&lt;<span class="title">K</span>,<span class="title">V</span>&gt;</span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">	<span class="comment">//继承了HashMap的内部类，增加了before和after引用指向每一个&lt;K,V&gt;对的前后&lt;K,V&gt;对，</span></span><br><span class="line">	<span class="comment">//增加为双向链表表示</span></span><br><span class="line">   <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">LinkedHashMapEntry</span>&lt;<span class="title">K</span>,<span class="title">V</span>&gt; <span class="keyword">extends</span> <span class="title">HashMap</span>.<span class="title">Node</span>&lt;<span class="title">K</span>,<span class="title">V</span>&gt; </span>&#123;</span><br><span class="line">        LinkedHashMapEntry&lt;K,V&gt; before, after;</span><br><span class="line">        LinkedHashMapEntry(<span class="keyword">int</span> hash, K key, V value, Node&lt;K,V&gt; next) &#123;</span><br><span class="line">            <span class="keyword">super</span>(hash, key, value, next);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">       <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * The head (eldest) of the doubly linked list.</span></span><br><span class="line"><span class="comment">     * 双链表的头结点</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">transient</span> LinkedHashMapEntry&lt;K,V&gt; head;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * The tail (youngest) of the doubly linked list.</span></span><br><span class="line"><span class="comment">     * 双链表的尾节点</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">transient</span> LinkedHashMapEntry&lt;K,V&gt; tail;</span><br><span class="line">    </span><br><span class="line">     <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * The iteration ordering method for this linked hash map: &lt;tt&gt;true&lt;/tt&gt;</span></span><br><span class="line"><span class="comment">     * for access-order, &lt;tt&gt;false&lt;/tt&gt; for insertion-order.</span></span><br><span class="line"><span class="comment">     * 新增的构造函数参数，false表示按插入的顺序获取，true表示按接触的顺序遍历，此时就是</span></span><br><span class="line"><span class="comment">     * LRU实现</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@serial</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">final</span> <span class="keyword">boolean</span> accessOrder;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>看一下HashMap.Node是什么</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">       <span class="comment">/**</span></span><br><span class="line"><span class="comment">        *  内部类Node实现了map.Entry接口，当我们存一个&lt;K,V&gt;对的时候，就会保存成Node类存</span></span><br><span class="line"><span class="comment">        *  到HashMap里面去</span></span><br><span class="line"><span class="comment">        *  Node类重写了Equals方法和hashCode方法，不过看代码中好像没有用到，比较的时候依旧</span></span><br><span class="line"><span class="comment">        *  是拿node1.key == node2.key2 和 node1.key.equals(node2.key)去比较的</span></span><br><span class="line"><span class="comment">        *</span></span><br><span class="line"><span class="comment">        */</span></span><br><span class="line"><span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">Node</span>&lt;<span class="title">K</span>,<span class="title">V</span>&gt; <span class="keyword">implements</span> <span class="title">Map</span>.<span class="title">Entry</span>&lt;<span class="title">K</span>,<span class="title">V</span>&gt; </span>&#123;</span><br><span class="line">           <span class="keyword">final</span> <span class="keyword">int</span> hash;  <span class="comment">//保存的是key的hash值</span></span><br><span class="line">           <span class="keyword">final</span> K key;</span><br><span class="line">           V value;</span><br><span class="line">           Node&lt;K,V&gt; next;</span><br><span class="line"></span><br><span class="line">           Node(<span class="keyword">int</span> hash, K key, V value, Node&lt;K,V&gt; next) &#123;</span><br><span class="line">               <span class="keyword">this</span>.hash = hash;</span><br><span class="line">               <span class="keyword">this</span>.key = key;</span><br><span class="line">               <span class="keyword">this</span>.value = value;</span><br><span class="line">               <span class="keyword">this</span>.next = next;</span><br><span class="line">           &#125;</span><br><span class="line"></span><br><span class="line">           <span class="function"><span class="keyword">public</span> <span class="keyword">final</span> K <span class="title">getKey</span><span class="params">()</span>        </span>&#123; <span class="keyword">return</span> key; &#125;</span><br><span class="line">           <span class="function"><span class="keyword">public</span> <span class="keyword">final</span> V <span class="title">getValue</span><span class="params">()</span>      </span>&#123; <span class="keyword">return</span> value; &#125;</span><br><span class="line">           <span class="function"><span class="keyword">public</span> <span class="keyword">final</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123; <span class="keyword">return</span> key + <span class="string">&quot;=&quot;</span> + value; &#125;</span><br><span class="line"></span><br><span class="line">           <span class="function"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">int</span> <span class="title">hashCode</span><span class="params">()</span> </span>&#123;</span><br><span class="line">               <span class="keyword">return</span> Objects.hashCode(key) ^ Objects.hashCode(value);</span><br><span class="line">           &#125;</span><br><span class="line"></span><br><span class="line">           <span class="function"><span class="keyword">public</span> <span class="keyword">final</span> V <span class="title">setValue</span><span class="params">(V newValue)</span> </span>&#123;</span><br><span class="line">               V oldValue = value;</span><br><span class="line">               value = newValue;</span><br><span class="line">               <span class="keyword">return</span> oldValue;</span><br><span class="line">           &#125;</span><br><span class="line"></span><br><span class="line">           <span class="function"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">boolean</span> <span class="title">equals</span><span class="params">(Object o)</span> </span>&#123;</span><br><span class="line">               <span class="keyword">if</span> (o == <span class="keyword">this</span>)</span><br><span class="line">                   <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">               <span class="keyword">if</span> (o <span class="keyword">instanceof</span> Map.Entry) &#123;</span><br><span class="line">                   Map.Entry&lt;?,?&gt; e = (Map.Entry&lt;?,?&gt;)o;</span><br><span class="line">                   <span class="keyword">if</span> (Objects.equals(key, e.getKey()) &amp;&amp;</span><br><span class="line">                           Objects.equals(value, e.getValue()))</span><br><span class="line">                       <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">               &#125;</span><br><span class="line">               <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">           &#125;</span><br><span class="line">       &#125;</span><br></pre></td></tr></table></figure>
<p>然后是linkedhashMap的一些操作</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//重写了HashMap的get方法，只是增加了 if (accessOrder) afterNodeAccess(e);</span></span><br><span class="line"><span class="comment">//修改访问顺序</span></span><br><span class="line"> <span class="function"><span class="keyword">public</span> V <span class="title">get</span><span class="params">(Object key)</span> </span>&#123;</span><br><span class="line">        Node&lt;K,V&gt; e;</span><br><span class="line">        <span class="keyword">if</span> ((e = getNode(hash(key), key)) == <span class="keyword">null</span>)</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">if</span> (accessOrder)</span><br><span class="line">            afterNodeAccess(e);</span><br><span class="line">        <span class="keyword">return</span> e.value;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> Map.<span class="function">Entry&lt;K, V&gt; <span class="title">eldest</span><span class="params">()</span> </span>&#123;</span><br><span class="line"> 	 	<span class="keyword">return</span> head;</span><br><span class="line">	&#125;			</span><br><span class="line"><span class="comment">//重写newNode方法，新增节点时链接到双链表的末尾</span></span><br><span class="line"><span class="function">Node&lt;K,V&gt; <span class="title">newNode</span><span class="params">(<span class="keyword">int</span> hash, K key, V value, Node&lt;K,V&gt; e)</span> </span>&#123;</span><br><span class="line">        LinkedHashMapEntry&lt;K,V&gt; p =</span><br><span class="line">            <span class="keyword">new</span> LinkedHashMapEntry&lt;K,V&gt;(hash, key, value, e);</span><br><span class="line">        linkNodeLast(p);</span><br><span class="line">        <span class="keyword">return</span> p;</span><br><span class="line"> &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//在get（K key）之后调用，把这个节点移到双链表的末尾</span></span><br><span class="line"> <span class="function"><span class="keyword">void</span> <span class="title">afterNodeAccess</span><span class="params">(Node&lt;K,V&gt; e)</span> </span>&#123; <span class="comment">// move node to last</span></span><br><span class="line">        LinkedHashMapEntry&lt;K,V&gt; last;</span><br><span class="line">        <span class="keyword">if</span> (accessOrder &amp;&amp; (last = tail) != e) &#123;</span><br><span class="line">            LinkedHashMapEntry&lt;K,V&gt; p =</span><br><span class="line">                (LinkedHashMapEntry&lt;K,V&gt;)e, b = p.before, a = p.after;</span><br><span class="line">            p.after = <span class="keyword">null</span>;</span><br><span class="line">            <span class="keyword">if</span> (b == <span class="keyword">null</span>)</span><br><span class="line">                head = a;</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">                b.after = a;</span><br><span class="line">            <span class="keyword">if</span> (a != <span class="keyword">null</span>)</span><br><span class="line">                a.before = b;</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">                last = b;</span><br><span class="line">            <span class="keyword">if</span> (last == <span class="keyword">null</span>)</span><br><span class="line">                head = p;</span><br><span class="line">            <span class="keyword">else</span> &#123;</span><br><span class="line">                p.before = last;</span><br><span class="line">                last.after = p;</span><br><span class="line">            &#125;</span><br><span class="line">            tail = p;</span><br><span class="line">            ++modCount;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>
<p>可以看到，LinkedHashmap的LRU实现过程就是，新增的&lt;K,V&gt;对会链接到双链表的末尾，get操作后的&lt;K,V&gt;对也会把操作的节点双链表断开然后移动到双链表的末尾，每次取最久未使用的节点就是双链表的头结点，在LRUCache里面，每次要移除也就是移除的这个节点</p>
]]></content>
      <categories>
        <category>Java</category>
      </categories>
      <tags>
        <tag>面试</tag>
      </tags>
  </entry>
  <entry>
    <title>flutter get started</title>
    <url>/2018/11/05/flutter-get-started/</url>
    <content><![CDATA[<p>今天尝试了一下flutter,记一下过程</p>
<a id="more"></a>

<h2 id="安装和运行"><a href="#安装和运行" class="headerlink" title="安装和运行"></a>安装和运行</h2><p><a href="https://flutter.io/get-started/install/">get-started</a></p>
<ol>
<li><p>首先它说需要安装Git for Windows ，好像没有用到这个，因为我本身就已经有了，所以不知道没装会不会ok，建议安装</p>
</li>
<li><p>然后是下载 flutter_windows_v0.9.4-beta.zip ，300多M，这个是真的慢，我看了全局vpn依然很慢</p>
</li>
<li><p>解压出 flutter 文件夹，并且设置环境变量指向 flutter\bin ，有一万多个文件把，解压也是超慢。</p>
</li>
<li><p>dos命令行运行 <code>flutter doctor</code>，检测环境设置，因为已经安装了Android-Studio了，所以jdk,sdk，AS，模拟器 那一块都没有问题，如果打算使用visio studio code 的话需要安装 flutter插件才能被发现。</p>
</li>
<li><p>如果打算使用AS的话，需要依次搜索安装插件 Dart 和 flutter ，这里我开了全局vpn依然安装不了flutter插件，不知道为什么，根据它错误提示里面的地址，我复制到浏览器里面下载了zip格式的插件然后导入到AS里面。</p>
</li>
<li><p>使用AS的话，直接创建Flutter项目就行，创建的时候记得勾选offline,不过即使是offline了，创建过程还是不知道为什么卡了很久很久。使用vsc的话，直接ctrl+p ,输入 &gt; ,再选择 Flutter: New Project 就行，直接就创建好了，或者使用命令行:</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">flutter create myapp</span><br><span class="line">cd myapp</span><br></pre></td></tr></table></figure>
<p>创建后打开 myapp文件夹也行，也很快。</p>
</li>
<li><p>运行就，点击AS 的run按钮 ，或者vsc的debug(记得先点一下右边的配置小按钮)，或者 <code>flutter run</code>，按 R 是实时部署代码。</p>
</li>
</ol>
<p>IDE的选择的话，我本来是倾向于vsc的，dart看起来像是ts一类的语言语法，但是实际打开后发现vsc来做这个的话，内存占用也到了七八百M了，和AS不相上下了。抽空看了看 google io 上的一些 flutter 的介绍视频，里面的程序员也都是用的 AS，所以还是决定用 AS 了。</p>
<p>大概看了下美团和咸鱼的试用报告，了解了下渲染效率和原理，觉得还是不错的。特别是看了<a href="https://www.youtube.com/watch?v=w2TcYP8qiRI">使用flutter30分钟实现一个跨平台的IM app</a>之后，觉得有点惊艳。谷歌的firebase和service全家桶套餐原来还有远程数据库的功能。视频里就演示了下双端读取同步数据库来实现IM，有些意思。</p>
<h2 id="Demo"><a href="#Demo" class="headerlink" title="Demo"></a>Demo</h2><p>官网文档的演示教程分1，2两部分，第一部分简单介绍了下text，展示了一个列表：</p>
<figure class="highlight dart"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="string">&#x27;package:flutter/material.dart&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="string">&#x27;package:english_words/english_words.dart&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">void</span> main() =&gt; runApp(MyApp());</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyApp</span> <span class="keyword">extends</span> <span class="title">StatelessWidget</span> </span>&#123;</span><br><span class="line">  <span class="meta">@override</span></span><br><span class="line">  Widget build(BuildContext context) &#123;</span><br><span class="line">    <span class="keyword">return</span> MaterialApp(</span><br><span class="line">      title: <span class="string">&#x27;Startup Name Generator&#x27;</span>,</span><br><span class="line">      home: RandomWords(),</span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">RandomWordsState</span> <span class="keyword">extends</span> <span class="title">State</span>&lt;<span class="title">RandomWords</span>&gt; </span>&#123;</span><br><span class="line">  <span class="keyword">final</span> _suggestions = &lt;WordPair&gt;[];</span><br><span class="line"></span><br><span class="line">  <span class="keyword">final</span> _biggerFont = <span class="keyword">const</span> TextStyle(fontSize: <span class="number">18.0</span>);</span><br><span class="line"></span><br><span class="line">  Widget _buildSuggestions() &#123;</span><br><span class="line">    <span class="keyword">return</span> ListView.builder(</span><br><span class="line">        padding: <span class="keyword">const</span> EdgeInsets.all(<span class="number">16.0</span>),</span><br><span class="line">        itemBuilder: (context, i) &#123;</span><br><span class="line">          <span class="comment">// Add a one-pixel-high divider widget before each row in theListView.</span></span><br><span class="line">          <span class="keyword">if</span> (i.isOdd) <span class="keyword">return</span> Divider();</span><br><span class="line"></span><br><span class="line">          <span class="keyword">final</span> index = i ~/ <span class="number">2</span>;</span><br><span class="line">          <span class="keyword">if</span> (index &gt;= _suggestions.length) &#123;</span><br><span class="line">            _suggestions.addAll(generateWordPairs().take(<span class="number">10</span>));</span><br><span class="line">          &#125;</span><br><span class="line">          <span class="keyword">return</span> _buildRow(_suggestions[index]);</span><br><span class="line">        &#125;);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  Widget _buildRow(WordPair pair) &#123;</span><br><span class="line">    <span class="keyword">return</span> ListTile(</span><br><span class="line">      title: Text(</span><br><span class="line">        pair.asPascalCase,</span><br><span class="line">        style: _biggerFont,</span><br><span class="line">      ),</span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@override</span></span><br><span class="line">  Widget build(BuildContext context) &#123;</span><br><span class="line">    <span class="keyword">return</span> Scaffold(</span><br><span class="line">      appBar: AppBar(</span><br><span class="line">        title: Text(<span class="string">&#x27;Startup Name Generator&#x27;</span>),</span><br><span class="line">      ),</span><br><span class="line">      body: _buildSuggestions(),</span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">RandomWords</span> <span class="keyword">extends</span> <span class="title">StatefulWidget</span> </span>&#123;</span><br><span class="line">  <span class="meta">@override</span></span><br><span class="line">  RandomWordsState createState() =&gt; <span class="keyword">new</span> RandomWordsState();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>通过 <code>void main() =&gt; runApp(MyApp());</code> 来启动一个界面，MyApp则是一个 StatelessWidget 的控件，需要实现的虚方法 <code>build</code>要求返回一个 Widget</p>
<p>对于有状态变化的控件，需要使用 StatefulWidget 控件。继承后虚方法要求返回一个State. 然后新建一个状态类继承 State，把控件的名字作为 泛型参数写进去，State 的子类则需要返回一个 Widget。</p>
<p>可以使用 Scaffold 类来包裹 Widget 作为body参数的值来返回，可以使用ListView.builder（padding,ListTile）来构造一个列表控件。</p>
<p>感觉和rn相比，理解起来更接近客户端的思维。rn写起来则是更接近web的思维，尖括号大括号小括号一起上，还要用 StyleSheet.create 来写css，很不习惯。</p>
<p>第二部分展示了一下路由和页面交互的功能。呃，前端里面的路由意思就是页面跳转，这个也是看rn的时候迷糊了一段才明白。</p>
<figure class="highlight dart"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="string">&#x27;package:flutter/material.dart&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="string">&#x27;package:english_words/english_words.dart&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">void</span> main() =&gt; runApp(<span class="keyword">new</span> MyApp());</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyApp</span> <span class="keyword">extends</span> <span class="title">StatelessWidget</span> </span>&#123;</span><br><span class="line">  <span class="comment">// This widget is the root of your application.</span></span><br><span class="line">  <span class="meta">@override</span></span><br><span class="line">  Widget build(BuildContext context) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> MaterialApp(</span><br><span class="line">      title: <span class="string">&#x27;Flutter Demo&#x27;</span>,</span><br><span class="line">      theme: <span class="keyword">new</span> ThemeData(</span><br><span class="line">        <span class="comment">// This is the theme of your application.</span></span><br><span class="line">        <span class="comment">//</span></span><br><span class="line">        <span class="comment">// Try running your application with &quot;flutter run&quot;. You&#x27;ll see the</span></span><br><span class="line">        <span class="comment">// application has a blue toolbar. Then, without quitting the app, try</span></span><br><span class="line">        <span class="comment">// changing the primarySwatch below to Colors.green and then invoke</span></span><br><span class="line">        <span class="comment">// &quot;hot reload&quot; (press &quot;r&quot; in the console where you ran &quot;flutter run&quot;,</span></span><br><span class="line">        <span class="comment">// or press Run &gt; Flutter Hot Reload in IntelliJ). Notice that the</span></span><br><span class="line">        <span class="comment">// counter didn&#x27;t reset back to zero; the application is not restarted.</span></span><br><span class="line">        primarySwatch: Colors.blue,</span><br><span class="line">      ),</span><br><span class="line">      home: RandomWords(),</span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">RandomWordState</span> <span class="keyword">extends</span> <span class="title">State</span>&lt;<span class="title">RandomWords</span>&gt; </span>&#123;</span><br><span class="line">  <span class="keyword">final</span> _suggestions = &lt;WordPair&gt;[];</span><br><span class="line"></span><br><span class="line">  <span class="keyword">final</span> _saved = <span class="keyword">new</span> <span class="built_in">Set</span>&lt;WordPair&gt;();</span><br><span class="line">  <span class="keyword">final</span> _biggerFont = <span class="keyword">const</span> TextStyle(fontSize: <span class="number">18.0</span>);</span><br><span class="line"></span><br><span class="line">  <span class="meta">@override</span></span><br><span class="line">  Widget build(BuildContext context) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> Scaffold(</span><br><span class="line">      appBar: <span class="keyword">new</span> AppBar(</span><br><span class="line">        title: <span class="keyword">new</span> Text(<span class="string">&#x27;Startup Name Generator&#x27;</span>),</span><br><span class="line">        actions: &lt;Widget&gt;[</span><br><span class="line">          <span class="comment">// Add 3 lines from here...</span></span><br><span class="line">          <span class="keyword">new</span> IconButton(icon: <span class="keyword">const</span> Icon(Icons.list), onPressed: _pushSaved),</span><br><span class="line">        ], <span class="comment">// ... to here.</span></span><br><span class="line">      ),</span><br><span class="line">      body: _buildSuggestions(),</span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  Widget _buildSuggestions() &#123;</span><br><span class="line">    <span class="keyword">return</span> ListView.builder(</span><br><span class="line">        padding: <span class="keyword">const</span> EdgeInsets.all(<span class="number">16.0</span>),</span><br><span class="line">        <span class="comment">// The itemBuilder callback is called once per suggested word pairing,</span></span><br><span class="line">        <span class="comment">// and places each suggestion into a ListTile row.</span></span><br><span class="line">        <span class="comment">// For even rows, the function adds a ListTile row for the word pairing.</span></span><br><span class="line">        <span class="comment">// For odd rows, the function adds a Divider widget to visually</span></span><br><span class="line">        <span class="comment">// separate the entries. Note that the divider may be difficult</span></span><br><span class="line">        <span class="comment">// to see on smaller devices.</span></span><br><span class="line">        itemBuilder: (context, i) &#123;</span><br><span class="line">          <span class="comment">// Add a one-pixel-high divider widget before each row in theListView.</span></span><br><span class="line">          <span class="keyword">if</span> (i.isOdd) <span class="keyword">return</span> Divider();</span><br><span class="line"></span><br><span class="line">          <span class="comment">// The syntax &quot;i ~/ 2&quot; divides i by 2 and returns an integer result.</span></span><br><span class="line">          <span class="comment">// For example: 1, 2, 3, 4, 5 becomes 0, 1, 1, 2, 2.</span></span><br><span class="line">          <span class="comment">// This calculates the actual number of word pairings in the ListView,</span></span><br><span class="line">          <span class="comment">// minus the divider widgets.</span></span><br><span class="line">          <span class="keyword">final</span> index = i ~/ <span class="number">2</span>;</span><br><span class="line">          <span class="comment">// If you&#x27;ve reached the end of the available word pairings...</span></span><br><span class="line">          <span class="keyword">if</span> (index &gt;= _suggestions.length) &#123;</span><br><span class="line">            <span class="comment">// ...then generate 10 more and add them to the suggestions list.</span></span><br><span class="line">            _suggestions.addAll(generateWordPairs().take(<span class="number">10</span>));</span><br><span class="line">          &#125;</span><br><span class="line">          <span class="keyword">return</span> _buildRow(_suggestions[index]);</span><br><span class="line">        &#125;);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  Widget _buildRow(WordPair pair) &#123;</span><br><span class="line">    <span class="keyword">final</span> <span class="built_in">bool</span> alreadySaved = _saved.contains(pair);</span><br><span class="line">    <span class="keyword">return</span> ListTile(</span><br><span class="line">      title: Text(</span><br><span class="line">        pair.asPascalCase,</span><br><span class="line">        style: _biggerFont,</span><br><span class="line">      ),</span><br><span class="line">      trailing: <span class="keyword">new</span> Icon(</span><br><span class="line">        <span class="comment">// Add the lines from here...</span></span><br><span class="line">        alreadySaved ? Icons.favorite : Icons.favorite_border,</span><br><span class="line">        color: alreadySaved ? Colors.red : <span class="keyword">null</span>,</span><br><span class="line">      ), <span class="comment">// ... to here.</span></span><br><span class="line">      onTap: () &#123;</span><br><span class="line">        <span class="comment">// Add 9 lines from here...</span></span><br><span class="line">        setState(() &#123;</span><br><span class="line">          <span class="keyword">if</span> (alreadySaved) &#123;</span><br><span class="line">            _saved.remove(pair);</span><br><span class="line">          &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            _saved.add(pair);</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">      &#125;,</span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">void</span> _pushSaved() &#123;</span><br><span class="line">    Navigator.of(context).push(</span><br><span class="line">      <span class="keyword">new</span> MaterialPageRoute&lt;<span class="keyword">void</span>&gt;(</span><br><span class="line">        <span class="comment">// Add 20 lines from here...</span></span><br><span class="line">        builder: (BuildContext context) &#123;</span><br><span class="line">          <span class="keyword">final</span> <span class="built_in">Iterable</span>&lt;ListTile&gt; tiles = _saved.map(</span><br><span class="line">                (WordPair pair) &#123;</span><br><span class="line">              <span class="keyword">return</span> <span class="keyword">new</span> ListTile(</span><br><span class="line">                title: <span class="keyword">new</span> Text(</span><br><span class="line">                  pair.asPascalCase,</span><br><span class="line">                  style: _biggerFont,</span><br><span class="line">                ),</span><br><span class="line">              );</span><br><span class="line">            &#125;,</span><br><span class="line">          );</span><br><span class="line">          <span class="keyword">final</span> <span class="built_in">List</span>&lt;Widget&gt; divided = ListTile.divideTiles(</span><br><span class="line">            context: context,</span><br><span class="line">            tiles: tiles,</span><br><span class="line">          ).toList();</span><br><span class="line"></span><br><span class="line">          <span class="keyword">return</span> <span class="keyword">new</span> Scaffold(</span><br><span class="line">            appBar: <span class="keyword">new</span> AppBar(</span><br><span class="line">              title: <span class="keyword">const</span> Text(<span class="string">&#x27;Saved  suggestions&#x27;</span>),</span><br><span class="line">            ),</span><br><span class="line">            body: <span class="keyword">new</span> ListView(children: divided),</span><br><span class="line">          );</span><br><span class="line">        &#125;,</span><br><span class="line">      ), <span class="comment">// ... to here.</span></span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">RandomWords</span> <span class="keyword">extends</span> <span class="title">StatefulWidget</span> </span>&#123;</span><br><span class="line">  <span class="meta">@override</span></span><br><span class="line">  State&lt;StatefulWidget&gt; createState() &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> RandomWordState();</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>按钮的话是通过增加一个 <code>onPressed: _pushSaved</code>方法来实现，js里面对于这种突然而然出来的参数已经见怪不怪了。。路由则是通过 <code>Navigator.of(context).push( MaterialPageRoute(builder:Widget) )</code>来实现。其中用到了一些简单的图片，都是内置的。</p>
]]></content>
      <categories>
        <category>flutter</category>
      </categories>
      <tags>
        <tag>flutter</tag>
      </tags>
  </entry>
  <entry>
    <title>RxJava学习记录1</title>
    <url>/2017/12/11/RxJava%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%951/</url>
    <content><![CDATA[<p>之前就已经听说过这个了，一直没有引入到项目中去，然后看过就忘了，所以现在准备重新捡起来。</p>
<p>首先是gradle设置</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">implementation &#39;io.reactivex.rxjava2:rxjava:2.1.0&#39;</span><br><span class="line">implementation &#39;io.reactivex.rxjava2:rxandroid:2.0.1&#39;</span><br></pre></td></tr></table></figure>
<p>然后是<a id="more"></a></p>
<h2 id="基本操作"><a href="#基本操作" class="headerlink" title="基本操作"></a>基本操作</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">Observable&lt;String&gt; observable &#x3D; Observable.create(new ObservableOnSubscribe&lt;String&gt;() &#123;</span><br><span class="line">    @Override</span><br><span class="line">    public void subscribe(ObservableEmitter&lt;String&gt; e) throws Exception &#123;</span><br><span class="line">        e.onNext(&quot;123&quot;);</span><br><span class="line">        e.onNext(&quot;456&quot;);</span><br><span class="line">        e.onComplete();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">Observer&lt;String&gt; observer &#x3D; new Observer&lt;String&gt;() &#123;</span><br><span class="line">    @Override</span><br><span class="line">    public void onSubscribe(Disposable d) &#123;</span><br><span class="line">        Log.i(TAG, &quot;onSubscribe: &quot;);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    public void onNext(String s) &#123;</span><br><span class="line">        Log.i(TAG, &quot;onNext: &quot; + s);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    public void onError(Throwable e) &#123;</span><br><span class="line">        Log.i(TAG, &quot;onError: &quot;);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    public void onComplete() &#123;</span><br><span class="line">        Log.i(TAG, &quot;onComplete: &quot;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line">observable.subscribe(observer);</span><br></pre></td></tr></table></figure>
<p>这里面涉及到的东西也就两个，一个是创建被观察者，重写subscribe ，在里面写一些自定义的动作，里面的参数是发给观察者的。<br>然后是创建观察者，被观察者调用订阅方法拿到观察者的引用，之后会按照被观察者的流程调用相应的方法<br>输出是</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">12-11 06:52:14.454 3517-3517&#x2F;com.example.alan.rxpractice I&#x2F;Activity1: onSubscribe: </span><br><span class="line">12-11 06:52:14.454 3517-3517&#x2F;com.example.alan.rxpractice I&#x2F;Activity1: onNext: 123</span><br><span class="line">12-11 06:52:14.454 3517-3517&#x2F;com.example.alan.rxpractice I&#x2F;Activity1: onNext: 456</span><br><span class="line">12-11 06:52:14.454 3517-3517&#x2F;com.example.alan.rxpractice I&#x2F;Activity1: onComplete: </span><br></pre></td></tr></table></figure>

<p>Observable<br>Observable的其他几种创建方法：</p>
<ol>
<li>使用Observable.just()创建被观察者<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Observable&lt;String&gt; just &#x3D; Observable.just(&quot;123&quot;, &quot;456&quot;);</span><br></pre></td></tr></table></figure></li>
<li>使用Observable.from()创建被观察者<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">String [] words &#x3D; &#123;&quot;123&quot;, &quot;456&quot;&#125;;</span><br><span class="line">Observable observable3 &#x3D; Observable.from(words);</span><br></pre></td></tr></table></figure>
或者<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">List&lt;String&gt; list &#x3D; new ArrayList&lt;String&gt;();</span><br><span class="line">list.add(&quot;123&quot;);</span><br><span class="line">list.add(&quot;456&quot;);</span><br><span class="line">Observable observable4 &#x3D; Observable.from(list);</span><br></pre></td></tr></table></figure>
效果相同</li>
</ol>
<h2 id="线程控制-——-Scheduler"><a href="#线程控制-——-Scheduler" class="headerlink" title="线程控制 —— Scheduler"></a>线程控制 —— Scheduler</h2><p>在RxJava 中，Scheduler ——调度器，相当于线程控制器，RxJava 通过它来指定每一段代码应该运行在什么样的线程。RxJava 已经内置了几个 Scheduler ，它们已经适合大多数的使用场景：</p>
<pre><code>Schedulers.immediate(): 直接在当前线程运行，相当于不指定线程。这是默认的 Scheduler。
Schedulers.newThread(): 总是启用新线程，并在新线程执行操作。
Schedulers.io(): I/O 操作（读写文件、读写数据库、网络信息交互等）所使用的 Scheduler。行为模式和 newThread() 差不多，区别在于 io() 的内部实现是是用一个无数量上限的线程池，可以重用空闲的线程，因此多数情况下 io() 比 newThread() 更有效率。不要把计算工作放在 io() 中，可以避免创建不必要的线程。
Schedulers.computation(): 计算所使用的 Scheduler。这个计算指的是 CPU 密集型计算，即不会被 I/O 等操作限制性能的操作，例如图形的计算。这个 Scheduler 使用的固定的线程池，大小为 CPU 核数。不要把 I/O 操作放在 computation() 中，否则 I/O 操作的等待时间会浪费 CPU。
另外， Android 还有一个专用的 AndroidSchedulers.mainThread()，它指定的操作将在 Android 主线程运行。</code></pre>
<p>有了这几个 Scheduler ，就可以使用 subscribeOn() 和 observeOn() 两个方法来对线程进行控制了。 * subscribeOn(): 指定 subscribe() 所发生的线程，即 Observable.OnSubscribe 被激活时所处的线程。或者叫做事件产生的线程。 * observeOn(): 指定 Subscriber 所运行在的线程。或者叫做事件消费的线程。</p>
<h2 id="操作符分类"><a href="#操作符分类" class="headerlink" title="操作符分类"></a>操作符分类</h2><p>按照官方(<a href="http://reactivex.io/)%E7%9A%84%E5%88%86%E7%B1%BB%EF%BC%8C%E6%93%8D%E4%BD%9C%E7%AC%A6%E5%A4%A7%E8%87%B4%E5%88%86%E4%B8%BA%E4%BB%A5%E4%B8%8B%E5%87%A0%E7%A7%8D%EF%BC%9A">http://reactivex.io/)的分类，操作符大致分为以下几种：</a></p>
<pre><code>Creating Observables(Observable的创建操作符)，比如：Observable.create()、Observable.just()、Observable.from()等等；

Transforming Observables(Observable的转换操作符)，比如：observable.map()、observable.flatMap()、
observable.buffer()等等；

Filtering Observables(Observable的过滤操作符)，比如：observable.filter()、observable.sample()、observable.take()等等；

Combining Observables(Observable的组合操作符)，比如：observable.join()、observable.merge()、observable.combineLatest()等等；

Error Handling Operators(Observable的错误处理操作符)，比如:observable.onErrorResumeNext()、observable.retry()等等；

Observable Utility Operators(Observable的功能性操作符)，比如：observable.subscribeOn()、observable.observeOn()、observable.delay()等等；

Conditional and Boolean Operators(Observable的条件操作符)，比如：observable.amb()、observable.contains()、observable.skipUntil()等等；

Mathematical and Aggregate Operators(Observable数学运算及聚合操作符)，比如：observable.count()、observable.reduce()、observable.concat()等等；

其他如observable.toList()、observable.connect()、observable.publish()等等；</code></pre>
<p>感谢：<a href="http://gank.io/post/560e15be2dca930e00da1083#toc_1">给Android开发者的RxJava详解</a><br>感谢：<a href="http://gank.io/post/56e80c2c677659311bed9841">RxJava 与 Retrofit 结合的最佳实践</a><br>感谢：<a href="http://blog.csdn.net/job_hesc/article/details/46242117">RxJava使用介绍（二） RxJava的操作符</a></p>
]]></content>
      <categories>
        <category>android_app</category>
      </categories>
  </entry>
  <entry>
    <title>mac下尝试zsh</title>
    <url>/2018/12/28/mac%E4%B8%8B%E5%B0%9D%E8%AF%95zsh/</url>
    <content><![CDATA[<p>这几天尝试了一下 zsh，是linux shell 的一种<a id="more"></a>，mac下默认提供了六种shell，可以通过</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">cat /etc/shells</span><br></pre></td></tr></table></figure>
<p>查看，</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> List of acceptable shells <span class="keyword">for</span> chpass(1).</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> Ftpd will not allow users to connect who are not using</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> one of these shells.</span></span><br><span class="line"></span><br><span class="line">/bin/bash</span><br><span class="line">/bin/csh</span><br><span class="line">/bin/ksh</span><br><span class="line">/bin/sh</span><br><span class="line">/bin/tcsh</span><br><span class="line">/bin/zsh</span><br></pre></td></tr></table></figure>
<p>默认使用的bash，这也是大多数linux发行版的默认选择，zsh是另外一种shell，关于它们的不同，可以自行搜索。</p>
<p>mac上虽然自带了zsh，但是用<code>zsh --version</code>查看版本可以发现还是几年前的比较老的版本，于是想安装最新的版本，但是好像没法update ,只能自己另外安装，下面是安装步骤：</p>
<ol>
<li><p>先安装 homebrew</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">/usr/bin/ruby -e &quot;$(curl -fsSL 		https://raw.githubusercontent.com/Homebrew/install/master/install)&quot;</span><br></pre></td></tr></table></figure>
<p>来源于官网 <a href="https://brew.sh/">https://brew.sh/</a></p>
</li>
<li><p>安装zsh</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">brew install zsh zsh-completions</span><br></pre></td></tr></table></figure>
<p>来源：<a href="https://github.com/robbyrussell/oh-my-zsh/wiki/Installing-ZSH">https://github.com/robbyrussell/oh-my-zsh/wiki/Installing-ZSH</a></p>
</li>
<li><p>添加刚刚安装的zsh路径到系统记录<br>查看当前系统的shell </p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">cat /etc/shells</span><br></pre></td></tr></table></figure>
<p>我们添加刚刚下载的新的zsh路径<code>/usr/local/bin/zsh</code>到最下面一行</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">vim /etc/shells</span><br></pre></td></tr></table></figure>
<p>…(vim操作自行研究)</p>
<p>添加完成后再次查看</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;</span><span class="bash">&gt; cat /etc/shells</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> List of acceptable shells <span class="keyword">for</span> chpass(1).</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> Ftpd will not allow users to connect who are not using</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> one of these shells.</span></span><br><span class="line"></span><br><span class="line">/bin/bash</span><br><span class="line">/bin/csh</span><br><span class="line">/bin/ksh</span><br><span class="line">/bin/sh</span><br><span class="line">/bin/tcsh</span><br><span class="line">/bin/zsh</span><br><span class="line">/usr/local/bin/zsh</span><br></pre></td></tr></table></figure></li>
<li><p>设置为<code>/usr/local/bin/zsh</code>为默认的shell</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">chsh -s /usr/local/bin/zsh</span><br></pre></td></tr></table></figure>
<p>不要漏了上面第3步，否则会提示 <code>chsh: /usr/local/bin/zsh: non-standard shell</code>,</p>
<p>确认设置成功：关闭终端重新打开，</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">echo #SHELL         // 应该显示的是 /usr/local/bin/zsh</span><br><span class="line"><span class="meta">#</span><span class="bash">SHELL --version    // 应该显示的是最新的版本，比如 5.6.x</span></span><br></pre></td></tr></table></figure></li>
<li><p>安装 oh-my-zsh</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">sh -c &quot;$(curl -fsSL https://raw.githubusercontent.com/robbyrussell/oh-my-zsh/master/tools/install.sh)&quot;</span><br></pre></td></tr></table></figure>
<p>来源：<a href="https://github.com/robbyrussell/oh-my-zsh">https://github.com/robbyrussell/oh-my-zsh</a></p>
<p>安装成功后可以看到 </p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">           __                                     __   </span><br><span class="line">    ____  / /_     ____ ___  __  __   ____  _____/ /_  </span><br><span class="line">   / __ \/ __ \   / __ `__ \/ / / /  /_  / / ___/ __ \ </span><br><span class="line">  / /_/ / / / /  / / / / / / /_/ /    / /_(__  ) / / / </span><br><span class="line">  \____/_/ /_/  /_/ /_/ /_/\__, /    /___/____/_/ /_/  </span><br><span class="line">                          /____/                       ....is now installed!</span><br><span class="line">Please look over the ~/.zshrc file to select plugins, themes, and options.</span><br><span class="line">p.s. Follow us at https://twitter.com/ohmyzsh.</span><br><span class="line">   </span><br><span class="line">p.p.s. Get stickers and t-shirts at https://shop.planetargon.com.</span><br></pre></td></tr></table></figure></li>
<li><p>设置主题</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">vim ~/.zshrc </span><br></pre></td></tr></table></figure>
<p>修改 <code>ZSH_THEME</code> 设置主题 ，比如 <code>ys</code>,</p>
<p> 执行</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">source ~/.zshrc</span><br></pre></td></tr></table></figure>
<p>使它生效</p>
</li>
<li><p>因为我们使用了新的shell，所以之前设置的环境变量和设置都无效了，所以还需要把之前的设置拷贝过来，之前的设置都在文件<code>~/.bash_profile</code>里，拷贝到<code>~/.zshrc</code>中</p>
</li>
<li><p>背景色，字体和颜色这些都是在终端的偏好设置里面设置，我们可以另外设置几个比较方便的别名，比如</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">alias zshrc=&quot;vim ~/.zshrc&quot;</span><br><span class="line">alias rcupdate=&quot;source ~/.zshrc&quot;</span><br><span class="line">alias stashpull=&quot;git stash &amp;&amp; git pull &amp;&amp; git stash pop&quot;</span><br><span class="line">alias xxxx=&quot;cd ~/desktop/xxxx&quot;</span><br></pre></td></tr></table></figure>
<p>把这些内容添加到<code>~/.zshrc</code>文件的末尾，就可以直接使用<code>zshrc</code>,<code>rcupdate</code>,<code>stashpull</code>,<code>xxxx</code>等自定义命令了</p>
</li>
</ol>
]]></content>
      <tags>
        <tag>其他</tag>
      </tags>
  </entry>
  <entry>
    <title>python flask 设置</title>
    <url>/2018/07/20/python-flask-%E8%AE%BE%E7%BD%AE/</url>
    <content><![CDATA[<p>几个月之前刚学python后看完了狗书，照着上面写完了flask的项目，然后在公司内部写了个后台网站，主要是数据库的操作和调用外部工具.然后就没管了。<br>现在接入sdk的时候需要一个游戏服务器，只好自己搭一个来测试。发现flask相关的东西又忘光了。。。<a id="more"></a></p>
<p>环境 ：python 3.6 ,vscode </p>
<ol>
<li><p>首先是建立虚拟目录 : <code>python -m venv venv</code> </p>
</li>
<li><p>windows下，编写一个bat : <code>start venv\scripts\activate.bat</code> ，双击bat启动虚拟环境</p>
<p> linux下，terminal中执行 <code>source venv/bin/activate </code> 启动虚拟环境</p>
</li>
<li><p>进入虚拟环境，pip install flask</p>
</li>
<li><p>新建python文件，输入</p>
 <figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># -*- coding:utf-8 -*-</span></span><br><span class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> Flask</span><br><span class="line"></span><br><span class="line">app = Flask(__name__)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&#x27;/&#x27;</span>,methods=[<span class="string">&#x27;GET&#x27;</span>, <span class="string">&#x27;POST&#x27;</span>]</span>)</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">hello_world</span>():</span></span><br><span class="line">    <span class="keyword">return</span> <span class="string">&#x27;Hello Flask!&#x27;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">     app.run(host=<span class="string">&#x27;0.0.0.0&#x27;</span>,port=<span class="number">5000</span>,debug=<span class="literal">True</span>)</span><br></pre></td></tr></table></figure></li>
<li><p>在vscode中ctrl+p, 输入&gt;python ,选择调试器，选择venv,这时候flask应该不会报错了</p>
</li>
<li><p>虚拟环境中直接运行python文件</p>
</li>
</ol>
]]></content>
      <categories>
        <category>python</category>
      </categories>
  </entry>
  <entry>
    <title>protocol buffer的序列化过程</title>
    <url>/2017/12/06/protocol-buffer%E7%9A%84%E5%BA%8F%E5%88%97%E5%8C%96%E8%BF%87%E7%A8%8B/</url>
    <content><![CDATA[<p>网上看到一篇很详细的文章，因为涉及到很多图片，所以直接发地址把</p>
<a id="more"></a>

<p><a href="http://blog.csdn.net/carson_ho/article/details/70568606">文章</a></p>
<p>protocol buffer序列化过的对象，最终转成二进制流，它的形式是T-L-V的格式，</p>
<h4 id="1-Tag"><a href="#1-Tag" class="headerlink" title="1. Tag"></a>1. Tag</h4><ul>
<li><p>定义：经过 <code>Protocol Buffer</code>采用<code>Varint</code> &amp; <code>Zigzag</code>编码后 的消息字段 标识号 &amp; 数据类型 的值</p>
</li>
<li><p>作用：标识 字段</p>
<blockquote>
<ol>
<li>存储了字段的标识号（<code>field_number</code>）和 数据类型（<code>wire_type</code>），即<code>Tag</code> = 字段数据类型（<code>wire_type</code>） + 标识号（<code>field_number</code>）</li>
<li>占用 一个字节 的长度（如果标识号超过了16，则占用多一个字节的位置）</li>
<li>解包时，<code>Protocol Buffer</code>根据 <code>Tag</code> 将 <code>Value</code> 对应于消息中的 字段</li>
</ol>
</blockquote>
</li>
<li><p>具体使用</p>
</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// Tag 的具体表达式如下</span></span><br><span class="line"> Tag  = (field_number &lt;&lt; <span class="number">3</span>) | wire_type</span><br><span class="line"><span class="comment">// 参数说明：</span></span><br><span class="line"><span class="comment">// field_number：对应于 .proto文件中消息字段的标识号，表示这是消息里的第几个字段</span></span><br><span class="line"><span class="comment">// field_number &lt;&lt; 3：表示 field_number = 将 Tag的二进制表示 右移三位 后的值 </span></span><br><span class="line"><span class="comment">// field_num左移3位不会导致数据丢失，因为表示范围还是足够大地去表示消息里的字段数目</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//  wire_type：表示 字段 的数据类型</span></span><br><span class="line"><span class="comment">//  wire_type = Tag的二进制表示 的最低三位值</span></span><br><span class="line"><span class="comment">//   wire_type的取值</span></span><br><span class="line"> <span class="class"><span class="keyword">enum</span> <span class="title">WireType</span> </span>&#123; </span><br><span class="line">      WIRETYPE_VARINT = <span class="number">0</span>, </span><br><span class="line">      WIRETYPE_FIXED64 = <span class="number">1</span>, </span><br><span class="line">      WIRETYPE_LENGTH_DELIMITED = <span class="number">2</span>, </span><br><span class="line">      WIRETYPE_START_GROUP = <span class="number">3</span>, </span><br><span class="line">      WIRETYPE_END_GROUP = <span class="number">4</span>, </span><br><span class="line">      WIRETYPE_FIXED32 = <span class="number">5</span></span><br><span class="line">   &#125;;</span><br><span class="line"><span class="comment">// 从上面可以看出，`wire_type`最多占用 3位 的内存空间（因为 3位 足以表示 0-5 的二进制）</span></span><br><span class="line"><span class="comment">//其中，3，4已经弃用，对于0，1，5类型，L位可以省略掉，也就是只需要T-V表示即可，对于2类型，才需要TLV表示</span></span><br></pre></td></tr></table></figure>
<p><img src="http://upload-images.jianshu.io/upload_images/944365-ecd00f3d1fd8bbf7.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="wire_type对应数据类型"></p>
<ul>
<li>实例说明</li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;&#x2F; 消息对象</span><br><span class="line"> message person</span><br><span class="line"> &#123; </span><br><span class="line">    required int32     id &#x3D; 1;  </span><br><span class="line">    &#x2F;&#x2F; wire type &#x3D; 0，field_number &#x3D;1 </span><br><span class="line">    required string    name &#x3D; 2;  </span><br><span class="line">    &#x2F;&#x2F; wire type &#x3D; 2，field_number &#x3D;2 </span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;  如果一个Tag的二进制 &#x3D; 0001 0010</span><br><span class="line">标识号 &#x3D; field_number &#x3D; field_number  &lt;&lt; 3 &#x3D;右移3位 &#x3D;  0000 0010 &#x3D; 2</span><br><span class="line">数据类型 &#x3D; wire_type &#x3D; 最低三位表示 &#x3D; 010 &#x3D; 2</span><br></pre></td></tr></table></figure>


<h3 id="2-Value"><a href="#2-Value" class="headerlink" title="2. Value"></a>2. Value</h3><p>经过 <code>Protocol Buffer</code>采用<code>Varint</code> &amp; <code>Zigzag</code>编码后 的消息字段的值</p>
<h4 id="实例说明"><a href="#实例说明" class="headerlink" title="实例说明"></a>实例说明</h4><p>下面通过一个实例进行整个编码过程的说明：</p>
<ul>
<li>消息说明</li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">message Test</span><br><span class="line">&#123;</span><br><span class="line"></span><br><span class="line">required int32 id1 &#x3D; 1；</span><br><span class="line"></span><br><span class="line">required int32 id2 &#x3D; 2；</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; 在代码中给id1 附上1个字段值：296</span><br><span class="line">&#x2F;&#x2F; 在代码中给id2 附上1个字段值：296</span><br><span class="line">Test.setId1（300）；</span><br><span class="line">Test.setId2（296）；</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; 编码结果为：二进制字节流 &#x3D; [8，-84，2，16, -88, 2]</span><br><span class="line">&#x2F;&#x2F;8和16是编码后的tag的值，其余字节表示value编码后的值</span><br></pre></td></tr></table></figure>
<p>对于String类型，value则直接是其UTF8的字节表示，L则是其长度</p>
<p>对于嵌套类型，则表示有可能是TL-TLV-TLV</p>
<p>还有一种情况，则是<code>packed</code>修饰的 <code>repeat</code> 字段，可以存储为TL-VVVVV的形式</p>
<p>比较核心和有意思的则是它编码的方法,从效果来看很像huffman coding，思想都是把高频的数据进行压缩，比如</p>
<p>低于256的int值，我们不需要4字节去存储，可以去掉高位的三字节0位，压缩为1字节去存储</p>
<p><code>Varint</code>编码:</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">writeVarint32</span><span class="params">(<span class="keyword">int</span> n)</span> </span>&#123;   </span><br><span class="line">  <span class="keyword">int</span> idx = <span class="number">0</span>;  </span><br><span class="line">  <span class="keyword">while</span> (<span class="keyword">true</span>) &#123;  </span><br><span class="line">    <span class="keyword">if</span> ((n &amp; ~<span class="number">0x7F</span>) == <span class="number">0</span>) &#123;  </span><br><span class="line">      <span class="comment">//n &amp; ~0x7F表示和1000 0000相与，判断条件则表示最高位是否为1，即最后七位</span></span><br><span class="line">      <span class="comment">//或者不足七bit位的时候，直接赋值n,表示头部补0，并且退出循环</span></span><br><span class="line">      i32buf[idx++] = (<span class="keyword">byte</span>)n;  </span><br><span class="line">      <span class="keyword">break</span>;  </span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;  </span><br><span class="line">        <span class="comment">// 取出字节串末7位然后高位补1，存到buf里面取</span></span><br><span class="line">      i32buf[idx++] = (<span class="keyword">byte</span>)((n &amp; <span class="number">0x7F</span>) | <span class="number">0x80</span>);</span><br><span class="line">      <span class="comment">//将n字节串整体往右移7位，继续从字节串的末尾选取7位，高位补1存入，直到取完为止。</span></span><br><span class="line">      n &gt;&gt;&gt;= <span class="number">7</span>;  </span><br><span class="line">    &#125;  </span><br><span class="line">  &#125;  </span><br><span class="line">  trans_.write(i32buf, <span class="number">0</span>, idx); </span><br><span class="line">      <span class="comment">//将上述形成的每个字节 按序拼接 成一个字节串 即该字节串就是经过Varint编码后的字节</span></span><br><span class="line">&#125;  </span><br></pre></td></tr></table></figure>
<p>采用Varint编码，对于高位为0，不足4字节的正数，值越小编码后生成的byte值就越小，但对于负数，由于计算机里面有符号数负数表示为高位1，那么采用Varint编码的时候，则会把4byte的数据转成5byte，因此在数据中有负数的时候，需要先用 <code>Zigzag</code>编码转一下</p>
<h4 id="Zigzag编码方式详解"><a href="#Zigzag编码方式详解" class="headerlink" title="Zigzag编码方式详解"></a><code>Zigzag</code>编码方式详解</h4><h4 id="i-简介"><a href="#i-简介" class="headerlink" title="i. 简介"></a>i. 简介</h4><ul>
<li><p>定义：一种变长的编码方式</p>
</li>
<li><p>原理：使用 无符号数 来表示 有符号数字；</p>
</li>
<li><p>作用：使得绝对值小的数字都可以采用较少 字节 来表示； </p>
<p>​</p>
<blockquote>
<p>  特别是对 表示负数的数据 能更好地进行数据压缩</p>
</blockquote>
</li>
</ul>
<h4 id="b-原理"><a href="#b-原理" class="headerlink" title="b. 原理"></a>b. 原理</h4><ul>
<li>源码分析</li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">public int int_to_zigzag(int n)</span><br><span class="line">&#123;</span><br><span class="line">        return (n &lt;&lt;1) ^ (n &gt;&gt;31);   </span><br><span class="line">        &#x2F;&#x2F; 对于sint 32 数据类型，使用Zigzag编码过程如下：</span><br><span class="line">        &#x2F;&#x2F; 1. 将二进制表示数 左移1位（左移 &#x3D; 整个二进制左移，低位补0）</span><br><span class="line">        &#x2F;&#x2F; 2. 将二进制表示数 右移31位 </span><br><span class="line">              &#x2F;&#x2F; 对于右移：</span><br><span class="line">              &#x2F;&#x2F; 首位是1的二进制（有符号数），是算数右移，即右移后左边补1</span><br><span class="line">              &#x2F;&#x2F; 首位是0的二进制（无符号数），是逻辑左移，即右移后左边补0</span><br><span class="line">        &#x2F;&#x2F; 3. 将上述二者进行异或</span><br><span class="line"></span><br><span class="line">        &#x2F;&#x2F; 对于sint 64 数据类型 则为： return  (n &lt;&lt; 1&gt; ^ (n &gt;&gt; 63) ；</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; 附：将Zigzag值解码为整型值</span><br><span class="line">public int zigzag_to_int(int n) </span><br><span class="line">&#123;</span><br><span class="line">        return(n &gt;&gt;&gt; 1) ^ -(n &amp; 1);</span><br><span class="line">&#x2F;&#x2F; 右移时，需要用不带符号的移动，否则如果第一位数据位是1的话，就会补1</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>比如-2，2表示为0000 0010，-2则是1111 1110，按照公式，-2左移一位，得到1111 1100，-2右移31位，得到1111 1111，两者异或，得到0000 0011，十进制是3，这样子，-2就转成了3</p>
<h3 id="对比于XML-的序列化-amp-反序列化过程"><a href="#对比于XML-的序列化-amp-反序列化过程" class="headerlink" title="对比于XML 的序列化 &amp; 反序列化过程"></a>对比于<code>XML</code> 的序列化 &amp; 反序列化过程</h3><p>XML的反序列化过程如下： </p>
<ol>
<li>从文件中读取出字符串 </li>
<li>将字符串转换为 <code>XML</code> 文档对象结构模型 </li>
<li>从 <code>XML</code> 文档对象结构模型中读取指定节点的字符串 </li>
<li>将该字符串转换成指定类型的变量</li>
</ol>
<p>上述过程非常复杂，其中，将 <code>XML</code> 文件转换为文档对象结构模型的过程通常需要完成词法文法分析等大量消耗 CPU 的复杂计算。</p>
<p>因为序列化 &amp; 反序列化过程简单，所以序列化 &amp; 反序列化过程速度非常快，这也是 <code>Protocol Buffer</code>效率高的原因</p>
<h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><ul>
<li><code>Protocol Buffer</code>的序列化 &amp; 反序列化简单 &amp; 速度快的原因是：<br>a.  编码 / 解码 方式简单（只需要简单的数学运算 = 位移等等）<br>b. 采用 <strong>Protocol Buffer 自身的框架代码 和 编译器</strong> 共同完成</li>
<li><code>Protocol Buffer</code>的数据压缩效果好（即序列化后的数据量体积小）的原因是：<br>a. 采用了独特的编码方式，如<code>Varint</code>、<code>Zigzag</code>编码方式等等<br>b. 采用<code>T - L - V</code> 的数据存储方式：减少了分隔符的使用 &amp; 数据存储得紧凑</li>
</ul>
]]></content>
      <categories>
        <category>通用</category>
      </categories>
  </entry>
  <entry>
    <title>《java并发编程的艺术》outline</title>
    <url>/2018/08/07/%E3%80%8Ajava%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B%E7%9A%84%E8%89%BA%E6%9C%AF%E3%80%8Boutline/</url>
    <content><![CDATA[<p>最近几天把618在京东买的《java并发编程的艺术》看完了，感觉挺不错的，很多东西都是第一次看到这么详细的内容，可以和《深入理解Java虚拟机(第2版)》配合看，推荐先看后面这一本<a id="more"></a></p>
<h2 id="Java并发编程的限制"><a href="#Java并发编程的限制" class="headerlink" title="Java并发编程的限制"></a>Java并发编程的限制</h2><ol>
<li>上下文切换</li>
<li>死锁</li>
<li>资源限制</li>
</ol>
<h2 id="底层实现原理"><a href="#底层实现原理" class="headerlink" title="底层实现原理"></a>底层实现原理</h2><h3 id="volatile"><a href="#volatile" class="headerlink" title="volatile"></a>volatile</h3><ol>
<li>插入了汇编的lock指令，由处理器实现</li>
</ol>
<h3 id="synchronized"><a href="#synchronized" class="headerlink" title="synchronized"></a>synchronized</h3><ol>
<li>锁对象： 普通同步方法的锁是当前实例，静态同步方法的锁是当前类的class对象</li>
<li>jvm使用Monitor对象来实现锁，包括 monitorenter 和 monitorexit 指令</li>
<li>锁的升级和对比：<ul>
<li>无锁状态</li>
<li>偏向锁：java对象头和栈帧简单记录线程id，对比确定线程锁状态</li>
<li>轻量级锁 </li>
<li>重量级锁</li>
</ul>
</li>
</ol>
<h3 id="原子操作的实现原理"><a href="#原子操作的实现原理" class="headerlink" title="原子操作的实现原理"></a>原子操作的实现原理</h3><ul>
<li>处理器实现原子操作:<ul>
<li>总线锁定</li>
<li>缓存锁定</li>
</ul>
</li>
<li>Java实现原子操作: CAS，CAS的底层实现是处理器提供的指令</li>
</ul>
<h2 id="Java内存模型"><a href="#Java内存模型" class="headerlink" title="Java内存模型"></a>Java内存模型</h2><p>(这部分很多地方都有了)<br>Java中，实例域，静态域和数组都存在堆内存中，堆内存在线程之间共享。局部变量不会共享，不存在内存可见性问题。</p>
<p>内存模型抽象图：<br>线程，线程本地内存，主存 结构图</p>
<p>Java涉及的重排序：</p>
<ol>
<li>编译器优化的重排序</li>
<li>指令级并行的重排序</li>
<li>内存系统的重排序：主要是内存的加载和存储的顺序</li>
</ol>
<p>内存屏障：  </p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">load&#x2F;store  </span><br><span class="line">code </span><br><span class="line">load&#x2F;store</span><br></pre></td></tr></table></figure>
<p>确保在执行code的前后，先读取主存中的最新值/存储最新值到主存</p>
<p>volatile内存语义：</p>
<ul>
<li>可见性 ： 对于一个volatile变量的读，总是能看到任意线程堆这个volatile变量的最后的写入。通过插入内存屏障来实现，从结局上看是限制了指令的重排序。<ul>
<li>写一个volatile变量时，JMM会把该线程对应的本地内存中的共享变量值刷新到主存</li>
<li>读一个volatile变量时，JMM会把该线程对应的本地内存置为无效，线程将从主存中读取变量的值</li>
</ul>
</li>
<li>原子性 ： 对于一个voloatile变量的读/写具有原子性，但是对于volatile++ 这种复合操作不保证原子性</li>
</ul>
<p>CAS ： CAS操作同时具有volatile读和写的内存语义，这个是通过java底层代码获取的编译器的功能</p>
<p>final 变量的内存语义：</p>
<ul>
<li>构造函数内对final域写入，和随后把这个对象的引用赋值给变量，这两个操作不能重排序</li>
<li>读一个包含final域的对象的引用，和随后初次读这个final域的值，这两个操作不能重排序</li>
</ul>
<p>happens-before 的定义和规则:</p>
<p>双重检查锁使用volatile变量的原因: 为对象分配内存和引用与对象的初始化之间可能会有重排序，导致判断空值出错，加volatile来防止这种错误</p>
<h2 id="Java并发基础"><a href="#Java并发基础" class="headerlink" title="Java并发基础"></a>Java并发基础</h2><p>终止线程：</p>
<ol>
<li>中断操作</li>
<li>使用布尔变量</li>
</ol>
<p>线程通信：</p>
<ul>
<li>volatile和synchronized关键字</li>
<li>wait/notify</li>
<li>pipe 输入输出流</li>
<li>Thread.join()</li>
</ul>
<h2 id="Java锁"><a href="#Java锁" class="headerlink" title="Java锁"></a>Java锁</h2><p>AQS ：同步队列器的原理和使用：</p>
<ul>
<li>维护一个同步队列</li>
<li>独占式同步状态获取和释放</li>
<li>共享式同步状态获取和释放</li>
</ul>
<p>重入锁的实现:</p>
<p>读写锁的实现：</p>
<p>Condition接口：</p>
<h2 id="Java并发容器和框架"><a href="#Java并发容器和框架" class="headerlink" title="Java并发容器和框架"></a>Java并发容器和框架</h2><ul>
<li>ConcurrentHashmap的实现:</li>
<li>ConcurrtntLinkedQueue的实现:</li>
<li>7种阻塞队列：  ， 阻塞队列的实现： 基于Condition的等待通知模式</li>
<li>Fork/Join 框架</li>
</ul>
<h2 id="原子操作类"><a href="#原子操作类" class="headerlink" title="原子操作类"></a>原子操作类</h2><p>共有13个：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">AtomicXXX:</span><br></pre></td></tr></table></figure>
<h2 id="Java并发工具类"><a href="#Java并发工具类" class="headerlink" title="Java并发工具类"></a>Java并发工具类</h2><ul>
<li>CountDownLatch</li>
<li>CyclicBarrier: 一个线程到达屏障时被阻塞，等最后一个线程到达才打开屏障，继续运行</li>
<li>Semaphore : </li>
<li>Exchanger :</li>
</ul>
<h2 id="线程池"><a href="#线程池" class="headerlink" title="线程池"></a>线程池</h2><h2 id="Executor框架和-FutureTask"><a href="#Executor框架和-FutureTask" class="headerlink" title="Executor框架和 FutureTask"></a>Executor框架和 FutureTask</h2><p>Runnable和Callable：</p>
<p>FutureTask: 目前Future接口的唯一实现类，可用于异步任务的取消，获取返回值等</p>
]]></content>
      <categories>
        <category>Java</category>
      </categories>
  </entry>
  <entry>
    <title>二叉树常见操作</title>
    <url>/2018/10/28/%E4%BA%8C%E5%8F%89%E6%A0%91%E5%B8%B8%E8%A7%81%E6%93%8D%E4%BD%9C/</url>
    <content><![CDATA[<p>遍历等等</p>
<a id="more"></a>

<p>Java:</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TreeNode</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> val;</span><br><span class="line">    TreeNode left;</span><br><span class="line">    TreeNode right;</span><br><span class="line"></span><br><span class="line">    TreeNode(<span class="keyword">int</span> x) &#123;</span><br><span class="line">        val = x;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;&quot;</span> + val;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//非递归的前序遍历</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> List&lt;TreeNode&gt; <span class="title">getPreOrderIteratively</span><span class="params">(TreeNode p)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> getPreOrderIteratively(p, <span class="keyword">true</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//对于非叶子节点，如果有一个子树位空会把它打印出来</span></span><br><span class="line"><span class="function"><span class="keyword">private</span> List&lt;TreeNode&gt; <span class="title">getPreOrderIteratively</span><span class="params">(TreeNode p, <span class="keyword">boolean</span> printNull)</span> </span>&#123;</span><br><span class="line">    Stack&lt;TreeNode&gt; stack = <span class="keyword">new</span> Stack&lt;&gt;();</span><br><span class="line">    List&lt;TreeNode&gt; listP = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">    <span class="keyword">while</span> (p != <span class="keyword">null</span> || !stack.isEmpty()) &#123;</span><br><span class="line">        <span class="keyword">while</span> (p != <span class="keyword">null</span>) &#123;</span><br><span class="line">            listP.add(p);</span><br><span class="line">            stack.push(p);</span><br><span class="line">            <span class="keyword">if</span> (printNull &amp;&amp; !isLeaf(p) &amp;&amp; p.left == <span class="keyword">null</span>) &#123;</span><br><span class="line">                listP.add(<span class="keyword">null</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            p = p.left;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (!stack.isEmpty()) &#123;</span><br><span class="line">            p = stack.pop();</span><br><span class="line">            <span class="keyword">if</span> (printNull &amp;&amp; !isLeaf(p) &amp;&amp; p.right == <span class="keyword">null</span>) &#123;</span><br><span class="line">                listP.add(<span class="keyword">null</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            p = p.right;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> listP;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">boolean</span> <span class="title">isLeaf</span><span class="params">(TreeNode parent)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (parent.left == <span class="keyword">null</span> &amp;&amp; parent.right == <span class="keyword">null</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">boolean</span> <span class="title">isSameTreeNode</span><span class="params">(TreeNode p1, TreeNode p2)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (p1 == <span class="keyword">null</span> &amp;&amp; p2 == <span class="keyword">null</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (p1 == <span class="keyword">null</span> || p2 == <span class="keyword">null</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> p1.val == p2.val;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//递归的层次遍历</span></span><br><span class="line"><span class="keyword">public</span> List&lt;List&lt;Integer&gt;&gt; levelOrderRecursively (TreeNode root) &#123;</span><br><span class="line">    List&lt;List&lt;Integer&gt;&gt; result = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">    result = levelOrderInternal(root, result,<span class="number">0</span>);</span><br><span class="line">    <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> List&lt;List&lt;Integer&gt;&gt; levelOrderInternal(TreeNode node, List&lt;List&lt;Integer&gt;&gt; result, <span class="keyword">int</span> level)&#123;</span><br><span class="line">    <span class="keyword">if</span>(node == <span class="keyword">null</span>) <span class="keyword">return</span> result;</span><br><span class="line">    <span class="keyword">if</span>(result.size() &lt;= level)&#123;</span><br><span class="line">        result.add(<span class="keyword">new</span> ArrayList&lt;&gt;());</span><br><span class="line">    &#125;</span><br><span class="line">    result.get(level).add(node.val);</span><br><span class="line">    levelOrderInternal(node.left,result, level+<span class="number">1</span>);</span><br><span class="line">    levelOrderInternal(node.right,result,level+<span class="number">1</span>);</span><br><span class="line">    <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//非递归的层次遍历</span></span><br><span class="line"><span class="keyword">public</span> List&lt;List&lt;Integer&gt;&gt; levelOrderIteratively(TreeNode root) &#123;</span><br><span class="line">    List&lt;List&lt;Integer&gt;&gt; ret = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">    <span class="keyword">if</span>(root ==<span class="keyword">null</span>)&#123;</span><br><span class="line">        <span class="keyword">return</span> ret;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    Queue&lt;TreeNode&gt; queue = <span class="keyword">new</span> LinkedList&lt;&gt;();</span><br><span class="line">    List&lt;Integer&gt; list = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line"></span><br><span class="line">    TreeNode levelStart = root ;</span><br><span class="line">    queue.offer(root);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span>(!queue.isEmpty())&#123;</span><br><span class="line">        TreeNode node = queue.poll();</span><br><span class="line">        <span class="keyword">if</span>(node == levelStart)&#123;</span><br><span class="line">            list = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">            ret.add(list);</span><br><span class="line">            levelStart = <span class="keyword">null</span> ;</span><br><span class="line">        &#125;</span><br><span class="line">        list.add(node.val);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span>(node.left !=<span class="keyword">null</span>)&#123;</span><br><span class="line">            queue.offer(node.left);</span><br><span class="line">            <span class="keyword">if</span>(levelStart == <span class="keyword">null</span>)&#123;</span><br><span class="line">                levelStart = node.left;</span><br><span class="line">            &#125;      </span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(node.right !=<span class="keyword">null</span>)&#123;</span><br><span class="line">            queue.offer(node.right);</span><br><span class="line">            <span class="keyword">if</span>(levelStart == <span class="keyword">null</span>)&#123;</span><br><span class="line">                levelStart = node.right ; </span><br><span class="line">            &#125; </span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> ret ;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>数据结构和算法</category>
      </categories>
      <tags>
        <tag>面试</tag>
      </tags>
  </entry>
  <entry>
    <title>一个硬币凑齐数值的问题</title>
    <url>/2018/10/25/%E4%B8%80%E4%B8%AA%E7%A1%AC%E5%B8%81%E5%87%91%E9%BD%90%E6%95%B0%E5%80%BC%E7%9A%84%E9%97%AE%E9%A2%98/</url>
    <content><![CDATA[<p>晚上看到qq群里讨论一个算法题：<br>四个人分别有10000元 A只有1元的 B只有2元的 C只有5元的 D只有10元的 </p>
<a id="more"></a>
<p>1.问现在要凑10000元 有多少方法 ？<br>2.假设投资额为10000，但最高出资的比例不能超过51%，问集资方案有多少种 ？</p>
<p>为了准备面试，第一次刷题，刷了四五天的leetcode，结果面试算法题写出来了，但还是挂了，有点迷茫睡了一觉，醒来刚好看到这个题目，顺便做一做把。因为自己完全不知道动态规划，只知道个名称，最后做出来花了很久。</p>
<p>思路的话第一时间想到的是leetcode上一个<a href="https://leetcode.com/problems/climbing-stairs/">爬楼梯</a>的题目，不过仔细算了下发现有点不太一样，一个是爬楼梯有顺序，二是爬楼梯只有1步和2步。</p>
<p>这里的话，如果我们用4种面值去凑11块钱，那么，D可能出0或者1张，如果出0张，那问题就变成了3种面值去凑11块钱，如果出1张，那么问题就变成了3种面值去凑1块钱，嗯，这是关键的部分，其他的可以类似的推算，比如4种面值去凑22块钱，那么D可能出0，1，2张，又变成3个3种面值去凑钱的问题，根据5块钱出0，1，2….等等张数的时候，3种面值去凑钱又可以变成2种面值去凑钱的问题，2种面值去凑钱的话，根据2块钱出0，1…张可以直接得出有多少种方法，比如2种面值凑3块钱，那么2块钱可以出0或者1张，有两种方法。2种面值凑4块钱，则是3种方法，因为2块钱可以出0，1，2三种，5块钱依然是3种方法。下面就是代码实现了：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        System.out.println(get4n(<span class="number">10000</span>));  <span class="comment">// 1671170501</span></span><br><span class="line">        System.out.println(get4n(<span class="number">10000</span>, <span class="number">5100</span>));  <span class="comment">//884304594</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">   <span class="comment">// 表示用4种(1,2,5,10)硬币计算凑齐n块钱有多少种方法,i表示出的10块钱的总额，例如</span></span><br><span class="line">    <span class="comment">// i==0的时候，就表示要用3种硬币凑齐所有的n块钱</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">long</span> <span class="title">get4n</span><span class="params">(<span class="keyword">int</span> n)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">long</span> sum = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt;= n; i += <span class="number">10</span>) &#123;</span><br><span class="line">            sum += get3n(n - i);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> sum;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 表示用3种(1,2,5)硬币计算凑齐n块钱有多少种方法</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">long</span> <span class="title">get3n</span><span class="params">(<span class="keyword">int</span> n)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">long</span> sum = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt;= n; i += <span class="number">5</span>) &#123;</span><br><span class="line">            sum += get2n(n - i);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> sum;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 表示用2种(1,2)硬币计算凑齐n块钱有多少种方法</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">long</span> <span class="title">get2n</span><span class="params">(<span class="keyword">int</span> n)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span> + (n / <span class="number">2</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 出的10块钱的总额不得大于 maxPer</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">long</span> <span class="title">get4n</span><span class="params">(<span class="keyword">int</span> n, <span class="keyword">int</span> maxPer)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">long</span> sum = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt;= maxPer; i += <span class="number">10</span>) &#123;</span><br><span class="line">            sum += get3n(n - i, maxPer);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> sum;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 出的5块钱的总额不得大于 maxPer</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">long</span> <span class="title">get3n</span><span class="params">(<span class="keyword">int</span> n, <span class="keyword">int</span> maxPer)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">long</span> sum = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt;= maxPer; i += <span class="number">5</span>) &#123;</span><br><span class="line">            sum += get2n(n - i, maxPer);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> sum;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">long</span> <span class="title">get2n</span><span class="params">(<span class="keyword">int</span> n, <span class="keyword">int</span> maxPer)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (n &lt; maxPer) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">1</span> + (n / <span class="number">2</span>);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">int</span> bMax = maxPer / <span class="number">2</span> - <span class="number">1</span>;</span><br><span class="line">            <span class="keyword">int</span> bMin = (n - maxPer) / <span class="number">2</span> + <span class="number">1</span>;</span><br><span class="line">            <span class="keyword">if</span> (bMax &lt; bMin) &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> bMax - bMin + <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>数据结构和算法</category>
      </categories>
  </entry>
  <entry>
    <title>关于unicode,utf,gbk</title>
    <url>/2018/08/02/%E5%85%B3%E4%BA%8Eunicode-utf-gbk/</url>
    <content><![CDATA[<h2 id="Unicode与UCS的历史"><a href="#Unicode与UCS的历史" class="headerlink" title="Unicode与UCS的历史"></a>Unicode与UCS的历史</h2><p>Unicode源于一个很简单的想法：将全世界所有的字符包含在一个集合里，计算机只要支持这一个字符集，就能显示所有的字符，再也不会有乱码了。它从0开始，为每个符号指定一个编号，这叫做”码点”（code point）。比如，码点0的符号就是null（表示所有二进制位都是0）。</p>
<a id="more"></a>

<p>Unicode的另一个设计目标，对今天影响深远，那就是对所有字符都采用16位编码（即用一个大小不超过2的16次方的整数数字给每个字符编号，注意从这个意义上也可以看出，Unicode是一种编码字符集，而非字符集编码）。但到后来连Unicode的设计者也发现，16位编码仅有65536个码位，远远不能容纳世界上所有的字符，但当意识到这个问题的时候，Unicode大部分的规范已经制定完毕，也有相当程度的普及，完全推倒重来是不现实的。这成了一个遗留问题，也是代理对（surrogate pair）这种蹩脚解决方案的发端。</p>
<p>无独有偶，在1984年，喜欢以繁多的编号糊弄群众的国际标准化组织ISO也开始着手制定解决不同语言字符数量太大问题的解决方案，这一方案被称为Universal Character Set（UCS），正式的编号是ISO-10646（记得么，ASCII是ISO-646，不知这种安排是否是故意的）。UCS-2用两个字节编码，UCS-4用4个字节编码。还是ISO高瞻远瞩，一开始就确定了UCS是一个31位的编码字符集（即用一个大小不超过2的31次方的整数数字为每个字符编号），这回真的足以容纳古往今来所有国家，所有语言所包含的字符了。虽然后来他们意识到，2的31次方个码位又实在太多了……</p>
<p>1991年，Unicode联盟与ISO的工作组终于开始讨论Unicode与UCS的合并问题。最终，两者统一了抽象字符集（即任何一个在Unicode中存在的字符，在UCS中也存在），且最靠前的65535个字符也统一了字符的编码。对于码空间，两者同意以一百一十万为限（即两者都认为虽然65536不够，但2的31次方又太大，一百一十万是个双方都可接受的码空间大小，也够用，当然，这里说的一百一十万只是个约数），Unicode将码空间扩展到了一百一十万，而UCS将永久性的不使用一百一十万以后的码位。也就是说，现在再讲Unicode只包含65536个字符是不对的。除了对已经定义的字符进行统一外，Unicode联盟与ISO工作组也同意今后任何的扩展工作两者均保持同步，因此虽然从历史的意义上讲Unicode与UCS不是一回事（甚至细节上说也不是一回事），但现在提起Unicode，指代两者均无不妥。</p>
<h2 id="GBK"><a href="#GBK" class="headerlink" title="GBK"></a>GBK</h2><p>早期的计算机使用7位的ASCII编码，为了处理汉字，程序员设计了用于简体中文的GB2312和用于繁体中文的big5。</p>
<p>GB2312(1980年)一共收录了7445个字符，包括6763个汉字和682个其它符号。汉字区的内码范围高字节从B0-F7，低字节从A1-FE，占用的码位是72*94=6768。其中有5个空位是D7FA-D7FE。在这个编码里，我们还把数学符号、罗马希腊的字母、日文的假名们都编进去了，连在 ASCII 里本来就有的数字、标点、字母都统统重新编了两个字节长的编码，这就是常说的”全角”字符，而原来在127号以下的那些就叫”半角”字符了。</p>
<p>GB2312支持的汉字太少。1995年的汉字扩展规范GBK1.0收录了21886个符号，它分为汉字区和图形符号区。汉字区包括21003个字符。</p>
<p>从ASCII、GB2312到GBK，这些编码方法是向下兼容的，即同一个字符在这些方案中总是有相同的编码，后面的标准支持更多的字符。在这些编码中，英文和中文可以统一地处理。区分中文编码的方法是高字节的最高位不为0。按照程序员的称呼，GB2312、GBK都属于双字节字符集 (DBCS)。</p>
<p>2000年的GB18030是取代GBK1.0的正式国家标准。该标准收录了27484个汉字，同时还收录了藏文、蒙文、维吾尔文等主要的少数民族文字。从汉字字汇上说，GB18030在GB13000.1的20902个汉字的基础上增加了CJK扩展A的6582个汉字（Unicode码0x3400-0x4db5），一共收录了27484个汉字。</p>
<p>CJK就是中日韩的意思。Unicode为了节省码位，将中日韩三国语言中的文字统一编码。GB13000.1就是ISO/IEC 10646-1的中文版，相当于Unicode 1.1。</p>
<p>GB18030的编码采用单字节、双字节和4字节方案。其中单字节、双字节和GBK是完全兼容的。4字节编码的码位就是收录了CJK扩展A的6582个汉字。 例如：UCS的0x3400在GB18030中的编码应该是8139EF30，UCS的0x3401在GB18030中的编码应该是8139EF31。</p>
<h2 id="Unicode转换格式（Uniform-Transformation-Format-UTF）"><a href="#Unicode转换格式（Uniform-Transformation-Format-UTF）" class="headerlink" title="Unicode转换格式（Uniform Transformation Format, UTF）"></a>Unicode转换格式（Uniform Transformation Format, UTF）</h2><p>UCS-4根据最高位为0的最高字节分成27=128个group。每个group再根据次高字节分为256个平面（plane）。每个平面根据第3个字节分为256行 （row），每行有256个码位（cell）。group 0的平面0被称作BMP（Basic Multilingual Plane），其余的称为辅助平面（缩写SMP）。如果UCS-4的前两个字节为全零，那么将UCS-4的BMP去掉前面的两个零字节就得到了UCS-2。每个平面有216=65536个码位。Unicode计划使用了17个平面，一共有17×65536=1114112个码位。在Unicode 5.0.0版本中，已定义的码位只有238605个，分布在平面0、平面1、平面2、平面14、平面15、平面16。</p>
<p><img src="/2018/08/02/%E5%85%B3%E4%BA%8Eunicode-utf-gbk/bg2014121104.png" alt="123"></p>
<p>Unicode只规定了每个字符的码点，现在，码点的范围是 0 至 0x10FFFF，码点又通常记作 U+XXXX，当中 XXXX 为 16 进位数字。Unicode没有规定这个二进制代码应该如何存储，现时流行的 UTF 为 UTF-8、UTF-16 和 UTF-32。每种 UTF 会把一个码点储存为一至多个编码单元（code unit）。例如 UTF-8 的编码单元是 8 位的字节、UTF-16 为 16 位、UTF-32 为 32 位。除 UTF-32 外，UTF-8 和 UTF-16 都是可变长度编码。</p>
<p>至于为什么要用utf,如果直接以原始码点来传输，每一个字符都将是两个字节以上，这对于英文为主的互联网来说，是非常浪费的，因为英文字母仅仅需要一个字节表示。</p>
<h3 id="utf-32"><a href="#utf-32" class="headerlink" title="utf-32"></a>utf-32</h3><p>最直观的编码方法是，每个码点使用四个字节表示，字节内容一一对应码点。这种编码方法就叫做UTF-32。比如，码点0就用四个字节的0表示，码点597D就在前面加两个字节的0。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">U+0000 &#x3D; 0x0000 0000</span><br><span class="line"></span><br><span class="line">U+597D &#x3D; 0x0000 597D</span><br></pre></td></tr></table></figure>
<p><img src="/2018/08/02/%E5%85%B3%E4%BA%8Eunicode-utf-gbk/bg2014121116.png" alt="utf-32"></p>
<p>UTF-32的优点在于，转换规则简单直观，查找效率高。缺点在于浪费空间，同样内容的英语文本，它会比ASCII编码大四倍。这个缺点很致命，导致实际上没有人使用这种编码方法，HTML 5标准就明文规定，网页不得编码成UTF-32。</p>
<h3 id="utf-16"><a href="#utf-16" class="headerlink" title="utf-16"></a>utf-16</h3><p>UTF-16编码介于UTF-32与UTF-8之间，同时结合了定长和变长两种编码方法的特点。</p>
<p>它的编码规则很简单：基本平面的字符占用2个字节，辅助平面的字符占用4个字节。也就是说，UTF-16的编码长度要么是2个字节（U+0000到U+FFFF），要么是4个字节（U+010000到U+10FFFF）。</p>
<p><img src="/2018/08/02/%E5%85%B3%E4%BA%8Eunicode-utf-gbk/bg2014121106.png" alt="utf-16"></p>
<p>于是就有一个问题，当我们遇到两个字节，怎么看出它本身是一个字符，还是需要跟其他两个字节放在一起解读？</p>
<p>在基本平面内，从U+D800到U+DFFF是一个空段，即这些码点不对应任何字符。因此，这个空段可以用来映射辅助平面的字符。对应这些字符至少需要20个二进制位。</p>
<p>为什么是20个二进制位？辅助平面 的最大码位是0x10FFFF，减去0x10000后，最大值是0xFFFFF，所以肯定可以用20个二进制位表示</p>
<p>UTF-16将这20位拆成两半，前10位映射在U+D800到U+DBFF（空间大小210），称为高位（H），后10位映射在U+DC00到U+DFFF（空间大小210），称为低位（L）。这意味着，一个辅助平面的字符，被拆成两个基本平面的字符表示。 </p>
<p><img src="/2018/08/02/%E5%85%B3%E4%BA%8Eunicode-utf-gbk/bg2014121117.png" alt="utf-16-2"></p>
<p>Unicode码点转成UTF-16的时候，首先区分这是基本平面字符，还是辅助平面字符。如果是前者，直接将码点转为对应的十六进制形式，长度为两字节。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">U+597D &#x3D; 0x597D</span><br></pre></td></tr></table></figure>
<p>如果是辅助平面字符，Unicode 3.0版给出了转码公式。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">H &#x3D; Math.floor((c-0x10000) &#x2F; 0x400)+0xD800</span><br><span class="line"></span><br><span class="line">L &#x3D; (c - 0x10000) % 0x400 + 0xDC00</span><br></pre></td></tr></table></figure>
<p>以字符为例，它是一个辅助平面字符，码点为U+1D306，将其转为UTF-16的计算过程如下。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">H &#x3D; Math.floor((0x1D306-0x10000)&#x2F;0x400)+0xD800 &#x3D; 0xD834</span><br><span class="line"></span><br><span class="line">L &#x3D; (0x1D306-0x10000) % 0x400+0xDC00 &#x3D; 0xDF06</span><br></pre></td></tr></table></figure>
<p>所以，字符的UTF-16编码就是0xD834 0xDF06，长度为四个字节。</p>
<p><img src="/2018/08/02/%E5%85%B3%E4%BA%8Eunicode-utf-gbk/bg2014121118.png" alt="utf-16-3"></p>
<p>相应的，如果第一个码点是 U+D800 至 U+DBFF，我们便知道它的代码对的高代理项（high surrogate），之后应该伴随一个 U+DC00 至 U+DFFF 的低代理项（low surrogate）。然后，我们用下列公式把代理对 (H, L) 变换成真实的码点：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">codepoint &#x3D; 0x10000 + (H − 0xD800) × 0x400 + (L − 0xDC00)</span><br></pre></td></tr></table></figure>
<p>举个例子，高音谱号字符 𝄞 → U+1D11E 不是 BMP 之内的字符。在 JSON 中可写成转义序列 \uD834\uDD1E，我们解析第一个 \uD834 得到码点 U+D834，我们发现它是 U+D800 至 U+DBFF 内的码点，所以它是高代理项。然后我们解析下一个转义序列 \uDD1E 得到码点 U+DD1E，它在 U+DC00 至 U+DFFF 之内，是合法的低代理项。我们计算其码点：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">H &#x3D; 0xD834, L &#x3D; 0xDD1E</span><br><span class="line">codepoint &#x3D; 0x10000 + (H − 0xD800) × 0x400 + (L − 0xDC00)</span><br><span class="line">          &#x3D; 0x10000 + (0xD834 - 0xD800) × 0x400 + (0xDD1E − 0xDC00)</span><br><span class="line">          &#x3D; 0x10000 + 0x34 × 0x400 + 0x11E</span><br><span class="line">          &#x3D; 0x10000 + 0xD000 + 0x11E</span><br><span class="line">          &#x3D; 0x1D11E</span><br></pre></td></tr></table></figure>

<h3 id="utf-8"><a href="#utf-8" class="headerlink" title="utf-8"></a>utf-8</h3><p>UTF-8 的编码单元是 8 位字节，每个码点编码成 1 至 4 个字节。它的编码方式很简单，按照码点的范围，把码点的二进位分拆成 1 至最多 4 个字节：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">码点范围 	      码点位数 	字节1 	        字节2 	         字节3 	         字节4</span><br><span class="line">U+0000 ~ U+007F 	7 	0xxxxxxx 			</span><br><span class="line">U+0080 ~ U+07FF 	11 	110xxxxx 	10xxxxxx 		</span><br><span class="line">U+0800 ~ U+FFFF 	16 	1110xxxx 	10xxxxxx 	10xxxxxx 	</span><br><span class="line">U+10000 ~ U+10FFFF 	21 	11110xxx 	10xxxxxx 	10xxxxxx 	10xxxxxx</span><br></pre></td></tr></table></figure>
<p>这个编码方法的好处之一是，码点范围 U+0000 ~ U+007F 编码为一个字节，与 ASCII 编码兼容。这范围的 Unicode 码点也是和 ASCII 字符相同的。因此，一个 ASCII 文本也是一个 UTF-8 文本。</p>
<p>我们举一个例子解析多字节的情况，欧元符号 € → U+20AC：</p>
<ol>
<li>U+20AC 在 U+0800 ~ U+FFFF 的范围内，应编码成 3 个字节。</li>
<li>U+20AC 的二进位为 10000010101100</li>
<li>3 个字节的情况我们要 16 位的码点，所以在前面补两个 0，成为 0010000010101100</li>
<li>按上表把二进位分成 3 组：0010, 000010, 101100</li>
<li>加上每个字节的前缀：11100010, 10000010, 10101100</li>
<li>用十六进位表示即：0xE2, 0x82, 0xAC</li>
</ol>
<p>最后，是一个例子</p>
<p>作者：uuspider<br>链接：<a href="https://www.zhihu.com/question/23374078/answer/65352538">https://www.zhihu.com/question/23374078/answer/65352538</a></p>
<p>举一个例子：It’s 知乎日报</p>
<p>你看到的unicode字符集是这样的编码表：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">I 0049</span><br><span class="line">t 0074</span><br><span class="line">&#39; 0027</span><br><span class="line">s 0073</span><br><span class="line">  0020</span><br><span class="line">知 77e5</span><br><span class="line">乎 4e4e</span><br><span class="line">日 65e5</span><br><span class="line">报 62a5</span><br></pre></td></tr></table></figure>
<p>每一个字符对应一个十六进制数字。计算机只懂二进制，因此，严格按照unicode的方式(UCS-2)，应该这样存储：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">I 00000000 01001001</span><br><span class="line">t 00000000 01110100</span><br><span class="line">&#39; 00000000 00100111</span><br><span class="line">s 00000000 01110011</span><br><span class="line">  00000000 00100000</span><br><span class="line">知 01110111 11100101</span><br><span class="line">乎 01001110 01001110</span><br><span class="line">日 01100101 11100101</span><br><span class="line">报 01100010 10100101</span><br></pre></td></tr></table></figure>
<p>这个字符串总共占用了18个字节，但是对比中英文的二进制码，可以发现，英文前9位都是0！浪费啊，浪费硬盘，浪费流量。怎么办？UTF。UTF-8是这样做的：</p>
<ol>
<li>单字节的字符，字节的第一位设为0，对于英语文本，UTF-8码只占用一个字节，和ASCII码完全相同；</li>
<li>n个字节的字符(n&gt;1)，第一个字节的前n位设为1，第n+1位设为0，后面字节的前两位都设为10，这n个字节的其余空位填充该字符unicode码，高位用0补足。</li>
</ol>
<p>这样就形成了如下的UTF-8标记位：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">0xxxxxxx110xxxxx </span><br><span class="line">10xxxxxx1110xxxx 10xxxxxx </span><br><span class="line">10xxxxxx11110xxx 10xxxxxx 10xxxxxx </span><br><span class="line">10xxxxxx111110xx 10xxxxxx 10xxxxxx 10xxxxxx </span><br><span class="line">10xxxxxx1111110x 10xxxxxx 10xxxxxx 10xxxxxx 10xxxxxx 10xxxxxx</span><br><span class="line">... ...</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>于是，”It’s 知乎日报“就变成了：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">I 01001001</span><br><span class="line">t 01110100</span><br><span class="line">&#39; 00100111</span><br><span class="line">s 01110011</span><br><span class="line">  00100000</span><br><span class="line">知 11100111 10011111 10100101</span><br><span class="line">乎 11100100 10111001 10001110</span><br><span class="line">日 11100110 10010111 10100101</span><br><span class="line">报 11100110 10001010 10100101</span><br></pre></td></tr></table></figure>
<p>和上边的方案对比一下，英文短了，每个中文字符却多用了一个字节。但是整个字符串只用了17个字节，比上边的18个短了一点点。</p>
<blockquote>
<p>参考资料:</p>
<ol>
<li><a href="https://baike.baidu.com/item/UNICODE">https://baike.baidu.com/item/UNICODE</a></li>
<li><a href="https://www.zhihu.com/question/23374078">https://www.zhihu.com/question/23374078</a></li>
<li><a href="http://www.ruanyifeng.com/blog/2014/12/unicode.html">http://www.ruanyifeng.com/blog/2014/12/unicode.html</a></li>
</ol>
</blockquote>
]]></content>
      <categories>
        <category>通用</category>
      </categories>
  </entry>
  <entry>
    <title>安卓测试-Mockito框架</title>
    <url>/2018/12/13/%E5%AE%89%E5%8D%93%E6%B5%8B%E8%AF%95-Mockito%E6%A1%86%E6%9E%B6/</url>
    <content><![CDATA[<p>Mockito是一个用于java单元测试中的mocking框架<a id="more"></a>，mock就是模拟的意思，就是能够模拟一些类和方法的实现。当需要测试的类需要一个依赖类的时候，如果依赖类的获取很麻烦，那么可以直接使用Mock方法来模拟这个类，方便测试。</p>
<p><a href="https://static.javadoc.io/org.mockito/mockito-core/2.23.4/org/mockito/Mockito.html">官方文档</a></p>
<h2 id="引入"><a href="#引入" class="headerlink" title="引入"></a>引入</h2><p>build.gradle里面增加</p>
<figure class="highlight groovy"><table><tr><td class="code"><pre><span class="line">testImplementation <span class="string">&quot;org.mockito:mockito-core:+&quot;</span></span><br><span class="line">androidTestImplementation <span class="string">&quot;org.mockito:mockito-android:+&quot;</span>  <span class="comment">//看了下好像没几个类，可能以后会增加功能</span></span><br></pre></td></tr></table></figure>
<h2 id="常用方法"><a href="#常用方法" class="headerlink" title="常用方法"></a>常用方法</h2><h3 id="验证行为"><a href="#验证行为" class="headerlink" title="验证行为"></a>验证行为</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">//Let&#x27;s import Mockito statically so that the code looks clearer</span></span><br><span class="line"><span class="keyword">import</span> <span class="keyword">static</span> org.mockito.Mockito.*;</span><br><span class="line"></span><br><span class="line"><span class="comment">//mock creation</span></span><br><span class="line">List mockedList = mock(List.class);</span><br><span class="line"></span><br><span class="line"><span class="comment">//using mock object</span></span><br><span class="line">mockedList.add(<span class="string">&quot;one&quot;</span>);</span><br><span class="line">mockedList.clear();</span><br><span class="line"></span><br><span class="line"><span class="comment">//verification</span></span><br><span class="line">verify(mockedList).add(<span class="string">&quot;one&quot;</span>);</span><br><span class="line">verify(mockedList).clear();</span><br></pre></td></tr></table></figure>
<h3 id="Stubbing"><a href="#Stubbing" class="headerlink" title="Stubbing"></a>Stubbing</h3> <figure class="highlight java"><table><tr><td class="code"><pre><span class="line"> <span class="comment">//You can mock concrete classes, not just interfaces</span></span><br><span class="line">LinkedList mockedList = mock(LinkedList.class);</span><br><span class="line"></span><br><span class="line"><span class="comment">//stubbing</span></span><br><span class="line">when(mockedList.get(<span class="number">0</span>)).thenReturn(<span class="string">&quot;first&quot;</span>);</span><br><span class="line">when(mockedList.get(<span class="number">1</span>)).thenThrow(<span class="keyword">new</span> RuntimeException());</span><br><span class="line"></span><br><span class="line">doThrow(<span class="keyword">new</span> RuntimeException()).when(mockedList).clear();</span><br><span class="line"></span><br><span class="line"><span class="comment">//following throws RuntimeException:</span></span><br><span class="line">mockedList.clear();</span><br><span class="line"></span><br><span class="line"><span class="comment">//following prints &quot;first&quot;</span></span><br><span class="line">System.out.println(mockedList.get(<span class="number">0</span>));</span><br><span class="line"></span><br><span class="line"><span class="comment">//following throws runtime exception</span></span><br><span class="line">System.out.println(mockedList.get(<span class="number">1</span>));</span><br><span class="line"></span><br><span class="line"><span class="comment">//following prints &quot;null&quot; because get(999) was not stubbed</span></span><br><span class="line">System.out.println(mockedList.get(<span class="number">999</span>));</span><br><span class="line"></span><br><span class="line"><span class="comment">//Although it is possible to verify a stubbed invocation, usually it&#x27;s just redundant</span></span><br><span class="line"><span class="comment">//If your code cares what get(0) returns, then something else breaks (often even before verify() gets executed).</span></span><br><span class="line"><span class="comment">//If your code doesn&#x27;t care what get(0) returns, then it should not be stubbed. Not convinced? See here.</span></span><br><span class="line">verify(mockedList).get(<span class="number">0</span>);</span><br></pre></td></tr></table></figure>
<h3 id="参数匹配"><a href="#参数匹配" class="headerlink" title="参数匹配"></a>参数匹配</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//stubbing using built-in anyInt() argument matcher</span></span><br><span class="line">when(mockedList.get(anyInt())).thenReturn(<span class="string">&quot;element&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//stubbing using custom matcher (let&#x27;s say isValid() returns your own matcher implementation):</span></span><br><span class="line">when(mockedList.contains(argThat(isValid()))).thenReturn(<span class="string">&quot;element&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//following prints &quot;element&quot;</span></span><br><span class="line">System.out.println(mockedList.get(<span class="number">999</span>));</span><br><span class="line"></span><br><span class="line"><span class="comment">//you can also verify using an argument matcher</span></span><br><span class="line">verify(mockedList).get(anyInt());</span><br><span class="line"></span><br><span class="line"><span class="comment">//argument matchers can also be written as Java 8 Lambdas</span></span><br><span class="line">verify(mockedList).add(argThat(someString -&gt; someString.length() &gt; <span class="number">5</span>));</span><br></pre></td></tr></table></figure>
<h3 id="验证方法的调用次数"><a href="#验证方法的调用次数" class="headerlink" title="验证方法的调用次数"></a>验证方法的调用次数</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">//using mock</span></span><br><span class="line">mockedList.add(<span class="string">&quot;once&quot;</span>);</span><br><span class="line"></span><br><span class="line">mockedList.add(<span class="string">&quot;twice&quot;</span>);</span><br><span class="line">mockedList.add(<span class="string">&quot;twice&quot;</span>);</span><br><span class="line"></span><br><span class="line">mockedList.add(<span class="string">&quot;three times&quot;</span>);</span><br><span class="line">mockedList.add(<span class="string">&quot;three times&quot;</span>);</span><br><span class="line">mockedList.add(<span class="string">&quot;three times&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//following two verifications work exactly the same - times(1) is used by default</span></span><br><span class="line">verify(mockedList).add(<span class="string">&quot;once&quot;</span>);</span><br><span class="line">verify(mockedList, times(<span class="number">1</span>)).add(<span class="string">&quot;once&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//exact number of invocations verification</span></span><br><span class="line">verify(mockedList, times(<span class="number">2</span>)).add(<span class="string">&quot;twice&quot;</span>);</span><br><span class="line">verify(mockedList, times(<span class="number">3</span>)).add(<span class="string">&quot;three times&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//verification using never(). never() is an alias to times(0)</span></span><br><span class="line">verify(mockedList, never()).add(<span class="string">&quot;never happened&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//verification using atLeast()/atMost()</span></span><br><span class="line">verify(mockedList, atLeastOnce()).add(<span class="string">&quot;three times&quot;</span>);</span><br><span class="line">verify(mockedList, atLeast(<span class="number">2</span>)).add(<span class="string">&quot;three times&quot;</span>);</span><br><span class="line">verify(mockedList, atMost(<span class="number">5</span>)).add(<span class="string">&quot;three times&quot;</span>);</span><br></pre></td></tr></table></figure>
<h3 id="验证方法的调用顺序"><a href="#验证方法的调用顺序" class="headerlink" title="验证方法的调用顺序"></a>验证方法的调用顺序</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// A. Single mock whose methods must be invoked in a particular order</span></span><br><span class="line">List singleMock = mock(List.class);</span><br><span class="line"></span><br><span class="line"><span class="comment">//using a single mock</span></span><br><span class="line">singleMock.add(<span class="string">&quot;was added first&quot;</span>);</span><br><span class="line">singleMock.add(<span class="string">&quot;was added second&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//create an inOrder verifier for a single mock</span></span><br><span class="line">InOrder inOrder = inOrder(singleMock);</span><br><span class="line"></span><br><span class="line"><span class="comment">//following will make sure that add is first called with &quot;was added first&quot;, then with &quot;was added second&quot;</span></span><br><span class="line">inOrder.verify(singleMock).add(<span class="string">&quot;was added first&quot;</span>);</span><br><span class="line">inOrder.verify(singleMock).add(<span class="string">&quot;was added second&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// B. Multiple mocks that must be used in a particular order</span></span><br><span class="line">List firstMock = mock(List.class);</span><br><span class="line">List secondMock = mock(List.class);</span><br><span class="line"></span><br><span class="line"><span class="comment">//using mocks</span></span><br><span class="line">firstMock.add(<span class="string">&quot;was called first&quot;</span>);</span><br><span class="line">secondMock.add(<span class="string">&quot;was called second&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//create inOrder object passing any mocks that need to be verified in order</span></span><br><span class="line">InOrder inOrder = inOrder(firstMock, secondMock);</span><br><span class="line"></span><br><span class="line"><span class="comment">//following will make sure that firstMock was called before secondMock</span></span><br><span class="line">inOrder.verify(firstMock).add(<span class="string">&quot;was called first&quot;</span>);</span><br><span class="line">inOrder.verify(secondMock).add(<span class="string">&quot;was called second&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// Oh, and A + B can be mixed together at will</span></span><br></pre></td></tr></table></figure>
<h3 id="验证方法没有执行"><a href="#验证方法没有执行" class="headerlink" title="验证方法没有执行"></a>验证方法没有执行</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//using mocks - only mockOne is interacted</span></span><br><span class="line">mockOne.add(<span class="string">&quot;one&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//ordinary verification</span></span><br><span class="line">verify(mockOne).add(<span class="string">&quot;one&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//verify that method was never called on a mock</span></span><br><span class="line">verify(mockOne, never()).add(<span class="string">&quot;two&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//verify that other mocks were not interacted</span></span><br><span class="line">verifyZeroInteractions(mockTwo, mockThree);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//using mocks</span></span><br><span class="line">mockedList.add(<span class="string">&quot;one&quot;</span>);</span><br><span class="line">mockedList.add(<span class="string">&quot;two&quot;</span>);</span><br><span class="line"></span><br><span class="line">verify(mockedList).add(<span class="string">&quot;one&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//following verification will fail</span></span><br><span class="line">verifyNoMoreInteractions(mockedList);</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h3 id="doReturn-doThrow-doAnswer-doNothing-doCallRealMethod"><a href="#doReturn-doThrow-doAnswer-doNothing-doCallRealMethod" class="headerlink" title="doReturn()|doThrow()| doAnswer()|doNothing()|doCallRealMethod()"></a>doReturn()|doThrow()| doAnswer()|doNothing()|doCallRealMethod()</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">doThrow(<span class="keyword">new</span> RuntimeException()).when(mockedList).clear();</span><br><span class="line"></span><br><span class="line"><span class="comment">//following throws RuntimeException:</span></span><br><span class="line">mockedList.clear();</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">when(mock.someMethod(anyString())).thenAnswer(</span><br><span class="line">    <span class="keyword">new</span> Answer() &#123;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> Object <span class="title">answer</span><span class="params">(InvocationOnMock invocation)</span> </span>&#123;</span><br><span class="line">            Object[] args = invocation.getArguments();</span><br><span class="line">            Object mock = invocation.getMock();</span><br><span class="line">            <span class="keyword">return</span> <span class="string">&quot;called with arguments: &quot;</span> + Arrays.toString(args);</span><br><span class="line">        &#125;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">//Following prints &quot;called with arguments: [foo]&quot;</span></span><br><span class="line">System.out.println(mock.someMethod(<span class="string">&quot;foo&quot;</span>));</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">List list = <span class="keyword">new</span> LinkedList();</span><br><span class="line">List spy = spy(list);</span><br><span class="line"></span><br><span class="line"><span class="comment">//Impossible: real method is called so spy.get(0) throws IndexOutOfBoundsException (the list is yet empty)</span></span><br><span class="line">when(spy.get(<span class="number">0</span>)).thenReturn(<span class="string">&quot;foo&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//You have to use doReturn() for stubbing:</span></span><br><span class="line">doReturn(<span class="string">&quot;foo&quot;</span>).when(spy).get(<span class="number">0</span>);</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h3 id="参数捕捉"><a href="#参数捕捉" class="headerlink" title="参数捕捉"></a>参数捕捉</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//Impossible: real method is called so spy.get(0) throws IndexOutOfBoundsException (the list is yet empty)</span></span><br><span class="line"> when(spy.get(<span class="number">0</span>)).thenReturn(<span class="string">&quot;foo&quot;</span>);</span><br><span class="line"></span><br><span class="line"> <span class="comment">//You have to use doReturn() for stubbing</span></span><br><span class="line"> doReturn(<span class="string">&quot;foo&quot;</span>).when(spy).get(<span class="number">0</span>);</span><br></pre></td></tr></table></figure>
<h3 id="序列化的mock"><a href="#序列化的mock" class="headerlink" title="序列化的mock"></a>序列化的mock</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">List serializableMock = mock(List.class, withSettings().serializable());</span><br></pre></td></tr></table></figure>
<h3 id="验证超时"><a href="#验证超时" class="headerlink" title="验证超时"></a>验证超时</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">//passes when someMethod() is called no later than within 100 ms</span></span><br><span class="line"><span class="comment">//exits immediately when verification is satisfied (e.g. may not wait full 100 ms)</span></span><br><span class="line">verify(mock, timeout(<span class="number">100</span>)).someMethod();</span><br><span class="line"><span class="comment">//above is an alias to:</span></span><br><span class="line">verify(mock, timeout(<span class="number">100</span>).times(<span class="number">1</span>)).someMethod();</span><br><span class="line"></span><br><span class="line"><span class="comment">//passes as soon as someMethod() has been called 2 times under 100 ms</span></span><br><span class="line">verify(mock, timeout(<span class="number">100</span>).times(<span class="number">2</span>)).someMethod();</span><br><span class="line"></span><br><span class="line"><span class="comment">//equivalent: this also passes as soon as someMethod() has been called 2 times under 100 ms</span></span><br><span class="line">verify(mock, timeout(<span class="number">100</span>).atLeast(<span class="number">2</span>)).someMethod();</span><br></pre></td></tr></table></figure>
<h3 id="mock抽象类"><a href="#mock抽象类" class="headerlink" title="mock抽象类"></a>mock抽象类</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//convenience API, new overloaded spy() method:</span></span><br><span class="line">SomeAbstract spy = spy(SomeAbstract.class);</span><br><span class="line"></span><br><span class="line"><span class="comment">//Mocking abstract methods, spying default methods of an interface (only available since 2.7.13)</span></span><br><span class="line">Function function = spy(Function.class);</span><br><span class="line"></span><br><span class="line"><span class="comment">//Robust API, via settings builder:</span></span><br><span class="line">OtherAbstract spy = mock(OtherAbstract.class, withSettings()</span><br><span class="line">   .useConstructor().defaultAnswer(CALLS_REAL_METHODS));</span><br><span class="line"></span><br><span class="line"><span class="comment">//Mocking an abstract class with constructor arguments (only available since 2.7.14)</span></span><br><span class="line">SomeAbstract spy = mock(SomeAbstract.class, withSettings()</span><br><span class="line">  .useConstructor(<span class="string">&quot;arg1&quot;</span>, <span class="number">123</span>).defaultAnswer(CALLS_REAL_METHODS));</span><br><span class="line"></span><br><span class="line"><span class="comment">//Mocking a non-static inner abstract class:</span></span><br><span class="line">InnerAbstract spy = mock(InnerAbstract.class, withSettings()</span><br><span class="line">   .useConstructor().outerInstance(outerInstance).defaultAnswer(CALLS_REAL_METHODS));</span><br></pre></td></tr></table></figure>
<h3 id="自定义验证失败信息"><a href="#自定义验证失败信息" class="headerlink" title="自定义验证失败信息"></a>自定义验证失败信息</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// will print a custom message on verification failure</span></span><br><span class="line">verify(mock, description(<span class="string">&quot;This will print on failure&quot;</span>)).someMethod();</span><br><span class="line"></span><br><span class="line"><span class="comment">// will work with any verification mode</span></span><br><span class="line">verify(mock, times(<span class="number">2</span>).description(<span class="string">&quot;someMethod should be called twice&quot;</span>)).someMethod();</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h3 id="Java8匹配器支持"><a href="#Java8匹配器支持" class="headerlink" title="Java8匹配器支持"></a>Java8匹配器支持</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">// verify a list only had strings of a certain length added to it</span></span><br><span class="line"><span class="comment">// note - this will only compile under Java 8</span></span><br><span class="line">verify(list, times(<span class="number">2</span>)).add(argThat(string -&gt; string.length() &lt; <span class="number">5</span>));</span><br><span class="line"></span><br><span class="line"><span class="comment">// Java 7 equivalent - not as neat</span></span><br><span class="line">verify(list, times(<span class="number">2</span>)).add(argThat(<span class="keyword">new</span> ArgumentMatcher()&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">matches</span><span class="params">(String arg)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> arg.length() &lt; <span class="number">5</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;));</span><br><span class="line"></span><br><span class="line"><span class="comment">// more complex Java 8 example - where you can specify complex verification behaviour functionally</span></span><br><span class="line">verify(target, times(<span class="number">1</span>)).receiveComplexObject(argThat(obj -&gt; obj.getSubObject().get(<span class="number">0</span>).equals(<span class="string">&quot;expected&quot;</span>)));</span><br><span class="line"></span><br><span class="line"><span class="comment">// this can also be used when defining the behaviour of a mock under different inputs</span></span><br><span class="line"><span class="comment">// in this case if the input list was fewer than 3 items the mock returns null</span></span><br><span class="line">when(mock.someMethod(argThat(list -&gt; list.size()&lt;<span class="number">3</span>))).thenReturn(<span class="keyword">null</span>);</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h3 id="Java8-Answer接口支持"><a href="#Java8-Answer接口支持" class="headerlink" title="Java8 Answer接口支持"></a>Java8 Answer接口支持</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// answer by returning 12 every time</span></span><br><span class="line">doAnswer(invocation -&gt; <span class="number">12</span>).when(mock).doSomething();</span><br><span class="line"></span><br><span class="line"><span class="comment">// answer by using one of the parameters - converting into the right</span></span><br><span class="line"><span class="comment">// type as your go - in this case, returning the length of the second string parameter</span></span><br><span class="line"><span class="comment">// as the answer. This gets long-winded quickly, with casting of parameters.</span></span><br><span class="line">doAnswer(invocation -&gt; ((String)invocation.getArgument(<span class="number">1</span>)).length())</span><br><span class="line">    .when(mock).doSomething(anyString(), anyString(), anyString());</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h3 id="对final对象，方法，枚举的支持"><a href="#对final对象，方法，枚举的支持" class="headerlink" title="对final对象，方法，枚举的支持"></a>对final对象，方法，枚举的支持</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">final</span> <span class="class"><span class="keyword">class</span> <span class="title">FinalClass</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="keyword">final</span> String <span class="title">finalMethod</span><span class="params">()</span> </span>&#123; <span class="keyword">return</span> <span class="string">&quot;something&quot;</span>; &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">FinalClass concrete = <span class="keyword">new</span> FinalClass(); </span><br><span class="line"></span><br><span class="line">FinalClass mock = mock(FinalClass.class);</span><br><span class="line">given(mock.finalMethod()).willReturn(<span class="string">&quot;not anymore&quot;</span>);</span><br><span class="line"></span><br><span class="line">assertThat(mock.finalMethod()).isNotEqualTo(concrete.finalMethod());</span><br></pre></td></tr></table></figure>
<h2 id="创建mock对象的方法"><a href="#创建mock对象的方法" class="headerlink" title="创建mock对象的方法"></a>创建mock对象的方法</h2><h3 id="注解方法创建"><a href="#注解方法创建" class="headerlink" title="注解方法创建"></a>注解方法创建</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ArticleManagerTest</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Mock</span> <span class="keyword">private</span> ArticleCalculator calculator;</span><br><span class="line">    <span class="meta">@Mock</span> <span class="keyword">private</span> ArticleDatabase database;</span><br><span class="line">    <span class="meta">@Mock</span> <span class="keyword">private</span> UserProvider userProvider;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> ArticleManager manager;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>使用注解方法创建的时候，需要先 </p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">MockitoAnnotations.initMocks(<span class="keyword">this</span>);</span><br></pre></td></tr></table></figure>
<p>也可以使用预置的 <code>MockitoJUnitRunner</code> Runner 或者 rule: <code>MockitoRule</code>. </p>
<h3 id="直接创建"><a href="#直接创建" class="headerlink" title="直接创建"></a>直接创建</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Person mPerson = mock(Person.class); <span class="comment">//&lt;--使用mock方法</span></span><br></pre></td></tr></table></figure>
<h2 id="使用spy监视真正的对象"><a href="#使用spy监视真正的对象" class="headerlink" title="使用spy监视真正的对象"></a>使用spy监视真正的对象</h2><p>你可以创建真实对象的spy对象，当使用spy对象的时候真实的方法会被调用(假如这个方法没有被stub)<br>应当谨慎小心的使用spy对象 </p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">List list = <span class="keyword">new</span> LinkedList();</span><br><span class="line">List spy = spy(list);</span><br><span class="line"></span><br><span class="line"><span class="comment">//optionally, you can stub out some methods:</span></span><br><span class="line">when(spy.size()).thenReturn(<span class="number">100</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//using the spy calls *real* methods</span></span><br><span class="line">spy.add(<span class="string">&quot;one&quot;</span>);</span><br><span class="line">spy.add(<span class="string">&quot;two&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//prints &quot;one&quot; - the first element of a list</span></span><br><span class="line">System.out.println(spy.get(<span class="number">0</span>));</span><br><span class="line"></span><br><span class="line"><span class="comment">//size() method was stubbed - 100 is printed</span></span><br><span class="line">System.out.println(spy.size());</span><br></pre></td></tr></table></figure>
<h3 id="对spy对象要慎用when-thenReturn"><a href="#对spy对象要慎用when-thenReturn" class="headerlink" title="对spy对象要慎用when/thenReturn"></a>对spy对象要慎用when/thenReturn</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//optionally, you can verify</span></span><br><span class="line">verify(spy).add(<span class="string">&quot;one&quot;</span>);</span><br><span class="line">verify(spy).add(<span class="string">&quot;two&quot;</span>);</span><br><span class="line"> </span><br><span class="line"><span class="comment">//Impossible: real method is called so spy.get(0) </span></span><br><span class="line"><span class="comment">// throws IndexOutOfBoundsException (the list is yet empty)</span></span><br><span class="line">when(spy.get(<span class="number">0</span>)).thenReturn(<span class="string">&quot;foo&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//You have to use doReturn() for stubbing</span></span><br><span class="line">doReturn(<span class="string">&quot;foo&quot;</span>).when(spy).get(<span class="number">0</span>);  </span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>测试</category>
      </categories>
  </entry>
  <entry>
    <title>博客终于搭建起来啦</title>
    <url>/2017/11/14/%E5%8D%9A%E5%AE%A2%E7%BB%88%E4%BA%8E%E6%90%AD%E5%BB%BA%E8%B5%B7%E6%9D%A5%E5%95%A6/</url>
    <content><![CDATA[<p>心心念念好多年的个人博客终于弄出来了，到真正弄的时候才发现只花了半天就搭建好了，网上太多的参考资料，比如<a href="https://www.cnblogs.com/visugar/p/6821777.html">这个</a>,然后是<a href="http://blog.csdn.net/qq_33699981/article/details/72716951">这个</a>。<a id="more"></a>其实之前曾经帮人做一个VB作业的时候接触过IIS，那时候用IIS弄了个可以通过IP访问的地址，现在这个也算是更进一步。目前是Hexo+next+github的方案，优点是简单迅速免费。不过现在评论，统计模块都还没有加上去，也还没有买域名，这些问题看上去也是遥遥无期。</p>
<p>不知道这里会不会有人看到，如果你也想搭博客的话也可以尝试一下。Hexo是一个基于Node.js的博客框架，如果你和我一样什么都不懂也不要紧，只要知道需要安装Node.js和安装Hexo就行了，然后hexo的操作方式就是打开一个命令行，类似于git一样，但是常用命令也就个位数。next则是一个Hexo的主题，github地址在<a href="https://github.com/iissnan/hexo-theme-next">这里</a>,命令行一键安装，github则不需要介绍了吧。说了这么多其实就是一个意思，很简单，可以试试。</p>
<p>之前工作的时候其实也有很多次心动的时候，还热血来潮的想要翻译Gradle文档，翻译了两篇之后就躺在github的角落里了。。那时候的笔记本真的很烂，烂到不想开机。其实有时候完美主义挺要命的，对环境有点不满意就没有热情去做事情的性格，因为笔记本不行，然后赶上加班，就痛痛快快的放弃了庞大的翻译计划。。。。也曾经在cnblogs上写过一篇jni和java交互流程的文章，现在都忘了地址了…..回想起来那时候放弃是因为觉得才工作不久，写的不怎么样，以免误导别人。现在虽然也没有进步多少，新电脑给我加了buff！花了钱就不能亏本 -_-  。。。</p>
<p>之所以有空做这个，也是因为最近比较闲，而且刚刚买了个新的笔记本电脑，让人有开机的欲望，开机了总得找点事情做。目前的计划的话，可能会把onenote里面的笔记复制一些到这里来，也有可能另外写，总之既然期待了这么久就没有中途而废的理由啦。</p>
<blockquote>
<p>Hexo相关命令总结 :</p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">hexo clean #清除缓存</span><br><span class="line"></span><br><span class="line">hexo g  #保存修改，生成文件</span><br><span class="line"></span><br><span class="line">hexo s  #启动本地服务</span><br><span class="line"></span><br><span class="line">hexo d  #发布到远程</span><br><span class="line"></span><br><span class="line">hexo init #生成站点</span><br><span class="line"></span><br><span class="line">hexo new page &quot;xxx&quot; #生成页面</span><br><span class="line"></span><br><span class="line">hexo new &quot;&quot; #生成文章</span><br></pre></td></tr></table></figure>
<blockquote>
<p>hexo升级 :</p>
</blockquote>
<ol>
<li><code> npm outdated</code></li>
<li>修改 package.json</li>
<li><code>npm install --save</code></li>
</ol>
]]></content>
      <categories>
        <category>其他</category>
      </categories>
  </entry>
  <entry>
    <title>安卓测试-JUnit框架</title>
    <url>/2018/11/28/%E5%AE%89%E5%8D%93%E6%B5%8B%E8%AF%95-JUnit%E6%A1%86%E6%9E%B6/</url>
    <content><![CDATA[<p>JUnit是java开发的一个测试框架，Android当然也能用<a id="more"></a><br>我个人的感觉是它比较适合测试纯Java逻辑的代码，比如工具类，算法的计算，类的数据操作等等。在app -&gt; src目录下，test就是它的工作目录。 在类名字上右键，go-to，选择test，就可以自动创建一个对应的测试类。在左边的文件目录里面对测试类文件右键，run，就可以执行里面的测试方法。</p>
<h2 id="基础"><a href="#基础" class="headerlink" title="基础"></a>基础</h2><p>引入方法：</p>
<figure class="highlight groovy"><table><tr><td class="code"><pre><span class="line">testImplementation <span class="string">&#x27;junit:junit:4.12&#x27;</span></span><br></pre></td></tr></table></figure>
<p>JUnit4基础方法注解和常用的assertEquals之类的断言就不用说了，看名字基本都明白。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DateUtilTest</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String time = <span class="string">&quot;2017-10-15 16:00:02&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">long</span> timeStamp = <span class="number">1508054402000L</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Date mDate;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Before</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setUp</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;测试开始！&quot;</span>);</span><br><span class="line">        mDate = <span class="keyword">new</span> Date();</span><br><span class="line">        mDate.setTime(timeStamp);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@After</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">tearDown</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;测试结束！&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">   <span class="comment">//该方法默认会在主线程中执行</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">dateToStampTest</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        assertNotEquals(<span class="number">4</span>, DateUtil.dateToStamp(time));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test(expected = ParseException.class)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">dateToStampTest1</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        DateUtil.dateToStamp(<span class="string">&quot;2017-10-15&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="meta">@Ignore(&quot;test方法不执行\n&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;-----&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//该方法会在一个单独的线程中执行，单位为毫秒，这里超时时间为2秒</span></span><br><span class="line">    <span class="meta">@Test(timeout = 2000)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testTimeout</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;timeout method called in thread &quot;</span> + Thread.currentThread().getName());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test(expected = IndexOutOfBoundsException.class)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">empty</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">new</span> ArrayList&lt;Object&gt;().get(<span class="number">0</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>不过这里的@Test注解还有两个属性可以指定</p>
<h2 id="Hamcrest与assertThat"><a href="#Hamcrest与assertThat" class="headerlink" title="Hamcrest与assertThat"></a>Hamcrest与assertThat</h2><p>Hamcrest是一个表达式类库，它提供了一套匹配符Matcher，JUnit4结合Hamcrest提供了一个全新的断言语法：assertThat，结合Hamcrest提供的匹配符，可以表达全部的测试思想。使用gradle引入JUnit4.12时已经包含了hamcrest-core.jar、hamcrest-library.jar、hamcrest-integration.jar这三个jar包，所以我们无需额外再单独导入hamcrest相关类库。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//注意由于没有导包，直接用is(),both等等会找不到方法，他们基本都是CoreMatchers类的方法</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AssertThatTest</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testMobilePhone</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        Assert.assertThat(<span class="string">&quot;13588888888&quot;</span>, <span class="keyword">new</span> IsMobilePhoneMatcher());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testAssertThat1</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        Assert.assertThat(<span class="number">6</span>, CoreMatchers.is(<span class="number">6</span>));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testAssertThat2</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        Assert.assertThat(<span class="keyword">null</span>, IsNull.nullValue());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testAssertThat3</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        Assert.assertThat(<span class="string">&quot;Hello python world&quot;</span>,CoreMatchers.both(CoreMatchers.startsWith(<span class="string">&quot;Hello&quot;</span>)).and(CoreMatchers.endsWith(<span class="string">&quot;World&quot;</span>)));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="自定义匹配器"><a href="#自定义匹配器" class="headerlink" title="自定义匹配器"></a>自定义匹配器</h2><p>assertThat会用到匹配器，我们也可以自己定义匹配规则</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> org.hamcrest.BaseMatcher;</span><br><span class="line"><span class="keyword">import</span> org.hamcrest.Description;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.regex.Matcher;</span><br><span class="line"><span class="keyword">import</span> java.util.regex.Pattern;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">IsMobilePhoneMatcher</span> <span class="keyword">extends</span> <span class="title">BaseMatcher</span>&lt;<span class="title">String</span>&gt; </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 进行断言判定，返回true则断言成功，否则断言失败</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">matches</span><span class="params">(Object item)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (item == <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        Pattern pattern = Pattern.compile(<span class="string">&quot;(1|861)(3|5|7|8)\\d&#123;9&#125;$*&quot;</span>);</span><br><span class="line">        Matcher matcher = pattern.matcher((String) item);</span><br><span class="line">        <span class="keyword">return</span> matcher.find();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 给期待断言成功的对象增加描述</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">describeTo</span><span class="params">(Description description)</span> </span>&#123;</span><br><span class="line">        description.appendText(<span class="string">&quot;预计此字符串是手机号码！&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 给断言失败的对象增加描述</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">describeMismatch</span><span class="params">(Object item, Description description)</span> </span>&#123;</span><br><span class="line">        description.appendText(item.toString() + <span class="string">&quot;不是手机号码！&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="自定义-Rule"><a href="#自定义-Rule" class="headerlink" title="自定义 Rule"></a>自定义 Rule</h2><p>Rule给我的感觉类似于动态代理里面的InvocationHandler，在测试类中使用 @Rule 注解标记一个 Rule 接口的实现类，那么在 Rule 的 apply方法中就可以拦截到这个测试类的所有测试方法。</p>
<p>自带的Rule示例：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//在测试方法内部能知道当前的方法名。</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">NameRuleTest</span> </span>&#123; <span class="comment">//用@Rule注解来标记一个TestRule，注意必须是public修饰的 </span></span><br><span class="line">    <span class="meta">@Rule</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">final</span> TestName name = <span class="keyword">new</span> TestName();</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testA</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        assertEquals(<span class="string">&quot;testA&quot;</span>, name.getMethodName());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testB</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        assertEquals(<span class="string">&quot;testB&quot;</span>, name.getMethodName());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//超时时间</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TimeoutRuleTest</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Rule</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">final</span> Timeout globalTimeout = Timeout.millis(<span class="number">20</span>);</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testInfiniteLoop1</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">for</span> (; ; ) &#123;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testInfiniteLoop2</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">for</span> (; ; ) &#123;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>自定义Rule：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 自定义<span class="doctag">@RuLL</span>  MyRule 演示</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AssertThatTest</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Rule</span></span><br><span class="line">    <span class="keyword">public</span> MyRule rule = <span class="keyword">new</span> MyRule();</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testAssertThat1</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        Assert.assertThat(<span class="number">6</span>, CoreMatchers.is(<span class="number">6</span>));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testAssertThat2</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        Assert.assertThat(<span class="keyword">null</span>, IsNull.nullValue());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testAssertThat3</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        Assert.assertThat(<span class="string">&quot;Hello python world&quot;</span>,CoreMatchers.both(CoreMatchers.startsWith(<span class="string">&quot;Hello&quot;</span>)).and(CoreMatchers.endsWith(<span class="string">&quot;World&quot;</span>)));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyRule</span> <span class="keyword">implements</span> <span class="title">TestRule</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> Statement <span class="title">apply</span><span class="params">(<span class="keyword">final</span> Statement base, <span class="keyword">final</span> Description description)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> Statement() &#123;</span><br><span class="line">                <span class="meta">@Override</span></span><br><span class="line">                <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">evaluate</span><span class="params">()</span> <span class="keyword">throws</span> Throwable </span>&#123;</span><br><span class="line">                    <span class="comment">// evaluate前执行方法相当于@Before</span></span><br><span class="line">                    String methodName = description.getMethodName(); <span class="comment">// 获取测试方法的名字</span></span><br><span class="line">                    System.out.println(methodName + <span class="string">&quot;测试开始！&quot;</span>);</span><br><span class="line"></span><br><span class="line">                    base.evaluate();  <span class="comment">// 运行的测试方法</span></span><br><span class="line"></span><br><span class="line">                    <span class="comment">// evaluate后执行方法相当于@After</span></span><br><span class="line">                    System.out.println(methodName + <span class="string">&quot;测试结束！&quot;</span>);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RepeatRule</span> <span class="keyword">implements</span> <span class="title">TestRule</span> </span>&#123; <span class="comment">//这里定义一个注解，用于动态在测试方法里指定重复次数</span></span><br><span class="line">    <span class="meta">@Retention(RetentionPolicy.RUNTIME)</span></span><br><span class="line">    <span class="meta">@Target(&#123;ElementType.METHOD&#125;)</span></span><br><span class="line">    <span class="keyword">public</span> <span class="meta">@interface</span> Repeat &#123;</span><br><span class="line">        <span class="function"><span class="keyword">int</span> <span class="title">count</span><span class="params">()</span></span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Statement <span class="title">apply</span><span class="params">(<span class="keyword">final</span> Statement base, <span class="keyword">final</span> Description description)</span> </span>&#123;</span><br><span class="line">        Statement repeatStatement = <span class="keyword">new</span> Statement() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">evaluate</span><span class="params">()</span> <span class="keyword">throws</span> Throwable </span>&#123;</span><br><span class="line">                Repeat repeat = description.getAnnotation(Repeat.class); <span class="comment">//如果有@Repeat注解，则会重复执行指定次数</span></span><br><span class="line">                <span class="keyword">if</span> (repeat != <span class="keyword">null</span>) &#123;</span><br><span class="line">                    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; repeat.count(); i++) &#123;</span><br><span class="line">                        base.evaluate();</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123; <span class="comment">//如果没有注解，则不会重复执行</span></span><br><span class="line">                    base.evaluate();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;;</span><br><span class="line">        <span class="keyword">return</span> repeatStatement;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RepeatTest</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Rule</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">final</span> RepeatRule repeatRule = <span class="keyword">new</span> RepeatRule(); <span class="comment">//该方法重复执行5次 </span></span><br><span class="line"></span><br><span class="line">    <span class="meta">@RepeatRule</span>.Repeat(count = <span class="number">5</span>)</span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testMethod</span><span class="params">()</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;---test method---&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testMethod2</span><span class="params">()</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;---test method2---&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h2 id="测试方法的执行顺序"><a href="#测试方法的执行顺序" class="headerlink" title="测试方法的执行顺序"></a>测试方法的执行顺序</h2><p> 当我们运行一个测试类里的所有测试方法时，测试方法的执行顺序并不是固定的，JUnit4提供@ FixMethodOrder注解来配置执行顺序，其可选值有：MethodSorters.NAME_ASCENDING、MethodSorters.DEFAULT、MethodSorters.JVM</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@FixMethodOrder(MethodSorters.NAME_ASCENDING)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestExecOrder</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testD</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;DDDDD&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testA</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;AAAAA&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testB</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;BBBBB&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testC</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;CCCCC&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="Test-runners"><a href="#Test-runners" class="headerlink" title="Test runners"></a>Test runners</h2><p>所有的单元测试方法都是通过Runner来执行的。Runner只是一个抽象类，它是用来跑测试用例并通知结果的，JUnit提供了很多Runner的实现类，可以根据不同的情况选择不同的test runner。</p>
<p>通过@RunWith注解，可以为我们的测试用例选定一个特定的Runner来执行。<br>默认的test runner是 BlockJUnit4ClassRunner。<br>@RunWith(JUnit4.class)，使用的依然是默认的test runner，实质上JUnit4继承自BlockJUnit4ClassRunner。</p>
<h3 id="Suite"><a href="#Suite" class="headerlink" title="Suite"></a>Suite</h3><p>Suite 翻译过来是测试套件，意思是让我们将一批其他的测试类聚集在一起，然后一起执行，这样就达到了同时运行多个测试类的目的。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RunWith(Suite.class)</span></span><br><span class="line"><span class="meta">@Suite</span>.SuiteClasses(&#123;</span><br><span class="line">        TestLogin.class,</span><br><span class="line">        TestLogout.class,</span><br><span class="line">        TestUpdate.class</span><br><span class="line">&#125;)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestSuite</span> </span>&#123;</span><br><span class="line">    <span class="comment">//不需要有任何实现方法</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>执行运行TestSuite，相当于同时执行了这3个测试类。<br>Suite还可以进行嵌套，即一个测试Suite里包含另外一个测试Suite。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RunWith(Suite.class)</span></span><br><span class="line"><span class="meta">@Suite</span>.SuiteClasses(TestSuite.class)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestSuite2</span> </span>&#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="Parameterized-参数化"><a href="#Parameterized-参数化" class="headerlink" title="Parameterized 参数化"></a>Parameterized 参数化</h3><p>假如我们有一个待测试类</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Fibonacci</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">compute</span><span class="params">(<span class="keyword">int</span> n)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> result = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">if</span> (n &lt;= <span class="number">1</span>) &#123;</span><br><span class="line">            result = n;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            result = compute(n - <span class="number">1</span>) + compute(n - <span class="number">2</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>针对这个函数，我们需要多个输入参数来验证是否正确</p>
<ol>
<li>使用构造函数来注入参数值<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"> <span class="comment">//指定Parameterized作为test runner </span></span><br><span class="line"><span class="meta">@RunWith(Parameterized.class)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestParams</span> </span>&#123;</span><br><span class="line">    <span class="comment">//这里是配置参数的数据源，该方法必须是public static修饰的，且必须返回一个可迭代的数组或者集合 </span></span><br><span class="line">    <span class="comment">// JUnit会自动迭代该数据源，自动为参数赋值，所需参数以及参数赋值顺序由构造器决定。 </span></span><br><span class="line">    <span class="meta">@Parameterized</span>.Parameters</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> List <span class="title">getParams</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> Arrays.asList(<span class="keyword">new</span> Integer[][]&#123;&#123;<span class="number">0</span>, <span class="number">0</span>&#125;, &#123;<span class="number">1</span>, <span class="number">1</span>&#125;, &#123;<span class="number">2</span>, <span class="number">1</span>&#125;, &#123;<span class="number">3</span>, <span class="number">2</span>&#125;, &#123;<span class="number">4</span>, <span class="number">3</span>&#125;, &#123;<span class="number">5</span>, <span class="number">5</span>&#125;, &#123;<span class="number">6</span>, <span class="number">8</span>&#125;&#125;);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> input;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> expected; <span class="comment">//在构造函数里，指定了2个输入参数，JUnit会在迭代数据源的时候，自动传入这2个参数。 </span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 例如：当获取到数据源的第3条数据&#123;2，1&#125;时，input=2，expected=1 </span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">TestParams</span><span class="params">(<span class="keyword">int</span> input, <span class="keyword">int</span> expected)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.input = input;</span><br><span class="line">        <span class="keyword">this</span>.expected = expected;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testFibonacci</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(input + <span class="string">&quot;,&quot;</span> + expected);</span><br><span class="line">        Assert.assertEquals(expected, Fibonacci.compute(input));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure></li>
<li>使用注解<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RunWith(Parameterized.class)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestParams2</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Parameterized</span>.Parameters</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> List <span class="title">getParams</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> Arrays.asList(<span class="keyword">new</span> Integer[][]&#123;&#123;<span class="number">0</span>, <span class="number">0</span>&#125;, &#123;<span class="number">1</span>, <span class="number">1</span>&#125;, &#123;<span class="number">2</span>, <span class="number">1</span>&#125;, &#123;<span class="number">3</span>, <span class="number">2</span>&#125;, &#123;<span class="number">4</span>, <span class="number">3</span>&#125;, &#123;<span class="number">5</span>, <span class="number">5</span>&#125;, &#123;<span class="number">6</span>, <span class="number">8</span>&#125;&#125;);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//这里必须是public，不能是private</span></span><br><span class="line">    <span class="meta">@Parameterized</span>.Parameter</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">int</span> input;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//注解括号里的参数，用来指定参数的顺序，默认为0</span></span><br><span class="line">    <span class="meta">@Parameterized</span>.Parameter(<span class="number">1</span>)</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">int</span> expected;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testFibonacci</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(input + <span class="string">&quot;,&quot;</span> + expected);</span><br><span class="line">        Assert.assertEquals(expected, Fibonacci.compute(input));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="Categories"><a href="#Categories" class="headerlink" title="Categories"></a>Categories</h3>Categories继承自Suite，但是比Suite功能更加强大，它能对测试类中的测试方法进行分类执行。当你想把不同测试类中的测试方法分在一组，Categories就很管用。</li>
</ol>
<p><a href="https://github.com/nangonghuang/AndroidTest">代码 github地址</a></p>
<p>引用：<br><a href="https://blog.csdn.net/qq_17766199/article/details/78243176">Android单元测试(一)：JUnit框架的使用</a><br><a href="https://www.jianshu.com/p/06124ddc6c68">Android单元测试</a></p>
]]></content>
      <categories>
        <category>测试</category>
      </categories>
  </entry>
  <entry>
    <title>安卓测试-Robolectric框架</title>
    <url>/2018/12/16/%E5%AE%89%E5%8D%93%E6%B5%8B%E8%AF%95-Robolectric%E6%A1%86%E6%9E%B6/</url>
    <content><![CDATA[]]></content>
  </entry>
  <entry>
    <title>求最长连续1的长度</title>
    <url>/2017/12/10/%E6%B1%82%E6%9C%80%E9%95%BF%E8%BF%9E%E7%BB%AD1%E7%9A%84%E9%95%BF%E5%BA%A6/</url>
    <content><![CDATA[<p>题目: 由0和1组成的数组[0,1,1,0,0,1,1,1]，求最长连续1的长度</p>
<a id="more"></a>

<p>周一去笔试的题目， 我在纸上写的代码就直接连续扫描了一遍数组，记录最长连续1的数量，最后输出。</p>
<p>面试的时候，面试官问我，你这个时间复杂度是On，有没有不用On的解法。</p>
<p>今天晚上洗头发无聊乱想忽然想起来这个问题，仔细想了想，二分查找快的原理是因为数组本身是有序的，这样的数组本身就包含了一些信息，查找的时候利用了这些信息，每次查找直接去掉一半的错误答案，因此能够达到Olgn的速度。那么，在这个问题里面，包含的信息是什么？01100111 ,似乎什么也没包含，可能有位运算，01标记？什么玩意儿。。突然想到，信息在”最长”这两个字里面，最长，意味着少的就不用扫描了。</p>
<p>因此可以想到这样一个算法，如果我们目前发现的最长连续1的数量是6，那么我们再遇到1的时候，直接跳6位查是不是1，如果不是1，说明这段数字不可能超过6(因为末尾不是1，最多连续5个1)，如果是1的话，那么有可能是6个1，那么依次从5，4，3位倒着查，遇到不是1直接跳出，然后重复这个过程。</p>
<p>这样子的话，最后算出来应该是最坏情况On，不过平均情况应该要比On好。当时就在想怎么到Olgn，想错了方向.</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MaxLength</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">int</span> length = <span class="number">20</span>;</span><br><span class="line">        <span class="keyword">int</span>[] data = <span class="keyword">new</span> <span class="keyword">int</span>[length];</span><br><span class="line">        Random random = <span class="keyword">new</span> Random();</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; length; i++) &#123;</span><br><span class="line">            data[i] = random.nextInt(<span class="number">2</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        getMaxSuccessiveLength1(data);</span><br><span class="line">        getMaxSuccessiveLength2(data);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">getMaxSuccessiveLength2</span><span class="params">(<span class="keyword">int</span>[] numbers)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> result = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">int</span> successiveLength = <span class="number">0</span>;   <span class="comment">//连续1的个数</span></span><br><span class="line">        <span class="keyword">int</span> accessTime = <span class="number">0</span>;   <span class="comment">//从数组读取的次数</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; numbers.length; ) &#123;</span><br><span class="line">            accessTime++;</span><br><span class="line">            <span class="keyword">if</span> (numbers[i] == <span class="number">0</span>) &#123;</span><br><span class="line">                result = (result &gt; successiveLength) ? result : successiveLength;</span><br><span class="line">                successiveLength = <span class="number">0</span>;</span><br><span class="line">                i += <span class="number">1</span>;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                successiveLength++;</span><br><span class="line">                <span class="keyword">if</span> (shouldJump(successiveLength)) &#123;</span><br><span class="line">                    result = (result &gt; successiveLength) ? result : successiveLength;</span><br><span class="line">                    <span class="keyword">int</span> jumpDistance = result;</span><br><span class="line">                    <span class="keyword">if</span> (i + jumpDistance &gt; numbers.length - <span class="number">1</span>) &#123;</span><br><span class="line">                        jumpDistance = numbers.length - <span class="number">1</span> - i;</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="keyword">if</span> (jumpDistance == <span class="number">0</span>) &#123;</span><br><span class="line">                        <span class="keyword">break</span>;</span><br><span class="line">                    &#125;</span><br><span class="line">                    i += jumpDistance;</span><br><span class="line">                    <span class="keyword">for</span> (<span class="keyword">int</span> j = i; j &gt; i - jumpDistance; j--) &#123;</span><br><span class="line">                        <span class="keyword">if</span> (numbers[j] == <span class="number">0</span>) &#123;</span><br><span class="line">                            i = j + <span class="number">1</span>;</span><br><span class="line">                            successiveLength = <span class="number">0</span>;</span><br><span class="line">                            accessTime++;</span><br><span class="line">                            <span class="keyword">break</span>;</span><br><span class="line">                        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                            accessTime++;</span><br><span class="line">                            <span class="keyword">if</span> (j == i - result + <span class="number">1</span>) &#123;</span><br><span class="line">                                successiveLength += jumpDistance;   <span class="comment">//  这一段是连续的1</span></span><br><span class="line">                                result = (result &gt; successiveLength) ? result : successiveLength;</span><br><span class="line">                                i++;</span><br><span class="line">                            &#125;</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    i++;</span><br><span class="line">                    result = (result &gt; successiveLength) ? result : successiveLength;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(<span class="string">&quot;getMaxSuccessiveLength2 = &quot;</span> + result + <span class="string">&quot;,accessTime = &quot;</span> + accessTime);</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 遇到第一个1，应该向后跳</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> successiveLength</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">boolean</span> <span class="title">shouldJump</span><span class="params">(<span class="keyword">int</span> successiveLength)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> successiveLength == <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">getMaxSuccessiveLength1</span><span class="params">(<span class="keyword">int</span>[] numbers)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> result = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">int</span> successLength = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">int</span> accessTime = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; numbers.length; i++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (numbers[i] == <span class="number">0</span>) &#123;</span><br><span class="line">                result = (result &gt; successLength) ? result : successLength;</span><br><span class="line">                successLength = <span class="number">0</span>;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                successLength++;</span><br><span class="line">            &#125;</span><br><span class="line">            accessTime++;</span><br><span class="line">            <span class="keyword">if</span> (i == numbers.length - <span class="number">1</span>) &#123;</span><br><span class="line">                result = (result &gt; successLength) ? result : successLength;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(<span class="string">&quot;getMaxSuccessiveLength1 = &quot;</span> + result + <span class="string">&quot;,accessTime = &quot;</span> + accessTime);</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line">  </span><br><span class="line">      <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">print</span><span class="params">(<span class="keyword">int</span>[] data)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; data.length; i++) &#123;</span><br><span class="line">            System.out.print(data[i] + <span class="string">&quot;,&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>这个结果是和最大连续长度有关的，最大连续长度越大，跳过的位就可能越多，但速度还是On吧</p>
]]></content>
      <categories>
        <category>数据结构和算法</category>
      </categories>
  </entry>
  <entry>
    <title>注解处理器 0</title>
    <url>/2017/12/03/%E6%B3%A8%E8%A7%A3%E5%A4%84%E7%90%86%E5%99%A8-0/</url>
    <content><![CDATA[<p>今天试着写一下ButterKnife的原理,虽然网上已经有很多说的了，但是代码还是要亲手打出来，而且网上都是旧版本的gradle，仍然用的apt插件，gradle 3.0已经不需要了，而且是不能用apt了</p>
<p>因为代码部分比较简单，所以只写一下步骤。</p>
<a id="more"></a>

<ol>
<li><p>创建一个Android项目，名字随意，Android Studio会在这个项目创建一个默认模块app 。</p>
</li>
<li><p>创建一个新的模块annotation,并且在模块里面创建一个注解类AnnotationFIELD</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.example.annotation;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.lang.annotation.Retention;</span><br><span class="line"><span class="keyword">import</span> java.lang.annotation.Target;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="keyword">static</span> java.lang.annotation.ElementType.FIELD;</span><br><span class="line"><span class="keyword">import</span> <span class="keyword">static</span> java.lang.annotation.RetentionPolicy.CLASS;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Created by alan on 2017/12/2.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Target(FIELD)</span></span><br><span class="line"><span class="meta">@Retention(CLASS)</span></span><br><span class="line"><span class="keyword">public</span> <span class="meta">@interface</span> AnnotationFIELD &#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">value</span><span class="params">()</span> <span class="keyword">default</span> 0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>并且在此模块的build.gradle文件末尾增加</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">sourceCompatibility &#x3D; &quot;1.7&quot;</span><br><span class="line">targetCompatibility &#x3D; &quot;1.7&quot;</span><br><span class="line"></span><br></pre></td></tr></table></figure></li>
<li><p>创建一个新的模块processor，并且在模块里面创建一个注解处理器MyProcessor</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.example.processor;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.example.annotation.AnnotationFIELD;</span><br><span class="line"><span class="keyword">import</span> com.google.auto.service.AutoService;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.io.Writer;</span><br><span class="line"><span class="keyword">import</span> java.util.Set;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.annotation.processing.AbstractProcessor;</span><br><span class="line"><span class="keyword">import</span> javax.annotation.processing.Processor;</span><br><span class="line"><span class="keyword">import</span> javax.annotation.processing.RoundEnvironment;</span><br><span class="line"><span class="keyword">import</span> javax.annotation.processing.SupportedAnnotationTypes;</span><br><span class="line"><span class="keyword">import</span> javax.annotation.processing.SupportedSourceVersion;</span><br><span class="line"><span class="keyword">import</span> javax.lang.model.SourceVersion;</span><br><span class="line"><span class="keyword">import</span> javax.lang.model.element.Element;</span><br><span class="line"><span class="keyword">import</span> javax.lang.model.element.TypeElement;</span><br><span class="line"><span class="keyword">import</span> javax.tools.Diagnostic;</span><br><span class="line"><span class="keyword">import</span> javax.tools.JavaFileObject;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Created by alan on 2017/12/2.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@AutoService(Processor.class)</span></span><br><span class="line"><span class="meta">@SupportedAnnotationTypes(&quot;com.example.annotation.AnnotationFIELD&quot;)</span></span><br><span class="line"><span class="meta">@SupportedSourceVersion(SourceVersion.RELEASE_8)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyProcessor</span> <span class="keyword">extends</span> <span class="title">AbstractProcessor</span> </span>&#123;</span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">final</span> String CLASS_NAME = <span class="string">&quot;GeneratedClass&quot;</span>;</span><br><span class="line">    <span class="keyword">final</span> String PACKAGENAME = <span class="keyword">this</span>.getClass().getPackage().getName();</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">process</span><span class="params">(Set&lt;? extends TypeElement&gt; set, RoundEnvironment roundEnvironment)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        StringBuilder builder = <span class="keyword">new</span> StringBuilder()</span><br><span class="line">                .append(<span class="string">&quot;package &quot;</span>)</span><br><span class="line">                .append(PACKAGENAME)</span><br><span class="line">                .append(<span class="string">&quot;;\n\n&quot;</span>)</span><br><span class="line">                .append(<span class="string">&quot;public class &quot;</span> + CLASS_NAME + <span class="string">&quot; &#123;\n\n&quot;</span>) <span class="comment">// open class</span></span><br><span class="line">                .append(<span class="string">&quot;\tpublic String getMessage() &#123;\n&quot;</span>) <span class="comment">// open method</span></span><br><span class="line">                .append(<span class="string">&quot;\t\treturn \&quot;&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// for each javax.lang.model.element.Element annotated with the AnnotationFIELD</span></span><br><span class="line">        <span class="keyword">for</span> (Element element : roundEnvironment.getElementsAnnotatedWith(AnnotationFIELD.class)) &#123;</span><br><span class="line">            String objectType = element.getSimpleName().toString();</span><br><span class="line">            printMessageInGradleConsole(<span class="string">&quot;====objectType :==== &quot;</span> + objectType);</span><br><span class="line">            <span class="comment">// this is appending to the return statement</span></span><br><span class="line">            builder.append(objectType).append(<span class="string">&quot; says hello! &quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        builder.append(<span class="string">&quot;\&quot;;\n&quot;</span>) <span class="comment">// end return</span></span><br><span class="line">                .append(<span class="string">&quot;\t&#125;\n&quot;</span>) <span class="comment">// close method</span></span><br><span class="line">                .append(<span class="string">&quot;&#125;\n&quot;</span>); <span class="comment">// close class</span></span><br><span class="line"></span><br><span class="line">        printMessageInGradleConsole(<span class="string">&quot;Package : &quot;</span> + PACKAGENAME);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span> &#123; <span class="comment">// write the file</span></span><br><span class="line">            JavaFileObject source = processingEnv.getFiler().createSourceFile(PACKAGENAME + <span class="string">&quot;.&quot;</span> + CLASS_NAME);</span><br><span class="line">            Writer writer = source.openWriter();</span><br><span class="line">            writer.write(builder.toString());</span><br><span class="line">            writer.flush();</span><br><span class="line">            writer.close();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            <span class="comment">// Note: calling e.printStackTrace() will print IO errors</span></span><br><span class="line">            <span class="comment">// that occur from the file already existing after its first run, this is normal</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">   <span class="function"><span class="keyword">void</span> <span class="title">printMessageInGradleConsole</span><span class="params">(String str)</span></span>&#123;</span><br><span class="line">     <span class="comment">//processingEnv是父类的成员变量</span></span><br><span class="line">       processingEnv.getMessager().printMessage(Diagnostic.Kind.MANDATORY_WARNING,str);</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>  然后修改这个模块的build.gradle文件:</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">apply plugin: <span class="string">&#x27;java-library&#x27;</span></span><br><span class="line"></span><br><span class="line">   dependencies &#123;</span><br><span class="line">       <span class="function">implementation <span class="title">fileTree</span><span class="params">(dir: <span class="string">&#x27;libs&#x27;</span>, include: [<span class="string">&#x27;*.jar&#x27;</span>])</span></span></span><br><span class="line"><span class="function">       implementation &#x27;com.google.auto.service:auto-service:1.0-rc3&#x27;</span></span><br><span class="line"><span class="function">       implementation <span class="title">project</span><span class="params">(<span class="string">&#x27;:annotation&#x27;</span>)</span></span></span><br><span class="line"><span class="function">   &#125;</span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function">   sourceCompatibility </span>= <span class="string">&quot;1.7&quot;</span></span><br><span class="line">   targetCompatibility = <span class="string">&quot;1.7&quot;</span></span><br></pre></td></tr></table></figure>
<p>​</p>
<blockquote>
<p>之前不能生成对应的 .class文件，就是在这里卡了一下。主要注意的地方有以下几个：</p>
<ol>
<li><p>Java的版本，1.7和1.8都可以</p>
</li>
<li><p>AutoService注解，别的地方说，添加了之后不需要设置meta文件夹了，我看Butterknife的项目里面也只加了这一行，但是我这里仍然需要@SupportedAnnotationTypes(“com.example.annotation.AnnotationFIELD”)<br>@SupportedSourceVersion(SourceVersion.RELEASE_8) _</p>
<p>这两个注解，不然无法生成类，(或者重写对应的方法 )；</p>
<p>SourceVersion，RELEASE_7或8都可以</p>
</li>
</ol>
</blockquote>
</li>
<li><p>在最开始的模块，app模块的build.gradle里面加入</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Android&#123;</span><br><span class="line">compileOptions &#123;</span><br><span class="line">        sourceCompatibility JavaVersion.VERSION_1_8</span><br><span class="line">        targetCompatibility JavaVersion.VERSION_1_8</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">dependencies&#123;</span><br><span class="line">   <span class="function">implementation <span class="title">project</span><span class="params">(<span class="string">&#x27;:annotation&#x27;</span>)</span></span></span><br><span class="line"><span class="function">   annotationProcessor <span class="title">project</span><span class="params">(<span class="string">&#x27;:processor&#x27;</span>)</span></span></span><br><span class="line"><span class="function">&#125;</span></span><br></pre></td></tr></table></figure>
<blockquote>
<p>这里要说明的是，虽然在本地建立了processor模块，但是实际上并不需要implementation，只需要annotationProcessor就行了，这个和Butterknife的处理也是一致的，而且也不需要apt插件了</p>
</blockquote>
</li>
<li><p>在app模块下的MainActivity类增加声明</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@AnnotationFIELD(3)</span></span><br><span class="line"><span class="keyword">private</span> TextView textView;</span><br></pre></td></tr></table></figure>
<p>这里只需要用一下注解就好</p>
</li>
<li><p>clean Project，Rebuild Project ,这时候应该可以在</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">app\build\generated\source\apt\debug </span><br></pre></td></tr></table></figure>
<p>目录下找到GeneratedClass这个生成类了</p>
<p>​</p>
</li>
</ol>
<p>相应的代码在<a href="https://github.com/nangonghuang/AnnotationProcess">github</a>上，打了tag v0.1</p>
]]></content>
      <categories>
        <category>Java</category>
      </categories>
  </entry>
  <entry>
    <title>注解处理器 1</title>
    <url>/2017/12/03/%E6%B3%A8%E8%A7%A3%E5%A4%84%E7%90%86%E5%99%A8-1/</url>
    <content><![CDATA[<p>上一篇中，我们生成了一个类，但是要在项目里用，还有几个问题：</p>
<ol>
<li>这个类要生成在哪个位置，项目可以引用到</li>
<li>绑定的过程是什么样的</li>
</ol>
<a id="more"></a>

<p>第一个问题，之前有apt插件，现在新版gradle(3.0)  已经自动处理了这个问题了，目前来说一般都是和绑定的类生成在同一个包下，我们需要annationProcess标注 AbstractProcessor所在的库。</p>
<p>第二个问题，如果要绑定，肯定要执行方法，联想到butterknife里面的bind方法，我们可以在这个方法里面调用生成类的构造函数，然后在生成的类的构造函数里面执行findviewbyId方法。于是问题成了，怎么可以拿到需要的数据，xxView  var = (xxView) view.findviewbyId(id)所涉及到的，view我们可以根据Activity拿到DecorView，因此还需要的是注解标记的变量类型，变量名字，此外还需要注解所在的类的名字，用于生成类。因此我们可以设想，一个生成类，类里面有一个list，保存注解的条目。</p>
<p>此外就是javaPoet的内容了，javaPoet api不熟的话挺头疼的..</p>
<p>项目结构的话，新建了一个mybutterknife的Android库，主要是定义了bind方法，然后在这个库里面引用了annotation库，这样就和ButterKnife一样用了，我们的app目录需要引用processor库和mybutterknife库，基本就是这样子，具体的注释都在代码里面</p>
<p>代码在<a href="https://github.com/nangonghuang/AnnotationProcess">github</a>上,打了tag v0.2</p>
]]></content>
      <categories>
        <category>Java</category>
      </categories>
  </entry>
  <entry>
    <title>约瑟夫问题</title>
    <url>/2017/11/21/%E7%BA%A6%E7%91%9F%E5%A4%AB%E9%97%AE%E9%A2%98/</url>
    <content><![CDATA[<p>问题描述：n个人（编号1~n)，从1开始报数，报到m的退出，剩下的人继续从1开始报数。求胜利者的编号</p>
<a id="more"></a>

<p>分析：</p>
<p>从问题来看，首先我们假设有个数组，那么第一圈(0到n)的报数结束之后，剩下的人继续报数，可是第一圈出去的人仍然在数组里面，这样肯定会影响到编号的计算，一个方法就是出去的人的位置清0，比如第一次出去的是arr[2]，那么arr[2]的值就变成0，下一次计算的时候忽略掉这个标记的位置。</p>
<p>如果不用数组，整个遍历的过程就很容易想起来链表，退出的人则直接移除节点，剩下的人继续报数那么意思是最后一个人的next指针指向第一个人，这样就是符合题目的流程。注意循环结束的条件。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;&quot;</span> + getLive(<span class="number">6</span>, <span class="number">3</span>));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">getLive</span><span class="params">(<span class="keyword">int</span> n, <span class="keyword">int</span> m)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (n == <span class="number">1</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (m == <span class="number">1</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> n;</span><br><span class="line">        &#125;</span><br><span class="line">        Node head = <span class="keyword">new</span> Node(<span class="number">0</span>);</span><br><span class="line">        Node temp = head;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; n; i++) &#123;</span><br><span class="line">            Node node = <span class="keyword">new</span> Node(i);</span><br><span class="line">            temp.next = node;</span><br><span class="line">            temp = node;</span><br><span class="line">        &#125;</span><br><span class="line">        temp.next = head;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        Node current = head;</span><br><span class="line">        Node prev = <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">int</span> i = <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">while</span> (current.next != current) &#123;</span><br><span class="line">            <span class="keyword">if</span> (i == m) &#123;  <span class="comment">//报数到m的时候，移除这个节点</span></span><br><span class="line">                removeNode(prev, current);</span><br><span class="line">                i = <span class="number">0</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            prev = current;</span><br><span class="line">            current = current.next;  </span><br><span class="line">            i++;</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println();</span><br><span class="line">        <span class="keyword">return</span> current.data + <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">removeNode</span><span class="params">(Node prev, Node current)</span> </span>&#123;</span><br><span class="line">        System.out.print(<span class="string">&quot; removeNode &quot;</span> + current.data);</span><br><span class="line">        prev.next = current.next;</span><br><span class="line">        current = <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">Node</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> data;</span><br><span class="line">        Node next;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="title">Node</span><span class="params">(<span class="keyword">int</span> data)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">this</span>.data = data;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>


<p>下面是数学上的解法，我们假设有5个人参与，每报3则出列，具体的过程如下：</p>
<p>1            12345         – 3出列，从4号继续开始报数</p>
<p>2            4512           – 1出列，从2继续开始报数</p>
<p>3             245             – 5出列，24继续报数</p>
<p>4             24                 – 2出列，剩下一个4</p>
<p>5              4</p>
<p>n个人参与的时候，出列一个人，剩下的n-1继续构成新的约瑟夫环，因此n个人的问题最后肯定可以递归的转化成1个人的问题，最后这个人在1个人的情况下就是最后生存的人，它此时的编号是1，问题是这最后一个人的在n人环里面的编号是多少？</p>
<p>观察上面的步骤，5个人的约瑟夫环，3出列后，让4号做开头，重新构成的新的4个人的环，它们有这样一个对应关系，</p>
<p>5人环里面的编号4的那个人，变成了4人环里面编号1的人</p>
<p>5人环里面的编号5的那个人，变成了4人环里面编号2的人</p>
<p>5人环里面的编号1的那个人，变成了4人环里面编号3的人</p>
<p>基于这个过程，我们可以做出这样一个推导f(5) = f(4) + 3 % 5,其中f(5)表示5人环里面的人的编号，f(4)表示4人环里面的人的编号，这个公式表示它们之间的对应关系。除5因为这是5人环。</p>
<p>同样的，我们也可以得出f(4) = (f(3) + 3) % 4，f(3) = (f(2) + 3) %3，f(2) =( f(1) + 3)%2，f(1) = 1 ;</p>
<p>在1人的情况下，生存的是人编号一定是1，</p>
<p>2人的时候，它对应的编号是  1+3 % 2 = 2 </p>
<p>3个人的时候，生存的人对应的编号是2+3%3 = 2</p>
<p>…</p>
<p>n个人的时候，对应的是f(n) = f(n-1) + 3 % n,</p>
<p>我们把m带入进去，f(n) = (f(n-1) + m) % n </p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">int</span> <span class="title">joseph</span><span class="params">(<span class="keyword">int</span> n, <span class="keyword">int</span> m)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (n == <span class="number">1</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (m == <span class="number">1</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> n;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">int</span> s = <span class="number">1</span>;  <span class="comment">//n=1的时候的值</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">2</span>; i &lt; n+<span class="number">1</span>; i++) &#123;</span><br><span class="line">        <span class="comment">//一直循环到 i = n ，就是n个人的时候的编号</span></span><br><span class="line">        s = (s + m) % i;</span><br><span class="line">        <span class="keyword">if</span> (s == <span class="number">0</span>) &#123;  <span class="comment">//编号没有0，修正为n</span></span><br><span class="line">            s = i;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> s;</span><br><span class="line">&#125;  </span><br></pre></td></tr></table></figure>
<p>结果与上面相同。</p>
]]></content>
      <categories>
        <category>数据结构和算法</category>
      </categories>
  </entry>
  <entry>
    <title>Android-binder-java层</title>
    <url>/2018/11/03/Android-binder-java%E5%B1%82/</url>
    <content><![CDATA[<p>java层分为系统服务的binder 和 bindService的 binder </p>
<a id="more"></a>

<h2 id="系统服务"><a href="#系统服务" class="headerlink" title="系统服务"></a>系统服务</h2><p>以ServiceManager.java 为例 :</p>
<p><img src="/2018/11/03/Android-binder-java%E5%B1%82/binder_5.jpg" alt="ServiceManager"></p>
<h3 id="addService的过程"><a href="#addService的过程" class="headerlink" title="addService的过程"></a>addService的过程</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//ServiceManager::getIServiceManager()</span></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">static</span> IServiceManager <span class="title">getIServiceManager</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (sServiceManager != <span class="keyword">null</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> sServiceManager;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Find the service manager</span></span><br><span class="line">    sServiceManager = ServiceManagerNative.asInterface(Binder.allowBlocking(BinderInternal.getContextObject()));</span><br><span class="line">    <span class="keyword">return</span> sServiceManager;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//ServiceManagerNative::asInterface</span></span><br><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">public</span> IServiceManager <span class="title">asInterface</span><span class="params">(IBinder obj)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (obj == <span class="keyword">null</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    IServiceManager in =</span><br><span class="line">        (IServiceManager)obj.queryLocalInterface(descriptor);</span><br><span class="line">    <span class="keyword">if</span> (in != <span class="keyword">null</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> in;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> ServiceManagerProxy(obj);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>ServiceManager通过getIServiceManager()拿到远程接口，<code>BinderInternal.getContextObject()</code>是一个native方法：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">static</span> jobject <span class="title">android_os_BinderInternal_getContextObject</span><span class="params">(JNIEnv* env, jobject clazz)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">// 这里 new BpBinder(handle)，具体函数见下面</span></span><br><span class="line">    <span class="comment">// 注意这里 ProcessState::self() 会打开驱动，建立内存映射</span></span><br><span class="line">    sp&lt;IBinder&gt; b = ProcessState::self()-&gt;getContextObject(NULL);</span><br><span class="line">    <span class="comment">//  返回的是BinderProxy，并且设置了这个BinderProxy的mNativeDatas指针指向这个bpBinder,具体函数见下面</span></span><br><span class="line">    <span class="keyword">return</span> javaObjectForIBinder(env, b);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>在c++层调用<code>ProcessState::getContextObject(NULL)</code>得到一个c++的BpBinder(0)对象，并且通过jni的反射把它包装为一个BinderProxy的java对象返回给java，并且设置了BinderProxy(0)对象又有c++层BpBinder(0)对象的指针，因此</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">ServiceManagerNative.asInterface(Binder.allowBlocking(BinderInternal.getContextObject()))</span><br></pre></td></tr></table></figure>
<p>等于</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">new</span> ServiceManagerProxy(Binder.allowBlocking(<span class="keyword">new</span> BinderProxy(<span class="number">0</span>))`</span><br></pre></td></tr></table></figure>
<p>从类的设计上来看，ServiceManagerProxy是ServiceManagerNative的一个静态代理类，通过asInterface()方法传入一个BinderProxy来构造，在ServiceManagerProxy的方法实现上，请求都转发给了BinderProxy,所以ServiceManagerProxy也是一个适配器类，把BinderProxy的方法适配成ServiceManagerProxy的方法来给用户调用。BinderProxy含有c++层BpBinder的指针，所以跨进程调用都是通过它来实现。</p>
<p>当java层调用 getIServiceManager().addService(…) 的时候，比如添加ActivityManagerService,因为继承了Binder,所以初始化的时候会设置一个mObject指针指向c++层的JavaBBinder类，这个JavaBBinder又有一个mObject指针指向JavaBBinder,这个JavaBBinder是c++层BBinder的子类，表示一个服务的实体，因此这里的Java层的getIServiceManager().addService(…) ，就转成了c++层的 BpBinder(0)::transact(…),transact的参数包含了name,JavaBBinder, 到这里就和前面的BpServiceManager.addService()一样了。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//  android / platform / frameworks / base / master / . / core / java / android / os / ServiceManagerNative.java$ServiceManagerProxy</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">addService</span><span class="params">(String name, IBinder service, <span class="keyword">boolean</span> allowIsolated, <span class="keyword">int</span> dumpPriority)</span></span></span><br><span class="line"><span class="function">        <span class="keyword">throws</span> RemoteException </span>&#123;</span><br><span class="line">    Parcel data = Parcel.obtain();</span><br><span class="line">    Parcel reply = Parcel.obtain();</span><br><span class="line">    data.writeInterfaceToken(IServiceManager.descriptor);</span><br><span class="line">    data.writeString(name);</span><br><span class="line">    data.writeStrongBinder(service);</span><br><span class="line">    data.writeInt(allowIsolated ? <span class="number">1</span> : <span class="number">0</span>);</span><br><span class="line">    data.writeInt(dumpPriority);</span><br><span class="line">    mRemote.transact(ADD_SERVICE_TRANSACTION, data, reply, <span class="number">0</span>);</span><br><span class="line">    reply.recycle();</span><br><span class="line">    data.recycle();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// android / platform / frameworks / base / master / . / core / jni / android_os_Parcel.cpp</span></span><br><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">android_os_Parcel_writeStrongBinder</span><span class="params">(JNIEnv* env, jclass clazz, jlong nativePtr, jobject object)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    Parcel* parcel = reinterpret_cast&lt;Parcel*&gt;(nativePtr);</span><br><span class="line">    <span class="keyword">if</span> (parcel != NULL) &#123;</span><br><span class="line">        <span class="keyword">const</span> status_t err = parcel-&gt;writeStrongBinder(ibinderForJavaObject(env, object));</span><br><span class="line">        <span class="keyword">if</span> (err != NO_ERROR) &#123;</span><br><span class="line">            signalExceptionForError(env, clazz, err);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// android / platform / frameworks / base / master / . / core / jni / android_util_Binder.cpp</span></span><br><span class="line"><span class="function">sp&lt;IBinder&gt; <span class="title">ibinderForJavaObject</span><span class="params">(JNIEnv* env, jobject obj)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (obj == NULL) <span class="keyword">return</span> NULL;</span><br><span class="line">    <span class="comment">// Instance of Binder? 读取 Binder.java 的 mObject指针,得到JavaBBinderHolder，再get()，得到JavaBBinder,这个类是 BBinder.cpp的子类</span></span><br><span class="line">    <span class="keyword">if</span> (env-&gt;IsInstanceOf(obj, gBinderOffsets.mClass)) &#123;</span><br><span class="line">        JavaBBinderHolder* jbh = (JavaBBinderHolder*)</span><br><span class="line">            env-&gt;GetLongField(obj, gBinderOffsets.mObject);</span><br><span class="line">        <span class="keyword">return</span> jbh-&gt;get(env, obj);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// Instance of BinderProxy? 读取 BinderProxy.java 的 mObject指针，得到 BpBinder</span></span><br><span class="line">    <span class="keyword">if</span> (env-&gt;IsInstanceOf(obj, gBinderProxyOffsets.mClass)) &#123;</span><br><span class="line">        <span class="keyword">return</span> getBPNativeData(env, obj)-&gt;mObject;</span><br><span class="line">    &#125;</span><br><span class="line">    ALOGW(<span class="string">&quot;ibinderForJavaObject: %p is not a Binder object&quot;</span>, obj);</span><br><span class="line">    <span class="keyword">return</span> NULL;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//android / platform / frameworks / native / master / . / libs / binder / Parcel.cpp</span></span><br><span class="line">status_t Parcel::writeStrongBinder(<span class="keyword">const</span> sp&lt;IBinder&gt;&amp; val)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">return</span> flatten_binder(ProcessState::self(), val, <span class="keyword">this</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function">status_t <span class="title">flatten_binder</span><span class="params">(<span class="keyword">const</span> sp&lt;ProcessState&gt;&amp; <span class="comment">/*proc*/</span>,</span></span></span><br><span class="line"><span class="function"><span class="params">    <span class="keyword">const</span> sp&lt;IBinder&gt;&amp; binder, Parcel* out)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    flat_binder_object obj;</span><br><span class="line">    <span class="keyword">if</span> (IPCThreadState::self()-&gt;backgroundSchedulingDisabled()) &#123;</span><br><span class="line">        <span class="comment">/* minimum priority for all nodes is nice 0 */</span></span><br><span class="line">        obj.flags = FLAT_BINDER_FLAG_ACCEPTS_FDS;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="comment">/* minimum priority for all nodes is MAX_NICE(19) */</span></span><br><span class="line">        obj.flags = <span class="number">0x13</span> | FLAT_BINDER_FLAG_ACCEPTS_FDS;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (binder != nullptr) &#123;</span><br><span class="line">        IBinder *local = binder-&gt;localBinder();</span><br><span class="line">        <span class="keyword">if</span> (!local) &#123;</span><br><span class="line">            BpBinder *proxy = binder-&gt;remoteBinder();</span><br><span class="line">            <span class="keyword">if</span> (proxy == nullptr) &#123;</span><br><span class="line">                ALOGE(<span class="string">&quot;null proxy&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">const</span> int32_t handle = proxy ? proxy-&gt;handle() : <span class="number">0</span>;</span><br><span class="line">            obj.hdr.type = BINDER_TYPE_HANDLE;</span><br><span class="line">            obj.binder = <span class="number">0</span>; <span class="comment">/* Don&#x27;t pass uninitialized stack data to a remote process */</span></span><br><span class="line">            obj.handle = handle;</span><br><span class="line">            obj.cookie = <span class="number">0</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            obj.hdr.type = BINDER_TYPE_BINDER;</span><br><span class="line">            obj.binder = reinterpret_cast&lt;uintptr_t&gt;(local-&gt;getWeakRefs());</span><br><span class="line">            obj.cookie = reinterpret_cast&lt;uintptr_t&gt;(local);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        obj.hdr.type = BINDER_TYPE_BINDER;</span><br><span class="line">        obj.binder = <span class="number">0</span>;</span><br><span class="line">        obj.cookie = <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> finish_flatten_binder(binder, obj, out);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function">inline <span class="keyword">static</span> status_t <span class="title">finish_flatten_binder</span><span class="params">(</span></span></span><br><span class="line"><span class="function"><span class="params">    <span class="keyword">const</span> sp&lt;IBinder&gt;&amp; <span class="comment">/*binder*/</span>, <span class="keyword">const</span> flat_binder_object&amp; flat, Parcel* out)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> out-&gt;writeObject(flat, <span class="keyword">false</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p><img src="/2018/11/03/Android-binder-java%E5%B1%82/binder%E7%A4%BA%E6%84%8F%E5%9B%BE.jpg" alt="binder示意图"> </p>
<h3 id="getService的过程"><a href="#getService的过程" class="headerlink" title="getService的过程"></a>getService的过程</h3><p>首先是获取 getIServiceManager()，这个在上面已经分析过了。<br>之后是 getService(name)的方法，和上面类似，区别在于上面是writeStrongBinder写入service,这里是多了个readStrongBinder读取service,最后的结果是拿到了一个 BinderProxy.  mRemote.transact(…)的过程可以去看c++流程部分。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//  android / platform / frameworks / base / master / . / core / java / android / os / ServiceManagerNative.java$ServiceManagerProxy</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> IBinder <span class="title">getService</span><span class="params">(String name)</span> <span class="keyword">throws</span> RemoteException </span>&#123;</span><br><span class="line">    Parcel data = Parcel.obtain();</span><br><span class="line">    Parcel reply = Parcel.obtain();</span><br><span class="line">    data.writeInterfaceToken(IServiceManager.descriptor);</span><br><span class="line">    data.writeString(name);</span><br><span class="line">    mRemote.transact(GET_SERVICE_TRANSACTION, data, reply, <span class="number">0</span>);</span><br><span class="line">    IBinder binder = reply.readStrongBinder();</span><br><span class="line">    reply.recycle();</span><br><span class="line">    data.recycle();</span><br><span class="line">    <span class="keyword">return</span> binder;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// android / platform / frameworks / base / master / . / core / jni / android_os_Parcel.cpp</span></span><br><span class="line"><span class="function"><span class="keyword">static</span> jobject <span class="title">android_os_Parcel_readStrongBinder</span><span class="params">(JNIEnv* env, jobject clazz)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    Parcel* parcel = parcelForJavaObject(env, clazz);</span><br><span class="line">    <span class="keyword">if</span> (parcel != NULL) &#123;</span><br><span class="line">        <span class="keyword">return</span> javaObjectForIBinder(env, parcel-&gt;readStrongBinder());</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> NULL;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//android / platform / frameworks / native / master / . / libs / binder / Parcel.cpp</span></span><br><span class="line"><span class="comment">//得到一个 BpBinder</span></span><br><span class="line">sp&lt;IBinder&gt; Parcel::readStrongBinder() <span class="keyword">const</span></span><br><span class="line">&#123;</span><br><span class="line">    sp&lt;IBinder&gt; val;</span><br><span class="line">    <span class="comment">// Note that a lot of code in Android reads binders by hand with this</span></span><br><span class="line">    <span class="comment">// method, and that code has historically been ok with getting nullptr</span></span><br><span class="line">    <span class="comment">// back (while ignoring error codes).</span></span><br><span class="line">    readNullableStrongBinder(&amp;val);</span><br><span class="line">    <span class="keyword">return</span> val;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//android / platform / frameworks / native / master / . / libs / binder / Parcel.cpp</span></span><br><span class="line">status_t Parcel::readNullableStrongBinder(sp&lt;IBinder&gt;* val) <span class="keyword">const</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">return</span> unflatten_binder(ProcessState::self(), *<span class="keyword">this</span>, val);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//android / platform / frameworks / native / master / . / libs / binder / Parcel.cpp</span></span><br><span class="line"><span class="function">status_t <span class="title">unflatten_binder</span><span class="params">(<span class="keyword">const</span> sp&lt;ProcessState&gt;&amp; proc,<span class="keyword">const</span> Parcel&amp; in, sp&lt;IBinder&gt;* out)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">const</span> flat_binder_object* flat = in.readObject(<span class="keyword">false</span>);</span><br><span class="line">    <span class="keyword">if</span> (flat) &#123;</span><br><span class="line">        <span class="keyword">switch</span> (flat-&gt;hdr.type) &#123;</span><br><span class="line">            <span class="keyword">case</span> BINDER_TYPE_BINDER:</span><br><span class="line">                *out = reinterpret_cast&lt;IBinder*&gt;(flat-&gt;cookie);</span><br><span class="line">                <span class="keyword">return</span> finish_unflatten_binder(nullptr, *flat, in);</span><br><span class="line">            <span class="keyword">case</span> BINDER_TYPE_HANDLE:</span><br><span class="line">                *out = proc-&gt;getStrongProxyForHandle(flat-&gt;handle);</span><br><span class="line">                <span class="keyword">return</span> finish_unflatten_binder(</span><br><span class="line">                    static_cast&lt;BpBinder*&gt;(out-&gt;get()), *flat, in);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> BAD_TYPE;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// android / platform / frameworks / native / master / . / libs / binder / ProcessState.cpp</span></span><br><span class="line"><span class="comment">// 根据handle 生成一个BpBinder</span></span><br><span class="line">sp&lt;IBinder&gt; ProcessState::getStrongProxyForHandle(int32_t handle)</span><br><span class="line">&#123;</span><br><span class="line">    sp&lt;IBinder&gt; result;</span><br><span class="line">    <span class="function">AutoMutex <span class="title">_l</span><span class="params">(mLock)</span></span>;</span><br><span class="line">    handle_entry* e = lookupHandleLocked(handle);</span><br><span class="line">    <span class="keyword">if</span> (e != nullptr) &#123;</span><br><span class="line">        <span class="comment">// We need to create a new BpBinder if there isn&#x27;t currently one, OR we</span></span><br><span class="line">        <span class="comment">// are unable to acquire a weak reference on this current one.  See comment</span></span><br><span class="line">        <span class="comment">// in getWeakProxyForHandle() for more info about this.</span></span><br><span class="line">        IBinder* b = e-&gt;binder;</span><br><span class="line">        <span class="keyword">if</span> (b == nullptr || !e-&gt;refs-&gt;attemptIncWeak(<span class="keyword">this</span>)) &#123;</span><br><span class="line">            <span class="keyword">if</span> (handle == <span class="number">0</span>) &#123;</span><br><span class="line">                <span class="comment">// Special case for context manager...</span></span><br><span class="line">                <span class="comment">// The context manager is the only object for which we create</span></span><br><span class="line">                <span class="comment">// a BpBinder proxy without already holding a reference.</span></span><br><span class="line">                <span class="comment">// Perform a dummy transaction to ensure the context manager</span></span><br><span class="line">                <span class="comment">// is registered before we create the first local reference</span></span><br><span class="line">                <span class="comment">// to it (which will occur when creating the BpBinder).</span></span><br><span class="line">                <span class="comment">// If a local reference is created for the BpBinder when the</span></span><br><span class="line">                <span class="comment">// context manager is not present, the driver will fail to</span></span><br><span class="line">                <span class="comment">// provide a reference to the context manager, but the</span></span><br><span class="line">                <span class="comment">// driver API does not return status.</span></span><br><span class="line">                <span class="comment">//</span></span><br><span class="line">                <span class="comment">// Note that this is not race-free if the context manager</span></span><br><span class="line">                <span class="comment">// dies while this code runs.</span></span><br><span class="line">                <span class="comment">//</span></span><br><span class="line">                <span class="comment">// <span class="doctag">TODO:</span> add a driver API to wait for context manager, or</span></span><br><span class="line">                <span class="comment">// stop special casing handle 0 for context manager and add</span></span><br><span class="line">                <span class="comment">// a driver API to get a handle to the context manager with</span></span><br><span class="line">                <span class="comment">// proper reference counting.</span></span><br><span class="line">                Parcel data;</span><br><span class="line">                status_t status = IPCThreadState::self()-&gt;transact(</span><br><span class="line">                        <span class="number">0</span>, IBinder::PING_TRANSACTION, data, nullptr, <span class="number">0</span>);</span><br><span class="line">                <span class="keyword">if</span> (status == DEAD_OBJECT)</span><br><span class="line">                   <span class="keyword">return</span> nullptr;</span><br><span class="line">            &#125;</span><br><span class="line">            b = BpBinder::create(handle);</span><br><span class="line">            e-&gt;binder = b;</span><br><span class="line">            <span class="keyword">if</span> (b) e-&gt;refs = b-&gt;getWeakRefs();</span><br><span class="line">            result = b;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="comment">// This little bit of nastyness is to allow us to add a primary</span></span><br><span class="line">            <span class="comment">// reference to the remote proxy when this team doesn&#x27;t have one</span></span><br><span class="line">            <span class="comment">// but another team is sending the handle to us.</span></span><br><span class="line">            result.force_set(b);</span><br><span class="line">            e-&gt;refs-&gt;decWeak(<span class="keyword">this</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// android / platform / frameworks / base / master / . / core / jni / android_util_Binder.cpp</span></span><br><span class="line"><span class="comment">// If the argument is a JavaBBinder, return the Java object that was used to create it.</span></span><br><span class="line"><span class="comment">// Otherwise return a BinderProxy for the IBinder. If a previous call was passed the</span></span><br><span class="line"><span class="comment">// same IBinder, and the original BinderProxy is still alive, return the same BinderProxy.</span></span><br><span class="line"><span class="comment">// // 根据 BpBinder 生成一个 BinderProxy并且返回</span></span><br><span class="line"><span class="function">jobject <span class="title">javaObjectForIBinder</span><span class="params">(JNIEnv* env, <span class="keyword">const</span> sp&lt;IBinder&gt;&amp; val)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (val == NULL) <span class="keyword">return</span> NULL;</span><br><span class="line">    <span class="keyword">if</span> (val-&gt;checkSubclass(&amp;gBinderOffsets)) &#123;</span><br><span class="line">        <span class="comment">// It&#x27;s a JavaBBinder created by ibinderForJavaObject. Already has Java object.</span></span><br><span class="line">        jobject object = static_cast&lt;JavaBBinder*&gt;(val.get())-&gt;object();</span><br><span class="line">        LOGDEATH(<span class="string">&quot;objectForBinder %p: it&#x27;s our own %p!\n&quot;</span>, val.get(), object);</span><br><span class="line">        <span class="keyword">return</span> object;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// For the rest of the function we will hold this lock, to serialize</span></span><br><span class="line">    <span class="comment">// looking/creation/destruction of Java proxies for native Binder proxies.</span></span><br><span class="line">    <span class="function">AutoMutex <span class="title">_l</span><span class="params">(gProxyLock)</span></span>;</span><br><span class="line">    BinderProxyNativeData* nativeData = gNativeDataCache;</span><br><span class="line">    <span class="keyword">if</span> (nativeData == nullptr) &#123;</span><br><span class="line">        nativeData = <span class="keyword">new</span> BinderProxyNativeData();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// gNativeDataCache is now logically empty.</span></span><br><span class="line">    jobject object = env-&gt;CallStaticObjectMethod(gBinderProxyOffsets.mClass,</span><br><span class="line">            gBinderProxyOffsets.mGetInstance, (jlong) nativeData, (jlong) val.get());</span><br><span class="line">    <span class="keyword">if</span> (env-&gt;ExceptionCheck()) &#123;</span><br><span class="line">        <span class="comment">// In the exception case, getInstance still took ownership of nativeData.</span></span><br><span class="line">        gNativeDataCache = nullptr;</span><br><span class="line">        <span class="keyword">return</span> NULL;</span><br><span class="line">    &#125;</span><br><span class="line">    BinderProxyNativeData* actualNativeData = getBPNativeData(env, object);</span><br><span class="line">    <span class="keyword">if</span> (actualNativeData == nativeData) &#123;</span><br><span class="line">        <span class="comment">// New BinderProxy; we still have exclusive access.</span></span><br><span class="line">        nativeData-&gt;mOrgue = <span class="keyword">new</span> DeathRecipientList;</span><br><span class="line">        nativeData-&gt;mObject = val;</span><br><span class="line">        gNativeDataCache = nullptr;</span><br><span class="line">        ++gNumProxies;</span><br><span class="line">        <span class="keyword">if</span> (gNumProxies &gt;= gProxiesWarned + PROXY_WARN_INTERVAL) &#123;</span><br><span class="line">            ALOGW(<span class="string">&quot;Unexpectedly many live BinderProxies: %d\n&quot;</span>, gNumProxies);</span><br><span class="line">            gProxiesWarned = gNumProxies;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="comment">// nativeData wasn&#x27;t used. Reuse it the next time.</span></span><br><span class="line">        gNativeDataCache = nativeData;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> object;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>当java层调用 getIServiceManager().getService(…) 的时候，执行完毕后，还会调用 reply.readStrongBinder() 去读取远程调用的返回值，根据 handle 生成一个 BpBinder , 再根据 BpBinder 生成一个BinderProxy,这样子就拿到了需要的service的代理对象了。</p>
<p>可以看到，ServiceManager 仅仅是对 IServiceManager 的一个管理类，ServiceManagerNative是一个Binder虚基类，因为 ServiceManager 作为一个管理类，c++层的BBinder已经实现了，所以这里不需要实现 ServiceManagerNative了，只是用了它的静态方法，如果java类想要c++的数据，通过parcel.readXXX 就可以得到。</p>
<h2 id="bindService-的-binder"><a href="#bindService-的-binder" class="headerlink" title="bindService 的 binder"></a>bindService 的 binder</h2><p>这里从网上找了一个 code example：</p>
<p>GetDeviceInfoInterface.aidl :</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">interface</span> <span class="title">IRemote</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">  <span class="function"><span class="keyword">int</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span> a, <span class="keyword">int</span> b)</span></span>;</span><br><span class="line"> </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>GetDeviceInfoService.java:</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ArithmeticService</span> <span class="keyword">extends</span> <span class="title">Service</span></span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> IBinder <span class="title">onBind</span><span class="params">(Intent intent)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> mBinder;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> IRemote.Stub mBinder = <span class="keyword">new</span> IRemote.Stub() &#123;</span><br><span class="line"> </span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span> a, <span class="keyword">int</span> b)</span> <span class="keyword">throws</span> RemoteException </span>&#123;</span><br><span class="line">            <span class="comment">// TODO Auto-generated method stub</span></span><br><span class="line">            <span class="keyword">return</span> (a + b);</span><br><span class="line">        &#125;</span><br><span class="line"> </span><br><span class="line">    &#125;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>MainActivity.java:</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MainActivity</span> <span class="keyword">extends</span> <span class="title">Activity</span> <span class="keyword">implements</span> <span class="title">OnClickListener</span>  </span>&#123;</span><br><span class="line"> </span><br><span class="line">    ServiceConnection mServiceConnection;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onCreate</span><span class="params">(Bundle savedInstanceState)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>.onCreate(savedInstanceState);</span><br><span class="line">        setContentView(R.layout.activity_main);</span><br><span class="line"> </span><br><span class="line">        initConnection();</span><br><span class="line"> </span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">initConnection</span><span class="params">()</span></span>&#123;</span><br><span class="line">        mServiceConnection = <span class="keyword">new</span> ServiceConnection() &#123;</span><br><span class="line"></span><br><span class="line">                <span class="meta">@Override</span></span><br><span class="line">                <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onServiceDisconnected</span><span class="params">(ComponentName name)</span> </span>&#123;</span><br><span class="line">                    <span class="comment">// TODO Auto-generated method stub</span></span><br><span class="line">                    mService = <span class="keyword">null</span>;</span><br><span class="line">                    Toast.makeText(getApplicationContext(), <span class="string">&quot;no&quot;</span>, Toast.LENGTH_SHORT).show();</span><br><span class="line">                    Log.d(<span class="string">&quot;IRemote&quot;</span>, <span class="string">&quot;Binding - Service disconnected&quot;</span>);</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">                <span class="meta">@Override</span></span><br><span class="line">                <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onServiceConnected</span><span class="params">(ComponentName name, IBinder service)</span></span></span><br><span class="line"><span class="function">                </span>&#123;</span><br><span class="line">                    <span class="comment">// TODO Auto-generated method stub</span></span><br><span class="line">                    mService = IRemote.Stub.asInterface((IBinder) service);</span><br><span class="line">                    Toast.makeText(getApplicationContext(), <span class="string">&quot;yes&quot;</span>, Toast.LENGTH_SHORT).show();</span><br><span class="line">                    Log.d(<span class="string">&quot;IRemote&quot;</span>, <span class="string">&quot;Binding is done - Service connected&quot;</span>);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;;</span><br><span class="line">        <span class="keyword">if</span>(mService == <span class="keyword">null</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            Intent it = <span class="keyword">new</span> Intent();</span><br><span class="line">            it.setAction(<span class="string">&quot;com.remote.service.CALCULATOR&quot;</span>);</span><br><span class="line">            bindService(it, mServiceConnection, Service.BIND_AUTO_CREATE);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onDestroy</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>.onDestroy();</span><br><span class="line">        unbindService(mServiceConnection);</span><br><span class="line">&#125;;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>接下来从bindService看起，bindService传入了一个类 ServiceConnection 作为回调。由于Activity的context实际上是ContextImpl,所以这里会到 ContextImpl.java里面去：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//ContextImpl.java</span></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">bindService</span><span class="params">(Intent service, ServiceConnection conn,<span class="keyword">int</span> flags)</span> </span>&#123;</span><br><span class="line">    warnIfCallingFromSystemProcess();</span><br><span class="line">    <span class="keyword">return</span> bindServiceCommon(service, conn, flags, mMainThread.getHandler(), getUser());</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">boolean</span> <span class="title">bindServiceCommon</span><span class="params">(Intent service, ServiceConnection conn, <span class="keyword">int</span> flags, Handler</span></span></span><br><span class="line"><span class="function"><span class="params">        handler, UserHandle user)</span> </span>&#123;</span><br><span class="line">    <span class="comment">// Keep this in sync with DevicePolicyManager.bindDeviceAdminServiceAsUser.</span></span><br><span class="line">    IServiceConnection sd;</span><br><span class="line">    ...</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        IBinder token = getActivityToken();</span><br><span class="line">        <span class="keyword">if</span> (token == <span class="keyword">null</span> &amp;&amp; (flags&amp;BIND_AUTO_CREATE) == <span class="number">0</span> &amp;&amp; mPackageInfo != <span class="keyword">null</span></span><br><span class="line">                &amp;&amp; mPackageInfo.getApplicationInfo().targetSdkVersion</span><br><span class="line">                &lt; android.os.Build.VERSION_CODES.ICE_CREAM_SANDWICH) &#123;</span><br><span class="line">            flags |= BIND_WAIVE_PRIORITY;</span><br><span class="line">        &#125;</span><br><span class="line">        service.prepareToLeaveProcess(<span class="keyword">this</span>);</span><br><span class="line">        <span class="keyword">int</span> res = ActivityManager.getService().bindService(</span><br><span class="line">            mMainThread.getApplicationThread(), getActivityToken(), service,</span><br><span class="line">            service.resolveTypeIfNeeded(getContentResolver()),</span><br><span class="line">            sd, flags, getOpPackageName(), user.getIdentifier());</span><br><span class="line">        <span class="keyword">if</span> (res &lt; <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> SecurityException(</span><br><span class="line">                    <span class="string">&quot;Not allowed to bind to service &quot;</span> + service);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> res != <span class="number">0</span>;</span><br><span class="line">    &#125; <span class="keyword">catch</span> (RemoteException e) &#123;</span><br><span class="line">        <span class="keyword">throw</span> e.rethrowFromSystemServer();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>这里把传入的 ServiceConnection 类作为参数构造了一个 ServiceDispatcher, 然后返回了ServiceDispatcher的内部类mIServiceConnection，这是一个Binder类实体。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// LoadedAPK.java</span></span><br><span class="line"><span class="keyword">static</span> <span class="keyword">final</span> <span class="class"><span class="keyword">class</span> <span class="title">ServiceDispatcher</span> </span>&#123;</span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">final</span> ServiceDispatcher.InnerConnection mIServiceConnection;</span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">final</span> ServiceConnection mConnection;</span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">final</span> Context mContext;</span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">final</span> Handler mActivityThread;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">InnerConnection</span> <span class="keyword">extends</span> <span class="title">IServiceConnection</span>.<span class="title">Stub</span> </span>&#123;</span><br><span class="line">            <span class="keyword">final</span> WeakReference&lt;LoadedApk.ServiceDispatcher&gt; mDispatcher;</span><br><span class="line"></span><br><span class="line">            InnerConnection(LoadedApk.ServiceDispatcher sd) &#123;</span><br><span class="line">                mDispatcher = <span class="keyword">new</span> WeakReference&lt;LoadedApk.ServiceDispatcher&gt;(sd);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">connected</span><span class="params">(ComponentName name, IBinder service, <span class="keyword">boolean</span> dead)</span></span></span><br><span class="line"><span class="function">                    <span class="keyword">throws</span> RemoteException </span>&#123;</span><br><span class="line">                LoadedApk.ServiceDispatcher sd = mDispatcher.get();</span><br><span class="line">                <span class="keyword">if</span> (sd != <span class="keyword">null</span>) &#123;</span><br><span class="line">                    sd.connected(name, service, dead);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">final</span> ArrayMap&lt;ComponentName, ServiceDispatcher.ConnectionInfo&gt; mActiveConnections</span><br><span class="line">            = <span class="keyword">new</span> ArrayMap&lt;ComponentName, ServiceDispatcher.ConnectionInfo&gt;();</span><br><span class="line"></span><br><span class="line">        ServiceDispatcher(ServiceConnection conn,</span><br><span class="line">                Context context, Handler activityThread, <span class="keyword">int</span> flags) &#123;</span><br><span class="line">            mIServiceConnection = <span class="keyword">new</span> InnerConnection(<span class="keyword">this</span>);</span><br><span class="line">            mConnection = conn;</span><br><span class="line">            mContext = context;</span><br><span class="line">            mActivityThread = activityThread;</span><br><span class="line">            mLocation = <span class="keyword">new</span> ServiceConnectionLeaked(<span class="keyword">null</span>);</span><br><span class="line">            mLocation.fillInStackTrace();</span><br><span class="line">            mFlags = flags;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function">ServiceConnection <span class="title">getServiceConnection</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> mConnection;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function">IServiceConnection <span class="title">getIServiceConnection</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> mIServiceConnection;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">connected</span><span class="params">(ComponentName name, IBinder service, <span class="keyword">boolean</span> dead)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">if</span> (mActivityThread != <span class="keyword">null</span>) &#123;</span><br><span class="line">                mActivityThread.post(<span class="keyword">new</span> RunConnection(name, service, <span class="number">0</span>, dead));</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                doConnected(name, service, dead);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// IServiceConnection.aidl</span></span><br><span class="line"><span class="class"><span class="keyword">interface</span> <span class="title">IServiceConnection</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">connected</span><span class="params">(in ComponentName name, IBinder service, <span class="keyword">boolean</span> dead)</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>之后是ActivityManager.getService().bindService(…):</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//ActivityManager.java</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> IActivityManager <span class="title">getService</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> IActivityManagerSingleton.get();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> Singleton&lt;IActivityManager&gt; IActivityManagerSingleton =</span><br><span class="line">        <span class="keyword">new</span> Singleton&lt;IActivityManager&gt;() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">protected</span> IActivityManager <span class="title">create</span><span class="params">()</span> </span>&#123;</span><br><span class="line">                <span class="keyword">final</span> IBinder b = ServiceManager.getService(Context.ACTIVITY_SERVICE);</span><br><span class="line">                <span class="keyword">final</span> IActivityManager am = IActivityManager.Stub.asInterface(b);</span><br><span class="line">                <span class="keyword">return</span> am;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// ServiceManager.java</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> IBinder <span class="title">getService</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        IBinder service = sCache.get(name);</span><br><span class="line">        <span class="keyword">if</span> (service != <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> service;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> Binder.allowBlocking(rawGetService(name));</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; <span class="keyword">catch</span> (RemoteException e) &#123;</span><br><span class="line">        Log.e(TAG, <span class="string">&quot;error in getService&quot;</span>, e);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">static</span> IBinder <span class="title">rawGetService</span><span class="params">(String name)</span> <span class="keyword">throws</span> RemoteException </span>&#123;</span><br><span class="line">    <span class="keyword">final</span> <span class="keyword">long</span> start = sStatLogger.getTime();</span><br><span class="line">    <span class="keyword">final</span> IBinder binder = getIServiceManager().getService(name);</span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>在上面已经讲过，这里得到的是一个IActivityManager.Proxy类，是ActivityManagerService的远程接口.从app进程发起AMS的调用，参数中传递了一个Binder实体，在驱动的处理中，就会为app进程创建一个binder_node,同时在AMS的进程(也就是system_server)中创建一个binder_ref，然后还会把flat_binder_object的BINDER_TYPE_BINDER转成BINDER_TYPE_HANDLE类型，因此后面解析出来是一个BpBinder接口。对于AMS来说，binder线程唤醒后会执行executeCommand(…)</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">status_t</span> <span class="title">IPCThreadState::executeCommand</span><span class="params">(<span class="keyword">int32_t</span> cmd)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    ...</span><br><span class="line">    <span class="keyword">switch</span> (cmd) &#123;</span><br><span class="line">    ......</span><br><span class="line">    <span class="keyword">case</span> BR_TRANSACTION:</span><br><span class="line">        &#123;</span><br><span class="line">            ...</span><br><span class="line">            <span class="keyword">if</span> (tr.target.ptr) &#123;</span><br><span class="line">                <span class="comment">// We only have a weak reference on the target object, so we must first try to</span></span><br><span class="line">                <span class="comment">// safely acquire a strong reference before doing anything else with it.</span></span><br><span class="line">                <span class="keyword">if</span> (<span class="keyword">reinterpret_cast</span>&lt;RefBase::weakref_type*&gt;(</span><br><span class="line">                        tr.target.ptr)-&gt;attemptIncStrong(<span class="keyword">this</span>)) &#123;</span><br><span class="line">                    error = <span class="keyword">reinterpret_cast</span>&lt;BBinder*&gt;(tr.cookie)-&gt;transact(tr.code, buffer,</span><br><span class="line">                            &amp;reply, tr.flags);</span><br><span class="line">                    <span class="keyword">reinterpret_cast</span>&lt;BBinder*&gt;(tr.cookie)-&gt;decStrong(<span class="keyword">this</span>);</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    error = UNKNOWN_TRANSACTION;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                error = the_context_object-&gt;transact(tr.code, buffer, &amp;reply, tr.flags);</span><br><span class="line">            &#125;</span><br><span class="line">           ...</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line"></span><br><span class="line">    .......</span><br><span class="line">    &#125;</span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>这里有把tr.cookie保存的值强转为BBinder类型(cookie的值在binder_thread_read设置)，对于c++的服务来说，它们本身已经继承了BBinder,所以会进入到它们自己的transact方法中，对于这里的调用来说，保存的是一个JavaBBinder类(可以看上面，对于Binder,writeStrongBinder写入的是一个JavaBBinder类)</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">JavaBBinder</span> :</span> <span class="keyword">public</span> BBinder</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">protected</span>:</span><br><span class="line">        <span class="function"><span class="keyword">status_t</span> <span class="title">onTransact</span><span class="params">(</span></span></span><br><span class="line"><span class="function"><span class="params">            <span class="keyword">uint32_t</span> code, <span class="keyword">const</span> Parcel&amp; data, Parcel* reply, <span class="keyword">uint32_t</span> flags = <span class="number">0</span>)</span> <span class="keyword">override</span></span></span><br><span class="line"><span class="function">        </span>&#123;</span><br><span class="line">            ...</span><br><span class="line">            jboolean res = env-&gt;CallBooleanMethod(mObject, gBinderOffsets.mExecTransact,</span><br><span class="line">                code, <span class="keyword">reinterpret_cast</span>&lt;jlong&gt;(&amp;data), <span class="keyword">reinterpret_cast</span>&lt;jlong&gt;(reply), flags);</span><br><span class="line">            ...</span><br><span class="line">        &#125;</span><br><span class="line">    <span class="keyword">private</span>:</span><br><span class="line">        JavaVM* <span class="keyword">const</span>   mVM;</span><br><span class="line">        jobject <span class="keyword">const</span>   mObject;  <span class="comment">// GlobalRef to Java Binder</span></span><br><span class="line">        <span class="keyword">mutable</span> <span class="built_in">std</span>::once_flag mPopulateDescriptor;</span><br><span class="line">        <span class="keyword">mutable</span> String16 mDescriptor;</span><br><span class="line">    &#125;;</span><br></pre></td></tr></table></figure>
<p>JavaBBinder 会通过jni反射调到它对应的Binder类的 onTransact 方法，在这里是指 IActivityManagerService.Stub里的方法，又会继续调用到子类的ams的bindService方法，终于来到了ams类。。</p>
<p><img src="/2018/11/03/Android-binder-java%E5%B1%82/service_bind.jpg" alt="service-bind"></p>
<p>这里回到InnerConnection的connected()方法，依次调用到ServiceDispatcher.connected(),然后就是 mConnection.onServiceConnected。</p>
<p>总体上来说，这里还是binder的应用之一，因为serviceConnection不能跨进程，所以构造了一个InnerConnection，并且传给ams，这样ams就能主动通知app了，ams在创建service后，如果有bindservice,那么就会把 service 的成员变量，一个 Binder 作为参数通过 InnerConnection 的接口通知回app，这样app就拿到了 service 里面的 Binder 的远程接口，然后就可以调用这个 Binder 的方法了。</p>
]]></content>
      <categories>
        <category>android_framework</category>
      </categories>
      <tags>
        <tag>binder</tag>
      </tags>
  </entry>
  <entry>
    <title>Android binder原理和设计</title>
    <url>/2018/08/18/Android-binder%E5%8E%9F%E7%90%86%E5%92%8C%E8%AE%BE%E8%AE%A1/</url>
    <content><![CDATA[<h2 id="Binder驱动原理"><a href="#Binder驱动原理" class="headerlink" title="Binder驱动原理"></a>Binder驱动原理</h2><p>Binder驱动的核心是维护一个binder_proc类型的链表。里面记录了包括ServiceManager在内的所有Client信息，当Client去请求得到某个Service时，Binder驱动就去binder_proc中查找相应的Service返回给Client，同时增加当前Service的引用个数。<a id="more"></a></p>
<p>Binder驱动是作为一个特殊字符型设备存在，设备节点为/dev/binder，遵循Linux设备驱动模型。在驱动实现过程中，主要通过binder_ioctl函数与用户空间的进程交换数据。BINDER_WRITE_READ用来读写数据，数据包中有个cmd用于区分不同的请求。<br>在binder_thread_write函数中调用binder_transaction函数来转发请求并返回结果，而binder_thread_read函数用于读取结果。。当服务进程收到请求时，binder_transaction函数会通过对象的handle找到对象所在进程，如果handle为0，就认为请求的是ServiceManager进程。</p>
<p>整个Binder的流程：</p>
<p><img src="/2018/08/18/Android-binder%E5%8E%9F%E7%90%86%E5%92%8C%E8%AE%BE%E8%AE%A1/binder_2.png" alt="binder_2"></p>
<h2 id="对象的索引和映射"><a href="#对象的索引和映射" class="headerlink" title="对象的索引和映射"></a>对象的索引和映射</h2><p>Binder中有两种索引，一是本地进程地址空间的一个地址，另一个是一个抽象的32位句柄（HANDLE），它们之间是互斥的：所有的进程本地对象的索引都是本地进程的一个地址(address, ptr, binder)，所有的远程进程的对象的索引都是一个句柄（handle）。对于发送者进程来说，索引就是一个远端对象的一个句柄，当Binder对象数据被发送到远端接收进程时，远端接受进程则会认为索引是一个本地对象地址，因此从第三方的角度来说，尽管名称不同，对于一次Binder调用，两种索引指的是同一个对象，Binder驱动则负责两种索引的映射，这样才能把数据发送给正确的进程。</p>
<p>对于Android的Binder来说，对象的索引和映射是通过binder_node和binder_ref两个核心数据结构来完成的，对于Binder本地对象，对象的Binder地址保存在binder_node-&gt;ptr里，对于远程对象，索引就保存在binder_ref-&gt;desc里，每一个binder_node都有一个binder_ref对象与之相联系，他们就是是通过ptr和desc来做映射的，如下图：</p>
<p><img src="/2018/08/18/Android-binder%E5%8E%9F%E7%90%86%E5%92%8C%E8%AE%BE%E8%AE%A1/binder_10.png" alt="binder_10"></p>
<p>Binder句柄:<br>句柄就是个简单的整数值，用来告诉Binder驱动我们想找的目标Binder实体是哪个。但是请注意，句柄只对发起端进程和Binder驱动有意义，A进程的句柄直接拿到B进程，是没什么意义的。也就是说，不同进程中指代相同Binder实体的句柄值可能是不同的。示意图如下：</p>
<p><img src="/2018/08/18/Android-binder%E5%8E%9F%E7%90%86%E5%92%8C%E8%AE%BE%E8%AE%A1/binder_13.png" alt="binder_13"></p>
<p>ServiceManagerService 记录了所有系统service所对应的Binder句柄，它的核心功能就是维护好这些句柄值。后续，当用户进程需要获取某个系统service的代理时，SMS就会在内部按service名查找到合适的句柄值，并“逻辑上”传递给用户进程，于是用户进程会得到一个新的合法句柄值，这个新句柄值可能在数值上和SMS所记录的句柄值不同，然而，它们指代的却是同一个Service实体。句柄的合法性是由Binder驱动保证的，这一点我们不必担心</p>
<p>flat_binder_object就是进程间传递的Binder对象，每一个flat_binder_object对象内都有一个唯一的binder_node对象或者binder_ref对象.他们之间的查找过程如下：</p>
<p><img src="/2018/08/18/Android-binder%E5%8E%9F%E7%90%86%E5%92%8C%E8%AE%BE%E8%AE%A1/binder_18.png" alt="binder_18"></p>
<p>如果发送的flat_binder_object.type=BINDER,</p>
<ol>
<li>在发送进程内查找flat_binder_object.binder对应的binder_node</li>
<li>如果找到则执行步骤4，否则执行步骤3</li>
<li>在发送进程内创建新的binder_node,binder_node.ptr=flat_binder_object.binder</li>
<li>在接收进程内查找binder_node对应的binder_ref,如果找到则执行步骤6，否则执行步骤5</li>
<li>在接收进程内创建新的binder_ref,binder_ref.node=binder_node,分配binder_ref.desc值</li>
<li>修改flat_binder_object.type=HANDLE（BINDER_TYPE_BINDER-&gt;BINER_TYPE_HANDLE；BINDER_TYPE_WEAK_BINDER-&gt;BINDER_TYPE_WEAK_HANDLE).</li>
<li>修改flat_binder_object.handle=binder_refs.desc</li>
</ol>
<p>如果发送的flat_binder_object.type=HANDLE,</p>
<ol>
<li> 在发送进程内查找flat_binder_object.handle对应的binder_ref,如果找到，执行步骤3，否则执行步骤2</li>
<li> 设置error为BR_FAILED_REPLY，执行步骤11（这里的设计，防止了Client通过蒙猜的方式进行非法通信</li>
<li> binder_ref.node.proc是否为接收进程，如果是，则执行步骤4，否则执行步骤7</li>
<li> 设置flat_binder_obecjt.type=BINDER（BINDER_TYPE_HANDLE-&gt;BINDER_TYPE_BINDER;  BINDER_TYPE_WEAK_HANDLE-&gt;BINDER_TYPE_WEAK_BINDER)</li>
<li> 设置flat_binder_object.binder=binder_ref.node.binder.</li>
<li> 设置flat_binder_object.cookies=binder_ref.node.cookies,执行步骤11</li>
<li> 在接收进程内超找对应的binder_ref，如果未找到，执行步骤8，否则执行步骤10</li>
<li> 在接收进程内创建新的binder_ref</li>
<li> 设置binder_ref(接收进程）.node=binder_ref(发送进程）.node,并分配binder_refs（接收进程）.desc</li>
<li> 设置flat_binder_object.handle=binder_ref（接收进程）.desc</li>
<li> 结束</li>
</ol>
<p>进程1的BpBinder在发起跨进程调用时，向binder驱动传入了自己记录的句柄值，binder驱动就会在“进程1对应的binder_proc结构”的引用树中查找和句柄值相符的binder_ref节点，一旦找到binder_ref节点，就可以通过该节点的node域找到对应的binder_node节点，这个目标binder_node当然是从属于进程2的binder_proc啦，不过不要紧，因为binder_ref和binder_node都处于binder驱动的地址空间中，所以是可以用指针直接指向的。目标binder_node节点的cookie域，记录的其实是进程2中BBinder的地址，binder驱动只需把这个值反映给应用层，应用层就可以直接拿到BBinder了。</p>
<h2 id="传输机制的大体运作"><a href="#传输机制的大体运作" class="headerlink" title="传输机制的大体运作"></a>传输机制的大体运作</h2><p>Binder IPC机制的大体思路是这样的，它将每次“传输并执行特定语义的”工作理解为一个小事务，既然所传输的数据是binder_transaction_data类型的，那么这种事务的类名可以相应地定为binder_transaction。系统中当然会有很多事务啦，那么发向同一个进程或线程的若干事务就必须串行化起来，因此binder驱动为进程节点（binder_proc）和线程节点（binder_thread）都设计了个todo队列。todo队列的职责就是“串行化地组织待处理的事务”。<br>下图绘制了一个进程节点，以及一个从属于该进程的线程节点，它们各带了两个待处理的事务（binder_transaction）：</p>
<p>这样看来，传输动作的基本目标就很明确了，就是想办法把发起端的一个binder_transaction节点，插入到目标端进程或其合适子线程的todo队列去。<br>可是，该怎么找目标进程和目标线程呢？基本做法是先从发起端的BpBinder开始，找到与其对应的binder_node节点，这个在前文阐述binder_proc的4棵红黑树时已经说过了，这里不再赘述。总之拿到目标binder_node之后，我们就可以通过其proc域，拿到目标进程对应的binder_proc了。如果偷懒的话，我们直接把binder_transaction节点插到这个binder_proc的todo链表去，就算完成传输动作了。当然，binder驱动做了一些更精细的调整。<br>binder驱动希望能把binder_transaction节点尽量放到目标进程里的某个线程去，这样可以充分利用这个进程中的binder工作线程。比如一个binder线程目前正睡着，它在等待其他某个线程做完某个事情后才会醒来，而那个工作又偏偏需要在当前这个binder_transaction事务处理结束后才能完成，那么我们就可以让那个睡着的线程先去做当前的binder_transaction事务，这就达到充分利用线程的目的了。反正不管怎么说，如果binder驱动可以找到一个合适的线程，它就会把binder_transaction节点插到它的todo队列去。而如果找不到合适的线程，还可以把节点插入目标binder_proc的todo队列。</p>
<p><img src="/2018/08/18/Android-binder%E5%8E%9F%E7%90%86%E5%92%8C%E8%AE%BE%E8%AE%A1/binder_17.png" alt="binder_17"></p>
<h2 id="Binder-相关数据结构"><a href="#Binder-相关数据结构" class="headerlink" title="Binder 相关数据结构"></a>Binder 相关数据结构</h2><p>这一部分内容可以用到的时候再看,主要是数据的封装和解析<br><img src="/2018/08/18/Android-binder%E5%8E%9F%E7%90%86%E5%92%8C%E8%AE%BE%E8%AE%A1/binder_21.jpg" alt="binder_21"></p>
<h3 id="flat-binder-object"><a href="#flat-binder-object" class="headerlink" title="flat_binder_object"></a>flat_binder_object</h3><p>进程间传输的数据被称为Binder对象（Binder Object），它是一个<code>flat_binder_object</code>，binder驱动接收和返回的数据中，如果有BpBinder或者BBinder，都会转成一个<code>flat_binder_object</code>对象，然后再进行赋值或者解析，它的定义如下：</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">    * This is the flattened representation of a Binder object for transfer</span></span><br><span class="line"><span class="comment">    * between processes.  The &#x27;offsets&#x27; supplied as part of a binder transaction</span></span><br><span class="line"><span class="comment">    * contains offsets into the data where these structures occur.  The Binder</span></span><br><span class="line"><span class="comment">    * driver takes care of re-writing the structure type and data as it moves</span></span><br><span class="line"><span class="comment">    * between processes.</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">flat_binder_object</span> &#123;</span>  </span><br><span class="line">    <span class="comment">/* 8 bytes for large_flat_header. */</span>  </span><br><span class="line">    <span class="keyword">unsigned</span> <span class="keyword">long</span>        type;  </span><br><span class="line">    <span class="keyword">unsigned</span> <span class="keyword">long</span>        flags;  </span><br><span class="line">    <span class="comment">/* 8 bytes of data. */</span>  </span><br><span class="line">    <span class="class"><span class="keyword">union</span> &#123;</span>  </span><br><span class="line">        <span class="keyword">void</span>        *binder;    <span class="comment">/* local object */</span>  </span><br><span class="line">        <span class="keyword">signed</span> <span class="keyword">long</span>    handle;        <span class="comment">/* remote object */</span>  </span><br><span class="line">    &#125;;  </span><br><span class="line">    <span class="comment">/* extra data associated with local object */</span>  </span><br><span class="line">    <span class="keyword">void</span>            *cookie;  </span><br><span class="line">&#125;;  </span><br></pre></td></tr></table></figure>
<p>其中type表示类型,flags描述了传输方式，比如同步、异步等。Android定义了五个（三大类）Binder类型，如下：</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"> <span class="class"><span class="keyword">enum</span> &#123;</span>  </span><br><span class="line">   BINDER_TYPE_BINDER      = B_PACK_CHARS(<span class="string">&#x27;s&#x27;</span>, <span class="string">&#x27;b&#x27;</span>, <span class="string">&#x27;*&#x27;</span>, B_TYPE_LARGE),  </span><br><span class="line">   BINDER_TYPE_WEAK_BINDER  = B_PACK_CHARS(<span class="string">&#x27;w&#x27;</span>, <span class="string">&#x27;b&#x27;</span>, <span class="string">&#x27;*&#x27;</span>, B_TYPE_LARGE),  </span><br><span class="line">   BINDER_TYPE_HANDLE    = B_PACK_CHARS(<span class="string">&#x27;s&#x27;</span>, <span class="string">&#x27;h&#x27;</span>, <span class="string">&#x27;*&#x27;</span>, B_TYPE_LARGE),  </span><br><span class="line">   BINDER_TYPE_WEAK_HANDLE= B_PACK_CHARS(<span class="string">&#x27;w&#x27;</span>, <span class="string">&#x27;h&#x27;</span>, <span class="string">&#x27;*&#x27;</span>, B_TYPE_LARGE),  </span><br><span class="line">   BINDER_TYPE_FD              = B_PACK_CHARS(<span class="string">&#x27;f&#x27;</span>, <span class="string">&#x27;d&#x27;</span>, <span class="string">&#x27;*&#x27;</span>, B_TYPE_LARGE),  </span><br><span class="line">&#125;; </span><br><span class="line"></span><br><span class="line"> <span class="class"><span class="keyword">enum</span> <span class="title">transaction_flags</span> &#123;</span>  </span><br><span class="line">    TF_ONE_WAY    = <span class="number">0x01</span>,    <span class="comment">/* this is a one-way call: async, no return */</span>  </span><br><span class="line">    TF_ROOT_OBJECT    = <span class="number">0x04</span>,    <span class="comment">/* contents are the component&#x27;s root object */</span>  </span><br><span class="line">    TF_STATUS_CODE    = <span class="number">0x08</span>,    <span class="comment">/* contents are a 32-bit status code */</span>  </span><br><span class="line">    TF_ACCEPT_FDS    = <span class="number">0x10</span>,    <span class="comment">/* allow replies with file descriptors */</span>  </span><br><span class="line">&#125;; </span><br></pre></td></tr></table></figure>
<p>忽略强弱引用的差异，type可以分为三类BINDER、HANDLE、FD。 </p>
<ul>
<li>type为BINDER类型时，flat_binder_object代表binder_node,flat_binder_object.binder等于相应binder_node.ptr，指向Service用户空间的BBinder。</li>
<li>type为HANDLE类型时，flat_binder_object代表binder_ref,flat_binder_object.handle等于相应binder_refs.desc,也就是等于Client用户空间BpBinder.handle。</li>
<li>type为FD类型时，flat_binder_object代表文件Binder，flat_binder_object.handle是文件在进程内的文件号。</li>
</ul>
<p>传输的数据是一个复用数据联合体，对于BINDER类型，数据就是一个binder本地对象，如果是HANDLE类型，这数据就是一个远程的handle对象。该如何理解本地binder对象和远程handle对象呢？其实它们都指向同一个对象，不过是从不同的角度来说。举例来说，假如A有个对象X，对于A来说，X就是一个本地的binder对象；如果B想访问A的X对象，这对于B来说，X就是一个handle。因此，从根本上来说handle和binder都指向X。本地对象还可以带有额外的数据，保存在cookie中。</p>
<h3 id="binder-node"><a href="#binder-node" class="headerlink" title="binder_node"></a>binder_node</h3><p><code>binder_node</code> 代表一个内核中的binder实体，每一个binder_node都关联到用户态的BBinder对象。Binder实体服务其实有两种，一是通过addService注册到ServiceManager中的服务，比如ActivityManagerService、PackageManagerService、PowerManagerService等，一般都是系统服务；还有一种是通过bindService拉起的一些服务，一般是开发者自己实现的服务。</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">binder_node</span> &#123;</span></span><br><span class="line">	<span class="keyword">int</span> debug_id;</span><br><span class="line">	<span class="class"><span class="keyword">struct</span> <span class="title">binder_work</span> <span class="title">work</span>;</span><span class="comment">//work.type=BINDER_WORK_NODE</span></span><br><span class="line">	<span class="class"><span class="keyword">union</span> &#123;</span></span><br><span class="line">		<span class="class"><span class="keyword">struct</span> <span class="title">rb_node</span> <span class="title">rb_node</span>;</span><span class="comment">//binder_node通过本节点，链入到binder_proc的nodes成员所指向的红黑树中</span></span><br><span class="line">		<span class="class"><span class="keyword">struct</span> <span class="title">hlist_node</span> <span class="title">dead_node</span>;</span></span><br><span class="line">	&#125;;</span><br><span class="line">	<span class="class"><span class="keyword">struct</span> <span class="title">binder_proc</span> *<span class="title">proc</span>;</span><span class="comment">//binder_node所属进程的binder_proc</span></span><br><span class="line">	<span class="class"><span class="keyword">struct</span> <span class="title">hlist_head</span> <span class="title">refs</span>;</span><span class="comment">//binder_ref列表，储存了所有引用本binder_node的binder_ref</span></span><br><span class="line">	<span class="keyword">int</span> internal_strong_refs;<span class="comment">//指向本binder_node的强binder_ref计数</span></span><br><span class="line">	<span class="keyword">int</span> local_weak_refs;<span class="comment">//本地弱引用计数</span></span><br><span class="line">	<span class="keyword">int</span> local_strong_refs;<span class="comment">//本地强引用计数</span></span><br><span class="line">	<span class="keyword">void</span> __user *ptr;<span class="comment">//指向用户态Binder实例的指针，通常指向BBinder的弱引用</span></span><br><span class="line">	<span class="keyword">void</span> __user *cookie;<span class="comment">//自定义数据，通常为指向BBinder的指针</span></span><br><span class="line">	<span class="keyword">unsigned</span> has_strong_ref : <span class="number">1</span>;</span><br><span class="line">	<span class="keyword">unsigned</span> pending_strong_ref : <span class="number">1</span>;</span><br><span class="line">	<span class="keyword">unsigned</span> has_weak_ref : <span class="number">1</span>;</span><br><span class="line">	<span class="keyword">unsigned</span> pending_weak_ref : <span class="number">1</span>;</span><br><span class="line">	<span class="keyword">unsigned</span> has_async_transaction : <span class="number">1</span>;</span><br><span class="line">	<span class="keyword">unsigned</span> accept_fds : <span class="number">1</span>;</span><br><span class="line">	<span class="keyword">int</span> min_priority : <span class="number">8</span>;<span class="comment">//最低优先级</span></span><br><span class="line">	<span class="class"><span class="keyword">struct</span> <span class="title">list_head</span> <span class="title">async_todo</span>;</span><span class="comment">//异步binder</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<h3 id="binder-ref"><a href="#binder-ref" class="headerlink" title="binder_ref"></a>binder_ref</h3><p><code>binder_ref</code> 代表内核中的binder引用，用户态每一个有效的BpBinder都关联到特定的binder_ref。同时binder_ref总是关联到一个binder_node</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">binder_ref</span> &#123;</span></span><br><span class="line">	<span class="comment">/* Lookups needed: */</span></span><br><span class="line">	<span class="comment">/*   node + proc =&gt; ref (transaction) */</span></span><br><span class="line">	<span class="comment">/*   desc + proc =&gt; ref (transaction, inc/dec ref) */</span></span><br><span class="line">	<span class="comment">/*   node =&gt; refs + procs (proc exit) */</span></span><br><span class="line">	<span class="keyword">int</span> debug_id;</span><br><span class="line">	<span class="class"><span class="keyword">struct</span> <span class="title">rb_node</span> <span class="title">rb_node_desc</span>;</span><span class="comment">//binder_ref通过本节点，链入到binder_proc的refs_by_desc所指向的红黑树中</span></span><br><span class="line">	<span class="class"><span class="keyword">struct</span> <span class="title">rb_node</span> <span class="title">rb_node_node</span>;</span><span class="comment">//同上，链入到binder_proc的refs_by_node所指向的红黑树中</span></span><br><span class="line">	<span class="class"><span class="keyword">struct</span> <span class="title">hlist_node</span> <span class="title">node_entry</span>;</span><span class="comment">//binder_ref通过本节点，链入到binder_node的refs成员所指向的双向链表中</span></span><br><span class="line">	<span class="class"><span class="keyword">struct</span> <span class="title">binder_proc</span> *<span class="title">proc</span>;</span><span class="comment">//所属的binder_proc</span></span><br><span class="line">	<span class="class"><span class="keyword">struct</span> <span class="title">binder_node</span> *<span class="title">node</span>;</span><span class="comment">//所指向的binder_node</span></span><br><span class="line">	<span class="keyword">uint32_t</span> desc;<span class="comment">//序号,等于BpBinder.mhandle</span></span><br><span class="line">	<span class="keyword">int</span> strong;<span class="comment">//强引用计数</span></span><br><span class="line">	<span class="keyword">int</span> weak;<span class="comment">//弱引用计数</span></span><br><span class="line">	<span class="class"><span class="keyword">struct</span> <span class="title">binder_ref_death</span> *<span class="title">death</span>;</span><span class="comment">//Binder死亡通知</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<h3 id="binder-proc"><a href="#binder-proc" class="headerlink" title="binder_proc"></a>binder_proc</h3><p>binder_proc代表了使用binder driver的process，保存了process的相关信息。binder driver会为每一个调用过open函数打开“dev/binder”文件的进程创建一个binder_proc.</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"> <span class="comment">//binder_proc的结构</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">binder_proc</span> &#123;</span></span><br><span class="line">	<span class="class"><span class="keyword">struct</span> <span class="title">hlist_node</span> <span class="title">proc_node</span>;</span> <span class="comment">//全局binder_proc列表，双向列表</span></span><br><span class="line">	<span class="class"><span class="keyword">struct</span> <span class="title">rb_root</span> <span class="title">threads</span>;</span> <span class="comment">//binder_thread红黑树，process内使用binder driver的线程都会被保存在这颗红黑树中</span></span><br><span class="line">	<span class="class"><span class="keyword">struct</span> <span class="title">rb_root</span> <span class="title">nodes</span>;</span> <span class="comment">//binder_node（binder实体）红黑树，process所持有的binder_node都保存在这颗红黑树中</span></span><br><span class="line">	<span class="class"><span class="keyword">struct</span> <span class="title">rb_root</span> <span class="title">refs_by_desc</span>;</span><span class="comment">//binder_ref（binder引用）红黑树，process所持有的biner_refs都会保存在颗红黑树中，红黑树以binder_ref.desc排序</span></span><br><span class="line">	<span class="class"><span class="keyword">struct</span> <span class="title">rb_root</span> <span class="title">refs_by_node</span>;</span><span class="comment">//同refs_by_desc，不过以binder_ref.node排序</span></span><br><span class="line">	<span class="keyword">int</span> pid;<span class="comment">//进程号</span></span><br><span class="line">	<span class="class"><span class="keyword">struct</span> <span class="title">vm_area_struct</span> *<span class="title">vma</span>;</span><span class="comment">//进程虚地址分配表</span></span><br><span class="line">	<span class="class"><span class="keyword">struct</span> <span class="title">task_struct</span> *<span class="title">tsk</span>;</span><span class="comment">//进程描述符</span></span><br><span class="line">	<span class="class"><span class="keyword">struct</span> <span class="title">files_struct</span> *<span class="title">files</span>;</span><span class="comment">//文件描述符列表</span></span><br><span class="line">	<span class="class"><span class="keyword">struct</span> <span class="title">hlist_node</span> <span class="title">deferred_work_node</span>;</span></span><br><span class="line">	<span class="keyword">int</span> deferred_work;</span><br><span class="line">	<span class="keyword">void</span> *buffer;<span class="comment">//binder缓冲区在内核态的地址</span></span><br><span class="line">	<span class="keyword">ptrdiff_t</span> user_buffer_offset;<span class="comment">//binder缓冲区在内核态地址与用户态地址的偏移量</span></span><br><span class="line"></span><br><span class="line">	<span class="class"><span class="keyword">struct</span> <span class="title">list_head</span> <span class="title">buffers</span>;</span><span class="comment">//binder_buffer列表</span></span><br><span class="line">	<span class="class"><span class="keyword">struct</span> <span class="title">rb_root</span> <span class="title">free_buffers</span>;</span><span class="comment">//空闲binder_buffer红黑树</span></span><br><span class="line">	<span class="class"><span class="keyword">struct</span> <span class="title">rb_root</span> <span class="title">allocated_buffers</span>;</span><span class="comment">//已分配binder_buffer红黑树</span></span><br><span class="line">	<span class="keyword">size_t</span> free_async_space;</span><br><span class="line"> </span><br><span class="line">	<span class="class"><span class="keyword">struct</span> <span class="title">page</span> **<span class="title">pages</span>;</span><span class="comment">//内存分配页表</span></span><br><span class="line">	<span class="keyword">size_t</span> buffer_size;<span class="comment">//binder缓冲区到大小</span></span><br><span class="line">	<span class="keyword">uint32_t</span> buffer_free;<span class="comment">//空闲的binder缓冲区</span></span><br><span class="line">	<span class="class"><span class="keyword">struct</span> <span class="title">list_head</span> <span class="title">todo</span>;</span><span class="comment">//binder_work列表，等待被处理的binder_work</span></span><br><span class="line">	<span class="keyword">wait_queue_head_t</span> wait;<span class="comment">//linux内核等待队列，参考函数wait_event&amp;wake_up</span></span><br><span class="line">	<span class="class"><span class="keyword">struct</span> <span class="title">binder_stats</span> <span class="title">stats</span>;</span></span><br><span class="line">	<span class="class"><span class="keyword">struct</span> <span class="title">list_head</span> <span class="title">delivered_death</span>;</span></span><br><span class="line">	<span class="keyword">int</span> max_threads;<span class="comment">//最大线程数量</span></span><br><span class="line">	<span class="keyword">int</span> requested_threads;</span><br><span class="line">	<span class="keyword">int</span> requested_threads_started;</span><br><span class="line">	<span class="keyword">int</span> ready_threads;</span><br><span class="line">	<span class="keyword">long</span> default_priority;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<h3 id="binder-procs"><a href="#binder-procs" class="headerlink" title="binder_procs"></a>binder_procs</h3><p>binder_procs结构的定义：</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">static</span> <span class="title">HLIST_HEAD</span><span class="params">(binder_procs)</span></span>;</span><br></pre></td></tr></table></figure>
<p>展开后得到</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">hlist_head</span> <span class="title">binder_procs</span>  =</span> &#123; .first = <span class="literal">NULL</span> &#125;;</span><br></pre></td></tr></table></figure>
<p>随着后续不断向binder_procs表中添加节点，这个表会不断加长，示意图如下：</p>
<p><img src="/2018/08/18/Android-binder%E5%8E%9F%E7%90%86%E5%92%8C%E8%AE%BE%E8%AE%A1/binder_11.png" alt="binder_procs"></p>
<h3 id="binder-thread"><a href="#binder-thread" class="headerlink" title="binder_thread"></a>binder_thread</h3><p>binder_thread代表了binder_proc内的线程，保存了线程相关信息。binder driver会为每一个调用过ioctl函数操作“dev/binder”文件的线程创建binder_thread.</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">binder_thread</span> &#123;</span></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">binder_proc</span> *<span class="title">proc</span>;</span><span class="comment">//线程所属进程的binder_proc</span></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">rb_node</span> <span class="title">rb_node</span>;</span><span class="comment">//binder_thread通过rb_node链入到binder_proc的threads成员指向的红黑树中</span></span><br><span class="line">    <span class="keyword">int</span> pid;<span class="comment">//线程号,为什么线程号也叫pid呢？</span></span><br><span class="line">    <span class="keyword">int</span> looper;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">binder_transaction</span> *<span class="title">transaction_stack</span>;</span><span class="comment">//暂存binder_transaction</span></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">list_head</span> <span class="title">todo</span>;</span><span class="comment">//binder_work列表，等待被处理的binder_work</span></span><br><span class="line">    <span class="keyword">uint32_t</span> return_error; <span class="comment">/* Write failed, return error code in read buf */</span></span><br><span class="line">    <span class="keyword">uint32_t</span> return_error2; <span class="comment">/* Write failed, return error code in read */</span></span><br><span class="line">        <span class="comment">/* buffer. Used when sending a reply to a dead process that */</span></span><br><span class="line">        <span class="comment">/* we are also waiting on */</span></span><br><span class="line">    <span class="keyword">wait_queue_head_t</span> wait;<span class="comment">//linux内核等待队列，参考函数wait_event&amp;wake_up</span></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">binder_stats</span> <span class="title">stats</span>;</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<h3 id="binder-write-read"><a href="#binder-write-read" class="headerlink" title="binder_write_read"></a>binder_write_read</h3><p>binder_write_read为BINDER_WRITE_READ指定的数据类型，它的定义如下：</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">binder_write_read</span> &#123;</span></span><br><span class="line">	<span class="keyword">signed</span> <span class="keyword">long</span>	write_size;	<span class="comment">/* bytes to write */</span></span><br><span class="line">	<span class="keyword">signed</span> <span class="keyword">long</span>	write_consumed;	<span class="comment">/* bytes consumed by driver */</span></span><br><span class="line">	<span class="keyword">unsigned</span> <span class="keyword">long</span>	write_buffer;</span><br><span class="line">	<span class="keyword">signed</span> <span class="keyword">long</span>	read_size;	<span class="comment">/* bytes to read */</span></span><br><span class="line">	<span class="keyword">signed</span> <span class="keyword">long</span>	read_consumed;	<span class="comment">/* bytes consumed by driver */</span></span><br><span class="line">	<span class="keyword">unsigned</span> <span class="keyword">long</span>	read_buffer;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<h3 id="binder-transaction-data"><a href="#binder-transaction-data" class="headerlink" title="binder_transaction_data"></a>binder_transaction_data</h3><p>binder_transaction_data为写入协议BC_TRANSACTION、BC_REPLY以及读出协议BR_TRANSACTION、BR_REPLY所指定的数据类型，Binder驱动的使用者（e.i. Client、Service、Service Manager）通过binder_transaction_data和Binder driver进行数据交换。</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">binder_transaction_data</span> &#123;</span></span><br><span class="line">	<span class="comment">/* The first two are only used for bcTRANSACTION and brTRANSACTION,</span></span><br><span class="line"><span class="comment">	 * identifying the target and contents of the transaction.</span></span><br><span class="line"><span class="comment">	 */</span></span><br><span class="line">	<span class="class"><span class="keyword">union</span> &#123;</span></span><br><span class="line">		<span class="keyword">size_t</span>	handle;	<span class="comment">/* target descriptor of command transaction */</span></span><br><span class="line">		<span class="keyword">void</span>	*ptr;	<span class="comment">/* target descriptor of return transaction */</span></span><br><span class="line">	&#125; target;</span><br><span class="line">	<span class="keyword">void</span>		*cookie;	<span class="comment">/* target object cookie */</span></span><br><span class="line">	<span class="keyword">unsigned</span> <span class="keyword">int</span>	code;		<span class="comment">/* transaction command */</span> <span class="comment">//Service自定义的指令码，以SeviceManager的addService为函数例的话，code=ADD_SERVICE_TRANSACTION</span></span><br><span class="line">	<span class="comment">/* General information about the transaction. */</span></span><br><span class="line">	<span class="keyword">unsigned</span> <span class="keyword">int</span>	flags; <span class="comment">//TF_ACCEPT_FDS TF_ONE_WAY</span></span><br><span class="line">	<span class="keyword">pid_t</span>		sender_pid; <span class="comment">//发送方进程id</span></span><br><span class="line">	<span class="keyword">uid_t</span>		sender_euid; <span class="comment">//发送方用户id</span></span><br><span class="line">	<span class="keyword">size_t</span>		data_size;	<span class="comment">/* number of bytes of data */</span></span><br><span class="line">	<span class="keyword">size_t</span>		offsets_size;	<span class="comment">/* number of bytes of offsets */</span></span><br><span class="line"></span><br><span class="line">	<span class="comment">/* If this transaction is inline, the data immediately</span></span><br><span class="line"><span class="comment">	 * follows here; otherwise, it ends with a pointer to</span></span><br><span class="line"><span class="comment">	 * the data buffer.</span></span><br><span class="line"><span class="comment">	 */</span></span><br><span class="line">	<span class="class"><span class="keyword">union</span> &#123;</span></span><br><span class="line">		<span class="class"><span class="keyword">struct</span> &#123;</span> </span><br><span class="line">			<span class="comment">/* transaction data */</span></span><br><span class="line">			<span class="keyword">const</span> <span class="keyword">void</span>	*buffer; </span><br><span class="line">			<span class="comment">/* offsets from buffer to flat_binder_object structs */</span></span><br><span class="line">			<span class="keyword">const</span> <span class="keyword">void</span>	*offsets;</span><br><span class="line">		&#125; ptr;</span><br><span class="line">		<span class="keyword">uint8_t</span>	buf[<span class="number">8</span>];</span><br><span class="line">	&#125; data;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<p>就像注释中说明的那样，target成员和cookie成员仅在BC_TRANSACTION和BR_TRANSACTION协议中使用。通常，Client使用BC_TRANSACTION协议写入数据时，需要通过target.handle指定数据接收方。而Service读取到BR_TRANSACTION的binder_transaction_data.ptr成员保存了用户空间binder实体的地址（实际上，BBinder的弱引用地址），而cookie成员保存了用户数据（实际上，cookie才真正保存了BBinder的地址）。而使用BC_REPLY写入时，Binder driver忽略这两个参数，而读取到BR_REPLY的 binder_transaction_data的target和cookie成员则恒为空。 </p>
<p>最后，也是对于理解binder_transaction_data最重要的一点，binder_transaction_data结构体，并不包含传输的数据，而是通过其ptr.buffer成员保存了数据的内存地址。而ptr.offsets成员则保存了Binder对象（或者说flat_binder_object）在ptr.buffer的偏移量数组的首地址。data_size成员则记录了数据的长度，offsets_size则是编译量数组的长度（以字节为单位，所以，编译量数组实际的长度是offsets_size/4)。</p>
<h2 id="binder-用户接口"><a href="#binder-用户接口" class="headerlink" title="binder 用户接口"></a>binder 用户接口</h2><ol>
<li><p><code>binder_open()</code> </p>
 <figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">int</span> <span class="title">binder_open</span><span class="params">(struct inode *nodp, struct file *filp)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">binder_proc</span> *<span class="title">proc</span>;</span></span><br><span class="line"></span><br><span class="line">    . . . . . .</span><br><span class="line">    proc = kzalloc(<span class="keyword">sizeof</span>(*proc), GFP_KERNEL);</span><br><span class="line"></span><br><span class="line">    get_task_struct(current);</span><br><span class="line">    proc-&gt;tsk = current;</span><br><span class="line">    . . . . . .</span><br><span class="line">    hlist_add_head(&amp;proc-&gt;proc_node, &amp;binder_procs);</span><br><span class="line">    proc-&gt;pid = current-&gt;group_leader-&gt;pid;</span><br><span class="line">    . . . . . .</span><br><span class="line">    filp-&gt;private_data = proc;</span><br><span class="line">    . . . . . .</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p> 主要做了以下几件事情：</p>
<ol>
<li>首先，binder驱动分配内存以保存binder_proc数据结构。然后，binder填充binder_proc数据（初始化），增加当前线程/进程的引用计数并赋值给tsk</li>
<li>增加BINDER_STAT_PROC的对象计数，并把创建的binder_proc对象添加到全局的binder_procs中，这样任何一个进程就都可以访问到其他进程的binder_proc对象了。</li>
<li>把binder_proc对象指针赋值给filp的private_data域中，在后面每次执行binder_ioctl()，都会从filp-&gt;private_data域重新读取binder_proc。</li>
</ol>
</li>
<li><p><code>binder_mmap()</code><br> 内存的映射：<br> <img src="/2018/08/18/Android-binder%E5%8E%9F%E7%90%86%E5%92%8C%E8%AE%BE%E8%AE%A1/binder_19.png" alt="binder_19"></p>
 <figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">int</span> <span class="title">binder_mmap</span><span class="params">(struct file *filp, struct vm_area_struct *vma)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> ret;</span><br><span class="line">    <span class="comment">//需要映射的内核空间地址信息</span></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">vm_struct</span> *<span class="title">area</span>;</span></span><br><span class="line">    <span class="comment">//取出binder_open时保存的binder_proc数据</span></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">binder_proc</span> *<span class="title">proc</span> =</span> filp-&gt;private_data;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">binder_buffer</span> *<span class="title">buffer</span>;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">//保证这块内存最多只有4M  </span></span><br><span class="line">    <span class="keyword">if</span> ((vma-&gt;vm_end - vma-&gt;vm_start) &gt; SZ_4M)</span><br><span class="line">        vma-&gt;vm_end = vma-&gt;vm_start + SZ_4M;</span><br><span class="line"></span><br><span class="line">    vma-&gt;vm_flags = (vma-&gt;vm_flags | VM_DONTCOPY) &amp; ~VM_MAYWRITE;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//申请一段内存空间给内核进程</span></span><br><span class="line">    area = get_vm_area(vma-&gt;vm_end - vma-&gt;vm_start, VM_IOREMAP);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//得到映射的内核空间虚拟地址首地址</span></span><br><span class="line">    proc-&gt;buffer = area-&gt;addr;</span><br><span class="line">    <span class="comment">//计算用户空间与映射的内核空间的地址偏移量</span></span><br><span class="line">    proc-&gt;user_buffer_offset = vma-&gt;vm_start - (<span class="keyword">uintptr_t</span>)proc-&gt;buffer;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//得到映射地址的页数</span></span><br><span class="line">    proc-&gt;pages = kzalloc(<span class="keyword">sizeof</span>(proc-&gt;pages[<span class="number">0</span>]) * ((vma-&gt;vm_end - vma-&gt;vm_start) / PAGE_SIZE), GFP_KERNEL);</span><br><span class="line">    <span class="comment">//映射空间的大小</span></span><br><span class="line">    proc-&gt;buffer_size = vma-&gt;vm_end - vma-&gt;vm_start;</span><br><span class="line"></span><br><span class="line">    vma-&gt;vm_ops = &amp;binder_vm_ops;</span><br><span class="line">    vma-&gt;vm_private_data = proc;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//为虚拟地址空间proc-&gt;buffer ~ proc-&gt;buffer + PAGE_SIZE  分配一个空闲的物理页面</span></span><br><span class="line">    <span class="keyword">if</span> (binder_update_page_range(proc, <span class="number">1</span>, proc-&gt;buffer, proc-&gt;buffer + PAGE_SIZE, vma)) &#123;</span><br><span class="line">        ret = -ENOMEM;</span><br><span class="line">        failure_string = <span class="string">&quot;alloc small buf&quot;</span>;</span><br><span class="line">        <span class="keyword">goto</span> err_alloc_small_buf_failed;</span><br><span class="line">    &#125;</span><br><span class="line">    buffer = proc-&gt;buffer;</span><br><span class="line">    INIT_LIST_HEAD(&amp;proc-&gt;buffers);</span><br><span class="line">    list_add(&amp;buffer-&gt;entry, &amp;proc-&gt;buffers);</span><br><span class="line">    buffer-&gt;<span class="built_in">free</span> = <span class="number">1</span>;</span><br><span class="line">    binder_insert_free_buffer(proc, buffer);</span><br><span class="line">    proc-&gt;free_async_space = proc-&gt;buffer_size / <span class="number">2</span>;</span><br><span class="line">    barrier();</span><br><span class="line">    proc-&gt;files = get_files_struct(current);</span><br><span class="line">    proc-&gt;vma = vma;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">err_alloc_small_buf_failed:</span><br><span class="line">    kfree(proc-&gt;pages);</span><br><span class="line">    proc-&gt;pages = <span class="literal">NULL</span>;</span><br><span class="line">err_alloc_pages_failed:</span><br><span class="line">    vfree(proc-&gt;buffer);</span><br><span class="line">    proc-&gt;buffer = <span class="literal">NULL</span>;</span><br><span class="line">err_get_vm_area_failed:</span><br><span class="line">err_already_mapped:</span><br><span class="line">err_bad_arg:</span><br><span class="line">    <span class="keyword">return</span> ret;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">int</span> <span class="title">binder_update_page_range</span><span class="params">(struct binder_proc *proc, <span class="keyword">int</span> allocate, <span class="keyword">void</span> *start, <span class="keyword">void</span> *end, struct vm_area_struct *vma)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">void</span> *page_addr;</span><br><span class="line">    <span class="keyword">unsigned</span> <span class="keyword">long</span> user_page_addr;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">vm_struct</span> <span class="title">tmp_area</span>;</span></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">page</span> **<span class="title">page</span>;</span></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">mm_struct</span> *<span class="title">mm</span>;</span></span><br><span class="line">    <span class="comment">//以页为单位分配物理页面，由于此时的end=start+PAGE_SIZE，因此只会循环一次</span></span><br><span class="line">    <span class="keyword">for</span> (page_addr = start; page_addr &lt; end; page_addr += PAGE_SIZE) &#123;</span><br><span class="line">        <span class="keyword">int</span> ret;</span><br><span class="line">        <span class="class"><span class="keyword">struct</span> <span class="title">page</span> **<span class="title">page_array_ptr</span>;</span></span><br><span class="line">        page = &amp;proc-&gt;pages[(page_addr - proc-&gt;buffer) / PAGE_SIZE];</span><br><span class="line"></span><br><span class="line">        <span class="comment">//分配物理页面</span></span><br><span class="line">        *page = alloc_page(GFP_KERNEL | __GFP_ZERO);</span><br><span class="line">        <span class="keyword">if</span> (*page == <span class="literal">NULL</span>) &#123;</span><br><span class="line">            <span class="keyword">goto</span> err_alloc_page_failed;</span><br><span class="line">        &#125;</span><br><span class="line">        tmp_area.addr = page_addr;</span><br><span class="line">        tmp_area.size = PAGE_SIZE + PAGE_SIZE <span class="comment">/* guard page? */</span>;</span><br><span class="line">        page_array_ptr = page;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//把这个物理页面插入到内核空间去</span></span><br><span class="line">        ret = map_vm_area(&amp;tmp_area, PAGE_KERNEL, &amp;page_array_ptr);</span><br><span class="line">        <span class="keyword">if</span> (ret) &#123;</span><br><span class="line">            <span class="keyword">goto</span> err_map_kernel_failed;</span><br><span class="line">        &#125;</span><br><span class="line">        user_page_addr = (<span class="keyword">uintptr_t</span>)page_addr + proc-&gt;user_buffer_offset;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//将这个物理页面插入到进程地址空间去</span></span><br><span class="line">        ret = vm_insert_page(vma, user_page_addr, page[<span class="number">0</span>]);</span><br><span class="line">        <span class="keyword">if</span> (ret) &#123;</span><br><span class="line">            <span class="keyword">goto</span> err_vm_insert_page_failed;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li><p><code>binder_ioctl()</code><br> 这个函数是Binder的最核心部分，Binder的功能就是通过ioctl命令来实现的。Binder的ioctl命令共有7个，定义在ioctl.h头文件中：</p>
 <figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">define</span> BINDER_WRITE_READ               _IOWR(<span class="meta-string">&#x27;b&#x27;</span>, 1, struct binder_write_read)</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> BINDER_SET_IDLE_TIMEOUT         _IOW(<span class="meta-string">&#x27;b&#x27;</span>, 3, int64_t)</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> BINDER_SET_MAX_THREADS          _IOW(<span class="meta-string">&#x27;b&#x27;</span>, 5, size_t)</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> BINDER_SET_IDLE_PRIORITY        _IOW(<span class="meta-string">&#x27;b&#x27;</span>, 6, int)</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> BINDER_SET_CONTEXT_MGR          _IOW(<span class="meta-string">&#x27;b&#x27;</span>, 7, int)</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> BINDER_THREAD_EXIT              _IOW(<span class="meta-string">&#x27;b&#x27;</span>, 8, int)</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> BINDER_VERSION                  _IOWR(<span class="meta-string">&#x27;b&#x27;</span>, 9, struct binder_version)</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p> 首先是BINDER_SET_IDLE_TIMEOUT 和 BINDER_SET_IDLE_PRIORITY在目前的Binder驱动中没有实现。</p>
<ol>
<li><p>BINDER_SET_MAX_THREADS</p>
<p> 这个ioctl命令用于设置进程的Biner对象所支持的最大线程数。设置的值保存在binder_proc结构的max_threads成员里。</p>
</li>
<li><p>BINDER_SET_CONTEXT_MGR</p>
<p> 从功能上看，只有一个进程/线程能成功设置binder_context_mgr_node对象，这个进程被称为Context Manager（context_mgr）。当然，也只有创建binder_context_mgr_node对象的Binder上下文管理进程/线程才有权限重新设置这个对象。进程的权限（cred-&gt;euid）保存在binder_context_mgr_uid对象里。</p>
<p> 从接口的角度来说，这是一个进程想要成为一个Context Manager的唯一接口。一个Context Manager进程需要为binder_proc创建一个binder_node类型的节点。节点是通过binder_new_node函数来创建的，我们在后面在详细讲解这个函数。节点创建成功后内核会初始化节点的部分数据（weak_ref和strong_ref）</p>
<p> 对于ContextManager对象来说，binder_node是binder_context_mgr_node，这个是全局变量；这个binder对象的索引（handler）固定为0</p>
</li>
<li><p>BINDER_THREAD_EXIT</p>
<p> 通过调用binder_free_thread终止并释放binder_thread对象及其binder_transaction事务。</p>
</li>
<li><p>BINDER_VERSION<br> 读取当前Binder驱动支持的协议版本号。</p>
</li>
<li><p>BINDER_WRITE_READ</p>
<p> 这个ioctl命令是Binder最核心的部分，Android Binder的IPC机制就是通过这个接口来实现的。</p>
</li>
</ol>
</li>
</ol>
<blockquote>
<p>引用：<br><a href="https://www.jianshu.com/p/adaa1a39a274">听说你Binder机制学的不错，来面试下这几个问题</a><br><a href="https://blog.csdn.net/luoshengyang/article/details/6618363">Android进程间通信（IPC）机制Binder简要介绍和学习计划</a><br><a href="https://blog.csdn.net/yangwen123/article/details/9316987">深入分析Android Binder 驱动</a><br><a href="https://my.oschina.net/youranhongcha/blog/152233">红茶一杯话Binder</a></p>
</blockquote>
]]></content>
      <categories>
        <category>android_framework</category>
      </categories>
      <tags>
        <tag>binder</tag>
      </tags>
  </entry>
  <entry>
    <title>Android控件-RecyclerView</title>
    <url>/2018/09/05/Android%E6%8E%A7%E4%BB%B6-RecyclerView/</url>
    <content><![CDATA[<p>RecyclerView 是谷歌官方推出的控件，可以完全取代listView,根据不同的layoutManager实现不同的显示效果。<a href="https://www.bilibili.com/video/av24828197">这里</a> 有一个谷歌的RecyclerView视频介绍<a id="more"></a> ，里面提到ListView的主要问题在于，它只是知道数据变了却不知道哪里变了，因此难以设置动画， RecyclerView 则很好的解决了这个问题。然后是listview生成view的时候还需要开发者去写contentView相关的代码，很麻烦，RecyclerView 中则不需要。</p>
<p>这里打算按照操作顺序来阅读。对RecyclerView的基本使用是:</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">RecyclerView recyclerView = <span class="keyword">new</span> RecyclerView(<span class="keyword">this</span>);</span><br><span class="line">recyclerView.setLayoutManager(<span class="keyword">new</span> LinearLayoutManager(<span class="keyword">this</span>));</span><br><span class="line">recyclerView.setAdapter(<span class="keyword">new</span> RecyclerView.Adapter() &#123;</span><br><span class="line">    <span class="meta">@NonNull</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> RecyclerView.<span class="function">ViewHolder <span class="title">onCreateViewHolder</span><span class="params">(<span class="meta">@NonNull</span> ViewGroup parent, <span class="keyword">int</span> viewType)</span> </span>&#123;</span><br><span class="line">        TextView textView = <span class="keyword">new</span> TextView(parent.getContext());</span><br><span class="line">        textView.setText(<span class="string">&quot;123&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> RecyclerView.ViewHolder(textView) &#123;</span><br><span class="line">        &#125;;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onBindViewHolder</span><span class="params">(<span class="meta">@NonNull</span> RecyclerView.ViewHolder holder, <span class="keyword">int</span> position)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getItemCount</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">3</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>
<ol>
<li><p>首先是调用了构造函数，构造函数里面初始化了一些变量，这个没什么好说的，</p>
 <figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">RecyclerView</span><span class="params">(...)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">super</span>(context, attrs, defStyle);</span><br><span class="line">    ...</span><br><span class="line">    setWillNotDraw(getOverScrollMode() == View.OVER_SCROLL_NEVER);</span><br><span class="line">    mItemAnimator.setListener(mItemAnimatorListener);</span><br><span class="line">    initAdapterManager();</span><br><span class="line">    initChildrenHelper();</span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p> 其中，AdapterHelper主要用来处理Adapter的操作，入队，更新等并且通过callback回调回RecyclerView来。它还定义了一个内部类UpdateOp，用来封装数据的增删改和移动的操作，并且维护了一个UpdateOp的数组。<br> ChildHelper则主要帮助RecyclerView来管理子view,它内部维护了一个 List<View> mHiddenViews 数组。</View></p>
</li>
<li><p>然后是setLayoutManager:</p>
 <figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setLayoutManager</span><span class="params">(LayoutManager layout)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (layout == mLayout) &#123;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    stopScroll();</span><br><span class="line">    <span class="comment">// TODO We should do this switch a dispatchLayout pass and animate children. There is a good</span></span><br><span class="line">    <span class="comment">// chance that LayoutManagers will re-use views.</span></span><br><span class="line">    <span class="keyword">if</span> (mLayout != <span class="keyword">null</span>) &#123;</span><br><span class="line">        ...</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        mRecycler.clear();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// this is just a defensive measure for faulty item animators.</span></span><br><span class="line">    mChildHelper.removeAllViewsUnfiltered();</span><br><span class="line">    mLayout = layout;</span><br><span class="line">    <span class="keyword">if</span> (layout != <span class="keyword">null</span>) &#123;</span><br><span class="line">        <span class="keyword">if</span> (layout.mRecyclerView != <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> IllegalArgumentException(<span class="string">&quot;LayoutManager &quot;</span> + layout</span><br><span class="line">                    + <span class="string">&quot; is already attached to a RecyclerView:&quot;</span></span><br><span class="line">                    + layout.mRecyclerView.exceptionLabel());</span><br><span class="line">        &#125;</span><br><span class="line">        mLayout.setRecyclerView(<span class="keyword">this</span>);</span><br><span class="line">        <span class="keyword">if</span> (mIsAttached) &#123;</span><br><span class="line">            mLayout.dispatchAttachedToWindow(<span class="keyword">this</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    mRecycler.updateViewCacheSize();</span><br><span class="line">    requestLayout();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p> 这里就是把 mLayout 赋值给 RecyclerView ，同时也把 RecyclerView 的引用交给 mLayout 。需要注意的是如果这个时候RecyclerView已经attach到窗口了，会再分发一次dispatchAttachedToWindow()消息。最后调用了requestLayout()</p>
</li>
<li><p>然后是 recyclerView.setAdapter():</p>
 <figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setAdapter</span><span class="params">(Adapter adapter)</span> </span>&#123;</span><br><span class="line">    <span class="comment">// bail out if layout is frozen</span></span><br><span class="line">    setLayoutFrozen(<span class="keyword">false</span>);</span><br><span class="line">    setAdapterInternal(adapter, <span class="keyword">false</span>, <span class="keyword">true</span>);</span><br><span class="line">    processDataSetCompletelyChanged(<span class="keyword">false</span>);</span><br><span class="line">    requestLayout();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p> 这里主要的流程当然是<code>setAdapterInternal(adapter, false, true)</code>,不过还是先看看setLayoutFrozen()和requestLayout(),后面会反复用到里面的变量。</p>
 <figure class="highlight java"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">//采用类似引用技术的方式来控制 requestLayout() 的调用，本身 requestLayout() 是有防止重复调用的机制的，这里为了提高效率减少刷新又增加了一层机制</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">int</span> mInterceptRequestLayoutDepth = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 如果  mInterceptRequestLayoutDepth == 0 并且 mLayoutFrozen是false，才真正requestLayout</span></span><br><span class="line"><span class="comment">// 否则 仅仅是把标志位mLayoutWasDefered改成false</span></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">requestLayout</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (mInterceptRequestLayoutDepth == <span class="number">0</span> &amp;&amp; !mLayoutFrozen) &#123;</span><br><span class="line">        <span class="keyword">super</span>.requestLayout();</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        mLayoutWasDefered = <span class="keyword">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">startInterceptRequestLayout</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    mInterceptRequestLayoutDepth++;</span><br><span class="line">    <span class="keyword">if</span> (mInterceptRequestLayoutDepth == <span class="number">1</span> &amp;&amp; !mLayoutFrozen) &#123;</span><br><span class="line">        mLayoutWasDefered = <span class="keyword">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">stopInterceptRequestLayout</span><span class="params">(<span class="keyword">boolean</span> performLayoutChildren)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (mInterceptRequestLayoutDepth &lt; <span class="number">1</span>) &#123;</span><br><span class="line">        <span class="comment">//noinspection PointlessBooleanExpression</span></span><br><span class="line">        <span class="keyword">if</span> (DEBUG) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> IllegalStateException(<span class="string">&quot;stopInterceptRequestLayout was called more &quot;</span></span><br><span class="line">                    + <span class="string">&quot;times than startInterceptRequestLayout.&quot;</span></span><br><span class="line">                    + exceptionLabel());</span><br><span class="line">        &#125;</span><br><span class="line">        mInterceptRequestLayoutDepth = <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (!performLayoutChildren &amp;&amp; !mLayoutFrozen) &#123;</span><br><span class="line">        <span class="comment">// Reset the layout request eaten counter.</span></span><br><span class="line">        <span class="comment">// This is necessary since eatRequest calls can be nested in which case the other</span></span><br><span class="line">        <span class="comment">// call will override the inner one.</span></span><br><span class="line">        <span class="comment">// for instance:</span></span><br><span class="line">        <span class="comment">// eat layout for process adapter updates</span></span><br><span class="line">        <span class="comment">//   eat layout for dispatchLayout</span></span><br><span class="line">        <span class="comment">//     a bunch of req layout calls arrive</span></span><br><span class="line"></span><br><span class="line">        mLayoutWasDefered = <span class="keyword">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (mInterceptRequestLayoutDepth == <span class="number">1</span>) &#123;</span><br><span class="line">        <span class="comment">// when layout is frozen we should delay dispatchLayout()</span></span><br><span class="line">        <span class="keyword">if</span> (performLayoutChildren &amp;&amp; mLayoutWasDefered &amp;&amp; !mLayoutFrozen</span><br><span class="line">                &amp;&amp; mLayout != <span class="keyword">null</span> &amp;&amp; mAdapter != <span class="keyword">null</span>) &#123;</span><br><span class="line">            dispatchLayout();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (!mLayoutFrozen) &#123;</span><br><span class="line">            mLayoutWasDefered = <span class="keyword">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    mInterceptRequestLayoutDepth--;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">* True if a call to requestLayout was intercepted and prevented from executing like normal and</span></span><br><span class="line"><span class="comment">* we plan on continuing with normal execution later.</span></span><br><span class="line"><span class="comment">* True表示一个requestLayout调用被拦截了，后面会在合适的时候执行 requestLayout</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">boolean</span> mLayoutWasDefered;</span><br><span class="line"></span><br><span class="line"><span class="comment">// setAdapter的时候会调用 setLayoutFrozen(false)，其他地方暂时没看到。</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setLayoutFrozen</span><span class="params">(<span class="keyword">boolean</span> frozen)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (frozen != mLayoutFrozen) &#123;</span><br><span class="line">        assertNotInLayoutOrScroll(<span class="string">&quot;Do not setLayoutFrozen in layout or scroll&quot;</span>);</span><br><span class="line">        <span class="keyword">if</span> (!frozen) &#123;</span><br><span class="line">            mLayoutFrozen = <span class="keyword">false</span>;</span><br><span class="line">            <span class="keyword">if</span> (mLayoutWasDefered &amp;&amp; mLayout != <span class="keyword">null</span> &amp;&amp; mAdapter != <span class="keyword">null</span>) &#123;</span><br><span class="line">                requestLayout();</span><br><span class="line">            &#125;</span><br><span class="line">            mLayoutWasDefered = <span class="keyword">false</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">final</span> <span class="keyword">long</span> now = SystemClock.uptimeMillis();</span><br><span class="line">            MotionEvent cancelEvent = MotionEvent.obtain(now, now,</span><br><span class="line">                    MotionEvent.ACTION_CANCEL, <span class="number">0.0f</span>, <span class="number">0.0f</span>, <span class="number">0</span>);</span><br><span class="line">            onTouchEvent(cancelEvent);</span><br><span class="line">            mLayoutFrozen = <span class="keyword">true</span>;</span><br><span class="line">            mIgnoreMotionEventTillDown = <span class="keyword">true</span>;</span><br><span class="line">            stopScroll();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125; </span><br></pre></td></tr></table></figure>
<p>总结一下， 上面这几步基本就是初始化一些变量，然后requestLayout()更新界面。接下来则会进入onMeasure()流程，中间的具体过程可以参考 <a href="https://nangonghuang.github.io/2018/08/20/Android%E6%8E%A7%E4%BB%B6%E6%80%BB%E7%BB%93/">Android控件总结</a></p>
</li>
</ol>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onMeasure</span><span class="params">(<span class="keyword">int</span> widthSpec, <span class="keyword">int</span> heightSpec)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (mLayout == <span class="keyword">null</span>) &#123;</span><br><span class="line">        defaultOnMeasure(widthSpec, heightSpec);</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (mLayout.isAutoMeasureEnabled()) &#123;</span><br><span class="line">        <span class="keyword">final</span> <span class="keyword">int</span> widthMode = MeasureSpec.getMode(widthSpec);</span><br><span class="line">        <span class="keyword">final</span> <span class="keyword">int</span> heightMode = MeasureSpec.getMode(heightSpec);</span><br><span class="line"></span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">            * This specific call should be considered deprecated and replaced with</span></span><br><span class="line"><span class="comment">            * &#123;<span class="doctag">@link</span> #defaultOnMeasure(int, int)&#125;. It can&#x27;t actually be replaced as it could</span></span><br><span class="line"><span class="comment">            * break existing third party code but all documentation directs developers to not</span></span><br><span class="line"><span class="comment">            * override &#123;<span class="doctag">@link</span> LayoutManager#onMeasure(int, int)&#125; when</span></span><br><span class="line"><span class="comment">            * &#123;<span class="doctag">@link</span> LayoutManager#isAutoMeasureEnabled()&#125; returns true.</span></span><br><span class="line"><span class="comment">            */</span></span><br><span class="line">        mLayout.onMeasure(mRecycler, mState, widthSpec, heightSpec);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">final</span> <span class="keyword">boolean</span> measureSpecModeIsExactly =</span><br><span class="line">                widthMode == MeasureSpec.EXACTLY &amp;&amp; heightMode == MeasureSpec.EXACTLY;</span><br><span class="line">        <span class="keyword">if</span> (measureSpecModeIsExactly || mAdapter == <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (mState.mLayoutStep == State.STEP_START) &#123;</span><br><span class="line">            dispatchLayoutStep1();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// set dimensions in 2nd step. Pre-layout should happen with old dimensions for</span></span><br><span class="line">        <span class="comment">// consistency</span></span><br><span class="line">        mLayout.setMeasureSpecs(widthSpec, heightSpec);</span><br><span class="line">        mState.mIsMeasuring = <span class="keyword">true</span>;</span><br><span class="line">        dispatchLayoutStep2();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// now we can get the width and height from the children.</span></span><br><span class="line">        mLayout.setMeasuredDimensionFromChildren(widthSpec, heightSpec);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// if RecyclerView has non-exact width and height and if there is at least one child</span></span><br><span class="line">        <span class="comment">// which also has non-exact width &amp; height, we have to re-measure.</span></span><br><span class="line">        <span class="keyword">if</span> (mLayout.shouldMeasureTwice()) &#123;</span><br><span class="line">            mLayout.setMeasureSpecs(</span><br><span class="line">                    MeasureSpec.makeMeasureSpec(getMeasuredWidth(), MeasureSpec.EXACTLY),</span><br><span class="line">                    MeasureSpec.makeMeasureSpec(getMeasuredHeight(), MeasureSpec.EXACTLY));</span><br><span class="line">            mState.mIsMeasuring = <span class="keyword">true</span>;</span><br><span class="line">            dispatchLayoutStep2();</span><br><span class="line">            <span class="comment">// now we can get the width and height from the children.</span></span><br><span class="line">            mLayout.setMeasuredDimensionFromChildren(widthSpec, heightSpec);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        ...</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">defaultOnMeasure</span><span class="params">(<span class="keyword">int</span> widthSpec, <span class="keyword">int</span> heightSpec)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// calling LayoutManager here is not pretty but that API is already public and it is better</span></span><br><span class="line">        <span class="comment">// than creating another method since this is internal.</span></span><br><span class="line">        <span class="keyword">final</span> <span class="keyword">int</span> width = LayoutManager.chooseSize(widthSpec,</span><br><span class="line">                getPaddingLeft() + getPaddingRight(),</span><br><span class="line">                ViewCompat.getMinimumWidth(<span class="keyword">this</span>));</span><br><span class="line">        <span class="keyword">final</span> <span class="keyword">int</span> height = LayoutManager.chooseSize(heightSpec,</span><br><span class="line">                getPaddingTop() + getPaddingBottom(),</span><br><span class="line">               </span><br><span class="line">                ViewCompat.getMinimumHeight(<span class="keyword">this</span>));</span><br><span class="line"></span><br><span class="line">        setMeasuredDimension(width, height);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">chooseSize</span><span class="params">(<span class="keyword">int</span> spec, <span class="keyword">int</span> desired, <span class="keyword">int</span> min)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">final</span> <span class="keyword">int</span> mode = View.MeasureSpec.getMode(spec);</span><br><span class="line">        <span class="keyword">final</span> <span class="keyword">int</span> size = View.MeasureSpec.getSize(spec);</span><br><span class="line">        <span class="keyword">switch</span> (mode) &#123;</span><br><span class="line">            <span class="keyword">case</span> View.MeasureSpec.EXACTLY:</span><br><span class="line">                <span class="keyword">return</span> size;</span><br><span class="line">            <span class="keyword">case</span> View.MeasureSpec.AT_MOST:</span><br><span class="line">                <span class="keyword">return</span> Math.min(size, Math.max(desired, min));</span><br><span class="line">            <span class="keyword">case</span> View.MeasureSpec.UNSPECIFIED:</span><br><span class="line">            <span class="keyword">default</span>:</span><br><span class="line">                <span class="keyword">return</span> Math.max(desired, min);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>因为 LinearLayoutManager 的 <code>mLayout.isAutoMeasureEnabled()</code>方法直接返回了true,因此这里只看这个分支。这里面首先是调用mLayout.onMeasure()得到 defaultOnMeasure()拿到一个默认值。然后是一个判断跳过的条件，如果RecyclerView的长宽measure mode 都是 MeasureSpec.EXACTLY，那么这个控件的大小就是跟child无关的，可以直接跳过。否则的话直接在这里走 dispatchLayoutStep()的流程，而 dispatchLayoutStep2() 中会添加 childView，添加了之后再次重新 mLayout.setMeasuredDimensionFromChildren().最后判断是不是需要再次测量，再次进行测量的条件是 RecyclerView的长宽 measure mode 都不是 MeasureSpec.EXACTLY 并且子view的长宽也没有指定具体数值。</p>
<p>看一下 dispatchLayoutStep1 和 dispatchLayoutStep2</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">  * The first step of a layout where we;</span></span><br><span class="line"><span class="comment">  * - process adapter updates</span></span><br><span class="line"><span class="comment">  * - decide which animation should run</span></span><br><span class="line"><span class="comment">  * - save information about current views</span></span><br><span class="line"><span class="comment">  * - If necessary, run predictive layout and save its information</span></span><br><span class="line"><span class="comment">  */</span></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">dispatchLayoutStep1</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    mState.assertLayoutStep(State.STEP_START);</span><br><span class="line">    fillRemainingScrollValues(mState);</span><br><span class="line">    mState.mIsMeasuring = <span class="keyword">false</span>;</span><br><span class="line">    startInterceptRequestLayout();</span><br><span class="line">    mViewInfoStore.clear();</span><br><span class="line">    onEnterLayoutOrScroll();</span><br><span class="line">    processAdapterUpdatesAndSetAnimationFlags(); <span class="comment">// step 1 and step 2</span></span><br><span class="line">    saveFocusInfo();</span><br><span class="line">    mState.mTrackOldChangeHolders = mState.mRunSimpleAnimations &amp;&amp; mItemsChanged;</span><br><span class="line">    mItemsAddedOrRemoved = mItemsChanged = <span class="keyword">false</span>;</span><br><span class="line">    mState.mInPreLayout = mState.mRunPredictiveAnimations;</span><br><span class="line">    mState.mItemCount = mAdapter.getItemCount();</span><br><span class="line">    findMinMaxChildLayoutPositions(mMinMaxLayoutPositions);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (mState.mRunSimpleAnimations) &#123;</span><br><span class="line">        <span class="comment">// Step 0: Find out where all non-removed items are, pre-layout</span></span><br><span class="line">        <span class="keyword">int</span> count = mChildHelper.getChildCount();</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; count; ++i) &#123;</span><br><span class="line">            <span class="keyword">final</span> ViewHolder holder = getChildViewHolderInt(mChildHelper.getChildAt(i));</span><br><span class="line">            <span class="keyword">if</span> (holder.shouldIgnore() || (holder.isInvalid() &amp;&amp; !mAdapter.hasStableIds())) &#123;</span><br><span class="line">                <span class="keyword">continue</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">final</span> ItemHolderInfo animationInfo = mItemAnimator</span><br><span class="line">                    .recordPreLayoutInformation(mState, holder,</span><br><span class="line">                            ItemAnimator.buildAdapterChangeFlagsForAnimations(holder),</span><br><span class="line">                            holder.getUnmodifiedPayloads());</span><br><span class="line">            mViewInfoStore.addToPreLayout(holder, animationInfo);</span><br><span class="line">            <span class="keyword">if</span> (mState.mTrackOldChangeHolders &amp;&amp; holder.isUpdated() &amp;&amp; !holder.isRemoved()</span><br><span class="line">                    &amp;&amp; !holder.shouldIgnore() &amp;&amp; !holder.isInvalid()) &#123;</span><br><span class="line">                <span class="keyword">long</span> key = getChangedHolderKey(holder);</span><br><span class="line">                <span class="comment">// This is NOT the only place where a ViewHolder is added to old change holders</span></span><br><span class="line">                <span class="comment">// list. There is another case where:</span></span><br><span class="line">                <span class="comment">//    * A VH is currently hidden but not deleted</span></span><br><span class="line">                <span class="comment">//    * The hidden item is changed in the adapter</span></span><br><span class="line">                <span class="comment">//    * Layout manager decides to layout the item in the pre-Layout pass (step1)</span></span><br><span class="line">                <span class="comment">// When this case is detected, RV will un-hide that view and add to the old</span></span><br><span class="line">                <span class="comment">// change holders list.</span></span><br><span class="line">                mViewInfoStore.addToOldChangeHolders(key, holder);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (mState.mRunPredictiveAnimations) &#123;</span><br><span class="line">        <span class="comment">// Step 1: run prelayout: This will use the old positions of items. The layout manager</span></span><br><span class="line">        <span class="comment">// is expected to layout everything, even removed items (though not to add removed</span></span><br><span class="line">        <span class="comment">// items back to the container). This gives the pre-layout position of APPEARING views</span></span><br><span class="line">        <span class="comment">// which come into existence as part of the real layout.</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// Save old positions so that LayoutManager can run its mapping logic.</span></span><br><span class="line">        saveOldPositions();</span><br><span class="line">        <span class="keyword">final</span> <span class="keyword">boolean</span> didStructureChange = mState.mStructureChanged;</span><br><span class="line">        mState.mStructureChanged = <span class="keyword">false</span>;</span><br><span class="line">        <span class="comment">// temporarily disable flag because we are asking for previous layout</span></span><br><span class="line">        mLayout.onLayoutChildren(mRecycler, mState);</span><br><span class="line">        mState.mStructureChanged = didStructureChange;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; mChildHelper.getChildCount(); ++i) &#123;</span><br><span class="line">            <span class="keyword">final</span> View child = mChildHelper.getChildAt(i);</span><br><span class="line">            <span class="keyword">final</span> ViewHolder viewHolder = getChildViewHolderInt(child);</span><br><span class="line">            <span class="keyword">if</span> (viewHolder.shouldIgnore()) &#123;</span><br><span class="line">                <span class="keyword">continue</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (!mViewInfoStore.isInPreLayout(viewHolder)) &#123;</span><br><span class="line">                <span class="keyword">int</span> flags = ItemAnimator.buildAdapterChangeFlagsForAnimations(viewHolder);</span><br><span class="line">                <span class="keyword">boolean</span> wasHidden = viewHolder</span><br><span class="line">                        .hasAnyOfTheFlags(ViewHolder.FLAG_BOUNCED_FROM_HIDDEN_LIST);</span><br><span class="line">                <span class="keyword">if</span> (!wasHidden) &#123;</span><br><span class="line">                    flags |= ItemAnimator.FLAG_APPEARED_IN_PRE_LAYOUT;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">final</span> ItemHolderInfo animationInfo = mItemAnimator.recordPreLayoutInformation(</span><br><span class="line">                        mState, viewHolder, flags, viewHolder.getUnmodifiedPayloads());</span><br><span class="line">                <span class="keyword">if</span> (wasHidden) &#123;</span><br><span class="line">                    recordAnimationInfoIfBouncedHiddenView(viewHolder, animationInfo);</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    mViewInfoStore.addToAppearedInPreLayoutHolders(viewHolder, animationInfo);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// we don&#x27;t process disappearing list because they may re-appear in post layout pass.</span></span><br><span class="line">        clearOldPositions();</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        clearOldPositions();</span><br><span class="line">    &#125;</span><br><span class="line">    onExitLayoutOrScroll();</span><br><span class="line">    stopInterceptRequestLayout(<span class="keyword">false</span>);</span><br><span class="line">    mState.mLayoutStep = State.STEP_LAYOUT;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">processAdapterUpdatesAndSetAnimationFlags</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (mDataSetHasChangedAfterLayout) &#123;</span><br><span class="line">        <span class="comment">// Processing these items have no value since data set changed unexpectedly.</span></span><br><span class="line">        <span class="comment">// Instead, we just reset it.</span></span><br><span class="line">        mAdapterHelper.reset();</span><br><span class="line">        <span class="keyword">if</span> (mDispatchItemsChangedEvent) &#123;</span><br><span class="line">            mLayout.onItemsChanged(<span class="keyword">this</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// simple animations are a subset of advanced animations (which will cause a</span></span><br><span class="line">    <span class="comment">// pre-layout step)</span></span><br><span class="line">    <span class="comment">// If layout supports predictive animations, pre-process to decide if we want to run them</span></span><br><span class="line">    <span class="keyword">if</span> (predictiveItemAnimationsEnabled()) &#123;</span><br><span class="line">        mAdapterHelper.preProcess();</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        mAdapterHelper.consumeUpdatesInOnePass();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">boolean</span> animationTypeSupported = mItemsAddedOrRemoved || mItemsChanged;</span><br><span class="line">    mState.mRunSimpleAnimations = mFirstLayoutComplete</span><br><span class="line">            &amp;&amp; mItemAnimator != <span class="keyword">null</span></span><br><span class="line">            &amp;&amp; (mDataSetHasChangedAfterLayout</span><br><span class="line">            || animationTypeSupported</span><br><span class="line">            || mLayout.mRequestedSimpleAnimations)</span><br><span class="line">            &amp;&amp; (!mDataSetHasChangedAfterLayout</span><br><span class="line">            || mAdapter.hasStableIds());</span><br><span class="line">    mState.mRunPredictiveAnimations = mState.mRunSimpleAnimations</span><br><span class="line">            &amp;&amp; animationTypeSupported</span><br><span class="line">            &amp;&amp; !mDataSetHasChangedAfterLayout</span><br><span class="line">            &amp;&amp; predictiveItemAnimationsEnabled();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p> dispatchLayoutStep1(),第一次在onMeasure()里面执行的时候，因为这个时候 childview 还没有添加进来，很多逻辑都会跳过，此时会把step设置成 STEP_LAYOUT ，后面再次执行 onMeasure() 的时候， dispatchLayoutStep1() 主要做了两件事，一个是处理adapter数据的变化，这个主要是通过 <code>mAdapterHelper.preProcess()</code>来完成的，主要是把操作队列中 item 的 MOVE 操作移到最后，然后就是生成一个 animationInfo 数据并且把它保存在 mViewInfoStore 中。</p>
<p> dispatchLayoutStep2()，这里则是layoutChild实际执行的地方，会对child 执行 measure ，addview 和 layout 操作 ,出于灵活性的考虑，这里RecyclerView并没有实现，而是交给了 layout.onLayoutChildren() 方法去实现它，这样子就可以有不同的显示效果。需要注意的是这个方法可能会被调用多次，因此如果是自定义实现LayoutManager的话需要考虑到这种情况避免重复添加和layout。</p>
<p>在onMeasure()执行完之后，接下来会进入到 onLayout() :</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onLayout</span><span class="params">(<span class="keyword">boolean</span> changed, <span class="keyword">int</span> l, <span class="keyword">int</span> t, <span class="keyword">int</span> r, <span class="keyword">int</span> b)</span> </span>&#123;</span><br><span class="line">    TraceCompat.beginSection(TRACE_ON_LAYOUT_TAG);</span><br><span class="line">    dispatchLayout();</span><br><span class="line">    TraceCompat.endSection();</span><br><span class="line">    mFirstLayoutComplete = <span class="keyword">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">dispatchLayout</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (mAdapter == <span class="keyword">null</span>) &#123;</span><br><span class="line">        Log.e(TAG, <span class="string">&quot;No adapter attached; skipping layout&quot;</span>);</span><br><span class="line">        <span class="comment">// leave the state in START</span></span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (mLayout == <span class="keyword">null</span>) &#123;</span><br><span class="line">        Log.e(TAG, <span class="string">&quot;No layout manager attached; skipping layout&quot;</span>);</span><br><span class="line">        <span class="comment">// leave the state in START</span></span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    mState.mIsMeasuring = <span class="keyword">false</span>;</span><br><span class="line">    <span class="keyword">if</span> (mState.mLayoutStep == State.STEP_START) &#123;</span><br><span class="line">        dispatchLayoutStep1();</span><br><span class="line">        mLayout.setExactMeasureSpecsFrom(<span class="keyword">this</span>);</span><br><span class="line">        dispatchLayoutStep2();</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (mAdapterHelper.hasUpdates() || mLayout.getWidth() != getWidth()</span><br><span class="line">            || mLayout.getHeight() != getHeight()) &#123;</span><br><span class="line">        <span class="comment">// First 2 steps are done in onMeasure but looks like we have to run again due to</span></span><br><span class="line">        <span class="comment">// changed size.</span></span><br><span class="line">        mLayout.setExactMeasureSpecsFrom(<span class="keyword">this</span>);</span><br><span class="line">        dispatchLayoutStep2();</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="comment">// always make sure we sync them (to ensure mode is exact)</span></span><br><span class="line">        mLayout.setExactMeasureSpecsFrom(<span class="keyword">this</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    dispatchLayoutStep3();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>onLayout() 里面首先是 更新 mIsMeasuring 的状态为false,然后是根据 mState.mLayoutStep 来决定是不是要重新执行 dispatchLayoutStep1() 和 dispatchLayoutStep2() , 因为 mState.mLayoutStep 在 dispatchLayoutStep3() 中会被重置为STEP_START，所以这里其实是为了保障1和3有序执行。如果layout里面保存的宽高和 RecyclerView当前的宽高不一致(意思是大小变化了)，则会重新进入dispatchLayoutStep2()再次执行 layout.onLayoutChildren() 方法。然后执行 dispatchLayoutStep3() ，最后更新 mFirstLayoutComplete 为true :</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"> <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">dispatchLayoutStep3</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    mState.assertLayoutStep(State.STEP_ANIMATIONS);</span><br><span class="line">    eatRequestLayout();</span><br><span class="line">    onEnterLayoutOrScroll();</span><br><span class="line">    mState.mLayoutStep = State.STEP_START;</span><br><span class="line">    <span class="keyword">if</span> (mState.mRunSimpleAnimations) &#123;</span><br><span class="line">        <span class="comment">// Step 3: Find out where things are now, and process change animations.</span></span><br><span class="line">        <span class="comment">// traverse list in reverse because we may call animateChange in the loop which may</span></span><br><span class="line">        <span class="comment">// remove the target view holder.</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = mChildHelper.getChildCount() - <span class="number">1</span>; i &gt;= <span class="number">0</span>; i--) &#123;</span><br><span class="line">            ViewHolder holder = getChildViewHolderInt(mChildHelper.getChildAt(i));</span><br><span class="line">            <span class="keyword">if</span> (holder.shouldIgnore()) &#123;</span><br><span class="line">                <span class="keyword">continue</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">long</span> key = getChangedHolderKey(holder);</span><br><span class="line">            <span class="keyword">final</span> ItemHolderInfo animationInfo = mItemAnimator</span><br><span class="line">                    .recordPostLayoutInformation(mState, holder);</span><br><span class="line">            ViewHolder oldChangeViewHolder = mViewInfoStore.getFromOldChangeHolders(key);</span><br><span class="line">            <span class="keyword">if</span> (oldChangeViewHolder != <span class="keyword">null</span> &amp;&amp; !oldChangeViewHolder.shouldIgnore()) &#123;</span><br><span class="line">                <span class="comment">// run a change animation</span></span><br><span class="line"></span><br><span class="line">                <span class="comment">// If an Item is CHANGED but the updated version is disappearing, it creates</span></span><br><span class="line">                <span class="comment">// a conflicting case.</span></span><br><span class="line">                <span class="comment">// Since a view that is marked as disappearing is likely to be going out of</span></span><br><span class="line">                <span class="comment">// bounds, we run a change animation. Both views will be cleaned automatically</span></span><br><span class="line">                <span class="comment">// once their animations finish.</span></span><br><span class="line">                <span class="comment">// On the other hand, if it is the same view holder instance, we run a</span></span><br><span class="line">                <span class="comment">// disappearing animation instead because we are not going to rebind the updated</span></span><br><span class="line">                <span class="comment">// VH unless it is enforced by the layout manager.</span></span><br><span class="line">                <span class="keyword">final</span> <span class="keyword">boolean</span> oldDisappearing = mViewInfoStore.isDisappearing(</span><br><span class="line">                        oldChangeViewHolder);</span><br><span class="line">                <span class="keyword">final</span> <span class="keyword">boolean</span> newDisappearing = mViewInfoStore.isDisappearing(holder);</span><br><span class="line">                <span class="keyword">if</span> (oldDisappearing &amp;&amp; oldChangeViewHolder == holder) &#123;</span><br><span class="line">                    <span class="comment">// run disappear animation instead of change</span></span><br><span class="line">                    mViewInfoStore.addToPostLayout(holder, animationInfo);</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    <span class="keyword">final</span> ItemHolderInfo preInfo = mViewInfoStore.popFromPreLayout(</span><br><span class="line">                            oldChangeViewHolder);</span><br><span class="line">                    <span class="comment">// we add and remove so that any post info is merged.</span></span><br><span class="line">                    mViewInfoStore.addToPostLayout(holder, animationInfo);</span><br><span class="line">                    ItemHolderInfo postInfo = mViewInfoStore.popFromPostLayout(holder);</span><br><span class="line">                    <span class="keyword">if</span> (preInfo == <span class="keyword">null</span>) &#123;</span><br><span class="line">                        handleMissingPreInfoForChangeError(key, holder, oldChangeViewHolder);</span><br><span class="line">                    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                        animateChange(oldChangeViewHolder, holder, preInfo, postInfo,</span><br><span class="line">                                oldDisappearing, newDisappearing);</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                mViewInfoStore.addToPostLayout(holder, animationInfo);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// Step 4: Process view info lists and trigger animations</span></span><br><span class="line">        mViewInfoStore.process(mViewInfoProcessCallback);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    mLayout.removeAndRecycleScrapInt(mRecycler);</span><br><span class="line">    mState.mPreviousLayoutItemCount = mState.mItemCount;</span><br><span class="line">    mDataSetHasChangedAfterLayout = <span class="keyword">false</span>;</span><br><span class="line">    mState.mRunSimpleAnimations = <span class="keyword">false</span>;</span><br><span class="line"></span><br><span class="line">    mState.mRunPredictiveAnimations = <span class="keyword">false</span>;</span><br><span class="line">    mLayout.mRequestedSimpleAnimations = <span class="keyword">false</span>;</span><br><span class="line">    <span class="keyword">if</span> (mRecycler.mChangedScrap != <span class="keyword">null</span>) &#123;</span><br><span class="line">        mRecycler.mChangedScrap.clear();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (mLayout.mPrefetchMaxObservedInInitialPrefetch) &#123;</span><br><span class="line">        <span class="comment">// Initial prefetch has expanded cache, so reset until next prefetch.</span></span><br><span class="line">        <span class="comment">// This prevents initial prefetches from expanding the cache permanently.</span></span><br><span class="line">        mLayout.mPrefetchMaxCountObserved = <span class="number">0</span>;</span><br><span class="line">        mLayout.mPrefetchMaxObservedInInitialPrefetch = <span class="keyword">false</span>;</span><br><span class="line">        mRecycler.updateViewCacheSize();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    mLayout.onLayoutCompleted(mState);</span><br><span class="line">    onExitLayoutOrScroll();</span><br><span class="line">    resumeRequestLayout(<span class="keyword">false</span>);</span><br><span class="line">    mViewInfoStore.clear();</span><br><span class="line">    <span class="keyword">if</span> (didChildRangeChange(mMinMaxLayoutPositions[<span class="number">0</span>], mMinMaxLayoutPositions[<span class="number">1</span>])) &#123;</span><br><span class="line">        dispatchOnScrolled(<span class="number">0</span>, <span class="number">0</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    recoverFocusFromState();</span><br><span class="line">    resetFocusInfo();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>step3 首先是重置 layoutStep为 State.STEP_START，这样下次可以进入step1()了，然后是保存当前的 animationInfo 信息(此时已经经过step2添加了childview,信息会有变化)，然后根据 状态信息的变化调用 animateChange() 触发动画的执行。之后是清理，重置相关的变量，为下一次 dispathLayout() 做准备。</p>
<p>最后是 onDraw() 方法，不过搜索 onDraw() 方法的时候却发现 RecyclerView 还重写了 draw() 方法,回顾一下控件的<a href="https://nangonghuang.github.io/2018/08/20/Android%E6%8E%A7%E4%BB%B6%E6%80%BB%E7%BB%93/">整个一般性流程</a>：</p>
<p><img src="/2018/09/05/Android%E6%8E%A7%E4%BB%B6-RecyclerView/performTraversals.jpg" alt="performTraversals"></p>
<p>结合 RecyclerView 中的代码:</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">draw</span><span class="params">(Canvas c)</span> </span>&#123;</span><br><span class="line">      <span class="keyword">super</span>.draw(c);</span><br><span class="line"></span><br><span class="line">      <span class="keyword">final</span> <span class="keyword">int</span> count = mItemDecorations.size();</span><br><span class="line">      <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; count; i++) &#123;</span><br><span class="line">          mItemDecorations.get(i).onDrawOver(c, <span class="keyword">this</span>, mState);</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">      ...</span><br><span class="line"></span><br><span class="line">      <span class="comment">// If some views are animating, ItemDecorators are likely to move/change with them.</span></span><br><span class="line">      <span class="comment">// Invalidate RecyclerView to re-draw decorators. This is still efficient because children&#x27;s</span></span><br><span class="line">      <span class="comment">// display lists are not invalidated.</span></span><br><span class="line">      <span class="keyword">if</span> (!needsInvalidate &amp;&amp; mItemAnimator != <span class="keyword">null</span> &amp;&amp; mItemDecorations.size() &gt; <span class="number">0</span></span><br><span class="line">              &amp;&amp; mItemAnimator.isRunning()) &#123;</span><br><span class="line">          needsInvalidate = <span class="keyword">true</span>;</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">      <span class="keyword">if</span> (needsInvalidate) &#123;</span><br><span class="line">          ViewCompat.postInvalidateOnAnimation(<span class="keyword">this</span>);</span><br><span class="line">      &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@Override</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onDraw</span><span class="params">(Canvas c)</span> </span>&#123;</span><br><span class="line">      <span class="keyword">super</span>.onDraw(c);</span><br><span class="line"></span><br><span class="line">      <span class="keyword">final</span> <span class="keyword">int</span> count = mItemDecorations.size();</span><br><span class="line">      <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; count; i++) &#123;</span><br><span class="line">          mItemDecorations.get(i).onDraw(c, <span class="keyword">this</span>, mState);</span><br><span class="line">      &#125;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure>
<p>可以看到，这里的调用顺序是 进入 draw(c) ,先调用 super.draw(c) 开始走 onDraw() 流程 , 然后 dispatchDraw() 分发给子view 去绘制自己， 最后再接着调用 onDrawOver() 进行回调。绘制的流程中主要是 ItemDecoration 的绘制，这个在<a href="https://nangonghuang.github.io/2018/09/10/Android%E6%8E%A7%E4%BB%B6-RecyclerView2-ItemDecoration/">下一篇</a>说。</p>
]]></content>
      <categories>
        <category>android_app</category>
      </categories>
      <tags>
        <tag>列表控件</tag>
      </tags>
  </entry>
  <entry>
    <title>Java-hashmap,concurrentHashmap</title>
    <url>/2018/10/13/Java-hashmap/</url>
    <content><![CDATA[<p>java8的hashmap和concurrentHashmap</p>
<a id="more"></a>

<h2 id="HashMap"><a href="#HashMap" class="headerlink" title="HashMap"></a>HashMap</h2><ol>
<li><p>hashmap的几个字段的含义</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">int</span> threshold;             <span class="comment">// 所能容纳的key-value对极限，超过就要进行扩容。threshold = table.length * loadFactor</span></span><br><span class="line"><span class="keyword">final</span> <span class="keyword">float</span> loadFactor;    <span class="comment">// 负载因子</span></span><br><span class="line"><span class="keyword">int</span> size;   <span class="comment">//保存的键值对的数目</span></span><br><span class="line"><span class="keyword">transient</span> Node&lt;K,V&gt;[] table;   <span class="comment">// 散列表数组</span></span><br></pre></td></tr></table></figure></li>
<li><p>hashmap的构造函数</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">HashMap</span><span class="params">(<span class="keyword">int</span> initialCapacity, <span class="keyword">float</span> loadFactor)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (initialCapacity &lt; <span class="number">0</span>)</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> IllegalArgumentException(<span class="string">&quot;Illegal initial capacity: &quot;</span> +</span><br><span class="line">                                        initialCapacity);</span><br><span class="line">    <span class="keyword">if</span> (initialCapacity &gt; MAXIMUM_CAPACITY)</span><br><span class="line">        initialCapacity = MAXIMUM_CAPACITY;</span><br><span class="line">    <span class="keyword">if</span> (loadFactor &lt;= <span class="number">0</span> || Float.isNaN(loadFactor))</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> IllegalArgumentException(<span class="string">&quot;Illegal load factor: &quot;</span> +</span><br><span class="line">                                        loadFactor);</span><br><span class="line">    <span class="keyword">this</span>.loadFactor = loadFactor;</span><br><span class="line">    <span class="keyword">this</span>.threshold = tableSizeFor(initialCapacity);</span><br><span class="line">&#125;</span><br><span class="line">   </span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">* Constructs an empty &lt;tt&gt;HashMap&lt;/tt&gt; with the specified initial</span></span><br><span class="line"><span class="comment">* capacity and the default load factor (0.75).</span></span><br><span class="line"><span class="comment">*</span></span><br><span class="line"><span class="comment">* <span class="doctag">@param</span>  initialCapacity the initial capacity.</span></span><br><span class="line"><span class="comment">* <span class="doctag">@throws</span> IllegalArgumentException if the initial capacity is negative.</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">HashMap</span><span class="params">(<span class="keyword">int</span> initialCapacity)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>(initialCapacity, DEFAULT_LOAD_FACTOR);</span><br><span class="line">&#125;</span><br><span class="line">   </span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">* Constructs an empty &lt;tt&gt;HashMap&lt;/tt&gt; with the default initial capacity</span></span><br><span class="line"><span class="comment">* (16) and the default load factor (0.75).</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">HashMap</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.loadFactor = DEFAULT_LOAD_FACTOR; <span class="comment">// all other fields defaulted</span></span><br><span class="line">&#125;</span><br><span class="line">   </span><br><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> <span class="title">tableSizeFor</span><span class="params">(<span class="keyword">int</span> cap)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> n = cap - <span class="number">1</span>;</span><br><span class="line">    n |= n &gt;&gt;&gt; <span class="number">1</span>;</span><br><span class="line">    n |= n &gt;&gt;&gt; <span class="number">2</span>;</span><br><span class="line">    n |= n &gt;&gt;&gt; <span class="number">4</span>;</span><br><span class="line">    n |= n &gt;&gt;&gt; <span class="number">8</span>;</span><br><span class="line">    n |= n &gt;&gt;&gt; <span class="number">16</span>;</span><br><span class="line">    <span class="keyword">return</span> (n &lt; <span class="number">0</span>) ? <span class="number">1</span> : (n &gt;= MAXIMUM_CAPACITY) ? MAXIMUM_CAPACITY : n + <span class="number">1</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>在构造函数里面，如果我们传入了初始值大小，则会对这个值做一个<code>tableSizeFor(...)</code>的处理，处理的结果是 最小的大于cap的2的幂(这个算法没看明白)，并且设置 threshold 的值为它，否则 threshold 的值为 0 </p>
</li>
<li><p>hashmap的散列函数 </p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">index = hash(key) &amp; (table.length()-<span class="number">1</span>)</span><br></pre></td></tr></table></figure>
<p>当 table.length() 的值是2的幂次方的时候，<code>table.length()-1</code>的值在bit位上则全是1，因此这里的index的值实际上等于hash值的末位数字。比如 index = 101101010  &amp; 111 = 010 = 2 ,这个key对应的数据应该放在数组的2位置。</p>
</li>
<li><p>put过程<br><img src="/2018/10/13/Java-hashmap/put%E6%96%B9%E6%B3%95%E6%89%A7%E8%A1%8C%E6%B5%81%E7%A8%8B%E5%9B%BE.png" alt="put方法执行流程图"></p>
</li>
<li><p>key-value<br>在hashmap 中以 Node 节点的形式存储，Node节点保存有next值，指向下一个节点。如果存在下一个节点，则说明这里有hash冲突，作为链表保存，否则仅仅是一个Node节点存储。其中，转化为红黑树的时候，红黑树的节点 TreeNode 是Node 的子类</p>
</li>
<li><p>扩容</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">final</span> Node&lt;K,V&gt;[] resize() &#123;</span><br><span class="line">    Node&lt;K,V&gt;[] oldTab = table;</span><br><span class="line">    <span class="keyword">int</span> oldCap = (oldTab == <span class="keyword">null</span>) ? <span class="number">0</span> : oldTab.length;    <span class="comment">//如果是刚刚初始化，这里oldTab是null</span></span><br><span class="line">    <span class="keyword">int</span> oldThr = threshold;</span><br><span class="line">    <span class="keyword">int</span> newCap, newThr = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">if</span> (oldCap &gt; <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="keyword">if</span> (oldCap &gt;= MAXIMUM_CAPACITY) &#123;</span><br><span class="line">            threshold = Integer.MAX_VALUE;</span><br><span class="line">            <span class="keyword">return</span> oldTab;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> ((newCap = oldCap &lt;&lt; <span class="number">1</span>) &lt; MAXIMUM_CAPACITY &amp;&amp;</span><br><span class="line">                 oldCap &gt;= DEFAULT_INITIAL_CAPACITY)</span><br><span class="line">            newThr = oldThr &lt;&lt; <span class="number">1</span>; <span class="comment">// double threshold ， 两倍</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span> (oldThr &gt; <span class="number">0</span>) <span class="comment">// initial capacity was placed in threshold</span></span><br><span class="line">        newCap = oldThr;   <span class="comment">// 对应于在构造函数中传入了初始化大小，那么tableSizeFor处理后的值就成了散列表数组的初始化大小</span></span><br><span class="line">    <span class="keyword">else</span> &#123;               <span class="comment">// zero initial threshold signifies using defaults</span></span><br><span class="line">        <span class="comment">// 在构造函数中如果没有传入初始化大小，这里oldThr是等于0的，采用默认值，默认是16</span></span><br><span class="line">        newCap = DEFAULT_INITIAL_CAPACITY;</span><br><span class="line">        newThr = (<span class="keyword">int</span>)(DEFAULT_LOAD_FACTOR * DEFAULT_INITIAL_CAPACITY);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (newThr == <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="keyword">float</span> ft = (<span class="keyword">float</span>)newCap * loadFactor;</span><br><span class="line">        newThr = (newCap &lt; MAXIMUM_CAPACITY &amp;&amp; ft &lt; (<span class="keyword">float</span>)MAXIMUM_CAPACITY ?</span><br><span class="line">                  (<span class="keyword">int</span>)ft : Integer.MAX_VALUE);</span><br><span class="line">    &#125;</span><br><span class="line">    threshold = newThr;</span><br><span class="line">    <span class="comment">//  前面确定了扩容后的参数，这里把原来的节点移到新的数组中去</span></span><br><span class="line">    <span class="meta">@SuppressWarnings(&#123;&quot;rawtypes&quot;,&quot;unchecked&quot;&#125;)</span></span><br><span class="line">        Node&lt;K,V&gt;[] newTab = (Node&lt;K,V&gt;[])<span class="keyword">new</span> Node[newCap];</span><br><span class="line">    table = newTab;</span><br><span class="line">    <span class="keyword">if</span> (oldTab != <span class="keyword">null</span>) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; oldCap; ++j) &#123;</span><br><span class="line">            Node&lt;K,V&gt; e;</span><br><span class="line">            <span class="keyword">if</span> ((e = oldTab[j]) != <span class="keyword">null</span>) &#123;</span><br><span class="line">                oldTab[j] = <span class="keyword">null</span>;</span><br><span class="line">                <span class="keyword">if</span> (e.next == <span class="keyword">null</span>)  <span class="comment">//如果在这个位置上没有冲突，则直接复制过去</span></span><br><span class="line">                    newTab[e.hash &amp; (newCap - <span class="number">1</span>)] = e;</span><br><span class="line">                <span class="keyword">else</span> <span class="keyword">if</span> (e <span class="keyword">instanceof</span> TreeNode)   <span class="comment">//如果这个位置上是红黑树，处理</span></span><br><span class="line">                    ((TreeNode&lt;K,V&gt;)e).split(<span class="keyword">this</span>, newTab, j, oldCap);</span><br><span class="line">                <span class="keyword">else</span> &#123; <span class="comment">// preserve order，如果这个位置是个长度大于1的链表</span></span><br><span class="line">                    Node&lt;K,V&gt; loHead = <span class="keyword">null</span>, loTail = <span class="keyword">null</span>;</span><br><span class="line">                    Node&lt;K,V&gt; hiHead = <span class="keyword">null</span>, hiTail = <span class="keyword">null</span>;</span><br><span class="line">                    Node&lt;K,V&gt; next;</span><br><span class="line">                    <span class="keyword">do</span> &#123;</span><br><span class="line">                        next = e.next;</span><br><span class="line">                        <span class="keyword">if</span> ((e.hash &amp; oldCap) == <span class="number">0</span>) &#123;  <span class="comment">//这句在下面有分析，是怎么拆分链表的</span></span><br><span class="line">                            <span class="keyword">if</span> (loTail == <span class="keyword">null</span>)</span><br><span class="line">                                loHead = e;</span><br><span class="line">                            <span class="keyword">else</span></span><br><span class="line">                                loTail.next = e;</span><br><span class="line">                            loTail = e;</span><br><span class="line">                        &#125;</span><br><span class="line">                        <span class="keyword">else</span> &#123;</span><br><span class="line">                            <span class="keyword">if</span> (hiTail == <span class="keyword">null</span>)</span><br><span class="line">                                hiHead = e;</span><br><span class="line">                            <span class="keyword">else</span></span><br><span class="line">                                hiTail.next = e;</span><br><span class="line">                            hiTail = e;</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125; <span class="keyword">while</span> ((e = next) != <span class="keyword">null</span>);</span><br><span class="line">                    <span class="keyword">if</span> (loTail != <span class="keyword">null</span>) &#123;</span><br><span class="line">                        loTail.next = <span class="keyword">null</span>;</span><br><span class="line">                        newTab[j] = loHead;</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="keyword">if</span> (hiTail != <span class="keyword">null</span>) &#123;</span><br><span class="line">                        hiTail.next = <span class="keyword">null</span>;</span><br><span class="line">                        newTab[j + oldCap] = hiHead;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> newTab;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>当需要扩容的时候，会调用 <code>resize()</code>函数。在扩容后，因为散列函数不变，因此  </p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">index = hash(key) &amp; (table.length()-<span class="number">1</span>)</span><br></pre></td></tr></table></figure>
<p>仍然成立，但是此时，table的大小变成了原来的两倍，因此在散列的时候，后面的括号的值会多一位1，假如刚开始有：</p>
<p>index = 101101010  &amp; 111 = 010 = 2 ；</p>
<p>那么扩容后则变成了 ：</p>
<p>index = 101101010  &amp; 1111 = 1010 = 10</p>
<p>观察下可以知道，如果高1位（第四位，扩容后的最高位）的值为0，那么扩容后节点的位置不变，如果高1位的位置为1，那么扩容后节点的位置为index + table.length。而获取这个高1位的值的方法，则可以是  </p>
<p>hash(key) &amp; (table.length())</p>
<p>因为 table.length() 是2的幂次方，因此一定是 ..00100… ，相与运算之后刚好可以得到这个位的值是1还是0</p>
<p>在  <code>resize()</code> 函数中， 如果是0，则添加到 newTab[j] 位置的链表中去，如果是1，则添加到 newTab[j + oldCap] 的链表中去</p>
</li>
<li><p>重写key的equals和hashCode :<br>A和B对象equals方法返回true，hashCode方法返回值必然一样；<br>A和B对象hashCode不一样，那么equals方法必须返回false。<br>A和B对象hashCode一样，不能判定A equals B。</p>
</li>
</ol>
<h2 id="ConcurrentHashMap"><a href="#ConcurrentHashMap" class="headerlink" title="ConcurrentHashMap"></a>ConcurrentHashMap</h2><ol>
<li><p>一些参数</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//  0：默认值</span></span><br><span class="line"><span class="comment">//  -1：代表哈希表正在进行初始化</span></span><br><span class="line"><span class="comment">//  -N 表示有N-1个线程正在进行扩容操作                     </span></span><br><span class="line"><span class="comment">//  大于0：相当于 HashMap 中的 threshold，表示阈值                  </span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">transient</span> <span class="keyword">volatile</span> <span class="keyword">int</span> sizeCtl;</span><br><span class="line"></span><br><span class="line"><span class="comment">//表示散列表</span></span><br><span class="line"><span class="keyword">transient</span> <span class="keyword">volatile</span> Node&lt;K,V&gt;[] table;</span><br><span class="line"><span class="comment">//哈希表扩容的时候会用，扩容完成后会被重置为 null。</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">transient</span> <span class="keyword">volatile</span> Node&lt;K,V&gt;[] nextTable;</span><br><span class="line"></span><br><span class="line"><span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> MOVED     = -<span class="number">1</span>; <span class="comment">// hash值是-1，表示这是一个forwardNode节点  </span></span><br><span class="line"><span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> TREEBIN   = -<span class="number">2</span>; <span class="comment">// hash值是-2  表示这时一个TreeBin节点  </span></span><br></pre></td></tr></table></figure></li>
<li><p>构造函数，这里只选常用的</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 这里和hashmap有些不一样，初始化的大小是 initialCapacity*1.5+1，再向上取到2的n次方，</span></span><br><span class="line"><span class="comment">// hashmap是直接用 initialCapacity 向上取到2的n次方</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">ConcurrentHashMap</span><span class="params">(<span class="keyword">int</span> initialCapacity)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (initialCapacity &lt; <span class="number">0</span>)</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> IllegalArgumentException();</span><br><span class="line">    <span class="keyword">int</span> cap = ((initialCapacity &gt;= (MAXIMUM_CAPACITY &gt;&gt;&gt; <span class="number">1</span>)) ?</span><br><span class="line">               MAXIMUM_CAPACITY :</span><br><span class="line">               tableSizeFor(initialCapacity + (initialCapacity &gt;&gt;&gt; <span class="number">1</span>) + <span class="number">1</span>));</span><br><span class="line">    <span class="keyword">this</span>.sizeCtl = cap;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//不带参数甚至什么都不初始化</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">ConcurrentHashMap</span><span class="params">()</span> </span>&#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li><p>put函数</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"> <span class="function"><span class="keyword">public</span> V <span class="title">put</span><span class="params">(K key, V value)</span> </span>&#123;</span><br><span class="line">     <span class="keyword">return</span> putVal(key, value, <span class="keyword">false</span>);</span><br><span class="line"> &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/** Implementation for put and putIfAbsent */</span></span><br><span class="line"><span class="function"><span class="keyword">final</span> V <span class="title">putVal</span><span class="params">(K key, V value, <span class="keyword">boolean</span> onlyIfAbsent)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (key == <span class="keyword">null</span> || value == <span class="keyword">null</span>) <span class="keyword">throw</span> <span class="keyword">new</span> NullPointerException();</span><br><span class="line">    <span class="keyword">int</span> hash = spread(key.hashCode());</span><br><span class="line">    <span class="keyword">int</span> binCount = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (Node&lt;K,V&gt;[] tab = table;;) &#123;</span><br><span class="line">        Node&lt;K,V&gt; f; <span class="keyword">int</span> n, i, fh;</span><br><span class="line">        <span class="keyword">if</span> (tab == <span class="keyword">null</span> || (n = tab.length) == <span class="number">0</span>)</span><br><span class="line">            <span class="comment">//initTable()的时候也需要考虑多个线程操作的情景，使用cas来保证线程同步</span></span><br><span class="line">            tab = initTable();</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> ((f = tabAt(tab, i = (n - <span class="number">1</span>) &amp; hash)) == <span class="keyword">null</span>) &#123; <span class="comment">//如果这个数组位置上还没有节点，cas插入</span></span><br><span class="line">            <span class="keyword">if</span> (casTabAt(tab, i, <span class="keyword">null</span>,</span><br><span class="line">                         <span class="keyword">new</span> Node&lt;K,V&gt;(hash, key, value, <span class="keyword">null</span>)))</span><br><span class="line">                <span class="keyword">break</span>;                   <span class="comment">// no lock when adding to empty bin</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> ((fh = f.hash) == MOVED)</span><br><span class="line">            <span class="comment">//  帮助数据迁移，假如此时正在扩容</span></span><br><span class="line">            tab = helpTransfer(tab, f);</span><br><span class="line">        <span class="keyword">else</span> &#123;</span><br><span class="line">            V oldVal = <span class="keyword">null</span>;</span><br><span class="line">            <span class="keyword">synchronized</span> (f) &#123;</span><br><span class="line">                <span class="keyword">if</span> (tabAt(tab, i) == f) &#123;</span><br><span class="line">                    <span class="keyword">if</span> (fh &gt;= <span class="number">0</span>) &#123;</span><br><span class="line">                        binCount = <span class="number">1</span>;</span><br><span class="line">                        <span class="keyword">for</span> (Node&lt;K,V&gt; e = f;; ++binCount) &#123;</span><br><span class="line">                            K ek;</span><br><span class="line">                            <span class="keyword">if</span> (e.hash == hash &amp;&amp;</span><br><span class="line">                                ((ek = e.key) == key ||</span><br><span class="line">                                 (ek != <span class="keyword">null</span> &amp;&amp; key.equals(ek)))) &#123;</span><br><span class="line">                                oldVal = e.val;</span><br><span class="line">                                <span class="keyword">if</span> (!onlyIfAbsent)</span><br><span class="line">                                    e.val = value;</span><br><span class="line">                                <span class="keyword">break</span>;</span><br><span class="line">                            &#125;</span><br><span class="line">                            Node&lt;K,V&gt; pred = e;</span><br><span class="line">                            <span class="keyword">if</span> ((e = e.next) == <span class="keyword">null</span>) &#123;</span><br><span class="line">                                pred.next = <span class="keyword">new</span> Node&lt;K,V&gt;(hash, key,</span><br><span class="line">                                                          value, <span class="keyword">null</span>);</span><br><span class="line">                                <span class="keyword">break</span>;</span><br><span class="line">                            &#125;</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="keyword">else</span> <span class="keyword">if</span> (f <span class="keyword">instanceof</span> TreeBin) &#123;</span><br><span class="line">                        Node&lt;K,V&gt; p;</span><br><span class="line">                        binCount = <span class="number">2</span>;</span><br><span class="line">                        <span class="keyword">if</span> ((p = ((TreeBin&lt;K,V&gt;)f).putTreeVal(hash, key,</span><br><span class="line">                                                              value)) != <span class="keyword">null</span>) &#123;</span><br><span class="line">                            oldVal = p.val;</span><br><span class="line">                            <span class="keyword">if</span> (!onlyIfAbsent)</span><br><span class="line">                                p.val = value;</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="keyword">else</span> <span class="keyword">if</span> (f <span class="keyword">instanceof</span> ReservationNode)</span><br><span class="line">                        <span class="keyword">throw</span> <span class="keyword">new</span> IllegalStateException(<span class="string">&quot;Recursive update&quot;</span>);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">// binCount != 0 表示插入到了节点到了链表或者红黑树中去了，返回之前的值</span></span><br><span class="line">            <span class="keyword">if</span> (binCount != <span class="number">0</span>) &#123;</span><br><span class="line">                <span class="keyword">if</span> (binCount &gt;= TREEIFY_THRESHOLD)</span><br><span class="line">                    treeifyBin(tab, i);</span><br><span class="line">                <span class="keyword">if</span> (oldVal != <span class="keyword">null</span>)</span><br><span class="line">                    <span class="keyword">return</span> oldVal;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    addCount(<span class="number">1L</span>, binCount);</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>从过程上看，和hashmap的区别在于，插入的时候，</p>
<ol>
<li>如果在数组对应的hash位置上没有元素，那么使用cas来插入而不是直接赋值，如果插入失败，会继续循环继续判断这个位置有没有别的线程已经插入了，直到插入成功为止。</li>
<li>如果对应的hash位置上已经有元素了，那么这里要么是单链表要么是红黑树，把头结点作为锁，再执行插入操作</li>
<li>hash的方法没变，但是对于hashcode,会先spread() :  spread(hash) &amp; (n-1)</li>
<li>因为有个for( ; ; )循环的存在，所以遇到节点是MOVED的时候，会先帮助进行数据迁移。</li>
</ol>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">final</span> Node&lt;K,V&gt;[] helpTransfer(Node&lt;K,V&gt;[] tab, Node&lt;K,V&gt; f) &#123;</span><br><span class="line">    Node&lt;K,V&gt;[] nextTab; <span class="keyword">int</span> sc;</span><br><span class="line">    <span class="keyword">if</span> (tab != <span class="keyword">null</span> &amp;&amp; (f <span class="keyword">instanceof</span> ForwardingNode) &amp;&amp;</span><br><span class="line">        (nextTab = ((ForwardingNode&lt;K,V&gt;)f).nextTable) != <span class="keyword">null</span>) &#123;</span><br><span class="line">        <span class="comment">//返回一个 16 位长度的扩容校验标识</span></span><br><span class="line">        <span class="keyword">int</span> rs = resizeStamp(tab.length);</span><br><span class="line">        <span class="keyword">while</span> (nextTab == nextTable &amp;&amp; table == tab &amp;&amp;</span><br><span class="line">               (sc = sizeCtl) &lt; <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="comment">//sizeCtl 如果处于扩容状态的话</span></span><br><span class="line">            <span class="comment">//前 16 位是数据校验标识，后 16 位是当前正在扩容的线程总数</span></span><br><span class="line">            <span class="comment">//这里判断校验标识是否相等，如果校验符不等或者扩容操作已经完成了，直接退出循环，不用协助它们扩容了</span></span><br><span class="line">            <span class="keyword">if</span> ((sc &gt;&gt;&gt; RESIZE_STAMP_SHIFT) != rs || sc == rs + <span class="number">1</span> ||</span><br><span class="line">                sc == rs + MAX_RESIZERS || transferIndex &lt;= <span class="number">0</span>)</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="comment">//否则调用 transfer 帮助它们进行扩容</span></span><br><span class="line">            <span class="comment">//sc + 1 标识增加了一个线程进行扩容</span></span><br><span class="line">            <span class="keyword">if</span> (U.compareAndSwapInt(<span class="keyword">this</span>, SIZECTL, sc, sc + <span class="number">1</span>)) &#123;</span><br><span class="line">                transfer(tab, nextTab);</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> nextTab;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> table;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><a href="https://www.cnblogs.com/yangming1996/p/8031199.html">为并发而生的 ConcurrentHashMap</a></p>
</li>
<li><p>转移函数</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">void</span> <span class="title">transfer</span><span class="params">(Node&lt;K,V&gt;[] tab, Node&lt;K,V&gt;[] nextTab)</span> </span>&#123;</span><br><span class="line">       <span class="keyword">int</span> n = tab.length, stride;</span><br><span class="line">       <span class="keyword">if</span> ((stride = (NCPU &gt; <span class="number">1</span>) ? (n &gt;&gt;&gt; <span class="number">3</span>) / NCPU : n) &lt; MIN_TRANSFER_STRIDE)</span><br><span class="line">           stride = MIN_TRANSFER_STRIDE; <span class="comment">// 计算每个线程转移的数据的最小步长</span></span><br><span class="line">       <span class="keyword">if</span> (nextTab == <span class="keyword">null</span>) &#123;            <span class="comment">// initiating</span></span><br><span class="line">           <span class="keyword">try</span> &#123;</span><br><span class="line">               <span class="meta">@SuppressWarnings(&quot;unchecked&quot;)</span></span><br><span class="line">               Node&lt;K,V&gt;[] nt = (Node&lt;K,V&gt;[])<span class="keyword">new</span> Node&lt;?,?&gt;[n &lt;&lt; <span class="number">1</span>];</span><br><span class="line">               nextTab = nt;</span><br><span class="line">           &#125; <span class="keyword">catch</span> (Throwable ex) &#123;      <span class="comment">// try to cope with OOME</span></span><br><span class="line">               sizeCtl = Integer.MAX_VALUE;</span><br><span class="line">               <span class="keyword">return</span>;</span><br><span class="line">           &#125;</span><br><span class="line">           nextTable = nextTab;</span><br><span class="line">           transferIndex = n;</span><br><span class="line">       &#125;</span><br><span class="line">       <span class="keyword">int</span> nextn = nextTab.length;</span><br><span class="line">       ForwardingNode&lt;K,V&gt; fwd = <span class="keyword">new</span> ForwardingNode&lt;K,V&gt;(nextTab);</span><br><span class="line">       <span class="keyword">boolean</span> advance = <span class="keyword">true</span>;</span><br><span class="line">       <span class="keyword">boolean</span> finishing = <span class="keyword">false</span>; <span class="comment">// to ensure sweep before committing nextTab</span></span><br><span class="line">       <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>, bound = <span class="number">0</span>;;) &#123;  <span class="comment">//这里的for循环，下面会多次执行</span></span><br><span class="line">           Node&lt;K,V&gt; f; <span class="keyword">int</span> fh;</span><br><span class="line">           <span class="keyword">while</span> (advance) &#123;  </span><br><span class="line">               <span class="keyword">int</span> nextIndex, nextBound;</span><br><span class="line">               <span class="keyword">if</span> (--i &gt;= bound || finishing)</span><br><span class="line">                   advance = <span class="keyword">false</span>;</span><br><span class="line">               <span class="comment">// 这里transferIndex小于0表示数组迁移任务已经分配完了，不需要协助了</span></span><br><span class="line">               <span class="keyword">else</span> <span class="keyword">if</span> ((nextIndex = transferIndex) &lt;= <span class="number">0</span>) &#123;</span><br><span class="line">                   i = -<span class="number">1</span>;</span><br><span class="line">                   advance = <span class="keyword">false</span>;</span><br><span class="line">               &#125;</span><br><span class="line">               <span class="comment">//这里的else if 分支表示为线程分配任务，负责的区间在数组上的索引是（nextbound,nextIndex），第一次while循环的时候前面两个分支都不满足条件，进来这里分配，通过CAS更新transferIndex的值为前一个transferIndex-stride,更新成功后i也有了值，然后跳出了while循环，在下次for循环进来的时候会进入while的第一/二个分支</span></span><br><span class="line">               <span class="keyword">else</span> <span class="keyword">if</span> (U.compareAndSwapInt</span><br><span class="line">                        (<span class="keyword">this</span>, TRANSFERINDEX, nextIndex,</span><br><span class="line">                         nextBound = (nextIndex &gt; stride ?</span><br><span class="line">                                      nextIndex - stride : <span class="number">0</span>))) &#123;</span><br><span class="line">                   bound = nextBound;</span><br><span class="line">                   i = nextIndex - <span class="number">1</span>;</span><br><span class="line">                   advance = <span class="keyword">false</span>;</span><br><span class="line">               &#125;</span><br><span class="line">           &#125;</span><br><span class="line">          	<span class="comment">//当前线程所有任务完成</span></span><br><span class="line">           <span class="keyword">if</span> (i &lt; <span class="number">0</span> || i &gt;= n || i + n &gt;= nextn) &#123;</span><br><span class="line">               <span class="keyword">int</span> sc;</span><br><span class="line">               <span class="comment">//结束了就更新相关的变量</span></span><br><span class="line">               <span class="keyword">if</span> (finishing) &#123;</span><br><span class="line">                   nextTable = <span class="keyword">null</span>;</span><br><span class="line">                   table = nextTab;</span><br><span class="line">                   sizeCtl = (n &lt;&lt; <span class="number">1</span>) - (n &gt;&gt;&gt; <span class="number">1</span>);</span><br><span class="line">                   <span class="keyword">return</span>;</span><br><span class="line">               &#125;</span><br><span class="line">               <span class="keyword">if</span> (U.compareAndSwapInt(<span class="keyword">this</span>, SIZECTL, sc = sizeCtl, sc - <span class="number">1</span>)) &#123;</span><br><span class="line">                   <span class="keyword">if</span> ((sc - <span class="number">2</span>) != resizeStamp(n) &lt;&lt; RESIZE_STAMP_SHIFT)</span><br><span class="line">                       <span class="keyword">return</span>;</span><br><span class="line">                   finishing = advance = <span class="keyword">true</span>;</span><br><span class="line">                   i = n; <span class="comment">// recheck before commit</span></span><br><span class="line">               &#125;</span><br><span class="line">           &#125;</span><br><span class="line">           <span class="comment">//如果散列表旧表这个位置为空，则把ForwardingNode赋值给这个位置</span></span><br><span class="line">           <span class="keyword">else</span> <span class="keyword">if</span> ((f = tabAt(tab, i)) == <span class="keyword">null</span>)</span><br><span class="line">               advance = casTabAt(tab, i, <span class="keyword">null</span>, fwd);</span><br><span class="line">           <span class="comment">//如果散列表旧表这个位置为ForwardingNode，表示已经处理过了</span></span><br><span class="line">           <span class="keyword">else</span> <span class="keyword">if</span> ((fh = f.hash) == MOVED)</span><br><span class="line">               advance = <span class="keyword">true</span>; <span class="comment">// already processed</span></span><br><span class="line">           <span class="keyword">else</span> &#123;</span><br><span class="line">               <span class="keyword">synchronized</span> (f) &#123;</span><br><span class="line">                   <span class="comment">//如果散列表旧表这个位置为链表节点，CAS的方式迁移，位置变化和hashmap差不多，最后会追加在散列表旧表里面设置ForwardingNode表示已经处理过了</span></span><br><span class="line">                   <span class="keyword">if</span> (tabAt(tab, i) == f) &#123;</span><br><span class="line">                       Node&lt;K,V&gt; ln, hn;</span><br><span class="line">                       <span class="keyword">if</span> (fh &gt;= <span class="number">0</span>) &#123;</span><br><span class="line">                           <span class="keyword">int</span> runBit = fh &amp; n;</span><br><span class="line">                           Node&lt;K,V&gt; lastRun = f;</span><br><span class="line">                           <span class="keyword">for</span> (Node&lt;K,V&gt; p = f.next; p != <span class="keyword">null</span>; p = p.next) &#123;</span><br><span class="line">                               <span class="keyword">int</span> b = p.hash &amp; n;</span><br><span class="line">                               <span class="keyword">if</span> (b != runBit) &#123;</span><br><span class="line">                                   runBit = b;</span><br><span class="line">                                   lastRun = p;</span><br><span class="line">                               &#125;</span><br><span class="line">                           &#125;</span><br><span class="line">                           <span class="keyword">if</span> (runBit == <span class="number">0</span>) &#123;</span><br><span class="line">                               ln = lastRun;</span><br><span class="line">                               hn = <span class="keyword">null</span>;</span><br><span class="line">                           &#125;</span><br><span class="line">                           <span class="keyword">else</span> &#123;</span><br><span class="line">                               hn = lastRun;</span><br><span class="line">                               ln = <span class="keyword">null</span>;</span><br><span class="line">                           &#125;</span><br><span class="line">                           <span class="keyword">for</span> (Node&lt;K,V&gt; p = f; p != lastRun; p = p.next) &#123;</span><br><span class="line">                               <span class="keyword">int</span> ph = p.hash; K pk = p.key; V pv = p.val;</span><br><span class="line">                               <span class="keyword">if</span> ((ph &amp; n) == <span class="number">0</span>)</span><br><span class="line">                                   ln = <span class="keyword">new</span> Node&lt;K,V&gt;(ph, pk, pv, ln);</span><br><span class="line">                               <span class="keyword">else</span></span><br><span class="line">                                   hn = <span class="keyword">new</span> Node&lt;K,V&gt;(ph, pk, pv, hn);</span><br><span class="line">                           &#125;</span><br><span class="line">                           setTabAt(nextTab, i, ln);</span><br><span class="line">                           setTabAt(nextTab, i + n, hn);</span><br><span class="line">                           setTabAt(tab, i, fwd);</span><br><span class="line">                           advance = <span class="keyword">true</span>;</span><br><span class="line">                       &#125;</span><br><span class="line">                       <span class="comment">//如果散列表旧表这个位置为红黑树，CAS的方式迁移，最后会追加在散列表旧表里面设置ForwardingNode表示已经处理过了</span></span><br><span class="line">                       <span class="keyword">else</span> <span class="keyword">if</span> (f <span class="keyword">instanceof</span> TreeBin) &#123;</span><br><span class="line">                           TreeBin&lt;K,V&gt; t = (TreeBin&lt;K,V&gt;)f;</span><br><span class="line">                           TreeNode&lt;K,V&gt; lo = <span class="keyword">null</span>, loTail = <span class="keyword">null</span>;</span><br><span class="line">                           TreeNode&lt;K,V&gt; hi = <span class="keyword">null</span>, hiTail = <span class="keyword">null</span>;</span><br><span class="line">                           <span class="keyword">int</span> lc = <span class="number">0</span>, hc = <span class="number">0</span>;</span><br><span class="line">                           <span class="keyword">for</span> (Node&lt;K,V&gt; e = t.first; e != <span class="keyword">null</span>; e = e.next) &#123;</span><br><span class="line">                               <span class="keyword">int</span> h = e.hash;</span><br><span class="line">                               TreeNode&lt;K,V&gt; p = <span class="keyword">new</span> TreeNode&lt;K,V&gt;</span><br><span class="line">                                   (h, e.key, e.val, <span class="keyword">null</span>, <span class="keyword">null</span>);</span><br><span class="line">                               <span class="keyword">if</span> ((h &amp; n) == <span class="number">0</span>) &#123;</span><br><span class="line">                                   <span class="keyword">if</span> ((p.prev = loTail) == <span class="keyword">null</span>)</span><br><span class="line">                                       lo = p;</span><br><span class="line">                                   <span class="keyword">else</span></span><br><span class="line">                                       loTail.next = p;</span><br><span class="line">                                   loTail = p;</span><br><span class="line">                                   ++lc;</span><br><span class="line">                               &#125;</span><br><span class="line">                               <span class="keyword">else</span> &#123;</span><br><span class="line">                                   <span class="keyword">if</span> ((p.prev = hiTail) == <span class="keyword">null</span>)</span><br><span class="line">                                       hi = p;</span><br><span class="line">                                   <span class="keyword">else</span></span><br><span class="line">                                       hiTail.next = p;</span><br><span class="line">                                   hiTail = p;</span><br><span class="line">                                   ++hc;</span><br><span class="line">                               &#125;</span><br><span class="line">                           &#125;</span><br><span class="line">                           ln = (lc &lt;= UNTREEIFY_THRESHOLD) ? untreeify(lo) :</span><br><span class="line">                               (hc != <span class="number">0</span>) ? <span class="keyword">new</span> TreeBin&lt;K,V&gt;(lo) : t;</span><br><span class="line">                           hn = (hc &lt;= UNTREEIFY_THRESHOLD) ? untreeify(hi) :</span><br><span class="line">                               (lc != <span class="number">0</span>) ? <span class="keyword">new</span> TreeBin&lt;K,V&gt;(hi) : t;</span><br><span class="line">                           setTabAt(nextTab, i, ln);</span><br><span class="line">                           setTabAt(nextTab, i + n, hn);</span><br><span class="line">                           setTabAt(tab, i, fwd);</span><br><span class="line">                           advance = <span class="keyword">true</span>;</span><br><span class="line">                       &#125;</span><br><span class="line">                   &#125;</span><br><span class="line">               &#125;</span><br><span class="line">           &#125;</span><br><span class="line">       &#125;</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure>
<p>这里主要是两个无限循环导致分支的控制有点复杂，在迁移的过程中还是要对数组旧表的位置处的结点加锁。整个迁移过程不加锁的原因是，根据hash函数，旧表迁移到新表，旧表中位置为i的节点在新表中只可能有两个位置，i和i+n，只需要对这个节点加锁，保证迁移过程就行。A线程负责i节点，B线程负责j节点，C线程负责k节点，只要节点没有重叠，迁移就不会有多线程的问题。完成后会把旧表中这个位置设置为ForwardingNode，这样别的线程扫描到这个节点也会发现处理过了，跳过它。</p>
</li>
</ol>
]]></content>
      <categories>
        <category>Java</category>
      </categories>
      <tags>
        <tag>面试</tag>
      </tags>
  </entry>
  <entry>
    <title>Java虚拟机-类,对象，内存</title>
    <url>/2017/11/22/Java%E8%99%9A%E6%8B%9F%E6%9C%BA-%E7%B1%BB,%E5%AF%B9%E8%B1%A1%EF%BC%8C%E5%86%85%E5%AD%98/</url>
    <content><![CDATA[<p>来源：《深入理解Java虚拟机(第2版)》</p>
<h1 id="Java虚拟机-类-对象，内存"><a href="#Java虚拟机-类-对象，内存" class="headerlink" title="Java虚拟机-类,对象，内存"></a>Java虚拟机-类,对象，内存</h1><h2 id="类加载"><a href="#类加载" class="headerlink" title="类加载"></a>类加载</h2><p>虚拟机把描述类的数据从Class文件加载到内存，并对数据进行校验，转换解析和初始化，最终形成可以被虚拟机直接使用的Java类型，这就是虚拟机的类加载机制。</p>
<p>虚拟机规定了有且只有五种情况需要开始类的加载过程:</p>
<ol>
<li>遇到new、getstatic、putstatic或invokestatic这4条字节码指令时，如果类没有进行过初始化，则需要先触发其初始化。生成这4条指令的最常见的Java代码场景是：使用new关键字实例化对象的时候，读取或设置一个类的静态字段（被final修饰、已在编译期把结果放入常量池的静态字段除外）的时候，以及调用一个类的静态方法的时候。</li>
<li>使用java.lang.reflect包的方法对类进行反射调用的时候，如果类没有进行过初始化，则需要先触发其初始化。</li>
<li>当初始化一个类的时候，如果发现其父类还没有进行过初始化，则需要先触发其父类的初始化。</li>
<li>当虚拟机启动时，用户需要指定一个要执行的主类（包含main()方法的那个类），虚拟机会先初始化这个主类。<a id="more"></a></li>
<li>当使用JDK 1.7的动态语言支持时，如果一个java.lang.invoke.MethodHandle实例最后的解析结果REF_getStatic、REF_putStatic、REF_invokeStatic的方法句柄，并且这个方法句柄所对应的类没有进行过初始化，则需要先触发其初始化。</li>
</ol>
<p>这五种场景中的行为称为对一个类的主动引用，其他情况称为被动引用，</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//被动引用示例一: 使用子类引用父类的静态字段，不会导致子类初始化。</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SuperClass</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> value = <span class="number">123</span>;</span><br><span class="line">    <span class="keyword">static</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;super class init.&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SubClass</span> <span class="keyword">extends</span> <span class="title">SuperClass</span> </span>&#123;</span><br><span class="line">    <span class="keyword">static</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;sub class init.&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;    </span><br><span class="line">    System.out.println(SubClass.value);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//输出：</span></span><br><span class="line"><span class="keyword">super</span> <span class="class"><span class="keyword">class</span> <span class="title">init</span>.</span></span><br></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//被动引用示例二：通过数组定义来引用类，不会触发类的初始化</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        SuperClass[] arr = <span class="keyword">new</span> SuperClass[<span class="number">10</span>];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SuperClass</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> value = <span class="number">123</span>;</span><br><span class="line">    <span class="keyword">static</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;super class init.&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//输出</span></span><br><span class="line">nonthing</span><br></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//被动引用示例三：常量在编译阶段会存入调用类的常量池中，本质上并没有直接引用到定义常量的类，因此不会触发定义常量的类的初始化。</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        System.out.println(ConstClass.Test);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ConstClass</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String Test = <span class="string">&quot;Hello world!&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;const class init.&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//输出</span></span><br><span class="line">Hello world!</span><br></pre></td></tr></table></figure>
<h2 id="类加载的过程"><a href="#类加载的过程" class="headerlink" title="类加载的过程"></a>类加载的过程</h2><p>java虚拟机中类加载的全过程：加载、验证、准备、解析和初始化这5个阶段，注意区别于类的生命周期。</p>
<h3 id="加载"><a href="#加载" class="headerlink" title="加载"></a>加载</h3><p>在加载阶段，虚拟机需要完成以下3件事情：</p>
<blockquote>
<p>  1）通过一个类的全限定名来获取定义此类的二进制字节流。<br>  2）将这个字节流所代表的静态存储结构转化为方法区的运行时数据结构。<br>  3）在内存中生成一个代表这个类的java.lang.Class对象，作为方法区这个类的各种数据的访问入口。</p>
</blockquote>
<p>  数组类本身不通过类加载器创建，它是由java虚拟机直接创建的。但数组类与类加载器仍然有密切的关系，因为数组类的元素类型（Element Type，指的是数组去掉所有维度的类型）最终是要靠类加载器去创建。</p>
<p>  加载阶段与连接阶段的部分内容（如一部分字节码文件格式验证动作）是交叉进行的，加载阶段尚未完成，连接阶段可能已经开始，但这些夹在加载阶段之中进行的动作，仍然属于连接阶段的内容，这两个阶段的开始时间仍然保持着固定的先后顺序。</p>
<h3 id="验证"><a href="#验证" class="headerlink" title="验证"></a>验证</h3><p>  验证是连接阶段（连接阶段包括验证、准备、解析）的第一步，这一阶段的目的是为了确保Class文件的字节流中包含的信息符合当前虚拟机的要求，并且不会危害虚拟机自身的安全。如果验证失败，会抛出java.lang.VerifyError异常。</p>
<p>  验证阶段大致上会完成下面4个阶段的检验动作：文件格式验证、元数据验证、字节码验证、符号引用验证。</p>
<h3 id="准备"><a href="#准备" class="headerlink" title="准备"></a>准备</h3><p>  准备阶段是正式为类变量分配内存并设置类变量初始值的阶段，这些变量所使用的内存都将在方法区中进行分配。这个阶段中有两个容易产生混淆的概念需要强调一下，首先，这时候进行内存分配的仅包括类变量（被static修饰的变量），而不包括实例变量，实例变量将会在对象实例化时随着对象一起分配在java堆中。其次，这里所说的初始值“通常情况下“是数据类型的零值。假设一个类变量的定义为：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">public static int value&#x3D;123;</span><br></pre></td></tr></table></figure>
<p>  那变量value在准备阶段过后的初始值为0而不是123</p>
<p>  如果类字段的字段属性表中存在ConstantValue属性，那在准备阶段变量value就会被初始化为ConstantValue属性所指定的值，假设上面类变量value的定义变为：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">public static final int value&#x3D;123;</span><br></pre></td></tr></table></figure>
<p>编译时javac将会为value生成ConstantValue属性，在准备阶段虚拟机就会根据ConstantValue的设置讲value赋值为123。</p>
<h3 id="解析"><a href="#解析" class="headerlink" title="解析"></a>解析</h3><p>解析阶段时虚拟机将常量池内的符号引用替换为直接引用的过程。</p>
<blockquote>
<p><strong>符号引用</strong>：符号引用以一组符号来描述所引用的目标，符号可以是任何形式的字面量，只要使用时能无歧义地定位到目标即可。符号引用与虚拟机实现的内存布局无关，引用的目标并不一定已经加载到内存中。各种虚拟机实现的内存布局可以各不相同，但是它们能接受的符号引用必须都是一致的，因为符号引用的字面量形式明确定义在java虚拟机规范的Class文件格式中。</p>
<p><strong>直接引用</strong>：直接引用可以是直接指向目标的指针、相对偏移量或是一个能间接定位到目标的句柄。直接引用是和虚拟机实现的内存布局相关的，同一个符号引用在不同虚拟机实例上翻译出来的直接引用一般不会相同。如果有了直接引用，那直接引用的目标必定已经在内存中存在。</p>
</blockquote>
<p>解析的动作主要针对类或接口、字段、类方法、接口方法四类符号引用进行解析。</p>
<h3 id="初始化"><a href="#初始化" class="headerlink" title="初始化"></a>初始化</h3><p>  在准备阶段，变量已经赋过一次系统要求的初始值，而在初始化阶段，则根据程序员制定的主观计划去初始化类变量和其他资源，或者从另一个角度来表达：初始化阶段是执行类构造器&lt; clinit &gt;()方法的过程。</p>
<p>关于&lt; clinit &gt;：</p>
<ul>
<li>&lt; clinit &gt;方法是由编译器自动收集类中的所有类变量的赋值动作和静态语句块（static{}块）中的语句合并产生的，编译器收集的顺序是由语句在源文件中出现的顺序所决定的，静态语句块中只能访问到定义在静态语句块之前的变量。</li>
</ul>
<ul>
<li>类构造器&lt; clinit &gt;方法对于类和接口并不是必须的，如果一个类中没有静态初始化块，也没有类变量赋值操作，则编译器可以不为该类生成类构造器&lt; clinit &gt;方法。</li>
<li>java虚拟机会保证一个类的&lt; clinit &gt;方法在多线程环境中被正确地加锁和同步，如果多个线程同时去初始化一个类，只会有一个线程去执行这个类的&lt; clinit &gt;方法，其他线程都需要阻塞等待，直到活动线程执行&lt; clinit &gt;方法完毕。 </li>
</ul>
<p>初始化阶段，当执行完类构造器&lt; clinit &gt;方法之后，才会执行实例构造器的&lt; init &gt;方法，实例构造方法同样是按照先父类，后子类，先成员变量，后实例构造方法的顺序执行。</p>
<h2 id="类加载器"><a href="#类加载器" class="headerlink" title="类加载器"></a>类加载器</h2><h3 id="类与类加载器"><a href="#类与类加载器" class="headerlink" title="类与类加载器"></a>类与类加载器</h3><p>对于任何一个类，都需要由加载它的类加载器和这个类来确立其在JVM中的唯一性。也就是说，两个类来源于同一个Class文件，并且被同一个类加载器加载，这两个类才相等。</p>
<h3 id="双亲委派模型"><a href="#双亲委派模型" class="headerlink" title="双亲委派模型"></a>双亲委派模型</h3><p>从虚拟机的角度来说，只存在两种不同的类加载器：一种是启动类加载器（Bootstrap ClassLoader），该类加载器使用C++语言实现，属于虚拟机自身的一部分。另外一种就是所有其它的类加载器，这些类加载器是由Java语言实现，独立于JVM外部，并且全部继承自抽象类java.lang.ClassLoader。</p>
<p>从Java开发人员的角度来看，大部分Java程序一般会使用到以下三种系统提供的类加载器：</p>
<ol>
<li>启动类加载器（Bootstrap ClassLoader）：负责加载JAVA_HOME\lib目录中并且能被虚拟机识别的类库到JVM内存中，如果名称不符合的类库即使放在lib目录中也不会被加载。该类加载器无法被Java程序直接引用。</li>
<li>扩展类加载器（Extension ClassLoader）：该加载器主要是负责加载JAVA_HOME\lib\，该加载器可以被开发者直接使用。</li>
<li>应用程序类加载器（Application ClassLoader）：该类加载器也称为系统类加载器，它负责加载用户类路径（Classpath）上所指定的类库，开发者可以直接使用该类加载器，如果应用程序中没有自定义过自己的类加载器，一般情况下这个就是程序中默认的类加载器。</li>
</ol>
<p><img src="/2017/11/22/Java%E8%99%9A%E6%8B%9F%E6%9C%BA-%E7%B1%BB,%E5%AF%B9%E8%B1%A1%EF%BC%8C%E5%86%85%E5%AD%98/java%E5%8F%8C%E4%BA%B2%E5%A7%94%E6%B4%BE.png" alt="java双亲委派"></p>
<p>在Android系统中，情况有所不同,SecureClassLoader和UrlClassLoader是在Java中的类加载器，在Android中是没法办使用的:</p>
<p><img src="/2017/11/22/Java%E8%99%9A%E6%8B%9F%E6%9C%BA-%E7%B1%BB,%E5%AF%B9%E8%B1%A1%EF%BC%8C%E5%86%85%E5%AD%98/Android%E7%B1%BB%E5%8A%A0%E8%BD%BD%E5%99%A8.png" alt="Android类加载器"></p>
<p>其中，App系统类加载器是PathClassLoader，而BootClassLoader是其parent类加载器。</p>
<p>双亲委派模型的工作过程为：如果一个类加载器收到了类加载的请求，它首先不会自己去尝试加载这个类，而是把这个请求委派给父类加载器去完成，每一个层次的加载器都是如此，因此所有的类加载请求都会传给顶层的启动类加载器，只有当父加载器反馈自己无法完成该加载请求（该加载器的搜索范围中没有找到对应的类）时，子加载器才会尝试自己去加载。</p>
<h3 id="自定义类加载器"><a href="#自定义类加载器" class="headerlink" title="自定义类加载器"></a>自定义类加载器</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**   代码来自 http://blog.csdn.net/boyupeng/article/details/47951037</span></span><br><span class="line"><span class="comment">     * 一、ClassLoader加载类的顺序 </span></span><br><span class="line"><span class="comment">     *  1.调用 findLoadedClass(String) 来检查是否已经加载类。 </span></span><br><span class="line"><span class="comment">     *  2.在父类加载器上调用 loadClass 方法。如果父类加载器为 null，则使用虚拟机的内置类加载器。 </span></span><br><span class="line"><span class="comment">     *  3.调用 findClass(String) 方法查找类。 </span></span><br><span class="line"><span class="comment">     * 二、实现自己的类加载器 </span></span><br><span class="line"><span class="comment">     *  1.获取类的class文件的字节数组 </span></span><br><span class="line"><span class="comment">     *  2.将字节数组转换为Class类的实例 </span></span><br><span class="line"><span class="comment">     */</span>  </span><br><span class="line">    <span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ClassLoaderTest</span> </span>&#123;  </span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> InstantiationException, IllegalAccessException, ClassNotFoundException </span>&#123;  </span><br><span class="line">            <span class="comment">//新建一个类加载器  </span></span><br><span class="line">            MyClassLoader cl = <span class="keyword">new</span> MyClassLoader(<span class="string">&quot;myClassLoader&quot;</span>);  </span><br><span class="line">            <span class="comment">//加载类，得到Class对象  </span></span><br><span class="line">            Class&lt;?&gt; clazz = cl.loadClass(<span class="string">&quot;classloader.Animal&quot;</span>);  </span><br><span class="line">            <span class="comment">//得到类的实例  </span></span><br><span class="line">            Animal animal=(Animal) clazz.newInstance();  </span><br><span class="line">            animal.say();  </span><br><span class="line">        &#125;  </span><br><span class="line">    &#125;  </span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">Animal</span></span>&#123;  </span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">say</span><span class="params">()</span></span>&#123;  </span><br><span class="line">            System.out.println(<span class="string">&quot;hello world!&quot;</span>);  </span><br><span class="line">        &#125;  </span><br><span class="line">    &#125;  </span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">MyClassLoader</span> <span class="keyword">extends</span> <span class="title">ClassLoader</span> </span>&#123;  </span><br><span class="line">        <span class="comment">//类加载器的名称  </span></span><br><span class="line">        <span class="keyword">private</span> String name;  </span><br><span class="line">        <span class="comment">//类存放的路径  </span></span><br><span class="line">        <span class="keyword">private</span> String path = <span class="string">&quot;E:\\workspace\\Algorithm\\src&quot;</span>;  </span><br><span class="line">        MyClassLoader(String name) &#123;  </span><br><span class="line">            <span class="keyword">this</span>.name = name;  </span><br><span class="line">        &#125;  </span><br><span class="line">        MyClassLoader(ClassLoader parent, String name) &#123;  </span><br><span class="line">            <span class="keyword">super</span>(parent);  </span><br><span class="line">            <span class="keyword">this</span>.name = name;  </span><br><span class="line">        &#125;  </span><br><span class="line">        <span class="comment">/** </span></span><br><span class="line"><span class="comment">         * 重写findClass方法 </span></span><br><span class="line"><span class="comment">         */</span>  </span><br><span class="line">        <span class="meta">@Override</span>  </span><br><span class="line">        <span class="keyword">public</span> Class&lt;?&gt; findClass(String name) &#123;  </span><br><span class="line">            <span class="keyword">byte</span>[] data = loadClassData(name);  </span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">this</span>.defineClass(name, data, <span class="number">0</span>, data.length);  </span><br><span class="line">        &#125;  </span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">byte</span>[] loadClassData(String name) &#123;  </span><br><span class="line">            <span class="keyword">try</span> &#123;  </span><br><span class="line">                name = name.replace(<span class="string">&quot;.&quot;</span>, <span class="string">&quot;//&quot;</span>);  </span><br><span class="line">                FileInputStream is = <span class="keyword">new</span> FileInputStream(<span class="keyword">new</span> File(path + name + <span class="string">&quot;.class&quot;</span>));  </span><br><span class="line">                ByteArrayOutputStream baos = <span class="keyword">new</span> ByteArrayOutputStream();  </span><br><span class="line">                <span class="keyword">int</span> b = <span class="number">0</span>;  </span><br><span class="line">                <span class="keyword">while</span> ((b = is.read()) != -<span class="number">1</span>) &#123;  </span><br><span class="line">                    baos.write(b);  </span><br><span class="line">                &#125;  </span><br><span class="line">                <span class="keyword">return</span> baos.toByteArray();  </span><br><span class="line">            &#125; <span class="keyword">catch</span> (Exception e) &#123;  </span><br><span class="line">                e.printStackTrace();  </span><br><span class="line">            &#125;  </span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">null</span>;  </span><br><span class="line">        &#125;  </span><br><span class="line">    &#125;  </span><br></pre></td></tr></table></figure>
<h2 id="对象"><a href="#对象" class="headerlink" title="对象"></a>对象</h2><h3 id="对象的创建"><a href="#对象的创建" class="headerlink" title="对象的创建"></a>对象的创建</h3><ul>
<li>当虚拟机遇到一条new指令时，首先会去检查这个类的符号引用是否可以在常量池中定位，这个类是否已经被加载解析和初始化过。</li>
<li>检查通过后，虚拟机开始为新生的对象分配内存。分配内存通常有两种方式：<ul>
<li>如果Java堆中内存是绝对规整的，所有用过的内存都放在一边，空闲的内存放在另一边，中间放着一个指针作为分界点的指示器，这种分配方式称为“指针碰撞”。</li>
<li>如果Java堆中的内存并不是规整的，已使用的内存和空闲的内存相互交错，虚拟机就必须维护一个列表，记录那些内存块是可用的， 这种分配方式成为“空闲列表”。采用哪种方式和虚拟机的GC类型有关。</li>
</ul>
</li>
<li>内存分配完成后。虚拟机需要将这块内存空间初始化为零值。此时一个新的对象已经诞生了，然后是执行<code>&lt;init&gt;</code>方法，按照程序员的意愿进行初始化，之后才可用。</li>
</ul>
<h3 id="对象的内存布局"><a href="#对象的内存布局" class="headerlink" title="对象的内存布局"></a>对象的内存布局</h3><p>对象在内存中存储的布局可以分为三块区域：对象头，实例数据和对齐填充。</p>
<ul>
<li>对象头包含两部分信息，一部分用来存储对象自身的运行时数据,包括对象的哈希码，gc分代年龄，锁状态标识，线程锁等，称为Mark Word（在32bit和64bit虚拟机上长度分别为32bit和64bit）；另一部分是类型指针，指向它的类元数据的指针，虚拟机通过这个指针来确定这个对象是哪个类的实例，并不是所有的虚拟机实现都必须在对象数据上保留类型指针。另外，如果对象是一个Java数组，那么对象头重还会记录数组的长度。</li>
<li>实例数据是对象真正存储信息的地方,也是代码中所定义的各种类型的字段内容.无论是继承下来的,还是子类中定义的,都需要记录起来.</li>
<li>对齐填充并不是必然存在的，因为虚拟机要对对象的大小必须是8的整数倍，因此，它仅仅用来对齐。</li>
</ul>
<h3 id="对象的访问定位"><a href="#对象的访问定位" class="headerlink" title="对象的访问定位"></a>对象的访问定位</h3><p>Java程序需要通过栈上的引用数据来操作堆上的具体对象。对象的访问方式取决于虚拟机实现，目前主流的访问方式有使用句柄和直接指针两种。</p>
<p>句柄，可以理解为指向指针的指针，维护指向对象的指针变化，而对象的句柄本身不发生变化；指针，指向对象，代表对象的内存地址。</p>
<ul>
<li>句柄 </li>
</ul>
<p>Java堆中划分出一块内存来作为句柄池，引用中存储对象的句柄地址，而句柄中包含了对象实例数据与类型数据各自的具体地址信息。 </p>
<p>优势：引用中存储的是稳定的句柄地址，在对象被移动(垃圾收集时移动对象是非常普遍的行为)时只会改变句柄中的实例数据指针，而引用本身不需要修改。</p>
<p><img src="/2017/11/22/Java%E8%99%9A%E6%8B%9F%E6%9C%BA-%E7%B1%BB,%E5%AF%B9%E8%B1%A1%EF%BC%8C%E5%86%85%E5%AD%98/616953-20160226155344349-887482013.png"></p>
<ul>
<li>直接指针</li>
</ul>
<p>如果使用直接指针访问，那么Java堆对象的布局中就必须考虑如何放置访问类型数据的相关信息，而引用中存储的直接就是对象地址。优势：速度更快，节省了一次指针定位的时间开销。由于对象的访问在Java中非常频繁，因此这类开销积少成多后也是非常可观的执行成本。（例如HotSpot）</p>
<p><img src="/2017/11/22/Java%E8%99%9A%E6%8B%9F%E6%9C%BA-%E7%B1%BB,%E5%AF%B9%E8%B1%A1%EF%BC%8C%E5%86%85%E5%AD%98/616953-20160518141733169-1486000631.png"></p>
<h2 id="运行时内存区域划分"><a href="#运行时内存区域划分" class="headerlink" title="运行时内存区域划分"></a>运行时内存区域划分</h2><p>根据《Java虚拟机规范(SE 7)》的规定，Java虚拟机在执行Java程序的过程中会把它所管理的内存划分为若干个不用的区域。</p>
<h3 id="程序计数器"><a href="#程序计数器" class="headerlink" title="程序计数器"></a>程序计数器</h3><p>程序计数器可以看作当前线程所执行的字节码的行号指示器，在任何一个确定的时刻，一个处理器都只会执行一条线程中的指令，因此，为什么线程切换后能恢复到正确的执行位置，每条线程都需要一个独立的程序计数器，它们互不影响，存储在线程私有内存区域。此区域是唯一一个在java虚拟机规范中没有规定任何OutOfMemoryError情况的区域。</p>
<h3 id="Java虚拟机栈"><a href="#Java虚拟机栈" class="headerlink" title="Java虚拟机栈"></a>Java虚拟机栈</h3><p>和程序计数器一样，Java虚拟机栈也是线程私有的，每一个Java方法执行的时候，都会创建一个栈帧，它的生命周期很短，主要用于存储局部变量，操作数栈，动态链接，方法出口地址等，此区域可能会抛出StackOverFlow异常和OutOfMemoryError异常。还会保存堆中对象变量的引用。</p>
<h3 id="本地方法栈"><a href="#本地方法栈" class="headerlink" title="本地方法栈"></a>本地方法栈</h3><p>和Java虚拟机栈的作用类似，为Native方法服务，线程私有。</p>
<h3 id="Java堆"><a href="#Java堆" class="headerlink" title="Java堆"></a>Java堆</h3><p>Java堆是被所有的线程共享的一块内存区域，此区域的唯一目的就是存放对象实例，几乎所有的对象实例和数组都会在这里分配。Java堆是GC管理的主要区域。由于现在GC基本都采用分代收集算法，所以Java堆还可以细分为新生代和老年代；再细致点就是Eden，From Survivor,To Survivor空间等。可以通过-Xmx和-Xms来进行大小的扩展。堆内存的生命周期从程序的运行开始到运行结束。</p>
<h3 id="方法区"><a href="#方法区" class="headerlink" title="方法区"></a>方法区</h3><p>方法区也是被所有线程共享的内存区域，它用于存储已经被虚拟机加载的类信息，常量，静态变量等。</p>
<h3 id="运行时常量池"><a href="#运行时常量池" class="headerlink" title="运行时常量池"></a>运行时常量池</h3><p>方法区的一部分</p>
<h3 id="直接内存"><a href="#直接内存" class="headerlink" title="直接内存"></a>直接内存</h3><p>直接内存并不是虚拟机运行时数据区的一部分。它使用Native函数库直接分配堆外内存，然后通过一个存储在Java堆中的DirectByteBuffer对象作为这块内存的引用进行操作，避免了在Java堆和Native堆中来回复制数据。虽然直接内存的分配不受Java虚拟机的限制，但是它仍然受到物理内存总大小等的限制，当Java堆过大的时候，可能会导致这块区域分配不足而OutOfMemory异常。</p>
<p><img src="/2017/11/22/Java%E8%99%9A%E6%8B%9F%E6%9C%BA-%E7%B1%BB,%E5%AF%B9%E8%B1%A1%EF%BC%8C%E5%86%85%E5%AD%98/jvm_memory_1.png" alt="jvm_memory_1"></p>
<p><code>图片来源于http://gityuan.com/2016/01/09/java-memory/</code></p>
]]></content>
      <categories>
        <category>Java</category>
      </categories>
      <tags>
        <tag>深入理解Java虚拟机</tag>
        <tag>面试</tag>
      </tags>
  </entry>
  <entry>
    <title>RSA加解密算法原理</title>
    <url>/2018/07/30/RSA%E5%8A%A0%E8%A7%A3%E5%AF%86%E7%AE%97%E6%B3%95%E5%8E%9F%E7%90%86/</url>
    <content><![CDATA[<p>原文链接已经失效了。所以这里重新发一遍<br><a href="https://blog.csdn.net/wm_1991/article/details/51954565">RSA加密算法详解</a></p>
<a id="more"></a>

<p>RSA ：</p>
<p>1976年以前，所有的加密方法都是同一种模式：<br>　　（1）甲方选择某一种加密规则，对信息进行加密；<br>　　（2）乙方使用同一种规则，对信息进行解密。<br>由于加密和解密使用同样规则（简称”密钥”），这被称为”对称加密算法”（Symmetric-key algorithm）。这种加密模式有一个最大弱点：甲方必须把加密规则告诉乙方，否则无法解密。保存和传递密钥，就成了最头疼的问题。</p>
<p>1976年，两位美国计算机学家Whitfield Diffie 和 Martin、Hellman，提出了一种崭新构思，可以在不直接传递密钥的情况下，完成解密。这被称为”Diffie-Hellman密钥交换算法”。这个算法启发了其他科学家。人们认识到，加密和解密可以使用不同的规则，只要这两种规则之间存在某种对应关系即可，这样就避免了直接传递密钥。这种新的加密模式被称为”非对称加密算法”。<br>　　（1）乙方生成两把密钥（公钥和私钥）。公钥是公开的，任何人都可以获得，私钥则是保密的。<br>　　（2）甲方获取乙方的公钥，然后用它对信息加密。<br>　　（3）乙方得到加密后的信息，用私钥解密。<br>如果公钥加密的信息只有私钥解得开，那么只要私钥不泄漏，通信就是安全的。</p>
<p>1977年，三位数学家Rivest、Shamir 和 Adleman 设计了一种算法，可以实现非对称加密。这种算法用他们三个人的名字命名，叫做RSA算法。从那时直到现在，RSA算法一直是最广为使用的”非对称加密算法”。毫不夸张地说，只要有计算机网络的地方，就有RSA算法。<br>这种算法非常可靠，密钥越长，它就越难破解。根据已经披露的文献，目前被破解的最长RSA密钥是768个二进制位。也就是说，长度超过768位的密钥，还无法破解（至少没人公开宣布）。因此可以认为，1024位的RSA密钥基本安全，2048位的密钥极其安全。<br>下面，我就进入正题，解释RSA算法的原理。文章共分成两部分，今天是第一部分，介绍要用到的四个数学概念。你可以看到，RSA算法并不难，只需要一点数论知识就可以理解。</p>
<p>理论基础</p>
<p>这里介绍一点理论基础，都是比较简单的，小学的数学知识。看我细细道来~</p>
<h4 id="什么是“素数”？"><a href="#什么是“素数”？" class="headerlink" title="什么是“素数”？"></a>什么是“素数”？</h4><p>素数是这样的整数，它除了能表示为它自己和1的乘积以外，不能表示为任何其它两个整数的乘积。例如，15＝3＊5，所以15不是素数；又如，12＝6＊2＝4＊3，所以12也不是素数。另一方面，13除了等于13＊1以外，不能表示为其它任何两个整数的乘积，所以13是一个素数。素数也称为“质数”。</p>
<h4 id="什么是“互质数”（或“互素数”）？"><a href="#什么是“互质数”（或“互素数”）？" class="headerlink" title="什么是“互质数”（或“互素数”）？"></a>什么是“互质数”（或“互素数”）？</h4><p>小学数学教材对互质数是这样定义的：“公约数只有1的两个数，叫做互质数。”这里所说的“两个数”是指自然数。<br>　　判别方法主要有以下几种（不限于此）：<br>（1）两个质数一定是互质数。例如，2与7、13与19。<br>（2）一个质数如果不能整除另一个合数，这两个数为互质数。例如，3与10、5与 26。<br>（3）1不是质数也不是合数，它和任何一个自然数在一起都是互质数。如1和9908。<br>（4）相邻的两个自然数是互质数。如 15与 16。<br>（5）相邻的两个奇数是互质数。如 49与 51。<br>（6）大数是质数的两个数是互质数。如97与88。<br>（7）小数是质数，大数不是小数的倍数的两个数是互质数。如 7和 16。<br>（8）两个数都是合数（二数差又较大），小数所有的质因数，都不是大数的约数，这两个数是互质数。如357与715，357=3×7×17，而3、7和17都不是715的约数，这两个数为互质数。等等。</p>
<h4 id="什么是模指数运算？"><a href="#什么是模指数运算？" class="headerlink" title="什么是模指数运算？"></a>什么是模指数运算？</h4><p>指数运算谁都懂，不必说了，先说说模运算。模运算是整数运算，有一个整数m，以n为模做模运算，即m mod n。怎样做呢？让m去被n整除，只取所得的余数作为结果，就叫做模运算。例如，10 mod 3=1；26 mod 6=2；28 mod 2 =0等等。<br>　　模指数运算就是先做指数运算，取其结果再做模运算。如2^3 mod 5 = 3<br>什么是同余式</p>
<p>表示同余关系的数学表达式，与等式相似。将等式中的等号“=”换成同余符号“≡”，必要时在式尾缀以(mod m) 注明模m（即除数），就是同余式。含有未知数的同余式叫做同余方程，通常要求整数解。<br>如果两个正整数 a和 b之差能被 n整除，那么我们就说 a和 b对模n同余，记作：<br>a ≡b (mod n)</p>
<h4 id="什么是费马定理"><a href="#什么是费马定理" class="headerlink" title="什么是费马定理"></a>什么是费马定理</h4><p>若p是素数，a与p互素，则<br>a^(p-1）≡1 (mod p）<br>什么是欧拉定理</p>
<p>欧拉函数φ(n)表示不大于n且与n互素的正整数的个数。<br>当n是素数，φ(n)=n-1。n=pq,p,q均为素数时，则φ(n)= φ(p)φ(q)=(p-1)(q-1)。<br>对于互素的a和n，有a^φ(n)≡1(mod n)<br>什么是模反元素？</p>
<p>如果两个正整数a和n互质，那么一定可以找到整数b，使得ab-1被n整除或者说ab被n除的余数是1。这时，b就叫做a的”模反元素”。<br>比如，3和11互质，那么3的模反元素就是4，因为 (3 × 4)-1 可以被11整除。显然，模反元素不止一个， 4加减11的整数倍都是3的模反元素 {…,-18,-7,4,15,26,…}，即如果b是a的模反元素，则 b+kn 都是a的模反元素。欧拉定理可以用来证明模反元素必然存在。<br>密钥生成步骤</p>
<hr>
<p>这里通过实例来说明。假设爱丽丝要与鲍勃进行加密通信，她该怎么生成公钥和私钥呢？</p>
<p>第一步，随机选择两个不相等的质数p和q。<br>爱丽丝选择了61和53。（实际应用中，这两个质数越大，就越难破解。）</p>
<p>第二步，计算p和q的乘积n。<br>爱丽丝就把61和53相乘。<br>　　n = 61×53 = 3233<br>n的长度就是密钥长度。3233写成二进制是110010100001，一共有12位，所以这个密钥就是12位。实际应用中，RSA密钥一般是1024位，重要场合则为2048位。</p>
<p>第三步，计算n的欧拉函数φ(n)。<br>根据公式：<br>　　φ(n) = (p-1)(q-1)<br>爱丽丝算出φ(3233)等于60×52，即3120。</p>
<p>第四步，随机选择一个整数e，条件是1&lt; e &lt; φ(n)，且e与φ(n) 互质。<br>爱丽丝就在1到3120之间，随机选择了17。（实际应用中，常常选择65537。）</p>
<p>第五步，计算e对于φ(n)的模反元素d。<br>所谓”模反元素”就是指有一个整数d，可以使得ed被φ(n)除的余数为1。<br>　　ed ≡ 1 (mod φ(n))<br>这个式子等价于<br>　　ed - 1 = kφ(n)<br>于是，找到模反元素d，实质上就是对下面这个二元一次方程求解。<br>　　ex + φ(n)y = 1<br>已知 e=17, φ(n)=3120，<br>　　17x + 3120y = 1<br>这个方程可以用”扩展欧几里得算法”求解，此处省略具体过程。总之，爱丽丝算出一组整数解为 (x,y)=(2753,-15)，即 d=2753。<br>至此所有计算完成。</p>
<p>第六步，将n和e封装成公钥，n和d封装成私钥。<br>在爱丽丝的例子中，n=3233，e=17，d=2753，所以公钥就是 (3233,17)，私钥就是（3233, 2753）。<br>实际应用中，公钥和私钥的数据都采用ASN.1格式表达。如下：</p>
<p>比如上面显示的这个公钥，那么怎么看出加密指数和模数呢？</p>
<p>下面是我随便从IE里导出的一个证书的公钥</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">30 81 89 02 81 81 00 ee fa 1f c9 b0 43 df 7e 75 81 4e 31 71 91 0b fc 15 9d d9 4a 8a 51 f5 09 18 c6 7c c5 f1 27 c4 01 62 fc bf fc 84 29 a6 2f e6 1e 02 06 0b 96 89 d3 42 b1 73 9f 02 ae 75 62 09 3f 83 80 34 46 60 39 0a e3 21 4e e7 04 42 d5 7e 5e 98 45 27 5d 04 b9 27 32 c0 65 a4 94 85 13 25 db 16 f2 fb 51 c7 ff 28 62 d1 83 31 4f a9 a4 f4 c5 4f 9d 00 2e 14 3f 95 16 9c 4e 25 07 1b d5 7d 38 71 d8 40 f8 aa 71 02 03 01 00 01</span><br></pre></td></tr></table></figure>
<p>在PKCS#1中的RSA的公钥的标准格式为</p>
<p>PKCS#1 :<br>An RSA public key should be represented with the ASN.1 type RSAPublickey:</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">RSAPublickey ::&#x3D; SEQUENCE &#123;</span><br><span class="line">   modulus         INTEGER, -- n</span><br><span class="line">   publicExponent INTEGER   -- e</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>然后按照ASN的标准编码，所以说：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">30 81 89 02 81 81 00 ee fa 1f c9 b0 43 df 7e 75 81 4e 31 71 91 0b fc 15 </span><br><span class="line">9d d9 4a 8a 51 f5 09 18 c6 7c c5 f1 27 c4 01 62 fc bf fc 84 29 a6 2f e6 1e </span><br><span class="line">02 06 0b 96 89 d3 42 b1 73 9f 02 ae 75 62 09 3f 83 80 34 46 60 39 0a e3 </span><br><span class="line">21 4e e7 04 42 d5 7e 5e 98 45 27 5d 04 b9 27 32 c0 65 a4 94 85 13 25 db </span><br><span class="line">16 f2 fb 51 c7 ff 28 62 d1 83 31 4f a9 a4 f4 c5 4f 9d 00 2e 14 3f 95 16 9c 4e </span><br><span class="line">25 07 1b d5 7d 38 71 d8 40 f8 aa 71 02 03 01 00 01</span><br></pre></td></tr></table></figure>
<p><code>0x30 0x81 0x89</code> 是一个标识头，整个编码应该是：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">02 81 81 00 ee fa 1f c9 b0 43 df 7e 75 81 4e 31 71 91 0b fc 15 9d d9 4a </span><br><span class="line">8a 51 f5 09 18 c6 7c c5 f1 27 c4 01 62 fc bf fc 84 29 a6 2f e6 1e 02 06 0b </span><br><span class="line">96 89 d3 42 b1 73 9f 02 ae 75 62 09 3f 83 80 34 46 60 39 0a e3 21 4e e7 </span><br><span class="line">04 42 d5 7e 5e 98 45 27 5d 04 b9 27 32 c0 65 a4 94 85 13 25 db 16 f2 fb </span><br><span class="line">51 c7 ff 28 62 d1 83 31 4f a9 a4 f4 c5 4f 9d 00 2e 14 3f 95 16 9c 4e 25 07 </span><br><span class="line">1b d5 7d 38 71 d8 40 f8 aa 71 02 03 01 00 01</span><br></pre></td></tr></table></figure>
<p>而</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">02 81 81 00 ee fa 1f c9 b0 43 df 7e 75 81 4e 31 71 91 0b fc 15 9d d9 4a </span><br><span class="line">8a 51 f5 09 18 c6 7c c5 f1 27 c4 01 62 fc bf fc 84 29 a6 2f e6 1e 02 06 0b </span><br><span class="line">96 89 d3 42 b1 73 9f 02 ae 75 62 09 3f 83 80 34 46 60 39 0a e3 21 4e e7</span><br><span class="line">04 42 d5 7e 5e 98 45 27 5d 04 b9 27 32 c0 65 a4 94 85 13 25 db 16 f2 fb </span><br><span class="line">51 c7 ff 28 62 d1 83 31 4f a9 a4 f4 c5 4f 9d 00 2e 14 3f 95 16 9c 4e 25 07 </span><br><span class="line">1b d5 7d 38 71 d8 40 f8 aa 71</span><br></pre></td></tr></table></figure>
<p>是n的编码。</p>
<p><code>0x02 0x03 0x01 0x00 0x01</code>是e的编码，不过你还是看不出来这什么整数，<br>举个例子<br>对于上面的0x02,0x03,0x01,0x00,0x01 其中0x02,0x03是e的编码的标识头<br>e的表示是0x01,0x00,0x01，所以e就是0x01256^2+0x00256^1+1=65537</p>
<p>同理n就是</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">81 00 ee fa 1f c9 b0 43 df 7e 75 81 4e 31 71 91 0b fc 15 9d d9 4a 8a 51 f5 </span><br><span class="line">09 18 c6 7c c5 f1 27 c4 01 62 fc bf fc 84 29 a6 2f e6 1e 02 06 0b 96 89 d3 </span><br><span class="line">42 b1 73 9f 02 ae 75 62 09 3f 83 80 34 46 60 39 0a e3 21 4e e7 04 42 d5 </span><br><span class="line">7e 5e 98 45 27 5d 04 b9 27 32 c0 65 a4 94 85 13 25 db 16 f2 fb 51 c7 ff 28 </span><br><span class="line">62 d1 83 31 4f a9 a4 f4 c5 4f 9d 00 2e 14 3f 95 16 9c 4e 25 07 1b d5 7d 38 </span><br><span class="line">71 d8 40 f8 aa 71 02 03 01 00 01</span><br></pre></td></tr></table></figure>
<p>注意，这个是一个整数的编码，也要像e,那样解码。<br>RSA算法的可靠性</p>
<p>回顾上面的密钥生成步骤，一共出现六个数字：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">　　p</span><br><span class="line">　　q</span><br><span class="line">　　n</span><br><span class="line">　　φ(n)</span><br><span class="line">　　e</span><br><span class="line">　　d</span><br></pre></td></tr></table></figure>
<p>这六个数字之中，公钥用到了两个（n和e），其余四个数字都是不公开的。其中最关键的是d，因为n和d组成了私钥，一旦d泄漏，就等于私钥泄漏。<br>那么，有无可能在已知n和e的情况下，推导出d？<br>　　（1）ed≡1 (mod φ(n))。只有知道e和φ(n)，才能算出d。<br>　　（2）φ(n)=(p-1)(q-1)。只有知道p和q，才能算出φ(n)。<br>　　（3）n=pq。只有将n因数分解，才能算出p和q。<br>结论：如果n可以被因数分解，d就可以算出，也就意味着私钥被破解。<br>可是，大整数的因数分解，是一件非常困难的事情。目前，除了暴力破解，还没有发现别的有效方法。维基百科这样写道：<br>　　“对极大整数做因数分解的难度决定了RSA算法的可靠性。换言之，对一极大整数做因数分解愈困难，RSA算法愈可靠。<br>　　假如有人找到一种快速因数分解的算法，那么RSA的可靠性就会极度下降。但找到这样的算法的可能性是非常小的。今天只有短的RSA密钥才可能被暴力破解。到2008年为止，世界上还没有任何可靠的攻击RSA算法的方式。<br>　　只要密钥长度足够长，用RSA加密的信息实际上是不能被解破的。”<br>举例来说，你可以对3233进行因数分解（61×53），但是你没法对下面这个整数进行因数分解。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">　　12301866845301177551304949</span><br><span class="line">　　58384962720772853569595334</span><br><span class="line">　　79219732245215172640050726</span><br><span class="line">　　36575187452021997864693899</span><br><span class="line">　　56474942774063845925192557</span><br><span class="line">　　32630345373154826850791702</span><br><span class="line">　　61221429134616704292143116</span><br><span class="line">　　02221240479274737794080665</span><br><span class="line">　　351419597459856902143413</span><br></pre></td></tr></table></figure>
<p>它等于这样两个质数的乘积：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">　　33478071698956898786044169</span><br><span class="line">　　84821269081770479498371376</span><br><span class="line">　　85689124313889828837938780</span><br><span class="line">　　02287614711652531743087737</span><br><span class="line">　　814467999489</span><br><span class="line">　　　　×</span><br><span class="line">　　36746043666799590428244633</span><br><span class="line">　　79962795263227915816434308</span><br><span class="line">　　76426760322838157396665112</span><br><span class="line">　　79233373417143396810270092</span><br><span class="line">　　798736308917</span><br></pre></td></tr></table></figure>
<p>事实上，这大概是人类已经分解的最大整数（232个十进制位，768个二进制位）。比它更大的因数分解，还没有被报道过，因此目前被破解的最长RSA密钥就是768位。<br>加密和解密</p>
<p>有了公钥和密钥，就能进行加密和解密了。<br>（1）加密要用公钥 (n,e)<br>假设鲍勃要向爱丽丝发送加密信息m，他就要用爱丽丝的公钥 (n,e) 对m进行加密。这里需要注意，m必须是整数（字符串可以取ascii值或unicode值），且m必须小于n。<br>所谓”加密”，就是算出下式的c：</p>
<p>　　<code>me ≡ c (mod n)</code></p>
<p>爱丽丝的公钥是 (3233, 17)，鲍勃的m假设是65，那么可以算出下面的等式：</p>
<p>　　<code>6517 ≡ 2790 (mod 3233)</code></p>
<p>于是，c等于2790，鲍勃就把2790发给了爱丽丝。<br>（2）解密要用私钥(n,d)<br>爱丽丝拿到鲍勃发来的2790以后，就用自己的私钥(3233, 2753) 进行解密。可以证明，下面的等式一定成立：</p>
<p>　　<code>cd ≡ m (mod n)</code></p>
<p>也就是说，c的d次方除以n的余数为m。现在，c等于2790，私钥是(3233, 2753)，那么，爱丽丝算出</p>
<p>　　<code>27902753 ≡ 65 (mod 3233)</code></p>
<p>因此，爱丽丝知道了鲍勃加密前的原文就是65。<br>至此，”加密–解密”的整个过程全部完成。<br>我们可以看到，如果不知道d，就没有办法从c求出m。而前面已经说过，要知道d就必须分解n，这是极难做到的，所以RSA算法保证了通信安全。<br>你可能会问，公钥(n,e) 只能加密小于n的整数m，那么如果要加密大于n的整数，该怎么办？有两种解决方法：一种是把长信息分割成若干段短消息，每段分别加密；另一种是先选择一种”对称性加密算法”（比如DES），用这种算法的密钥加密信息，再用RSA公钥加密DES密钥。</p>
<hr>
<p>私钥解密的证明</p>
<p>最后，我们来证明，为什么用私钥解密，一定可以正确地得到m。也就是证明下面这个式子：</p>
<p><code>c^d ≡ m (mod n)</code></p>
<p>因为，根据加密规则</p>
<p><code>m^e ≡ c (mod n)</code></p>
<p>于是，c可以写成下面的形式：</p>
<p><code>c = m^e - kn</code></p>
<p>将c代入要我们要证明的那个解密规则：</p>
<p><code>(m^e - kn)^d ≡ m (mod n)</code></p>
<p>它等同于求证</p>
<p><code>m^ed ≡ m (mod n)</code></p>
<p>由于</p>
<p><code>ed ≡ 1 (mod φ(n))</code></p>
<p>所以</p>
<p><code>ed = hφ(n)+1</code></p>
<p>将ed代入：</p>
<p><code>m^(hφ(n)+1) ≡ m (mod n)</code></p>
<p>接下来，分成两种情况证明上面这个式子。<br>（1）m与n互质。<br>根据欧拉定理，此时</p>
<p>　　<code>m^φ(n) ≡ 1 (mod n)</code></p>
<p>得到</p>
<p>　　<code>(m^φ(n))^h × m ≡ m (mod n)</code></p>
<p>原式得到证明。</p>
<p>（2）m与n不是互质关系。<br>此时，由于n等于质数p和q的乘积，所以m必然等于kp或kq。<br>以 m = kp为例，考虑到这时k与q必然互质，则根据欧拉定理，下面的式子成立：</p>
<p>　　<code>(kp)^q-1 ≡ 1 (mod q)</code></p>
<p>进一步得到</p>
<p>　　<code>[(kp)^q-1]^h(p-1) × kp ≡ kp (mod q)</code></p>
<p>即</p>
<p>　　<code>(kp)^ed ≡ kp (mod q)</code></p>
<p>将它改写成下面的等式</p>
<p>　　<code>(kp)^ed = tq + kp</code></p>
<p>这时t必然能被p整除，即 t=t’p</p>
<p>　　<code>(kp)^ed = t&#39;pq + kp</code></p>
<p>因为 m=kp，n=pq，所以</p>
<p>　　<code>m^ed ≡ m (mod n)</code></p>
<p>原式得到证明。</p>
<hr>
<p>RSA缺陷</p>
<p>当p和q是一个大素数的时候，从它们的积pq去分解因子p和q，这是一个公认的数学难题。比如当pq大到1024位时，迄今为止还没有人能够利用任何计算工具去完成分解因子的任务。因此，RSA从提出到现在已近二十年，经历了各种攻击的考验，逐渐为人们接受，普遍认为是目前最优秀的公钥方案之一。</p>
<p>　　然而，虽然RSA的安全性依赖于大数的因子分解，但并没有从理论上证明破译RSA的难度与大数分解难度等价。即RSA的重大缺陷是无法从理论上把握它的保密性能如何。</p>
<p>　　此外，RSA的缺点还有：</p>
<p>A)产生密钥很麻烦，受到素数产生技术的限制，因而难以做到一次一密。</p>
<p>B)分组长度太大，为保证安全性，n 至少也要 600 bits 以上，使运算代价很高，尤其是速度较慢，较对称密码算法慢几个数量级；且随着大数分解技术的发展，这个长度还在增加，不利于数据格式的标准化。因此，使用RSA只能加密少量数据，大量的数据加密还要靠对称密码算法。</p>
]]></content>
      <categories>
        <category>通用</category>
      </categories>
      <tags>
        <tag>RSA</tag>
      </tags>
  </entry>
  <entry>
    <title>http 相关知识</title>
    <url>/2018/10/15/http-%E7%9B%B8%E5%85%B3%E7%9F%A5%E8%AF%86/</url>
    <content><![CDATA[<p><a href="https://httpwg.org/specs/">http文档</a></p>
<a id="more"></a>
<h2 id="HTTP报文格式"><a href="#HTTP报文格式" class="headerlink" title="HTTP报文格式"></a>HTTP报文格式</h2><p>由三个部分组成，分别是： </p>
<ul>
<li>状态行</li>
<li>消息报头</li>
<li>正文</li>
</ul>
<p>如下所示，HTTP响应的格式与请求的格式十分类似： </p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">请求报文：</span><br><span class="line">    &lt;method&gt; &lt;request-URL&gt; &lt;version&gt;</span><br><span class="line">    &lt;headers&gt;</span><br><span class="line">    &lt;blank line&gt; </span><br><span class="line">    &lt;entity-body&gt;</span><br><span class="line"></span><br><span class="line">响应报文：</span><br><span class="line">    HTTP-Version Status-Code Reason-Phrase CRLF</span><br><span class="line">    &lt;headers&gt;</span><br><span class="line">    &lt;blank line&gt; </span><br><span class="line">    &lt;entity-body&gt;</span><br></pre></td></tr></table></figure>
<p>头部字段分为请求头部字段，响应头部字段和通用头部字段三种类型，</p>
<pre><code>请求报文头部字段有Accept、From 等等，

响应报文有 Content-Length 等，

通用有Cache-Control，Content-Type,Date等</code></pre>
<h2 id="get和post区别？"><a href="#get和post区别？" class="headerlink" title="get和post区别？"></a>get和post区别？</h2><p>两者没有本质区别，相比之下，get请求报文在startLine的url里面会直接带上query参数，post请求报文则不会带上，query参数会放在body里面。不过这些也都是通用的做法，在get请求报文的body里面带上query参数可能不会被大多数的服务器解析.</p>
<p>get格式:</p>
<pre><code><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">GET &#x2F;sn&#x2F;index.php?sn&#x3D;123&amp;n&#x3D;asa HTTP&#x2F;1.1</span><br><span class="line">Accept: *&#x2F;*</span><br><span class="line">Accept-Language: zh-cn</span><br><span class="line">host: localhost</span><br><span class="line">Content-Type: application&#x2F;x-www-form-urlencoded</span><br><span class="line">Content-Length: 12</span><br><span class="line">Connection:close</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure></code></pre>
<p>post格式：</p>
<pre><code><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">POST &#x2F;sn&#x2F;index.php HTTP&#x2F;1.1</span><br><span class="line">Accept: *&#x2F;*</span><br><span class="line">Accept-Language: zh-cn</span><br><span class="line">host: localhost</span><br><span class="line">Content-Type: application&#x2F;x-www-form-urlencoded</span><br><span class="line">Content-Length: 12</span><br><span class="line">Connection:close</span><br><span class="line"></span><br><span class="line">sn&#x3D;123&amp;n&#x3D;asa</span><br><span class="line"></span><br></pre></td></tr></table></figure></code></pre>
<h2 id="响应码分类"><a href="#响应码分类" class="headerlink" title="响应码分类"></a>响应码分类</h2><p>响应码由三位十进制数字组成，它们出现在由HTTP服务器发送的响应的第一行。 响应码分五种类型，由它们的第一位数字表示： </p>
<ul>
<li>1xx：信息，请求收到，继续处理</li>
<li>2xx：成功，行为被成功地接受、理解和采纳</li>
<li>3xx：重定向，为了完成请求，必须进一步执行的动作</li>
<li>4xx：客户端错误，请求包含语法错误或者请求无法实现</li>
<li>5xx：服务器错误，服务器不能实现一种明显无效的请求</li>
</ul>
<p>常见的响应码如下： </p>
<ul>
<li>200：请求成功，请求内容与该响应一起返回</li>
<li>202：请求已被接受，但还没处理。</li>
<li>301：请求的资源已被永久移动到新的位置。</li>
<li>302：请求的资源被临时移动到新的位置。</li>
<li>400：请求参数有误，当前请求无法被服务器理解。</li>
<li>401：请求需要验证用户</li>
<li>403：不允许访问该地址</li>
<li>404：Not Found</li>
<li>408：请求超时</li>
<li>500：服务器内部错误</li>
<li>502：Bad Gateway网关出错</li>
</ul>
<h2 id="HTTP和HTTPS"><a href="#HTTP和HTTPS" class="headerlink" title="HTTP和HTTPS"></a>HTTP和HTTPS</h2><ul>
<li>HTTP 标准端口是 80 ，而 HTTPS 的标准端口是 443</li>
</ul>
<p>HTTPS 协议提供了三个强大的功能：</p>
<ul>
<li>内容加密。浏览器到百度服务器的内容都是以加密形式传输，中间者无法直接查看原始内容。</li>
<li>身份认证。保证用户访问的是百度服务，即使被 DNS 劫持到了第三方站点，也会提醒用户没有访问百度服务，有可能被劫持</li>
<li>数据完整性。防止内容被第三方冒充或者篡改。</li>
</ul>
<h2 id="HTTP和HTTP1-1"><a href="#HTTP和HTTP1-1" class="headerlink" title="HTTP和HTTP1.1"></a>HTTP和HTTP1.1</h2><p>Http1.1比Http1.0多了以下优点： </p>
<ul>
<li>支持持久连接，在一个TCP连接上可以传送多个HTTP请求和响应，减少了建立和关闭连接的消耗和延迟</li>
<li>多个请求和响应可以重叠，多个请求和响应可以同时进行.</li>
<li>更加多的请求头和响应头(比如身份认证、状态管理和Cache缓存等机制相关的请求头和响应头).</li>
</ul>
<h2 id="Http2-0"><a href="#Http2-0" class="headerlink" title="Http2.0"></a>Http2.0</h2><p>Http1.1主要针对的是tcp连接中握手和挥手导致的时延。而Http2.0主要针对的是tcp连接中慢启动导致的时延，同时也改进了串行执行的问题。</p>
<ul>
<li><p>Http2的主要特点：</p>
<ul>
<li><p>新的二进制格式（Binary Format），HTTP1.x的解析是基于文本。基于文本协议的格式解析存在天然缺陷，文本的表现形式有多样性，要做到健壮性考虑的场景必然很多，二进制则不同，只认0和1的组合。基于这种考虑HTTP2.0的协议解析决定采用二进制格式，实现方便且健壮。</p>
</li>
<li><p>多路复用（MultiPlexing），即连接共享，即每一个request都是是用作连接共享机制的。一个request对应一个id，这样一个连接上可以有多个request，每个连接的request可以随机的混杂在一起，接收方可以根据request的 id将request再归属到各自不同的服务端请求里面。</p>
</li>
<li><p>header压缩，如上文中所言，对前面提到过HTTP1.x的header带有大量信息，而且每次都要重复发送，HTTP2.0使用encoder来减少需要传输的header大小，通讯双方各自cache一份header fields表，既避免了重复header的传输，又减小了需要传输的大小。</p>
</li>
<li><p>服务端推送（server push），同SPDY一样，HTTP2.0也具有server push功能（假如你请求index.html，会把它需要的main.js也推送过来，这样就不用再去请求main.js）。</p>
</li>
</ul>
</li>
<li><p>HTTP2.0的多路复用和HTTP1.X中的长连接复用有什么区别？</p>
<p>  HTTP/1.0 一次请求-响应，建立一个连接，用完关闭；每一个请求都要建立一个连接；</p>
<p>  HTTP/1.1 Pipeling解决方式为，若干个请求排队串行化单线程处理，后面的请求等待前面请求的返回才能获得执行机会，一旦有某请求超时等，后续请求只能被阻塞，毫无办法，也就是人们常说的线头阻塞；</p>
<blockquote>
<p>在网页请求中这样似乎很常见，但是在移动端的编程中并没有用到，如果这样阻塞对移动端的影响还是挺大的，比如请求一个图片，后面再一个普通json请求，如果json请求需要等待图片io结束才能进行，那app早就被人卸载了。。。okhttp中采用的是连接建立之后会缓存一段时间这种方式来避免重复的握手和挥手，请求发送前会检查是不是有可以重用的连接。</p>
</blockquote>
<p>  HTTP/2多个请求可同时在一个连接上并行执行。某个请求任务耗时严重，不会影响到其它连接的正常执行；</p>
<p>  具体如图：<br>  <img src="http2.jpg" alt="http2"></p>
</li>
</ul>
<blockquote>
<p>更多：<br><a href="https://segmentfault.com/a/1190000011172823">浅析HTTP/2的多路复用</a><br><a href="http://www.blogjava.net/yongboy/archive/2015/03/19/423611.aspx">HTTP/2笔记之流和多路复用</a></p>
</blockquote>
<h2 id="三次握手和四次挥手"><a href="#三次握手和四次挥手" class="headerlink" title="三次握手和四次挥手"></a>三次握手和四次挥手</h2><h3 id="三次握手"><a href="#三次握手" class="headerlink" title="三次握手"></a>三次握手</h3><p>三次握手过程示意图如下：</p>
<p><img src="http-%E7%9B%B8%E5%85%B3%E7%9F%A5%E8%AF%86/%E4%B8%89%E6%AC%A1%E6%8F%A1%E6%89%8B.png" alt="udp"> </p>
<ol>
<li><p>三次握手过程</p>
<p>第一步:</p>
<p>客户机的TCP首先向服务器得TCP发送一个连接请求报文段。这个特殊的报文段中不含应用层数据，其首部中的SYN标志位被设置为1。另外，客户机会随机选择一个起始序号seq=x。（连接请求报文不携带数据，但要消耗一个序号）</p>
<p>第二步:</p>
<p>服务器得TCP收到请求连接报文段后，如果同意建立连接，就向客户机发回确认，并为该TCP连接分配TCP缓存和变量。在确认报文段中，SYN和ACK位都被置为1，确认号字段的值为x+1，并且服务器随机产生起始序号seq=y（确认报文不携带数据，但也要消耗掉一个序号）。 </p>
<p>第三步：</p>
<p>当客户机收到确认报文段后，还要向服务器给出确认，并且也要给该连接分配缓存和变量。这个报文段的ACK标志位被置为1，序号字段为x+1，确认号字段ack=y+1。该报文段可以携带数据，不过不携带数据则不消耗序号。 </p>
<p>成功进行以上三步之后，TCP连接就建立了，接下来就可以传送应用层数据了，TCP提供的是全双工通信，因此通信双方的应用进程在任何时候都能发送数据。 </p>
<p>上述TCP连接建立过程可总结如下： </p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">1. SYN&#x3D;1,seq&#x3D;x</span><br><span class="line"></span><br><span class="line">2. SYN&#x3D;1,ACK&#x3D;1,seq&#x3D;y,ack&#x3D;x+1</span><br><span class="line"></span><br><span class="line">3. ACK&#x3D;1,seq&#x3D;x+1,ack&#x3D;y+1</span><br></pre></td></tr></table></figure>


</li>
</ol>
<ol>
<li><p>为什么建立连接需要3次握手</p>
<p>如果采用两次的话，会出现下面这种情况： </p>
<ol>
<li><p>TCP的三次握手最主要是防止已过期的连接再次传到被连接的主机。 </p>
<p>比如是客户端要连到服务器，结果发送的连接信息由于某种原因没有到达服务器；于是，客户端又发了一    次，结果这次服务器收到了，于是就发信息回来，两机就连接。传完东西后，断开。结果这时候，原先没有到达的连接信息突然又传到了服务器，于是服务器发确认信息给客户端，然后服务器就以为和客户端连上了，这个时候服务器就在等待客户端传东西过去。 </p>
</li>
<li><p>三次握手改成仅需要两次握手，死锁是可能发生 </p>
<p>考虑客户机和服务器之间的通信，假定客户机向服务器发送连接请求，服务器收到这个分组后，回复确认分组。按照两次握手的协定，服务器认为连接已经成功建立了，可以开始发送数据分组。 </p>
<p>可是，可能出现一种情况就是，服务器的确认分组在传输过程中被丢失，而此时客户端没有收到确认分组；客户端此时不知道服务器是否已经准备好，不知道服务器建议什么样的序列号，客户端甚至怀疑服务器是否收到了自己的连接请求分组。 </p>
<p>在这种情况下，客户端认为连接还未建立成功，将忽略服务器发来的任何数据分组，只等待连接确认应答分组。而服务器发出的分组超时后，重复发同样的分组，这样就形成了死锁。 </p>
</li>
</ol>
</li>
<li><p>简单描述：</p>
<p>客户端 ： 我要建立连接</p>
<p>服务端 ： 我OK了，缓存已经分配，连接号给你。</p>
<p>客户端 ： 我知道你ok了，我也开始把</p>
</li>
</ol>
<h3 id="四次挥手"><a href="#四次挥手" class="headerlink" title="四次挥手"></a>四次挥手</h3><p>四次挥手如下图所示： </p>
<p><img src="http-%E7%9B%B8%E5%85%B3%E7%9F%A5%E8%AF%86/%E5%9B%9B%E6%AC%A1%E6%8C%A5%E6%89%8B.png" alt="udp"> </p>
<p>看起来四次挥手好像很复杂，其实很简单。无非就是客户端和服务器端各自提出关闭，值得注意的是TIME-WAIT，后面小结详细说。 </p>
<ol>
<li><p>四次挥手过程</p>
<p>第一步：</p>
<p>客户机打算关闭连接，就向其TCP发送一个连接释放报文段，并停止再发送数据，主动关闭TCP连接，该报文的的FIN标志位被置1，seq=u，它等于前面已传送过的数据的最后一个字节序号+1（FIN报文段即使不携带数据，也要消耗一个序号），TCP是全双工的，即可以想象成一条TCP连接上有两条数据通路。当发送FIN报文时，发送FIN的一端就不能再发送数据，也就是关闭了其中一条数据通路，但对方还可以发送数据。</p>
<p>第二步：</p>
<p>服务器收到连接释放报文段后即发出确认，确认号是ack=u+1，而这个报文段自己的序号是v，等于它前面已经传送过的数据的最后一个自己的序号+1。此时，从客户机到服务器这个方向的连接就释放了，TCP连接处于半关闭状态。但服务器若发送数据，客户机仍要接收，即从服务器到客户机这个方向的连接并未关闭。 </p>
<p>第三步：</p>
<p>若服务器已经没有要向客户机发送的数据，就通知TCP释放连接，此时其发出FIN=1的连接释放报文段。</p>
<p>第四步：</p>
<p>客户机收到连接释放报文段后，必须发出确认。在确认报文段中，ACK字段被置为1，确认号ack=w+1，序号seq=u+1。此时TCP连接还没有释放掉，必须经过时间等待计时器设置的时间2MSL后，A才进入连接关闭状态。 </p>
<p>上述TCP连接释放过程可总结如下：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">1. FIN&#x3D;1,seq&#x3D;u</span><br><span class="line"></span><br><span class="line">2. ACK&#x3D;1,seq&#x3D;v,ack&#x3D;u+1</span><br><span class="line"></span><br><span class="line">3. FIN&#x3D;1,ACK&#x3D;1,seq&#x3D;w,ack&#x3D;u+1</span><br><span class="line"></span><br><span class="line">4. ACK&#x3D;1,seq&#x3D;u+1,ack&#x3D;w+1</span><br></pre></td></tr></table></figure></li>
<li><p>TIME-WAIT作用</p>
<p> 为什么需要TIME_WAIT？有如下几个原因： </p>
<ol>
<li><p>因为在第四步的时候，客户机发送的ACK可能丢失并导致服务端重新发送FIN消息，TIME_WAIT维护连接状态.</p>
<p> 如果执行主动关闭的一方客户机不进入到TIME_WAIT状态就关闭连接那会发生什么呢？当重传的FIN消息到达时，因为TCP已经不再有连接的信息了，所以就用RST(重新启动)消息应答，导致服务端进入错误的状态而不是有序终止状态，如果发送最后ACK消息的一方处于TIME_WAIT状态并仍然记录着连接的信息，它就可以正确的响应对等方服务端的FIN消息了. </p>
</li>
<li><p>TIME_WAIT为连接中”离群的段”提供从网络中消失的时间. </p>
<p> 考虑一下，如果延迟或者重传段在连接关闭后到达时会发生什么呢？通常情况下，因为TCP仅仅丢弃该数据并响应RST消息，所以这不会造成任何问题。当RST消息到达发出延时段的主机时，因为该主机也没有记录连接的任何信息，所以它也丢弃该段。然而，如果两个相同主机之间又建立了一个具有相同端口号的新连接，那么离群的段就可能被看成是新连接的，如果离群的段中数据的任何序列号恰恰在新连接的当前接收窗口中，数据就会被重新接收，其结果就是破坏新连接。</p>
</li>
</ol>
</li>
<li><p>简单描述：</p>
<p>客户端 ： 我传完了，可以关闭了</p>
<p>服务端 ： 我知道了，这边可能还有点东西没传完</p>
<p>服务端 ： 我也传完了</p>
<p>客户端 ： 我知道了，2MSL后我也关闭</p>
<p>服务端 ：收到确认后关闭连接</p>
</li>
</ol>
<h2 id="tcp报文和-udp报文"><a href="#tcp报文和-udp报文" class="headerlink" title="tcp报文和 udp报文"></a>tcp报文和 udp报文</h2><p>TCP报文段首部</p>
<p><img src="http-%E7%9B%B8%E5%85%B3%E7%9F%A5%E8%AF%86/tcp%E6%8A%A5%E6%96%87.jpg" alt="tcp"></p>
<p>UDP数据报格式</p>
<p><img src="/2018/10/15/http-%E7%9B%B8%E5%85%B3%E7%9F%A5%E8%AF%86/udp%E6%8A%A5%E6%96%87.png" alt="udp"></p>
<h2 id="TCP的拥塞控制"><a href="#TCP的拥塞控制" class="headerlink" title="TCP的拥塞控制"></a>TCP的拥塞控制</h2><p><img src="http-%E7%9B%B8%E5%85%B3%E7%9F%A5%E8%AF%86/%E6%8B%A5%E5%A1%9E%E6%8E%A7%E5%88%B6.png" alt="udp"></p>
<ol>
<li>拥塞的标志 ： <ol>
<li>重传计时器超时</li>
<li>接收到三个重复确认</li>
</ol>
</li>
<li>慢开始<ol>
<li>慢开始不是指cwnd的增长速度慢（指数增长），而是指TCP开始发送设置cwnd=1。</li>
<li>思路：不要一开始就发送大量的数据，先探测一下网络的拥塞程度，也就是说由小到大逐渐增加拥塞窗口的大小。</li>
</ol>
</li>
<li>拥塞避免（按线性规律增长）<ol>
<li>拥塞避免并非完全能够避免拥塞，是说在拥塞避免阶段将拥塞窗口控制为按线性规律增长，使网络比较不容易出现拥塞。</li>
<li>思路：让拥塞窗口cwnd缓慢地增大，即每经过一个往返时间RTT就把发送方的拥塞控制窗口加一。</li>
</ol>
</li>
<li>快速重传和快速恢复</li>
</ol>
<h2 id="代理："><a href="#代理：" class="headerlink" title="代理："></a>代理：</h2><p><a href="https://blog.csdn.net/watson2017/article/details/79897693">https://blog.csdn.net/watson2017/article/details/79897693</a></p>
<h2 id="Https"><a href="#Https" class="headerlink" title="Https"></a>Https</h2><p><a href="https://www.cnblogs.com/zhangshitong/p/6478721.html">一些推算过程</a></p>
<p>其实https的关键在于非对称加解密算法，有了这个算法作为基础，后面才能有这么多验证过程</p>
<h3 id="数字签名"><a href="#数字签名" class="headerlink" title="数字签名"></a>数字签名</h3><p>将报文按双方约定的摘要算法Hash后得到的一个固定位数的报文摘要，再使用CA机构的公钥加密得到数字签名。</p>
<p>在这里报文包含：</p>
<ol>
<li>你提交给CA的公钥</li>
<li>你提交给CA的标识信息（网址，邮件等）</li>
<li>有效期（证书的有效时间）</li>
<li>CA机构的标识信息</li>
</ol>
<p>在数学上保证：只要改动报文中任何一位，重新计算出来的报文摘要值就会与原先的值不相符。这就保证了报文的不可更改性。</p>
<h3 id="证书"><a href="#证书" class="headerlink" title="证书"></a>证书</h3><p>证书需要申请，并由专门的数字证书认证机构 CA 通过非常严格的审核之后颁发的电子证书，证书是对服务器端的一种认证。<br>证书的内容：</p>
<ol>
<li>你提交给CA的公钥</li>
<li>你提交给CA的标识信息（网址，邮件等）</li>
<li>有效期（证书的有效时间）</li>
<li>CA机构的标识信息</li>
<li>摘要算法（md5,sha1,sha256等等）</li>
<li>颁发者的数字签名，用来证明使用者的公钥和使用者的标识符信息之间的绑定的有效性。</li>
</ol>
<p>客户端收到证书以后，用CA的的公钥解密数字签名，得到报文摘要A，解密成功说明这个证书确实是由这个CA颁发的。<br>拿1234按照5去hash，得到报文摘要B，再，对比A和B是否相同，相同则说明报文信息没有被篡改。<br>CA的公钥是存在客户端本地的，CA机构和它们的公钥都是已知的保证权威的。</p>
<h3 id="PRF"><a href="#PRF" class="headerlink" title="PRF"></a>PRF</h3><p>PRF是一个“伪随机数函数”，这个函数很聪明，在规约中也有定义。它使用基于哈希的消息验证码（HMAC）的MD5和SHA-1两种哈希函数将密钥，ASCII字符以及我们给的种子结合起来。对每个哈希函数发送一半的输入。说它聪明的原因是即使面对MD5和SHA-1的弱点，它的防攻击能力还很强。这个过程可以自我反馈并不停地循环，而且我们要多少字节就能生成多少。</p>
<h3 id="https的过程"><a href="#https的过程" class="headerlink" title="https的过程"></a>https的过程</h3><p><img src="http-%E7%9B%B8%E5%85%B3%E7%9F%A5%E8%AF%86/https.png" alt="https"></p>
<ol>
<li>客户端向服务端发起请求，并且带上自己支持的加密算法（ Cipher Suites），ssl版本，摘要算法等等，产生一个随机数A（Client random）。</li>
<li>服务端把自己的证书返回给客户端，并且带上选择的加密算法，摘要算法等等，产生一个随机数B（Server random）。</li>
<li>客户端验证这个证书，通过后再生成一个随机数C（Pre-master secret），客户端会使用这三个随机数ABC使用PRF生成一个master_secret，然后再使用 master_secret和随机数AB再PRF一次得到加密套件key block，里面包含后面通信会用到的各种密钥。然后使用证书中的公钥加密C，发送给服务器端，并且发送change_cipher_spec协议通知服务器，客户端已经准备好。</li>
<li>服务器端用私钥解密C，用同样的方式生成master_secret和加密套件key block，然后发送change_cipher_spec协议通知客户端，服务器已经准备好</li>
</ol>
<p>感谢 </p>
<p><a href="http://huachao1001.github.io/">Android校招笔记</a></p>
<p><a href="https://cloud.tencent.com/developer/article/1004327">浅析TCP协议中的疑难杂症</a></p>
]]></content>
      <categories>
        <category>通用</category>
      </categories>
      <tags>
        <tag>面试</tag>
      </tags>
  </entry>
  <entry>
    <title>java-锁</title>
    <url>/2018/10/30/java-%E9%94%81/</url>
    <content><![CDATA[<p>主要是锁，线程相关的一些知识点</p>
<a id="more"></a>

<h2 id="线程间通信"><a href="#线程间通信" class="headerlink" title="线程间通信"></a>线程间通信</h2><ol>
<li>volatile和synchronized</li>
<li>wait/notify</li>
<li>管道输入输出流</li>
<li>Thread.join()</li>
</ol>
<p>线程池本质是 对任务的一个生产者消费者模型，通过worker来对job进行消费，没有就阻塞，这种就是核心线程。job是对runnable或者callable接口的实现，加入到阻塞队列可以更简单的进行同步的操作。</p>
<h2 id="原子操作的实现原理"><a href="#原子操作的实现原理" class="headerlink" title="原子操作的实现原理"></a>原子操作的实现原理</h2><p>处理器实现原子操作有两种方式：</p>
<ol>
<li>通过总线锁来保证原子性</li>
<li>通过缓存锁来保证原子性</li>
</ol>
<p>java种则通过CAS来实现原子操作，CAS的底层就是处理器的指令</p>
<h2 id="synchronized关键字"><a href="#synchronized关键字" class="headerlink" title="synchronized关键字"></a>synchronized关键字</h2><ol>
<li><p>synchronized 锁的对象</p>
<p>synchronized 可以用来修饰类的实例方法、静态方法、代码块</p>
<ol>
<li>修饰实例方法的时候，锁是当前实例对象</li>
<li>修饰静态同步方法的时候，锁是当前class类对象</li>
<li>修饰代码块的时候，锁是synchronized括号里配置的对象</li>
</ol>
</li>
<li><p>synchronized 的特点</p>
<ol>
<li>synchronized 具备可重入性，对同一个线程在获得锁之后在调用其他需要同样锁的代码时可以直接调用，其可重入性是通过记录锁的持有线程和持有数量来实现的，调用 synchronized 代码时检查对象是否已经被锁，是则检查是否被当前线程锁定，是则计数加一，不是则加入等待队列，释放时计数减一直到为零释放锁。</li>
<li>synchronized 是重量级锁，竞争失败的线程会阻塞。</li>
</ol>
</li>
<li><p>synchronized 的实现原理</p>
<p>语义底层是通过一个 monitor 监视器对象来完成，监视器锁（monitor）的本质依赖于底层操作系统的互斥锁（Mutex Lock）实现，而操作系统实现线程之间的切换需要从用户态转换到核心态，这个成本非常高，状态之间的转换需要相对比较长的时间，所以这就是为什么 synchronized 效率低且重量级的原因（Java 1.6 进行了优化，但是相比其他锁机制还是略显偏重）。</p>
<p>其实 wait、notify 等方法也依赖于 monitor 对象，所以这就是为什么只有在同步的块或者方法中才能调用 wait、notify 等方法，否则会抛出 IllegalMonitorStateException 异常的原因。</p>
</li>
</ol>
<p><a href="http://url.cn/5r6q9RA">每日一题</a></p>
<h2 id="锁的级别"><a href="#锁的级别" class="headerlink" title="锁的级别"></a>锁的级别</h2><p>java中每个对象都可作为锁，锁有四种级别，按照量级从轻到重分为：无锁、偏向锁、轻量级锁、重量级锁。并且锁只能升级不能降级，但是偏向锁状态可以被重置为无锁状态。</p>
<h3 id="自旋"><a href="#自旋" class="headerlink" title="自旋"></a>自旋</h3><p>自旋是指当一个线程尝试获取某个锁时，如果该锁已被其他线程占用，就一直循环检测锁是否被释放，而不是进入线程挂起或睡眠状态。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.concurrent.atomic.AtomicReference;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SpinLock</span> </span>&#123;</span><br><span class="line">   <span class="keyword">private</span> AtomicReference&lt;Thread&gt; owner = <span class="keyword">new</span> AtomicReference&lt;Thread&gt;();</span><br><span class="line"></span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">lock</span><span class="params">()</span> </span>&#123;</span><br><span class="line">       Thread currentThread = Thread.currentThread();</span><br><span class="line"></span><br><span class="line">              <span class="comment">// 如果锁未被占用，则设置当前线程为锁的拥有者</span></span><br><span class="line">       <span class="keyword">while</span> (!owner.compareAndSet(<span class="keyword">null</span>, currentThread)) &#123;</span><br><span class="line">       &#125;</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">unlock</span><span class="params">()</span> </span>&#123;</span><br><span class="line">       Thread currentThread = Thread.currentThread();</span><br><span class="line"></span><br><span class="line">              <span class="comment">// 只有锁的拥有者才能释放锁</span></span><br><span class="line">       owner.compareAndSet(currentThread, <span class="keyword">null</span>);</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>


<p>线程B尝试进入临界区的时候，在lock()函数里面会一直CAS失败而不能进入到临界区，此时就是自旋状态。可以看到这个语义是靠CAS来实现的。</p>
<h3 id="对象头"><a href="#对象头" class="headerlink" title="对象头"></a>对象头</h3><p>锁的实现机制与java对象头息息相关，锁的所有信息，都记录在java的对象头中。用2字宽(WORD)（32位JVM中1字宽==4Byte=32bit）存储对象头，如果是数组类型使用3字存储（还需存储数组长度）。对象头中包括mark word、类元数据的指针和数组的长度。</p>
<table>
<thead>
<tr>
<th>长度</th>
<th>内容</th>
<th>说明</th>
</tr>
</thead>
<tbody><tr>
<td>32/64bit</td>
<td>Mark Word</td>
<td>存储对象的hashCode或锁信息等。</td>
</tr>
<tr>
<td>32/64bit</td>
<td>Class Metadata Address</td>
<td>存储到对象类型数据的指针</td>
</tr>
<tr>
<td>32/64bit</td>
<td>Array length</td>
<td>数组的长度（如果当前对象是数组）</td>
</tr>
</tbody></table>
<p>mark word默认存储对象的hashcode,GC分代年龄，锁的状态，偏向锁的线程ID等。32位位：</p>
<p><img src="/2018/10/30/java-%E9%94%81/markword1.jpg" alt="mark word"></p>
<p> 在64位虚拟机下，Mark Word是64bit大小的，其存储结构如下：</p>
<p><img src="/2018/10/30/java-%E9%94%81/markword2.jpg" alt="mark word"></p>
<h3 id="偏向锁"><a href="#偏向锁" class="headerlink" title="偏向锁"></a>偏向锁</h3><p>引入偏向锁是为了在无多线程竞争的情况下尽量减少不必要的轻量级锁执行路径。</p>
<p>当只有一个线程去竞争锁的时候，我们不需要阻塞，也不需要自旋，因为只有一个线程在竞争，我们只要去判断该偏向锁中的ThreadID是否为当前线程即可。</p>
<p>如果线程2要竞争锁对象，（偏向锁不会主动释放因此还是存储的线程1的threadID），那么需要查看Java对象头中记录的线程是否存活，</p>
<p>如果没有存活，那么锁对象被重置为无锁状态，再使用cas替换偏向锁线程ID为线程2,锁不升级；如果存活，那么立刻查找该线程（线程1）的栈帧信息，</p>
<p>如果还是需要继续持有这个锁对象，那么暂停当前线程1，撤销偏向锁，升级为轻量级锁，如果线程1 不再使用该锁对象，那么将锁对象状态设为无锁状态，重新偏向新的线程。</p>
<h3 id="轻量锁"><a href="#轻量锁" class="headerlink" title="轻量锁"></a>轻量锁</h3><p>轻量级锁考虑的是竞争锁对象的线程不多，而且线程持有锁的时间也不长的情景。因为阻塞线程需要CPU从用户态转到内核态，代价较大，如果刚刚阻塞不久这个锁就被释放了，那这个代价就有点得不偿失了，因此这个时候就干脆不阻塞这个线程，让它自旋这等待锁释放。</p>
<p>线程1获取轻量级锁时会<strong>先把锁对象的对象头MarkWord复制一份到线程1的栈帧中</strong>创建的用于存储锁记录的空间（称为DisplacedMarkWord），<strong>然后使用CAS把对象头中的内容替换为线程1的锁记录地址</strong>；</p>
<p>如果在线程1复制对象头的同时（在线程1CAS之前），线程2也准备获取锁，复制了对象头到线程2的锁记录空间中，但是在线程2CAS的时候，发现线程1已经把对象头换了，线程2的CAS失败，那么线程2就尝试使用自旋锁来等待线程1释放锁。</p>
<p>但是如果自旋的时间太长也不行，因为自旋是要消耗CPU的，因此自旋的次数是有限制的，比如10次或者100次，如果自旋次数到了线程1还没有释放锁，线程2还在自旋等待，或者又有一个线程3过来竞争这个锁对象，那么这个时候轻量级锁就会膨胀为重量级锁。重量级锁把除了拥有锁的线程都阻塞，防止CPU空转。</p>
<h3 id="优缺点对比"><a href="#优缺点对比" class="headerlink" title="优缺点对比"></a>优缺点对比</h3><table>
<thead>
<tr>
<th>锁</th>
<th>优点</th>
<th>缺点</th>
<th>适用场景</th>
</tr>
</thead>
<tbody><tr>
<td>偏向锁</td>
<td>加锁和解锁不需要额外的消耗，和执行非同步方法比仅存在纳秒级的差距。</td>
<td>如果线程间存在锁竞争，会带来额外的锁撤销的消耗。</td>
<td>适用于只有一个线程访问同步块场景。</td>
</tr>
<tr>
<td>轻量级锁</td>
<td>竞争的线程不会阻塞，提高了程序的响应速度。</td>
<td>如果始终得不到锁竞争的线程使用自旋会消耗CPU。</td>
<td>追求响应时间。   同步块执行速度非常快。</td>
</tr>
<tr>
<td>重量级锁</td>
<td>线程竞争不使用自旋，不会消耗CPU。</td>
<td>线程阻塞，响应时间缓慢。</td>
<td>追求吞吐量。   同步块执行速度较长。</td>
</tr>
</tbody></table>
<p><a href="https://blog.csdn.net/tongdanping/article/details/79647337?utm_source=blogxgwz0">Java并发——Synchronized关键字和锁升级，详细分析偏向锁和轻量级锁的升级</a></p>
<h2 id="Lock锁"><a href="#Lock锁" class="headerlink" title="Lock锁"></a>Lock锁</h2><h3 id="lock锁和synchronized的对比"><a href="#lock锁和synchronized的对比" class="headerlink" title="lock锁和synchronized的对比"></a>lock锁和synchronized的对比</h3><ol>
<li>非阻塞的获取锁（基于CAS的自旋？），synchronized竞争失败的线程会阻塞</li>
<li>能够响应中断,当获取到锁的线程被中断的时候，中断异常将会被抛出，同时锁会被释放，synchronized不会响应中断</li>
<li>有超时时间，synchronized会一直阻塞</li>
</ol>
<h3 id="LockSupport"><a href="#LockSupport" class="headerlink" title="LockSupport"></a>LockSupport</h3><p>在Java多线程中，当需要阻塞或者唤醒一个线程时，都会使用LockSupport工具类来完成相应的工作。LockSupport定义了一组公共静态方法，这些方法提供了最基本的线程阻塞和唤醒功能，而LockSupport也因此成为了构建同步组件的基础工具。</p>
<p>LockSupport定义了一组以park开头的方法用来阻塞当前线程，以及unpark(Thread)方法来唤醒一个被阻塞的线程，这些方法描述如下：</p>
<table>
<thead>
<tr>
<th>方法名称</th>
<th align="center">描  述</th>
</tr>
</thead>
<tbody><tr>
<td>void park()</td>
<td align="center">阻塞当前线程，如果掉用unpark(Thread)方法或被中断，才能从park()返回</td>
</tr>
<tr>
<td>void parkNanos(long nanos)</td>
<td align="center">阻塞当前线程，超时返回，阻塞时间最长不超过nanos纳秒</td>
</tr>
<tr>
<td>void parkUntil(long deadline)</td>
<td align="center">阻塞当前线程，直到deadline时间点</td>
</tr>
<tr>
<td>void unpark(Thread)</td>
<td align="center">唤醒处于阻塞状态的线程</td>
</tr>
</tbody></table>
<p>需要注意的是，和wait,notify不一样，park和unpark之间没有顺序要求，可以理解为调用unpark则获得了一个许可，没有这个许可则阻塞。(If the thread was blocked on park then it will unblock. Otherwise, its next call to park is guaranteed not to block.)</p>
<h3 id="lock锁实现原理"><a href="#lock锁实现原理" class="headerlink" title="lock锁实现原理"></a>lock锁实现原理</h3><p>基于AbstractQueuedSynchronizer(AQS,队列同步器)实现：</p>
<p>先说大致流程：队列同步器依赖内部的同步队列（一个fifo双向队列）来完成同步状态的管理，当前线程获取同步状态失败时，同步器会将当前线程以及等待状态等信息构造成为一个节点并将其加入同步队列，同时阻塞线程，当同步状态释放的时候，会把节点中的线程唤醒，使其再次尝试获取同步状态。</p>
<p>节点的定义可以看作是有一些额外属性的双向链表，同步器内部则保存了链表的头尾节点的引用。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 一个独占锁的示例代码,,不支持重入</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyLock</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">Sync</span> <span class="keyword">extends</span> <span class="title">AbstractQueuedSynchronizer</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">protected</span> <span class="keyword">boolean</span> <span class="title">tryAcquire</span><span class="params">(<span class="keyword">int</span> acquires)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">if</span> (compareAndSetState(<span class="number">0</span>, <span class="number">1</span>)) &#123;</span><br><span class="line">                setExclusiveOwnerThread(Thread.currentThread());</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">protected</span> <span class="keyword">boolean</span> <span class="title">tryRelease</span><span class="params">(<span class="keyword">int</span> i)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">if</span> (getState() == <span class="number">0</span>) &#123;</span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> IllegalMonitorStateException();</span><br><span class="line">            &#125;</span><br><span class="line">            setExclusiveOwnerThread(<span class="keyword">null</span>);</span><br><span class="line">            setState(<span class="number">0</span>);</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * 一般表示是否被当前线程所独占</span></span><br><span class="line"><span class="comment">         *</span></span><br><span class="line"><span class="comment">         * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">protected</span> <span class="keyword">boolean</span> <span class="title">isHeldExclusively</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> getState() == <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function">ConditionObject <span class="title">newCondition</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> ConditionObject();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> Sync sync = <span class="keyword">new</span> Sync();</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">lock</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        sync.acquire(<span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">tryLock</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> sync.tryAcquire(<span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">unlock</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        sync.release(<span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Condition <span class="title">newCondition</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> sync.newCondition();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isLocked</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> sync.isHeldExclusively();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">hasQueuedThreads</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> sync.hasQueuedThreads();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">lockInterruptibly</span><span class="params">()</span> <span class="keyword">throws</span> InterruptedException </span>&#123;</span><br><span class="line">        sync.acquireInterruptibly(<span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">tryLock</span><span class="params">(<span class="keyword">long</span> timeout, TimeUnit unit)</span> <span class="keyword">throws</span> InterruptedException </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> sync.tryAcquireNanos(<span class="number">1</span>, unit.toNanos(timeout));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>


<p>扩展：</p>
<p><a href="https://javadoop.com/2017/06/16/AbstractQueuedSynchronizer/#toc1">一行一行源码分析清楚AbstractQueuedSynchronizer</a></p>
<p><a href="https://javadoop.com/2017/07/20/AbstractQueuedSynchronizer-2/#%E5%85%AC%E5%B9%B3%E9%94%81%E5%92%8C%E9%9D%9E%E5%85%AC%E5%B9%B3%E9%94%81">一行一行源码分析清楚 AbstractQueuedSynchronizer(二)</a></p>
<h2 id="ArrayBlockingQueue"><a href="#ArrayBlockingQueue" class="headerlink" title="ArrayBlockingQueue"></a>ArrayBlockingQueue</h2><p>ArrayBlockingQueue 底层是数组，有界队列，如果我们要使用生产者-消费者模式，这是非常好的选择。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 用于存放元素的数组</span></span><br><span class="line"><span class="keyword">final</span> Object[] items;</span><br><span class="line"><span class="comment">// 下一次读取操作的位置</span></span><br><span class="line"><span class="keyword">int</span> takeIndex;</span><br><span class="line"><span class="comment">// 下一次写入操作的位置</span></span><br><span class="line"><span class="keyword">int</span> putIndex;</span><br><span class="line"><span class="comment">// 队列中的元素数量</span></span><br><span class="line"><span class="keyword">int</span> count;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 以下几个就是控制并发用的同步器</span></span><br><span class="line"><span class="keyword">final</span> ReentrantLock lock;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">final</span> Condition notEmpty;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">final</span> Condition notFull;</span><br></pre></td></tr></table></figure>


<p><img src="/2018/10/30/java-%E9%94%81/array-blocking-queue.png" alt="array-blocking-queue"></p>
<p>ArrayBlockingQueue用到了一个锁（ReentranLock基于AQS实现，因此就带有一个同步队列）和两个condition，也就是一个同步队列和两个条件队列。</p>
<ol>
<li>对于ArrayBlockingQueue里面的数组数据写，写数据的时候从0向后写，遇到数组结尾则重置位置，继续从0开始，因为如果有数据被读了， 那0开始的一段一定是空的，这样就不会覆盖数据。</li>
<li>对于ArrayBlockingQueue里面的数组数据读，读数据的时候从0向后读，遇到数组结尾则重置位置，继续从0开始，算是跟着写的顺序，这样就肯定能读到数据，除非数组中没有数据了。</li>
<li>对于同步队列，每个线程尝试进入临界区的时候会调用lock.lock创建节点并且加入到同步队列末尾，如果锁是公平锁，那么还需要排队，如果是非公平锁，那么可以直接竞争,竞争成功则把带有自己线程ID的节点设置为同步队列的头节点。临界区执行完毕后从同步队列中删除节点。</li>
<li>如果遇到conditionA .await()调用， 因为这段代码在临界区，因此这个线程一定就是头节点的线程，此时会根据线程ID重新创建一个节点加入到conditionA的条件队列的末尾。</li>
<li>如果遇到conditionA.signal()调用，则会在conditionA的条件队列中找到头节点（等待最久的线程），把它从条件队列中移除，并且加入到锁的同步队列中，如果同步队列的锁是公平锁，那么还需要排队，如果是非公平锁，那么可以直接竞争锁，竞争成功则设置自己为头结点，进入临界区。</li>
</ol>
<h2 id="LinkedBlockingQueue"><a href="#LinkedBlockingQueue" class="headerlink" title="LinkedBlockingQueue"></a>LinkedBlockingQueue</h2><p>LinkedBlockingQueue 是链表实现的阻塞队列，这里默认和最大长度是Integer.MAX_VALUE。可以当做无界和有界队列来使用，所以大家不要以为它就是无界队列。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// take, poll, peek 等读操作的方法需要获取到这个锁</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">final</span> ReentrantLock takeLock = <span class="keyword">new</span> ReentrantLock();</span><br><span class="line"></span><br><span class="line"><span class="comment">// 如果读操作的时候队列是空的，那么等待 notEmpty 条件</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">final</span> Condition notEmpty = takeLock.newCondition();</span><br><span class="line"></span><br><span class="line"><span class="comment">// put, offer 等写操作的方法需要获取到这个锁</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">final</span> ReentrantLock putLock = <span class="keyword">new</span> ReentrantLock();</span><br><span class="line"></span><br><span class="line"><span class="comment">// 如果写操作的时候队列是满的，那么等待 notFull 条件</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">final</span> Condition notFull = putLock.newCondition();</span><br></pre></td></tr></table></figure>
<p><img src="/2018/10/30/java-%E9%94%81/linked-blocking-queue.png" alt="array-blocking-queue"></p>
<p>LinkedBlockingQueue用到了两个锁（ReentranLock基于AQS实现，因此就带有一个同步队列）和两个condition，也就是两个同步队列和两个条件队列。</p>
<p>同步队列和条件队列之间节点的变化和上面还是类似的，不过这边因为有两个同步队列，取数据的时候只锁了读锁，此时还是可以进行写，数据全部取出的时候才会阻塞读线程。写数据的时候也只是锁了写锁，此时还是可以读，数据达到最大值的时候才会阻塞写线程。</p>
<h2 id="SynchronousQueue"><a href="#SynchronousQueue" class="headerlink" title="SynchronousQueue"></a>SynchronousQueue</h2><p>SynchronousQueue 本身不带有空间来存储任何元素，使用上可以选择公平模式和非公平模式。它的队列不提供任何空间（一个都没有）来存储元素。数据必须从某个写线程交给某个读线程，而不是写到某个队列中等待被消费。</p>
<p>在它的实现代码中没有用到AQS锁，是基于CAS自旋和LockSupport阻塞而实现的。</p>
<p>主要的逻辑：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 写入值</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">put</span><span class="params">(E o)</span> <span class="keyword">throws</span> InterruptedException </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (o == <span class="keyword">null</span>) <span class="keyword">throw</span> <span class="keyword">new</span> NullPointerException();</span><br><span class="line">    <span class="keyword">if</span> (transferer.transfer(o, <span class="keyword">false</span>, <span class="number">0</span>) == <span class="keyword">null</span>) &#123; <span class="comment">// 1</span></span><br><span class="line">        Thread.interrupted();</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> InterruptedException();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 读取值并移除</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> E <span class="title">take</span><span class="params">()</span> <span class="keyword">throws</span> InterruptedException </span>&#123;</span><br><span class="line">    Object e = transferer.transfer(<span class="keyword">null</span>, <span class="keyword">false</span>, <span class="number">0</span>); <span class="comment">// 2</span></span><br><span class="line">    <span class="keyword">if</span> (e != <span class="keyword">null</span>)</span><br><span class="line">        <span class="keyword">return</span> (E)e;</span><br><span class="line">    Thread.interrupted();</span><br><span class="line">    <span class="keyword">throw</span> <span class="keyword">new</span> InterruptedException();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>其中，transferer接口对应于SynchronousQueue的两个内部类，构造 SynchronousQueue 的时候，我们可以指定公平策略。公平模式对应 TransferQueue。而非公平模式则对应 TransferStack。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">static</span> <span class="keyword">final</span> <span class="class"><span class="keyword">class</span> <span class="title">TransferQueue</span>&lt;<span class="title">E</span>&gt; <span class="keyword">extends</span> <span class="title">Transferer</span>&lt;<span class="title">E</span>&gt; </span>&#123; ... &#125;</span><br><span class="line"><span class="keyword">static</span> <span class="keyword">final</span> <span class="class"><span class="keyword">class</span> <span class="title">TransferStack</span>&lt;<span class="title">E</span>&gt; <span class="keyword">extends</span> <span class="title">Transferer</span>&lt;<span class="title">E</span>&gt; </span>&#123; ... &#125; </span><br></pre></td></tr></table></figure>
<p>其他的细节还是直接看<a href="https://javadoop.com/post/java-concurrent-queue">解读 Java 并发队列 BlockingQueue</a>吧，他写的比较好。</p>
<h2 id="PriorityBlockingQueue"><a href="#PriorityBlockingQueue" class="headerlink" title="PriorityBlockingQueue"></a>PriorityBlockingQueue</h2><p>PriorityBlockingQueue 是无界队列，基于数组，数据结构为二叉堆，数组第一个也是树的根节点总是最小值。</p>
<p> PriorityQueue 的线程安全版本。</p>
<p>//todo 很多代码没有详细看，只是过了一下大致的流程</p>
]]></content>
      <categories>
        <category>Java</category>
      </categories>
      <tags>
        <tag>面试</tag>
      </tags>
  </entry>
  <entry>
    <title>python中的RSA相关用法</title>
    <url>/2018/07/24/python%E4%B8%AD%E7%9A%84RSA%E7%9B%B8%E5%85%B3%E7%94%A8%E6%B3%95/</url>
    <content><![CDATA[<p>工作需要，用到了RSA算法，因为是python+flask搭建的服务器，所以也需要使用RSA相关的功能，但是网上搜了一圈，大都是在说 rsa 和 pycryptodome 这两个库。主要问题在于，我拿到的是string格式的公匙，而不是.pem文件，卡在了生产public key这个阶段。。<a id="more"></a></p>
<p>虽然 <a href="https://nangonghuang.github.io/2018/07/30/RSA%E5%8A%A0%E8%A7%A3%E5%AF%86%E7%AE%97%E6%B3%95%E5%8E%9F%E7%90%86/">RSA原理</a> 大致看了一遍，但是实际使用的时候还涉及到key的生成和解析，加解密数据的填充等等，实际的使用中需要客户端和服务器统一RSA加密所用的填充方式。</p>
<hr>
<p>RSA加密常用的填充方式有下面3种：</p>
<p>1.RSA_PKCS1_PADDING 填充模式，最常用的模式</p>
<p>在BouncyCastle实现RSA的PKCS1V1.5模式中，如果是公钥加密信息（forEncryption=true)，密钥长度为1024位，那么输出的密文块长度为128个字节，输入的明文块长度为127-10,即输入的明文块最大是117位，如果输入的明文块小于117位，比如输入的明文块长度为64位，那么会对这个明文块进行补位，在明文块前添加一位的0x02字节（代表公钥加密）然后后面的52位为随机的字节，在补位的最后一位，{即52（117-64-1），从零开始的},添加一位的字节0x00,在补位的后面添加实际的明文块。</p>
<p>这样做的目的就是使得明文块转化成与module差不多的大整数。</p>
<p>如果是私钥加密（forPrivateKey=true),密钥长度为1024位，那么输出 的密文块长度也是128字节，输入的明文块的长度为127-10，即输入的明文块最大是117位，如果输入的明文块小于117位，比如输入的明文块长度为64位，那么对这个明文块进行补位，在明文块前添加一位的0x01字节（代表私钥加密），然后在后面的52位为字节0xff，在最后一位｛即52（117-64-1）,从零开始)，添加一位的字节0x00，在补位的后面添加时间的明文块。</p>
<p>根据这个要求，对于512bit的密钥，　block length = 512/8 – 11 = 53 字节</p>
<p>2.RSA_PKCS1_OAEP_PADDING</p>
<p>输入：RSA_size(rsa) – 41</p>
<p>输出：和modulus一样长</p>
<p>3.for RSA_NO_PADDING　　不填充</p>
<p>输入：可以和RSA钥模长一样长，如果输入的明文过长，必须切割，　然后填充</p>
<p>输出：和modulus一样长</p>
<p>跟DES，AES一样，　RSA也是一个块加密算法（ block cipher algorithm），总是在一个固定长度的块上进行操作。</p>
<p>但跟AES等不同的是，　block length是跟key length有关的。</p>
<p>每次RSA加密的明文的长度是受RSA填充模式限制的，但是RSA每次加密的块长度就是key length。</p>
<p>需要注意：</p>
<p>假如你选择的秘钥长度为1024bit共128个byte：</p>
<p>1.当你在客户端选择RSA_NO_PADDING填充模式时，如果你的明文不够128字节</p>
<p>加密的时候会在你的明文前面，前向的填充零。解密后的明文也会包括前面填充的零，这是服务器需要注意把解密后的字段前向填充的</p>
<p>零去掉，才是真正之前加密的明文。</p>
<p>2.当你选择RSA_PKCS1_PADDING填充模式时，如果你的明文不够128字节</p>
<p>加密的时候会在你的明文中随机填充一些数据，所以会导致对同样的明文每次加密后的结果都不一样。</p>
<p>对加密后的密文，服务器使用相同的填充方式都能解密。解密后的明文也就是之前加密的明文。</p>
<p>3.RSA_PKCS1_OAEP_PADDING填充模式没有使用过， 他是PKCS#1推出的新的填充方式，安全性是最高的，</p>
<p>和前面RSA_PKCS1_PADDING的区别就是加密前的编码方式不一样。</p>
<hr>
<p>回到string类型公匙的问题上来。虽然加密密匙有多种格式，比如jar包里面的校验文件，中间还有什么乱七八糟的RSA PKCS#1,PKCS#8,X.509之类的东西与这里说的内容无关，暂时忽略掉。但我们在RSA里面通常遇到的公匙通常有两种类型，一种是.pem的文件，另外一种是纯string类型的公匙。大致的看过文档之后(官方文档的代码也有错误跑不起来，非常误导….), pycryptodome 和 rsa 库的getting started文档并没有很明确的说明，</p>
<ol>
<li><p>pem文件类型的公匙的两种格式：</p>
 <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">-----BEGIN RSA PUBLIC KEY-----</span><br><span class="line">MIIBCgKCAQEAhU9EQ3z&#x2F;zNCH+68tTN6Vkhnq8jaCx+9iT+zfq6rmwGzdNcErkt8x</span><br><span class="line">gqD5iuuQmpnFtF0fM3aKyCdztbYcJcscggceg9Wf14Nu5xitWsG47Mpd4M13RIGX</span><br><span class="line">0p5lMuE2zI4x5YCUSsTLV9vNtRK73tnUq8HYcHrRCK+RmylRcXvyIDjpVcGbwT37</span><br><span class="line">MebFuufCGqo0rYfZl7bb4kDMgKk5gULGBDxc5tz7YktMXQ0FOa7g9WXsxIWmoy0q</span><br><span class="line">OUMZVyHY+55b8vGUT2EevqrpusrnUJvwYRTtTiHHU+ftSV3VwY+1g38CWTk148Lg</span><br><span class="line">UL0pIrnVxjPKUbUuoHA+YNbLL&#x2F;BLpJr7jwIDAQAB</span><br><span class="line">-----END RSA PUBLIC KEY-----</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p> 上面是一种类型的pem文件公匙的内容(这里可以叫做 标准pem 格式)，到具体的库来说，就是rsa库所产出的公匙：</p>
 <figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> rsa</span><br><span class="line"></span><br><span class="line">(pubkey, privkey) = rsa.newkeys(<span class="number">2048</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 保存密钥</span></span><br><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&#x27;public.pem&#x27;</span>,<span class="string">&#x27;w+&#x27;</span>) <span class="keyword">as</span> f:</span><br><span class="line">    f.write(pubkey.save_pkcs1().decode())</span><br><span class="line"></span><br><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&#x27;private.pem&#x27;</span>,<span class="string">&#x27;w+&#x27;</span>) <span class="keyword">as</span> f:</span><br><span class="line">    f.write(privkey.save_pkcs1().decode())</span><br></pre></td></tr></table></figure>
<p> 而crypto库产生的.pem文件格式为:(这里可以叫做 openssl 格式)</p>
 <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">-----BEGIN PUBLIC KEY-----</span><br><span class="line">MIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEA59JFc2huRupfSvTmI96e</span><br><span class="line">VuAWRAIziNG&#x2F;sTm0Z+XvWqWFMk4s9WIAu9Pi1d1VKhhwJoUSZKdFvMtKxQ2nACOU</span><br><span class="line">u01ykiqKmxYpU2jgKrKdAuM4R9hMnp5eqN7ql1zg5PA&#x2F;cF07AM0nG&#x2F;Z2y6XZUSz8</span><br><span class="line">mnAv7F0ePf0Ba1CmUAk2r+VwxA2rvpR0HM87T2Qq8b3ZieUuCyp0bxtQmHcbSAEV</span><br><span class="line">ALHSucFxPVHKQ7b&#x2F;cjp5Teh4yWJnyhAOU8rphFY0fGehQpWsKTWTZFlxm+TEcH7c</span><br><span class="line">9mlFu290z0DE4xzYHv7kKWhConqJAphcNAExm7j&#x2F;qhvQF27DT90tj0oWtjz&#x2F;tCNj</span><br><span class="line">GQIDAQAB</span><br><span class="line">-----END PUBLIC KEY-----</span><br></pre></td></tr></table></figure>
<p> 产生的方法则是:</p>
 <figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.Random <span class="keyword">import</span> get_random_bytes</span><br><span class="line"><span class="keyword">import</span> base64</span><br><span class="line"><span class="keyword">from</span> Crypto.Signature <span class="keyword">import</span> pkcs1_15</span><br><span class="line"><span class="keyword">from</span> Crypto.Hash <span class="keyword">import</span> SHA256,SHA1</span><br><span class="line"><span class="keyword">from</span> Crypto.PublicKey <span class="keyword">import</span> RSA</span><br><span class="line"></span><br><span class="line">key = RSA.generate(<span class="number">2048</span>)</span><br><span class="line">private_key = key.export_key()</span><br><span class="line">file_out = <span class="built_in">open</span>(<span class="string">&quot;private.pem&quot;</span>, <span class="string">&quot;wb&quot;</span>)</span><br><span class="line">file_out.write(private_key)</span><br><span class="line"></span><br><span class="line">public_key = key.publickey().export_key()</span><br><span class="line">file_out = <span class="built_in">open</span>(<span class="string">&quot;public.pem&quot;</span>, <span class="string">&quot;wb&quot;</span>)</span><br><span class="line">file_out.write(public_key)</span><br></pre></td></tr></table></figure>
<p> 不过这两种pem格式，都是同一种构成规则，就是</p>
 <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">前缀行</span><br><span class="line">对DER格式的公匙进行base64后的结果</span><br><span class="line">后缀行</span><br></pre></td></tr></table></figure></li>
<li><p>DER格式的公匙：<br> DER格式的公匙，通常是byte字节流。我们所遇到的string类型的公匙，就是对这种字节流进行base64之后得到的字符串。而 openssl 格式 和 标准pem 格式 内容中所包含的 DER字节流，在没有前缀来区分的情况下，我们很难知道它是　openssl 格式 还是 标准pem 格式　中的那一段DER，而不同的类型，要用不同的处理方法来解析，这也是库方法解不出public key的最主要的原因之一。</p>
<p> DER格式1:</p>
 <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">MIIBCgKCAQEAhU9EQ3z&#x2F;zNCH+68tTN6Vkhnq8jaCx+9iT+zfq6rmwGzdNcErkt8x</span><br><span class="line">gqD5iuuQmpnFtF0fM3aKyCdztbYcJcscggceg9Wf14Nu5xitWsG47Mpd4M13RIGX</span><br><span class="line">0p5lMuE2zI4x5YCUSsTLV9vNtRK73tnUq8HYcHrRCK+RmylRcXvyIDjpVcGbwT37</span><br><span class="line">MebFuufCGqo0rYfZl7bb4kDMgKk5gULGBDxc5tz7YktMXQ0FOa7g9WXsxIWmoy0q</span><br><span class="line">OUMZVyHY+55b8vGUT2EevqrpusrnUJvwYRTtTiHHU+ftSV3VwY+1g38CWTk148Lg</span><br><span class="line">UL0pIrnVxjPKUbUuoHA+YNbLL&#x2F;BLpJr7jwIDAQAB</span><br></pre></td></tr></table></figure>
<p> DER格式2：</p>
 <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">MIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEA59JFc2huRupfSvTmI96e</span><br><span class="line">VuAWRAIziNG&#x2F;sTm0Z+XvWqWFMk4s9WIAu9Pi1d1VKhhwJoUSZKdFvMtKxQ2nACOU</span><br><span class="line">u01ykiqKmxYpU2jgKrKdAuM4R9hMnp5eqN7ql1zg5PA&#x2F;cF07AM0nG&#x2F;Z2y6XZUSz8</span><br><span class="line">mnAv7F0ePf0Ba1CmUAk2r+VwxA2rvpR0HM87T2Qq8b3ZieUuCyp0bxtQmHcbSAEV</span><br><span class="line">ALHSucFxPVHKQ7b&#x2F;cjp5Teh4yWJnyhAOU8rphFY0fGehQpWsKTWTZFlxm+TEcH7c</span><br><span class="line">9mlFu290z0DE4xzYHv7kKWhConqJAphcNAExm7j&#x2F;qhvQF27DT90tj0oWtjz&#x2F;tCNj</span><br><span class="line">GQIDAQAB</span><br></pre></td></tr></table></figure>
<p>最后给出完整代码:</p>
<blockquote>
<p>rsa库的可以根据解密过程自己写公钥解密的方法。而crypto库在解密的过程中也用到了<br>pqn等参数，不太清楚为什么。所以就没有写出公钥解密的方法。</p>
</blockquote>
</li>
</ol>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">from</span> Crypto.Random <span class="keyword">import</span> get_random_bytes</span><br><span class="line"><span class="keyword">import</span> base64</span><br><span class="line"><span class="keyword">from</span> Crypto.Signature <span class="keyword">import</span> pkcs1_15</span><br><span class="line"><span class="keyword">from</span> Crypto.Hash <span class="keyword">import</span> SHA256, SHA1</span><br><span class="line"><span class="keyword">from</span> Crypto.PublicKey <span class="keyword">import</span> RSA</span><br><span class="line"><span class="keyword">from</span> Crypto.Cipher <span class="keyword">import</span> PKCS1_OAEP</span><br><span class="line"><span class="keyword">import</span> rsa</span><br><span class="line"></span><br><span class="line">signature = <span class="string">&#x27;n6KsB/rBh3DzRjWVuocnzqyPm6jxyLp31kF80PewabKKsgfO8OaYtWjdwBOLld0E9Ynx0MiH81KYfGrBZv6Ef+gtl55Kkkfezol3UheNtmOhYE+LprI78blh55SeYnixEmd439tLCfQNuvftDYSDkEnlMXZ6Emz8X0J1AnfhUHU=&#x27;</span></span><br><span class="line">rsa_key_str = <span class="string">&#x27;MIGfMA0GCSqGSIb3DQEBAQUAA4GNADCBiQKBgQDDnI3kW16XWPxx2y8vJwX58/3gNqpe3sgxIBjwhY8HKAbrZOHffcpkPYPO2uZZZSchIUd05E7x3daRbD6dmMVjbYzrs7U9L0m+5l8yKvNdVa9wMG3iWG/4a/e6V8tCDXuTx0i14MZoRYWmZBKwuWDkZCBtd1hq4xiU4fvMRfOg9wIDAQAB&#x27;</span></span><br><span class="line">message = <span class="string">&#x27;encryp_data=Lziso+i0rAjZSZMh/OfdVkACvSVLLUHZVkiLkqOEMGOWPuXCw65y1jr8Az5rC1H0NxkWtPKlSTMHxBM8dSnP1cbOqfdgHSiL5nVZq8k9yXvcShh4OfwZACvikDjDRsQo9nL+G4MjB7q34N5H/8pBZeN4cg9DuCg7ycXF0YG5V+w=&amp;extends_info_data=当前是最强的游戏扩展数据&amp;game_area=当前是最强的游戏区服&amp;game_level=49&amp;game_orderid=X7123456789&amp;game_role_id=x7id&amp;game_role_name=我是最强的角色名称&amp;sdk_version=2.0&amp;subject=大元宝&amp;xiao7_goid=18634202&#x27;</span></span><br><span class="line">encryp_data = <span class="string">&#x27;Lziso+i0rAjZSZMh/OfdVkACvSVLLUHZVkiLkqOEMGOWPuXCw65y1jr8Az5rC1H0NxkWtPKlSTMHxBM8dSnP1cbOqfdgHSiL5nVZq8k9yXvcShh4OfwZACvikDjDRsQo9nL+G4MjB7q34N5H/8pBZeN4cg9DuCg7ycXF0YG5V+w=&#x27;</span></span><br><span class="line"></span><br><span class="line">rsa_public_key = <span class="string">&#x27;&#x27;&#x27;-----BEGIN RSA PUBLIC KEY-----</span></span><br><span class="line"><span class="string">MIIBCgKCAQEAhU9EQ3z/zNCH+68tTN6Vkhnq8jaCx+9iT+zfq6rmwGzdNcErkt8x</span></span><br><span class="line"><span class="string">gqD5iuuQmpnFtF0fM3aKyCdztbYcJcscggceg9Wf14Nu5xitWsG47Mpd4M13RIGX</span></span><br><span class="line"><span class="string">0p5lMuE2zI4x5YCUSsTLV9vNtRK73tnUq8HYcHrRCK+RmylRcXvyIDjpVcGbwT37</span></span><br><span class="line"><span class="string">MebFuufCGqo0rYfZl7bb4kDMgKk5gULGBDxc5tz7YktMXQ0FOa7g9WXsxIWmoy0q</span></span><br><span class="line"><span class="string">OUMZVyHY+55b8vGUT2EevqrpusrnUJvwYRTtTiHHU+ftSV3VwY+1g38CWTk148Lg</span></span><br><span class="line"><span class="string">UL0pIrnVxjPKUbUuoHA+YNbLL/BLpJr7jwIDAQAB</span></span><br><span class="line"><span class="string">-----END RSA PUBLIC KEY-----</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line">rsa_public_key_str = <span class="string">&#x27;MIIBCgKCAQEAhU9EQ3z/zNCH+68tTN6Vkhnq8jaCx+9iT+zfq6rmwGzdNcErkt8xgqD5iuuQmpnFtF0fM3aKyCdztbYcJcscggceg9Wf14Nu5xitWsG47Mpd4M13RIGX0p5lMuE2zI4x5YCUSsTLV9vNtRK73tnUq8HYcHrRCK+RmylRcXvyIDjpVcGbwT37MebFuufCGqo0rYfZl7bb4kDMgKk5gULGBDxc5tz7YktMXQ0FOa7g9WXsxIWmoy0qOUMZVyHY+55b8vGUT2EevqrpusrnUJvwYRTtTiHHU+ftSV3VwY+1g38CWTk148LgUL0pIrnVxjPKUbUuoHA+YNbLL/BLpJr7jwIDAQAB&#x27;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">crypto_public_key = <span class="string">&#x27;&#x27;&#x27;-----BEGIN PUBLIC KEY-----</span></span><br><span class="line"><span class="string">MIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEA59JFc2huRupfSvTmI96e</span></span><br><span class="line"><span class="string">VuAWRAIziNG/sTm0Z+XvWqWFMk4s9WIAu9Pi1d1VKhhwJoUSZKdFvMtKxQ2nACOU</span></span><br><span class="line"><span class="string">u01ykiqKmxYpU2jgKrKdAuM4R9hMnp5eqN7ql1zg5PA/cF07AM0nG/Z2y6XZUSz8</span></span><br><span class="line"><span class="string">mnAv7F0ePf0Ba1CmUAk2r+VwxA2rvpR0HM87T2Qq8b3ZieUuCyp0bxtQmHcbSAEV</span></span><br><span class="line"><span class="string">ALHSucFxPVHKQ7b/cjp5Teh4yWJnyhAOU8rphFY0fGehQpWsKTWTZFlxm+TEcH7c</span></span><br><span class="line"><span class="string">9mlFu290z0DE4xzYHv7kKWhConqJAphcNAExm7j/qhvQF27DT90tj0oWtjz/tCNj</span></span><br><span class="line"><span class="string">GQIDAQAB</span></span><br><span class="line"><span class="string">-----END PUBLIC KEY-----</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"></span><br><span class="line">crypto_public_key_str = <span class="string">&#x27;MIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEA59JFc2huRupfSvTmI96eVuAWRAIziNG/sTm0Z+XvWqWFMk4s9WIAu9Pi1d1VKhhwJoUSZKdFvMtKxQ2nACOUu01ykiqKmxYpU2jgKrKdAuM4R9hMnp5eqN7ql1zg5PA/cF07AM0nG/Z2y6XZUSz8mnAv7F0ePf0Ba1CmUAk2r+VwxA2rvpR0HM87T2Qq8b3ZieUuCyp0bxtQmHcbSAEVALHSucFxPVHKQ7b/cjp5Teh4yWJnyhAOU8rphFY0fGehQpWsKTWTZFlxm+TEcH7c9mlFu290z0DE4xzYHv7kKWhConqJAphcNAExm7j/qhvQF27DT90tj0oWtjz/tCNjGQIDAQAB&#x27;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">crypto_generate_keys</span>():</span></span><br><span class="line">    key = RSA.generate(<span class="number">2048</span>)</span><br><span class="line">    private_key = key.export_key()</span><br><span class="line">    file_out = <span class="built_in">open</span>(<span class="string">&quot;private.pem&quot;</span>, <span class="string">&quot;wb&quot;</span>)</span><br><span class="line">    file_out.write(private_key)</span><br><span class="line"></span><br><span class="line">    public_key = key.publickey().export_key()</span><br><span class="line">    file_out = <span class="built_in">open</span>(<span class="string">&quot;public.pem&quot;</span>, <span class="string">&quot;wb&quot;</span>)</span><br><span class="line">    file_out.write(public_key)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">rsa_generate_keys</span>():</span></span><br><span class="line">    (pubkey, privkey) = rsa.newkeys(<span class="number">2048</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&#x27;public2.pem&#x27;</span>, <span class="string">&#x27;w+&#x27;</span>) <span class="keyword">as</span> f:</span><br><span class="line">        f.write(pubkey.save_pkcs1().decode())</span><br><span class="line"></span><br><span class="line">    <span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&#x27;private2.pem&#x27;</span>, <span class="string">&#x27;w+&#x27;</span>) <span class="keyword">as</span> f:</span><br><span class="line">        f.write(privkey.save_pkcs1().decode())</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">rsa_get_pubkey</span>(<span class="params">pub_string</span>):</span></span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        pubkey = rsa.PublicKey.load_pkcs1(pub_string)</span><br><span class="line">        print(pubkey)</span><br><span class="line">    <span class="keyword">except</span>:</span><br><span class="line">        print(<span class="string">&#x27;1 failed&#x27;</span>)</span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            pubkey = rsa.PublicKey.load_pkcs1(pub_string, <span class="built_in">format</span>=<span class="string">&#x27;DER&#x27;</span>)</span><br><span class="line">            print(pubkey)</span><br><span class="line">        <span class="keyword">except</span>:</span><br><span class="line">            print(<span class="string">&#x27;2 failed&#x27;</span>)</span><br><span class="line">            <span class="keyword">try</span>:</span><br><span class="line">                pubkey = rsa.PublicKey.load_pkcs1_openssl_der(pub_string)</span><br><span class="line">                print(pubkey)</span><br><span class="line">            <span class="keyword">except</span>:</span><br><span class="line">                print(<span class="string">&#x27;3 failed&#x27;</span>)</span><br><span class="line">                <span class="keyword">try</span>:</span><br><span class="line">                    pubkey = rsa.PublicKey.load_pkcs1_openssl_pem(pub_string)</span><br><span class="line">                    print(pubkey)</span><br><span class="line">                <span class="keyword">except</span>:</span><br><span class="line">                    print(<span class="string">&#x27;4 failed&#x27;</span>)</span><br><span class="line">                    <span class="keyword">try</span>:</span><br><span class="line">                        pubkey = rsa.PublicKey.load_pkcs1(</span><br><span class="line">                            base64.b64decode(pub_string), <span class="built_in">format</span>=<span class="string">&#x27;DER&#x27;</span>)</span><br><span class="line">                        print(pubkey)</span><br><span class="line">                    <span class="keyword">except</span>:</span><br><span class="line">                        print(<span class="string">&#x27;5 failed&#x27;</span>)</span><br><span class="line">                        <span class="keyword">try</span>:</span><br><span class="line">                            pubkey = rsa.PublicKey.load_pkcs1_openssl_der(</span><br><span class="line">                                base64.b64decode(pub_string))</span><br><span class="line">                            print(pubkey)</span><br><span class="line">                        <span class="keyword">except</span>:</span><br><span class="line">                            print(<span class="string">&#x27;6 failed&#x27;</span>)</span><br><span class="line">    <span class="keyword">if</span> pubkey:</span><br><span class="line">        print(<span class="string">&#x27;rsa_get_pubkey success&#x27;</span>)</span><br><span class="line">        <span class="keyword">return</span> pubkey</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">crypto_get_pubkey</span>(<span class="params">pub_string</span>):</span></span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        pubkey = RSA.import_key(pub_string)</span><br><span class="line">        print(pubkey.n)</span><br><span class="line">        print(pubkey.e)</span><br><span class="line">    <span class="keyword">except</span>:</span><br><span class="line">        print(<span class="string">&#x27;1 failed&#x27;</span>)</span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            pubkey = RSA.import_key(base64.b64decode(pub_string))</span><br><span class="line">            print(pubkey.n)</span><br><span class="line">            print(pubkey.e)</span><br><span class="line">        <span class="keyword">except</span>:</span><br><span class="line">            print(<span class="string">&#x27;2 failed&#x27;</span>)</span><br><span class="line">    <span class="keyword">if</span> pubkey:</span><br><span class="line">        print(<span class="string">&#x27;crypto_get_pubkey success&#x27;</span>)</span><br><span class="line">        <span class="keyword">return</span> pubkey</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">crypto_sign_verify</span>(<span class="params">pubkey_str,message_str,signature_str</span>):</span></span><br><span class="line">    <span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">    如果signature是从外部获得的string格式，则需要base64解码一下。否则签名的时候直接用即可</span></span><br><span class="line"><span class="string">    &#x27;&#x27;&#x27;</span></span><br><span class="line">    <span class="comment"># prikey = RSA.import_key(open(&#x27;private.pem&#x27;).read())</span></span><br><span class="line">    <span class="comment"># missing_padding = 4 - len(message) % 4</span></span><br><span class="line">    <span class="comment"># if missing_padding:</span></span><br><span class="line">    <span class="comment">#     message += &#x27;=&#x27;* missing_padding</span></span><br><span class="line">    <span class="comment"># h = SHA.new(message.encode())</span></span><br><span class="line">    <span class="comment"># signature = pkcs1_15.new(prikey).sign(h)</span></span><br><span class="line"></span><br><span class="line">    pubkey = crypto_get_pubkey(pubkey_str)</span><br><span class="line">    h = SHA1.new(message_str.encode())</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        pkcs1_15.new(pubkey).verify(h, base64.b64decode(signature_str))</span><br><span class="line">        print(<span class="string">&quot;The signature is valid.&quot;</span>)</span><br><span class="line">    <span class="keyword">except</span> (ValueError, TypeError):</span><br><span class="line">        print(<span class="string">&quot;The signature is not valid.&quot;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">rsa_sign_verify</span>(<span class="params">pubkey_str,message_str,signature_str</span>):</span></span><br><span class="line">    <span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">    如果signature是从外部获得的string格式，则需要base64解码一下。否则签名的时候直接用即可</span></span><br><span class="line"><span class="string">    &#x27;&#x27;&#x27;</span></span><br><span class="line">    <span class="comment"># (pubkey, privkey) = rsa.newkeys(512)</span></span><br><span class="line">    <span class="comment"># message = &#x27;Go left at the blue tree&#x27;</span></span><br><span class="line">    <span class="comment"># signature = rsa.sign(message.encode(), privkey, &#x27;SHA-1&#x27;)</span></span><br><span class="line">    <span class="comment"># message = &#x27;Go right at the blue tree&#x27;</span></span><br><span class="line"></span><br><span class="line">    pubkey = rsa_get_pubkey(pubkey_str)</span><br><span class="line">    result = rsa.verify(message_str.encode(), base64.b64decode(signature_str), pubkey)</span><br><span class="line">    print(result)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">rsa_encrypt_decrypt</span>():</span></span><br><span class="line">    (bob_pub, bob_priv) = rsa.newkeys(<span class="number">512</span>)</span><br><span class="line">    message = <span class="string">&#x27;hello Bob!&#x27;</span>.encode()</span><br><span class="line">    crypto = rsa.encrypt(message, bob_pub)</span><br><span class="line">    print(base64.b64encode(crypto).decode())</span><br><span class="line">    message = rsa.decrypt(crypto, bob_priv)</span><br><span class="line">    print(message.decode())</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_max_out_len</span>(<span class="params">key_n</span>):</span></span><br><span class="line">    <span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">    根据key的长度获取可以一次解密输出的密文数据的长度</span></span><br><span class="line"><span class="string">    密文数据的长度-11 就是一次解密的明文数据的最大长度</span></span><br><span class="line"><span class="string">    &#x27;&#x27;&#x27;</span></span><br><span class="line">    bits = <span class="number">0</span></span><br><span class="line">    <span class="keyword">while</span> key_n &gt;&gt; bits:</span><br><span class="line">        bits += <span class="number">1</span></span><br><span class="line">    r, q = <span class="built_in">divmod</span>(bits, <span class="number">8</span>)</span><br><span class="line">    <span class="keyword">if</span> q != <span class="number">0</span>:</span><br><span class="line">        r += <span class="number">1</span></span><br><span class="line">    <span class="keyword">return</span> r</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_max_input_len</span>(<span class="params">key_n</span>):</span></span><br><span class="line">    <span class="keyword">return</span> get_max_out_len(key_n)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">crypto_decrypt_with_public</span>():</span></span><br><span class="line">    <span class="comment"># crypto 不允许公钥解密，算法有点看不懂，所以也不太会改</span></span><br><span class="line">    pubkey = crypto_get_pubkey(rsa_key_str)</span><br><span class="line">    cipher_rsa_decrypt = PKCS1_OAEP.new(pubkey)</span><br><span class="line">    <span class="keyword">if</span> <span class="built_in">len</span>(base64.b64decode(encryp_data)) &lt;= get_max_out_len(pubkey.n):</span><br><span class="line">        data = cipher_rsa_decrypt.decrypt(base64.b64decode(encryp_data))</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        print(<span class="string">&#x27;需要分段解密&#x27;</span>)</span><br><span class="line">        <span class="keyword">pass</span></span><br><span class="line">    print(data)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">decrypt_with_public_key</span>(<span class="params">crypto, pub_key</span>):</span></span><br><span class="line">    blocksize = rsa.common.byte_size(pub_key.n)</span><br><span class="line">    encrypted = rsa.transform.bytes2int(crypto)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># blind_r = rsa.randnum.randint(pub_key.n - 1)</span></span><br><span class="line">    <span class="comment"># blinded = (encrypted * pow(blind_r, pub_key.e, pub_key.n)) % pub_key.n </span></span><br><span class="line">    <span class="comment"># decrypted = rsa.core.decrypt_int(blinded, pub_key.e, pub_key.n)</span></span><br><span class="line">    decrypted = rsa.core.decrypt_int(encrypted, pub_key.e, pub_key.n)</span><br><span class="line"></span><br><span class="line">    cleartext = rsa.transform.int2bytes(decrypted, blocksize)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># If we can&#x27;t find the cleartext marker, decryption failed.</span></span><br><span class="line">    <span class="keyword">if</span> cleartext[<span class="number">0</span>:<span class="number">2</span>] != <span class="string">b&#x27;\x00\x01&#x27;</span>:  <span class="comment">#这里表示是私钥加密，公钥加密这里是\x02</span></span><br><span class="line">        <span class="keyword">raise</span> Exception(<span class="string">&#x27;Decryption failed,the message is not encrypted by private key&#x27;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># Find the 00 separator between the padding and the message</span></span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        sep_idx = cleartext.index(<span class="string">b&#x27;\x00&#x27;</span>, <span class="number">2</span>)   <span class="comment">#寻找填充数据的最后一个byte</span></span><br><span class="line">    <span class="keyword">except</span> ValueError:</span><br><span class="line">        <span class="keyword">raise</span> Exception(<span class="string">&#x27;Decryption failed,cannot find end of padding space&#x27;</span>)</span><br><span class="line">    <span class="keyword">return</span> cleartext[sep_idx + <span class="number">1</span>:]</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">rsa_decrypt_with_public</span>():</span></span><br><span class="line">    pubkey = rsa_get_pubkey(rsa_key_str)</span><br><span class="line">    <span class="keyword">if</span> <span class="built_in">len</span>(base64.b64decode(encryp_data)) &lt;= get_max_out_len(pubkey.n):</span><br><span class="line">        decrypt = decrypt_with_public_key(base64.b64decode(encryp_data), pubkey)</span><br><span class="line">        decrypt_dict = &#123;&#125;</span><br><span class="line">        <span class="keyword">for</span> pair_str <span class="keyword">in</span> decrypt.decode().split(<span class="string">&#x27;&amp;&#x27;</span>):</span><br><span class="line">            (key, value) = pair_str.split(<span class="string">&#x27;=&#x27;</span>)</span><br><span class="line">            decrypt_dict[key] = value</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        print(<span class="string">&#x27;需要分段解密&#x27;</span>)</span><br><span class="line">        <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    processes = [rsa_public_key,rsa_public_key_str,crypto_public_key,crypto_public_key_str]</span><br><span class="line">    <span class="keyword">for</span> process <span class="keyword">in</span> processes:</span><br><span class="line">        pubkey = rsa_get_pubkey(process)</span><br><span class="line">        pubkey = crypto_get_pubkey(process)</span><br><span class="line">    rsa_decrypt_with_public()</span><br><span class="line">   </span><br></pre></td></tr></table></figure>
<p>最后的总结：</p>
<p>pycryptodome 不支持公钥解密</p>
<p>rsa 支持公钥解密</p>
<p>两者都支持公钥加密私钥解密，验证签名等</p>
]]></content>
      <categories>
        <category>python</category>
      </categories>
      <tags>
        <tag>RSA</tag>
      </tags>
  </entry>
  <entry>
    <title>常见排序算法的实现</title>
    <url>/2018/10/08/%E5%B8%B8%E8%A7%81%E6%8E%92%E5%BA%8F%E7%AE%97%E6%B3%95%E7%9A%84%E5%AE%9E%E7%8E%B0/</url>
    <content><![CDATA[<h1 id="排序算法"><a href="#排序算法" class="headerlink" title="排序算法"></a>排序算法</h1><p>之前写过的脚本语言全都忘了，这里打算利用排序算法复习一下。。。。</p>
<a id="more"></a>

<h2 id="冒泡排序"><a href="#冒泡排序" class="headerlink" title="冒泡排序"></a>冒泡排序</h2><p><a href="https://en.wikipedia.org/wiki/Bubble_sort">冒泡排序(En)</a></p>
<p><a href="https://zh.wikipedia.org/wiki/%E5%86%92%E6%B3%A1%E6%8E%92%E5%BA%8F">冒泡排序(CH)</a></p>
<p>优化点：</p>
<ol>
<li>每趟排序会使一个数字到达到达它的最终位置，所以每趟冒泡的次数最大是<code>length-1-i</code>；</li>
<li>在一趟冒泡中如果没有发生位置交换，则认为已经是有序队列，不再进行冒泡；</li>
</ol>
<p>Java版本：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Main</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span>[] numbers = getIntArray();</span><br><span class="line">        <span class="comment">// bubberSort(numbers);</span></span><br><span class="line">        bubberSort2(numbers);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">int</span>[] getIntArray() &#123;</span><br><span class="line">        Random random = <span class="keyword">new</span> Random();</span><br><span class="line">        <span class="keyword">int</span> length = <span class="number">20</span>;</span><br><span class="line">        <span class="keyword">int</span>[] numbers = <span class="keyword">new</span> <span class="keyword">int</span>[length];</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; length; i++) &#123;</span><br><span class="line">            numbers[i] = random.nextInt(<span class="number">100</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> numbers;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">bubberSort</span><span class="params">(numbers)</span><span class="params">(<span class="keyword">int</span>[] numbers)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> length = numbers.length;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; length - <span class="number">1</span>; i++) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; length - <span class="number">1</span> - i; j++) &#123;</span><br><span class="line">                <span class="keyword">if</span> (numbers[j] &gt; numbers[j + <span class="number">1</span>]) &#123;</span><br><span class="line">                    swap(numbers, j, j+<span class="number">1</span>);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        printArray(numbers);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">bubberSort2</span><span class="params">(<span class="keyword">int</span>[] numbers)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> length = numbers.length;</span><br><span class="line">        <span class="keyword">boolean</span> changed = <span class="keyword">false</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; length - <span class="number">1</span>; i++) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; length - <span class="number">1</span> - i; j++) &#123;</span><br><span class="line">                <span class="keyword">if</span> (numbers[j] &gt; numbers[j + <span class="number">1</span>]) &#123;</span><br><span class="line">                    swap(numbers, j, j + <span class="number">1</span>);</span><br><span class="line">                    changed = <span class="keyword">true</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (!changed) &#123;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            changed = <span class="keyword">false</span> ;</span><br><span class="line">        &#125;</span><br><span class="line">        printArray(numbers);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">printArray</span><span class="params">(<span class="keyword">int</span>[] arr)</span> </span>&#123;</span><br><span class="line">        IntStream.of(arr).forEach(x -&gt; System.out.print(<span class="string">&quot;,&quot;</span> + x));</span><br><span class="line">        System.out.println();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">swap</span><span class="params">(<span class="keyword">int</span>[] data, <span class="keyword">int</span> i, <span class="keyword">int</span> j)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (i == j) &#123;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        data[i] = data[i] + data[j];</span><br><span class="line">        data[j] = data[i] - data[j];</span><br><span class="line">        data[i] = data[i] - data[j];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>javaScript:</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> numbers = [<span class="number">82</span>,<span class="number">37</span>,<span class="number">10</span>,<span class="number">69</span>,<span class="number">1</span>,<span class="number">92</span>,<span class="number">6</span>,<span class="number">13</span>,<span class="number">77</span>,<span class="number">33</span>,<span class="number">47</span>,<span class="number">12</span>,<span class="number">23</span>,<span class="number">82</span>,<span class="number">71</span>,<span class="number">57</span>,<span class="number">58</span>,<span class="number">51</span>,<span class="number">57</span>,<span class="number">75</span>];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">bubber_sort</span>(<span class="params">arr</span>)</span>&#123;</span><br><span class="line">	<span class="keyword">if</span> (arr <span class="keyword">instanceof</span> <span class="built_in">Array</span>)&#123;</span><br><span class="line">		<span class="keyword">for</span>(<span class="keyword">let</span> i = <span class="number">0</span> ;i&lt; arr.length-<span class="number">1</span>;i++)&#123;</span><br><span class="line">			<span class="keyword">for</span>(<span class="keyword">let</span> j=<span class="number">0</span>;j&lt;arr.length-i-<span class="number">1</span>;j++)&#123;</span><br><span class="line">				<span class="keyword">if</span>(arr[j]&gt;arr[j+<span class="number">1</span>])&#123;</span><br><span class="line">					(<span class="function"><span class="keyword">function</span>(<span class="params">arr,x,y</span>)</span>&#123;</span><br><span class="line">						arr[x] = arr[x] ^ arr[y] ;</span><br><span class="line">						arr[y] = arr[x] ^ arr[y] ;</span><br><span class="line">						arr[x] = arr[x] ^ arr[y] ;</span><br><span class="line">					&#125;)(arr,j,j+<span class="number">1</span>);</span><br><span class="line">				&#125;</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="built_in">console</span>.log(arr.join());</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line">bubber_sort(numbers);</span><br></pre></td></tr></table></figure>
<p>c++:</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> GET_LEN(array, len)                     \</span></span><br><span class="line">    &#123;                                           \</span><br><span class="line">        len = <span class="keyword">sizeof</span>(<span class="built_in">array</span>) / <span class="keyword">sizeof</span>(<span class="built_in">array</span>[<span class="number">0</span>]); \</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">swap</span><span class="params">(<span class="keyword">int</span> arr[], <span class="keyword">int</span> x, <span class="keyword">int</span> y)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    arr[x] = arr[x] ^ arr[y];</span><br><span class="line">    arr[y] = arr[x] ^ arr[y];</span><br><span class="line">    arr[x] = arr[x] ^ arr[y];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">swap</span><span class="params">(<span class="keyword">int</span> *a ,<span class="keyword">int</span> *b)</span></span>&#123;</span><br><span class="line">    *a = *a^*b ;</span><br><span class="line">    *b = *a^*b ;</span><br><span class="line">    *a = *a^*b ;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">swap</span><span class="params">(<span class="keyword">int</span> &amp;a ,<span class="keyword">int</span> &amp;b)</span></span>&#123;</span><br><span class="line">    a = a^b ;</span><br><span class="line">    b = a^b ;</span><br><span class="line">    a = a^b ;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">bubber_sort</span><span class="params">(<span class="keyword">int</span> numbers[],<span class="keyword">int</span> length)</span></span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; length - <span class="number">1</span>; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; length - <span class="number">1</span> - i; j++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span> (numbers[j] &gt; numbers[j + <span class="number">1</span>])</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="comment">// swap(numbers, j, j + 1);</span></span><br><span class="line">                <span class="comment">// swap(&amp;numbers[j],&amp;numbers[j+1]);</span></span><br><span class="line">                <span class="comment">// swap(numbers[j],numbers[j+1]);</span></span><br><span class="line">                <span class="built_in">std</span>::swap(numbers[j],numbers[j+<span class="number">1</span>]);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; length; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; numbers[i] &lt;&lt; <span class="string">&quot;,&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> numbers[] = &#123;<span class="number">82</span>,<span class="number">37</span>,<span class="number">10</span>,<span class="number">69</span>,<span class="number">1</span>,<span class="number">92</span>,<span class="number">6</span>,<span class="number">13</span>,<span class="number">77</span>,<span class="number">33</span>,<span class="number">47</span>,<span class="number">12</span>,<span class="number">23</span>,<span class="number">82</span>,<span class="number">71</span>,<span class="number">57</span>,<span class="number">58</span>,<span class="number">51</span>,<span class="number">57</span>,<span class="number">75</span>&#125;;</span><br><span class="line">    <span class="keyword">int</span> length;</span><br><span class="line">    GET_LEN(numbers, length);</span><br><span class="line">    bubber_sort(numbers,length);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>python:</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">numbers = [<span class="number">82</span>,<span class="number">37</span>,<span class="number">10</span>,<span class="number">69</span>,<span class="number">1</span>,<span class="number">92</span>,<span class="number">6</span>,<span class="number">13</span>,<span class="number">77</span>,<span class="number">33</span>,<span class="number">47</span>,<span class="number">12</span>,<span class="number">23</span>,<span class="number">82</span>,<span class="number">71</span>,<span class="number">57</span>,<span class="number">58</span>,<span class="number">51</span>,<span class="number">57</span>,<span class="number">75</span>];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">bubber_sort</span>(<span class="params">numbers</span>):</span></span><br><span class="line">	<span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(numbers)-<span class="number">1</span>):</span><br><span class="line">		<span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(numbers)-<span class="number">1</span>-i):</span><br><span class="line">			<span class="keyword">if</span> numbers[j] &gt; numbers[j+<span class="number">1</span>]:</span><br><span class="line">				numbers[j],numbers[j+<span class="number">1</span>] = numbers[j+<span class="number">1</span>],numbers[j]</span><br><span class="line">	print(numbers)</span><br><span class="line"></span><br><span class="line">bubber_sort(numbers)	</span><br></pre></td></tr></table></figure>
<p>TypeScript(啊，好像和js一样，改一下解构赋值凑个数…):</p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> numbers = [<span class="number">82</span>,<span class="number">37</span>,<span class="number">10</span>,<span class="number">69</span>,<span class="number">1</span>,<span class="number">92</span>,<span class="number">6</span>,<span class="number">13</span>,<span class="number">77</span>,<span class="number">33</span>,<span class="number">47</span>,<span class="number">12</span>,<span class="number">23</span>,<span class="number">82</span>,<span class="number">71</span>,<span class="number">57</span>,<span class="number">58</span>,<span class="number">51</span>,<span class="number">57</span>,<span class="number">75</span>];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">bubber_sort</span>(<span class="params">arr:<span class="built_in">number</span>[]</span>)</span>&#123;</span><br><span class="line">	<span class="keyword">for</span>(<span class="keyword">let</span> i = <span class="number">0</span> ;i&lt; arr.length-<span class="number">1</span>;i++)&#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">let</span> j=<span class="number">0</span>;j&lt;arr.length-i-<span class="number">1</span>;j++)&#123;</span><br><span class="line">        	<span class="keyword">if</span>(arr[j]&gt;arr[j+<span class="number">1</span>])&#123;</span><br><span class="line">                [arr[j],arr[j+<span class="number">1</span>]]=[arr[j+<span class="number">1</span>],arr[j]]</span><br><span class="line">       		&#125;</span><br><span class="line">       	&#125;</span><br><span class="line">    &#125;</span><br><span class="line">	<span class="built_in">console</span>.log(arr.join());	</span><br><span class="line">&#125;</span><br><span class="line">bubber_sort(numbers);</span><br></pre></td></tr></table></figure>
<h2 id="选择排序"><a href="#选择排序" class="headerlink" title="选择排序"></a>选择排序</h2><p><a href="https://en.wikipedia.org/wiki/Selection_sort">选择排序(En)</a></p>
<p><a href="https://zh.wikipedia.org/wiki/%E9%80%89%E6%8B%A9%E6%8E%92%E5%BA%8F">选择排序(CH)</a></p>
<p>每一趟选出一个最小(最大)的放到最终位置。</p>
<p>Java：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Main</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span>[] numbers = getIntArray();</span><br><span class="line">        selectionSort(numbers);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">int</span>[] getIntArray() &#123;</span><br><span class="line">        Random random = <span class="keyword">new</span> Random();</span><br><span class="line">        <span class="keyword">int</span> length = <span class="number">20</span>;</span><br><span class="line">        <span class="keyword">int</span>[] numbers = <span class="keyword">new</span> <span class="keyword">int</span>[length];</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; length; i++) &#123;</span><br><span class="line">            numbers[i] = random.nextInt(<span class="number">100</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> numbers;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">printArray</span><span class="params">(<span class="keyword">int</span>[] arr)</span> </span>&#123;</span><br><span class="line">        IntStream.of(arr).forEach(x -&gt; System.out.print(<span class="string">&quot;,&quot;</span> + x));</span><br><span class="line">        System.out.println();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">swap</span><span class="params">(<span class="keyword">int</span>[] data, <span class="keyword">int</span> i, <span class="keyword">int</span> j)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (i == j) &#123;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        data[i] = data[i] + data[j];</span><br><span class="line">        data[j] = data[i] - data[j];</span><br><span class="line">        data[i] = data[i] - data[j];</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">selectionSort</span><span class="params">(<span class="keyword">int</span>[] arr)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> min;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; arr.length; i++) &#123;</span><br><span class="line">            min = i;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j = i; j &lt; arr.length; j++) &#123;</span><br><span class="line">                <span class="keyword">if</span> (arr[j] &lt; arr[min]) &#123;</span><br><span class="line">                    min = j;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span>(min!=i)&#123;</span><br><span class="line">                swap(arr,min,i);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        printArray(arr);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>JavaScript:</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> numbers = [<span class="number">82</span>,<span class="number">37</span>,<span class="number">10</span>,<span class="number">69</span>,<span class="number">1</span>,<span class="number">92</span>,<span class="number">6</span>,<span class="number">13</span>,<span class="number">77</span>,<span class="number">33</span>,<span class="number">47</span>,<span class="number">12</span>,<span class="number">23</span>,<span class="number">82</span>,<span class="number">71</span>,<span class="number">57</span>,<span class="number">58</span>,<span class="number">51</span>,<span class="number">57</span>,<span class="number">75</span>];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">selection_sort</span>(<span class="params">arr</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">let</span> min = <span class="number">0</span> ;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">let</span> i = <span class="number">0</span> ;i&lt; arr.length;i++)&#123;</span><br><span class="line">        min = i ;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">let</span> j=i;j&lt;arr.length;j++)&#123;</span><br><span class="line">            <span class="keyword">if</span>(arr[j]&lt;arr[min])&#123;</span><br><span class="line">                min = j ;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(min != i)&#123;</span><br><span class="line">            [arr[i],arr[min]]=[arr[min],arr[i]]</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">console</span>.log(arr.join());</span><br><span class="line">&#125;</span><br><span class="line">selection_sort(numbers)</span><br></pre></td></tr></table></figure>
<p>Python:</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">numbers = [<span class="number">82</span>,<span class="number">37</span>,<span class="number">10</span>,<span class="number">69</span>,<span class="number">1</span>,<span class="number">92</span>,<span class="number">6</span>,<span class="number">13</span>,<span class="number">77</span>,<span class="number">33</span>,<span class="number">47</span>,<span class="number">12</span>,<span class="number">23</span>,<span class="number">82</span>,<span class="number">71</span>,<span class="number">57</span>,<span class="number">58</span>,<span class="number">51</span>,<span class="number">57</span>,<span class="number">75</span>];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">selection_sort</span>(<span class="params">numbers</span>):</span></span><br><span class="line">	<span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(numbers)):</span><br><span class="line">		<span class="built_in">min</span>=i</span><br><span class="line">		<span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(i,<span class="built_in">len</span>(numbers)):</span><br><span class="line">			<span class="keyword">if</span> numbers[<span class="built_in">min</span>] &gt; numbers[j]:</span><br><span class="line">				<span class="built_in">min</span>=j</span><br><span class="line">		<span class="keyword">if</span> <span class="built_in">min</span> != i :</span><br><span class="line">			numbers[i],numbers[<span class="built_in">min</span>] = numbers[<span class="built_in">min</span>],numbers[i]</span><br><span class="line">	print(numbers)</span><br><span class="line"></span><br><span class="line">selection_sort(numbers)	</span><br></pre></td></tr></table></figure>
<p>C++:</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> GET_LEN(array, len)                     \</span></span><br><span class="line">    &#123;                                           \</span><br><span class="line">        len = <span class="keyword">sizeof</span>(<span class="built_in">array</span>) / <span class="keyword">sizeof</span>(<span class="built_in">array</span>[<span class="number">0</span>]); \</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">swap</span><span class="params">(<span class="keyword">int</span> &amp;a ,<span class="keyword">int</span> &amp;b)</span></span>&#123;</span><br><span class="line">    a = a^b ;</span><br><span class="line">    b = a^b ;</span><br><span class="line">    a = a^b ;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">selection_sort</span><span class="params">(<span class="keyword">int</span> numbers[],<span class="keyword">int</span> length)</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> min = <span class="number">0</span> ;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; length ; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        min=i;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = i; j &lt; length ; j++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span> (numbers[min] &gt; numbers[j])</span><br><span class="line">            &#123;</span><br><span class="line">                 min = j ;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(min != i)&#123;</span><br><span class="line">            swap(numbers[min],numbers[i]);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; length; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; numbers[i] &lt;&lt; <span class="string">&quot;,&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> numbers[] = &#123;<span class="number">82</span>,<span class="number">37</span>,<span class="number">10</span>,<span class="number">69</span>,<span class="number">1</span>,<span class="number">92</span>,<span class="number">6</span>,<span class="number">13</span>,<span class="number">77</span>,<span class="number">33</span>,<span class="number">47</span>,<span class="number">12</span>,<span class="number">23</span>,<span class="number">82</span>,<span class="number">71</span>,<span class="number">57</span>,<span class="number">58</span>,<span class="number">51</span>,<span class="number">57</span>,<span class="number">75</span>&#125;;</span><br><span class="line">    <span class="keyword">int</span> length;</span><br><span class="line">    GET_LEN(numbers, length);</span><br><span class="line">    selection_sort(numbers,length);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>


<h2 id="插入排序"><a href="#插入排序" class="headerlink" title="插入排序"></a>插入排序</h2><p><a href="https://en.wikipedia.org/wiki/Insertion_sort">插入排序(En)</a></p>
<p><a href="https://zh.wikipedia.org/wiki/%E6%8F%92%E5%85%A5%E6%8E%92%E5%BA%8F">插入排序(CH)</a></p>
<p>Java</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Main</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span>[] numbers = getIntArray();</span><br><span class="line">        insertionSort(numbers);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">int</span>[] getIntArray() &#123;</span><br><span class="line">        Random random = <span class="keyword">new</span> Random();</span><br><span class="line">        <span class="keyword">int</span> length = <span class="number">20</span>;</span><br><span class="line">        <span class="keyword">int</span>[] numbers = <span class="keyword">new</span> <span class="keyword">int</span>[length];</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; length; i++) &#123;</span><br><span class="line">            numbers[i] = random.nextInt(<span class="number">100</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> numbers;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">printArray</span><span class="params">(<span class="keyword">int</span>[] arr)</span> </span>&#123;</span><br><span class="line">        IntStream.of(arr).forEach(x -&gt; System.out.print(<span class="string">&quot;,&quot;</span> + x));</span><br><span class="line">        System.out.println();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">swap</span><span class="params">(<span class="keyword">int</span>[] data, <span class="keyword">int</span> i, <span class="keyword">int</span> j)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (i == j) &#123;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        data[i] = data[i] + data[j];</span><br><span class="line">        data[j] = data[i] - data[j];</span><br><span class="line">        data[i] = data[i] - data[j];</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">insertionSort</span><span class="params">(<span class="keyword">int</span>[] arr)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; arr.length; i++) &#123;</span><br><span class="line">            <span class="keyword">int</span> insertIndex = i ;</span><br><span class="line">            <span class="keyword">int</span> temp = arr[i];</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j = i; j &gt; <span class="number">0</span>; j--) &#123;</span><br><span class="line">                <span class="keyword">if</span> (temp &lt; arr[j - <span class="number">1</span>]) &#123;</span><br><span class="line">                    arr[j] = arr[j - <span class="number">1</span>];</span><br><span class="line">                    insertIndex = j - <span class="number">1</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            arr[insertIndex] = temp;</span><br><span class="line">        &#125;</span><br><span class="line">        printArray(arr);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>JavaScript:</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> numbers = [<span class="number">82</span>,<span class="number">37</span>,<span class="number">10</span>,<span class="number">69</span>,<span class="number">1</span>,<span class="number">92</span>,<span class="number">6</span>,<span class="number">13</span>,<span class="number">77</span>,<span class="number">33</span>,<span class="number">47</span>,<span class="number">12</span>,<span class="number">23</span>,<span class="number">82</span>,<span class="number">71</span>,<span class="number">57</span>,<span class="number">58</span>,<span class="number">51</span>,<span class="number">57</span>,<span class="number">75</span>];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">insertion_sort</span>(<span class="params">arr</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">let</span> i = <span class="number">0</span> ;i&lt; arr.length;i++)&#123;</span><br><span class="line">        <span class="keyword">let</span> index = j ;</span><br><span class="line">        <span class="keyword">let</span> key = arr[i] ;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">let</span> j=i;j&gt;<span class="number">0</span>;j--)&#123;</span><br><span class="line">            <span class="keyword">if</span>(key&lt;arr[j-<span class="number">1</span>])&#123;</span><br><span class="line">                arr[j] = arr[j-<span class="number">1</span>] ;</span><br><span class="line">                index = j-<span class="number">1</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        arr[index] = key ;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">console</span>.log(arr.join());</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">insertion_sort(numbers)</span><br></pre></td></tr></table></figure>
<p>python:</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">numbers = [<span class="number">82</span>,<span class="number">37</span>,<span class="number">10</span>,<span class="number">69</span>,<span class="number">1</span>,<span class="number">92</span>,<span class="number">6</span>,<span class="number">13</span>,<span class="number">77</span>,<span class="number">33</span>,<span class="number">47</span>,<span class="number">12</span>,<span class="number">23</span>,<span class="number">82</span>,<span class="number">71</span>,<span class="number">57</span>,<span class="number">58</span>,<span class="number">51</span>,<span class="number">57</span>,<span class="number">75</span>];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">insertion_sort</span>(<span class="params">numbers</span>):</span></span><br><span class="line">	<span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(numbers)):</span><br><span class="line">		key = numbers[i]</span><br><span class="line">		index = i</span><br><span class="line">		<span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(i,<span class="number">0</span>,-<span class="number">1</span>):</span><br><span class="line">			<span class="keyword">if</span> key &lt; numbers[j-<span class="number">1</span>]:</span><br><span class="line">				numbers[j] = numbers[j-<span class="number">1</span>]</span><br><span class="line">				index = j-<span class="number">1</span></span><br><span class="line">		numbers[index] = key</span><br><span class="line">	print(numbers)</span><br><span class="line"></span><br><span class="line">insertion_sort(numbers)</span><br></pre></td></tr></table></figure>
<p>C++</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> GET_LEN(array, len)                     \</span></span><br><span class="line">    &#123;                                           \</span><br><span class="line">        len = <span class="keyword">sizeof</span>(<span class="built_in">array</span>) / <span class="keyword">sizeof</span>(<span class="built_in">array</span>[<span class="number">0</span>]); \</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">insertion_sort</span><span class="params">(<span class="keyword">int</span> numbers[],<span class="keyword">int</span> length)</span></span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; length ; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">int</span> index=i;</span><br><span class="line">        <span class="keyword">int</span> key = numbers[i];</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = i; j &gt; <span class="number">0</span> ; j--)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span> (key &lt; numbers[j<span class="number">-1</span>])</span><br><span class="line">            &#123;</span><br><span class="line">                numbers[j] = numbers[j<span class="number">-1</span>] ;</span><br><span class="line">                index= j<span class="number">-1</span> ;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        numbers[index]= key ;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; length; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; numbers[i] &lt;&lt; <span class="string">&quot;,&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> numbers[] = &#123;<span class="number">82</span>,<span class="number">37</span>,<span class="number">10</span>,<span class="number">69</span>,<span class="number">1</span>,<span class="number">92</span>,<span class="number">6</span>,<span class="number">13</span>,<span class="number">77</span>,<span class="number">33</span>,<span class="number">47</span>,<span class="number">12</span>,<span class="number">23</span>,<span class="number">82</span>,<span class="number">71</span>,<span class="number">57</span>,<span class="number">58</span>,<span class="number">51</span>,<span class="number">57</span>,<span class="number">75</span>&#125;;</span><br><span class="line">    <span class="keyword">int</span> length;</span><br><span class="line">    GET_LEN(numbers, length);</span><br><span class="line">    insertion_sort(numbers,length);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>


<h2 id="快速排序"><a href="#快速排序" class="headerlink" title="快速排序"></a>快速排序</h2><p><a href="https://en.wikipedia.org/wiki/Quicksort">快速排序(En)</a></p>
<p><a href="https://zh.wikipedia.org/wiki/%E5%BF%AB%E9%80%9F%E6%8E%92%E5%BA%8F">快速排序(CH)</a></p>
<p>快速排序需要注意的是，不要太过于看重左右节点交换的过程，每一趟排序只是为了分成左右两个子段。比如可以不用左右交换，直接从头到尾遍历，遇到比key小的值就放到key的左边，这样子也可以得到结果</p>
<p>Java:</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Main</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span>[] numbers = getIntArray();</span><br><span class="line">        quickSort(numbers);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">int</span>[] getIntArray() &#123;</span><br><span class="line">        Random random = <span class="keyword">new</span> Random();</span><br><span class="line">        <span class="keyword">int</span> length = <span class="number">20</span>;</span><br><span class="line">        <span class="keyword">int</span>[] numbers = <span class="keyword">new</span> <span class="keyword">int</span>[length];</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; length; i++) &#123;</span><br><span class="line">            numbers[i] = random.nextInt(<span class="number">100</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> numbers;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">printArray</span><span class="params">(<span class="keyword">int</span>[] arr)</span> </span>&#123;</span><br><span class="line">        IntStream.of(arr).forEach(x -&gt; System.out.print(<span class="string">&quot;,&quot;</span> + x));</span><br><span class="line">        System.out.println();</span><br><span class="line">    &#125;</span><br><span class="line">	</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">quickSort</span><span class="params">(<span class="keyword">int</span>[] arr)</span> </span>&#123;</span><br><span class="line">        quicksortInternal(arr, <span class="number">0</span>, arr.length - <span class="number">1</span>);</span><br><span class="line">        printArray(arr);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">quicksortInternal</span><span class="params">(<span class="keyword">int</span>[] arr, <span class="keyword">int</span> start, <span class="keyword">int</span> end)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (start &gt;= end) &#123;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">int</span> index = quicksortPartion(arr, start, end);</span><br><span class="line">        quicksortInternal(arr, start, index - <span class="number">1</span>);</span><br><span class="line">        quicksortInternal(arr, index + <span class="number">1</span>, end);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">quicksortPartion</span><span class="params">(<span class="keyword">int</span>[] arr, <span class="keyword">int</span> start, <span class="keyword">int</span> end)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> pivot = arr[start];</span><br><span class="line">        <span class="keyword">while</span> (start &lt; end) &#123;</span><br><span class="line">            <span class="keyword">while</span> (arr[end] &gt;= pivot &amp;&amp; start != end) &#123;</span><br><span class="line">                end--;</span><br><span class="line">            &#125;</span><br><span class="line">            arr[start] = arr[end];</span><br><span class="line">            <span class="keyword">while</span> (arr[start] &lt;= pivot &amp;&amp; start != end) &#123;</span><br><span class="line">                start++;</span><br><span class="line">            &#125;</span><br><span class="line">            arr[end] = arr[start];</span><br><span class="line">        &#125;</span><br><span class="line">        arr[start] = pivot;</span><br><span class="line">        <span class="keyword">return</span> start;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 这里也可以模仿下面的js方法写</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">quickSort2</span><span class="params">(<span class="keyword">int</span>[] numbers)</span></span>&#123;</span><br><span class="line">        List&lt;Integer&gt; arr = Arrays.stream(numbers).boxed().collect(Collectors.toList());</span><br><span class="line">        List&lt;Integer&gt; list = <span class="keyword">new</span> ArrayList&lt;&gt;(arr.size());</span><br><span class="line">        quickSortInternal2(arr,list);</span><br><span class="line">        System.out.println(list.toString());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">quickSortInternal2</span><span class="params">(List&lt;Integer&gt; arr,List&lt;Integer&gt; result)</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(arr.size() == <span class="number">0</span>)&#123;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(arr.size() == <span class="number">1</span>)&#123;</span><br><span class="line">            result.add(arr.get(<span class="number">0</span>));</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        quickSortInternal2(arr.stream().filter(x -&gt; x &lt; arr.get(<span class="number">0</span>)).collect(Collectors.toList()),result);</span><br><span class="line">        result.addAll(arr.stream().filter(x -&gt; x.equals(arr.get(<span class="number">0</span>))).collect(Collectors.toList()));</span><br><span class="line">        quickSortInternal2(arr.stream().filter(x -&gt; x &gt; arr.get(<span class="number">0</span>)).collect(Collectors.toList()),result);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>JavaScript:</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> numbers = [<span class="number">82</span>,<span class="number">37</span>,<span class="number">10</span>,<span class="number">69</span>,<span class="number">1</span>,<span class="number">92</span>,<span class="number">6</span>,<span class="number">13</span>,<span class="number">77</span>,<span class="number">33</span>,<span class="number">47</span>,<span class="number">12</span>,<span class="number">23</span>,<span class="number">82</span>,<span class="number">71</span>,<span class="number">57</span>,<span class="number">58</span>,<span class="number">51</span>,<span class="number">57</span>,<span class="number">75</span>];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">quick_sort</span>(<span class="params">arr</span>)</span>&#123;</span><br><span class="line">    quick_sort_internal(arr,<span class="number">0</span>,arr.length-<span class="number">1</span>);</span><br><span class="line">    <span class="built_in">console</span>.log(arr.join());</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">quick_sort_internal</span>(<span class="params">arr,lo,hi</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(lo &gt;= hi)&#123;</span><br><span class="line">       <span class="keyword">return</span> ;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">let</span> index = (<span class="function"><span class="keyword">function</span>(<span class="params">arr,lo,hi</span>)</span>&#123;</span><br><span class="line">        <span class="keyword">let</span> pivot = arr[lo];</span><br><span class="line">        <span class="keyword">while</span>(lo &lt; hi)&#123;</span><br><span class="line">            <span class="keyword">while</span>(arr[hi] &gt;= pivot &amp;&amp; lo &lt; hi )&#123;</span><br><span class="line">                hi--;</span><br><span class="line">            &#125;</span><br><span class="line">            arr[lo] = arr[hi]</span><br><span class="line">            <span class="keyword">while</span>(arr[lo] &lt;= pivot &amp;&amp; lo &lt; hi)&#123;</span><br><span class="line">                lo++;</span><br><span class="line">            &#125;</span><br><span class="line">            arr[hi] = arr[lo];</span><br><span class="line">        &#125;</span><br><span class="line">        arr[lo] = pivot;</span><br><span class="line">        <span class="keyword">return</span> lo;</span><br><span class="line">    &#125;)(arr,lo,hi)</span><br><span class="line">    quick_sort_internal(arr,lo,index-<span class="number">1</span>);</span><br><span class="line">    quick_sort_internal(arr,index+<span class="number">1</span>,hi);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">quick_sort(numbers)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//第二种方法。。。</span></span><br><span class="line"><span class="keyword">const</span> qsort = <span class="function"><span class="params">xs</span> =&gt;</span> xs.length===<span class="number">0</span>?xs: [</span><br><span class="line">    ...qsort(xs.filter(<span class="function"><span class="params">x</span>=&gt;</span>x&lt;xs[<span class="number">0</span>])),</span><br><span class="line">    ...xs.filter(<span class="function"><span class="params">x</span>=&gt;</span>x===xs[<span class="number">0</span>]),</span><br><span class="line">    ...qsort(xs.filter(<span class="function"><span class="params">x</span>=&gt;</span>x&gt;xs[<span class="number">0</span>]))</span><br><span class="line">]</span><br><span class="line">qsort([...numbers])</span><br></pre></td></tr></table></figure>
<p>Python:</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">numbers = [<span class="number">82</span>,<span class="number">37</span>,<span class="number">10</span>,<span class="number">69</span>,<span class="number">1</span>,<span class="number">92</span>,<span class="number">6</span>,<span class="number">13</span>,<span class="number">77</span>,<span class="number">33</span>,<span class="number">47</span>,<span class="number">12</span>,<span class="number">23</span>,<span class="number">82</span>,<span class="number">71</span>,<span class="number">57</span>,<span class="number">58</span>,<span class="number">51</span>,<span class="number">57</span>,<span class="number">75</span>];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">quick_sort</span>(<span class="params">numbers</span>):</span></span><br><span class="line">	quick_sort_internal(numbers,<span class="number">0</span>,<span class="built_in">len</span>(numbers)-<span class="number">1</span>)</span><br><span class="line">	print(numbers)</span><br><span class="line">    </span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">quick_sort_internal</span>(<span class="params">numbers,lo,hi</span>):</span></span><br><span class="line">    <span class="keyword">if</span> lo &gt;= hi :</span><br><span class="line">        <span class="keyword">return</span> </span><br><span class="line">    index = quick_sort_partition(numbers,lo,hi)</span><br><span class="line">    print(<span class="string">&#x27;index =&#x27;</span> + <span class="built_in">str</span>(index) )</span><br><span class="line">    quick_sort_internal(numbers,lo,index-<span class="number">1</span>)</span><br><span class="line">    quick_sort_internal(numbers,index+<span class="number">1</span>,hi)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">quick_sort_partition</span>(<span class="params">numbers,lo,hi</span>):</span></span><br><span class="line">    pivot = numbers[lo]</span><br><span class="line">    <span class="keyword">while</span> lo&lt;hi:</span><br><span class="line">        <span class="keyword">while</span> numbers[hi] &gt;= pivot <span class="keyword">and</span> lo &lt; hi :</span><br><span class="line">            hi=hi-<span class="number">1</span></span><br><span class="line">        numbers[lo]=numbers[hi]</span><br><span class="line">        <span class="keyword">while</span> numbers[lo] &lt;= pivot <span class="keyword">and</span> lo &lt; hi :</span><br><span class="line">            lo=lo+<span class="number">1</span></span><br><span class="line">        numbers[hi] = numbers[lo]</span><br><span class="line">    numbers[lo] = pivot</span><br><span class="line">    <span class="keyword">return</span> lo</span><br><span class="line"></span><br><span class="line">quick_sort(numbers[:])</span><br><span class="line"></span><br><span class="line"><span class="comment">## 这里也可以模仿上面的js方法写</span></span><br></pre></td></tr></table></figure>
<p>C++:</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> GET_LEN(array, len)                     \</span></span><br><span class="line">    &#123;                                           \</span><br><span class="line">        len = <span class="keyword">sizeof</span>(<span class="built_in">array</span>) / <span class="keyword">sizeof</span>(<span class="built_in">array</span>[<span class="number">0</span>]); \</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">quick_sort_partition</span><span class="params">(<span class="keyword">int</span> numbers[] ,<span class="keyword">int</span> lo,<span class="keyword">int</span> hi)</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> pivot = numbers[lo];</span><br><span class="line">    <span class="keyword">while</span>( lo &lt; hi)&#123;</span><br><span class="line">        <span class="keyword">while</span>( numbers[hi] &gt;= pivot &amp;&amp; lo &lt; hi)&#123;</span><br><span class="line">            hi--;</span><br><span class="line">        &#125;</span><br><span class="line">        numbers[lo] = numbers[hi];</span><br><span class="line">        <span class="keyword">while</span>( numbers[lo] &lt;= pivot &amp;&amp; lo &lt; hi)&#123;</span><br><span class="line">            lo++;</span><br><span class="line">        &#125;</span><br><span class="line">        numbers[hi] = numbers[lo];</span><br><span class="line">    &#125;</span><br><span class="line">    numbers[lo] = pivot ;</span><br><span class="line">    <span class="keyword">return</span> lo ;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">quick_sort_internal</span><span class="params">(<span class="keyword">int</span> numbers[],<span class="keyword">int</span> lo,<span class="keyword">int</span> hi)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(lo &gt;= hi)&#123;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">int</span> index = quick_sort_partition(numbers,lo,hi);</span><br><span class="line">    quick_sort_internal(numbers,lo,index<span class="number">-1</span>);</span><br><span class="line">    quick_sort_internal(numbers,index+<span class="number">1</span>,hi);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">quick_sort</span><span class="params">(<span class="keyword">int</span> numbers[],<span class="keyword">int</span> length)</span></span>&#123;</span><br><span class="line">    quick_sort_internal(numbers,<span class="number">0</span>,length<span class="number">-1</span>);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; length; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; numbers[i] &lt;&lt; <span class="string">&quot;,&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> numbers[] = &#123;<span class="number">82</span>,<span class="number">37</span>,<span class="number">10</span>,<span class="number">69</span>,<span class="number">1</span>,<span class="number">92</span>,<span class="number">6</span>,<span class="number">13</span>,<span class="number">77</span>,<span class="number">33</span>,<span class="number">47</span>,<span class="number">12</span>,<span class="number">23</span>,<span class="number">82</span>,<span class="number">71</span>,<span class="number">57</span>,<span class="number">58</span>,<span class="number">51</span>,<span class="number">57</span>,<span class="number">75</span>&#125;;</span><br><span class="line">    <span class="keyword">int</span> length;</span><br><span class="line">    GET_LEN(numbers, length);</span><br><span class="line">    quick_sort(numbers,length);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>


<h2 id="希尔排序"><a href="#希尔排序" class="headerlink" title="希尔排序"></a>希尔排序</h2><p>Java:</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure>
<p>JavaScript:</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure>
<p>Python</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure>
<p>C++:</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure>


<h2 id="归并排序"><a href="#归并排序" class="headerlink" title="归并排序"></a>归并排序</h2><p><a href="https://en.wikipedia.org/wiki/Merge_sort">归并排序(En)</a></p>
<p><a href="https://zh.wikipedia.org/wiki/%E5%BD%92%E5%B9%B6%E6%8E%92%E5%BA%8F">归并排序(CH)</a></p>
<p>Java:</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Main</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span>[] numbers = getIntArray();</span><br><span class="line">        quickSort(numbers);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">int</span>[] getIntArray() &#123;</span><br><span class="line">        Random random = <span class="keyword">new</span> Random();</span><br><span class="line">        <span class="keyword">int</span> length = <span class="number">20</span>;</span><br><span class="line">        <span class="keyword">int</span>[] numbers = <span class="keyword">new</span> <span class="keyword">int</span>[length];</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; length; i++) &#123;</span><br><span class="line">            numbers[i] = random.nextInt(<span class="number">100</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> numbers;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">printArray</span><span class="params">(<span class="keyword">int</span>[] arr)</span> </span>&#123;</span><br><span class="line">        IntStream.of(arr).forEach(x -&gt; System.out.print(<span class="string">&quot;,&quot;</span> + x));</span><br><span class="line">        System.out.println();</span><br><span class="line">    &#125;</span><br><span class="line">	</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">mergeSort</span><span class="params">(<span class="keyword">int</span>[] numbers)</span> </span>&#123;</span><br><span class="line">        mergeSortInternal(numbers, <span class="number">0</span>, numbers.length - <span class="number">1</span>);</span><br><span class="line">        printArray(numbers);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">mergeSortInternal</span><span class="params">(<span class="keyword">int</span>[] numbers, <span class="keyword">int</span> start, <span class="keyword">int</span> end)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (start &gt;= end) &#123;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">int</span> middle = (start + end) / <span class="number">2</span>;</span><br><span class="line">        mergeSortInternal(numbers, start, middle);</span><br><span class="line">        mergeSortInternal(numbers, middle+<span class="number">1</span>, end);</span><br><span class="line"><span class="comment">//        mergeLeftAndRight(numbers, start, end);</span></span><br><span class="line">        merge(numbers, start,middle, end);</span><br><span class="line">    &#125;</span><br><span class="line">	</span><br><span class="line">    <span class="comment">//正经写法。。</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">merge</span><span class="params">(<span class="keyword">int</span>[] numbers, <span class="keyword">int</span> left, <span class="keyword">int</span> middle, <span class="keyword">int</span> right)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> lp = left;</span><br><span class="line">        <span class="keyword">int</span> rp = middle + <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">int</span> tp = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">int</span>[] temp = <span class="keyword">new</span> <span class="keyword">int</span>[right - left + <span class="number">1</span>];</span><br><span class="line"></span><br><span class="line">        <span class="keyword">while</span> (lp &lt;= middle &amp;&amp; rp &lt;= right) &#123;</span><br><span class="line">            <span class="keyword">if</span> (numbers[lp] &lt;= numbers[rp]) &#123;</span><br><span class="line">                temp[tp++] = numbers[lp++];</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                temp[tp++] = numbers[rp++];</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">while</span> (lp &lt;= middle) &#123;</span><br><span class="line">            temp[tp++] = numbers[lp++];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">while</span> (rp &lt;= right) &#123;</span><br><span class="line">            temp[tp++] = numbers[rp++];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; temp.length; i++) &#123;</span><br><span class="line">            numbers[i + left] = temp[i];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//使用插入排序来合并左右数组，效率会损失</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">mergeLeftAndRight</span><span class="params">(<span class="keyword">int</span>[] numbers, <span class="keyword">int</span> start, <span class="keyword">int</span> end)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = start + <span class="number">1</span>; i &lt; end + <span class="number">1</span>; i++) &#123;</span><br><span class="line">            <span class="keyword">int</span> insertIndex = i;</span><br><span class="line">            <span class="keyword">int</span> temp = numbers[i];</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j = i; j &gt; start; j--) &#123;</span><br><span class="line">                <span class="keyword">if</span> (temp &lt; numbers[j - <span class="number">1</span>]) &#123;</span><br><span class="line">                    numbers[j] = numbers[j - <span class="number">1</span>];</span><br><span class="line">                    insertIndex = j - <span class="number">1</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            numbers[insertIndex] = temp;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>JavaScript:</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> numbers = [<span class="number">82</span>,<span class="number">37</span>,<span class="number">10</span>,<span class="number">69</span>,<span class="number">1</span>,<span class="number">92</span>,<span class="number">6</span>,<span class="number">13</span>,<span class="number">77</span>,<span class="number">33</span>,<span class="number">47</span>,<span class="number">12</span>,<span class="number">23</span>,<span class="number">82</span>,<span class="number">71</span>,<span class="number">57</span>,<span class="number">58</span>,<span class="number">51</span>,<span class="number">57</span>,<span class="number">75</span>];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">merge_sort</span>(<span class="params">numbers</span>)</span>&#123;</span><br><span class="line">    merge_sort_internal(numbers,<span class="number">0</span>,numbers.length-<span class="number">1</span>);</span><br><span class="line">    <span class="built_in">console</span>.log(numbers.join());</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">merge_sort_internal</span>(<span class="params">numbers,left,right</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(left &gt;= right)&#123;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">let</span> middle = <span class="built_in">Math</span>.floor((left+right)/<span class="number">2</span>);</span><br><span class="line">    merge_sort_internal(numbers,left,middle);</span><br><span class="line">    merge_sort_internal(numbers,middle+<span class="number">1</span>,right);</span><br><span class="line">    (<span class="function"><span class="keyword">function</span>(<span class="params">numbers,l,m,r</span>)</span>&#123;</span><br><span class="line">        <span class="keyword">let</span> lp = l ;</span><br><span class="line">        <span class="keyword">let</span> rp = m+<span class="number">1</span> ;</span><br><span class="line">        <span class="keyword">let</span> temp = [];</span><br><span class="line">        <span class="keyword">while</span> (lp &lt;= m &amp;&amp; rp &lt;= r) &#123;</span><br><span class="line">            <span class="keyword">if</span> (numbers[lp] &lt;= numbers[rp]) &#123;</span><br><span class="line">                temp.push(numbers[lp++]);</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                temp.push(numbers[rp++]);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">while</span> (lp &lt;= m) &#123;</span><br><span class="line">            temp.push(numbers[lp++]);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">while</span> (rp &lt;= r) &#123;</span><br><span class="line">            temp.push(numbers[rp++]);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; temp.length; i++) &#123;</span><br><span class="line">            numbers[i + l] = temp[i];</span><br><span class="line">        &#125; </span><br><span class="line">    &#125;)(numbers,left,middle,right);</span><br><span class="line">&#125;</span><br><span class="line">merge_sort(numbers)</span><br></pre></td></tr></table></figure>
<p>Python</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">numbers = [<span class="number">82</span>,<span class="number">37</span>,<span class="number">10</span>,<span class="number">69</span>,<span class="number">1</span>,<span class="number">92</span>,<span class="number">6</span>,<span class="number">13</span>,<span class="number">77</span>,<span class="number">33</span>,<span class="number">47</span>,<span class="number">12</span>,<span class="number">23</span>,<span class="number">82</span>,<span class="number">71</span>,<span class="number">57</span>,<span class="number">58</span>,<span class="number">51</span>,<span class="number">57</span>,<span class="number">75</span>];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">merge_sort</span>(<span class="params">numbers</span>):</span></span><br><span class="line">	merge_sort_internal(numbers,<span class="number">0</span>,<span class="built_in">len</span>(numbers)-<span class="number">1</span>)</span><br><span class="line">	print(numbers)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">merge_sort_internal</span>(<span class="params">nums,left,right</span>):</span></span><br><span class="line">    <span class="keyword">if</span> left&gt;=right :</span><br><span class="line">        <span class="keyword">return</span></span><br><span class="line">    middle = <span class="built_in">int</span>((left+right)/<span class="number">2</span>)</span><br><span class="line">    merge_sort_internal(nums,left,middle)</span><br><span class="line">    merge_sort_internal(nums,middle+<span class="number">1</span>,right)</span><br><span class="line">    merge_left_and_right(nums,left,middle,right)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">merge_left_and_right</span>(<span class="params">numbers,l,m,r</span>):</span></span><br><span class="line">    lp = l</span><br><span class="line">    rp = m+<span class="number">1</span></span><br><span class="line">    temp = []</span><br><span class="line">    <span class="keyword">while</span> lp &lt;=m <span class="keyword">and</span> rp &lt;=r:</span><br><span class="line">        <span class="keyword">if</span> numbers[lp] &lt;= numbers[rp] :</span><br><span class="line">            temp.append(numbers[lp]);</span><br><span class="line">            lp = lp+<span class="number">1</span></span><br><span class="line">        <span class="keyword">else</span> :</span><br><span class="line">            temp.append(numbers[rp])</span><br><span class="line">            rp = rp +<span class="number">1</span> </span><br><span class="line">    <span class="keyword">while</span> lp &lt;= m :</span><br><span class="line">        temp.append(numbers[lp])</span><br><span class="line">        lp = lp+<span class="number">1</span></span><br><span class="line">    <span class="keyword">while</span> rp &lt;= r :</span><br><span class="line">        temp.append(numbers[rp])</span><br><span class="line">        rp = rp+<span class="number">1</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(temp)) :</span><br><span class="line">        numbers[i + l] = temp[i]</span><br><span class="line"></span><br><span class="line">merge_sort(numbers[:])</span><br></pre></td></tr></table></figure>
<p>C++:</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> GET_LEN(array, len)                     \</span></span><br><span class="line">    &#123;                                           \</span><br><span class="line">        len = <span class="keyword">sizeof</span>(<span class="built_in">array</span>) / <span class="keyword">sizeof</span>(<span class="built_in">array</span>[<span class="number">0</span>]); \</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">merge_sort_merge</span><span class="params">(<span class="keyword">int</span> numbers[] ,<span class="keyword">int</span> left,<span class="keyword">int</span> middle,<span class="keyword">int</span> right)</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> lp = left;</span><br><span class="line">    <span class="keyword">int</span> rp = middle + <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">int</span> tp = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">int</span> * temp  = <span class="keyword">new</span> <span class="keyword">int</span>[right - left + <span class="number">1</span>];</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> (lp &lt;= middle &amp;&amp; rp &lt;= right) &#123;</span><br><span class="line">		temp[tp++] = numbers[lp] &lt;= numbers[rp] ? numbers[lp++]:numbers[rp++];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">while</span> (lp &lt;= middle) &#123;</span><br><span class="line">        temp[tp++] = numbers[lp++];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">while</span> (rp &lt;= right) &#123;</span><br><span class="line">        temp[tp++] = numbers[rp++];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; right - left + <span class="number">1</span>; i++) &#123;</span><br><span class="line">        numbers[i + left] = temp[i];</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">delete</span>[] temp;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">merge_sort_internal</span><span class="params">(<span class="keyword">int</span> numbers[],<span class="keyword">int</span> left,<span class="keyword">int</span> right)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(left &gt;= right)&#123;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">int</span> middle = (left+right)/<span class="number">2</span>;</span><br><span class="line">    merge_sort_internal(numbers,left,middle);</span><br><span class="line">    merge_sort_internal(numbers,middle+<span class="number">1</span>,right);</span><br><span class="line">    merge_sort_merge(numbers,left,middle,right);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">merge_sort</span><span class="params">(<span class="keyword">int</span> numbers[],<span class="keyword">int</span> length)</span></span>&#123;</span><br><span class="line">    merge_sort_internal(numbers,<span class="number">0</span>,length<span class="number">-1</span>);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; length; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; numbers[i] &lt;&lt; <span class="string">&quot;,&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> numbers[] = &#123;<span class="number">82</span>,<span class="number">37</span>,<span class="number">10</span>,<span class="number">69</span>,<span class="number">1</span>,<span class="number">92</span>,<span class="number">6</span>,<span class="number">13</span>,<span class="number">77</span>,<span class="number">33</span>,<span class="number">47</span>,<span class="number">12</span>,<span class="number">23</span>,<span class="number">82</span>,<span class="number">71</span>,<span class="number">57</span>,<span class="number">58</span>,<span class="number">51</span>,<span class="number">57</span>,<span class="number">75</span>&#125;;</span><br><span class="line">    <span class="keyword">int</span> length;</span><br><span class="line">    GET_LEN(numbers, length);</span><br><span class="line">    merge_sort(numbers,length);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>


<h2 id="堆排序"><a href="#堆排序" class="headerlink" title="堆排序"></a>堆排序</h2><p><a href="https://en.wikipedia.org/wiki/Heapsort">堆排序(En)</a></p>
<p><a href="https://zh.wikipedia.org/wiki/%E5%A0%86%E6%8E%92%E5%BA%8F">堆排序(CH)</a></p>
<p>堆分为大根堆和小根堆。</p>
<p>堆排序则是分为几个步骤：</p>
<ol>
<li><p>建堆</p>
<p>建堆有两种方式，一种是对数据从0开始执行插入操作，每次插入后调整。</p>
<p>一种是直接从 len/2 处向0处开始调整，大多数排序都是以这种方式建堆。</p>
</li>
<li><p>交换根节点和最末节点，然后对len-1的数据重新建堆，用大根堆的时候根节点最大，此时此最大值会在最末节点位置处。</p>
</li>
<li><p>重复第二步，直到建堆的数据数量等于1。</p>
</li>
</ol>
<p>Java:</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Main</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span>[] numbers = getIntArray();</span><br><span class="line">        heapSort(numbers);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">int</span>[] getIntArray() &#123;</span><br><span class="line">        Random random = <span class="keyword">new</span> Random();</span><br><span class="line">        <span class="keyword">int</span> length = <span class="number">20</span>;</span><br><span class="line">        <span class="keyword">int</span>[] numbers = <span class="keyword">new</span> <span class="keyword">int</span>[length];</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; length; i++) &#123;</span><br><span class="line">            numbers[i] = random.nextInt(<span class="number">100</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> numbers;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">printArray</span><span class="params">(<span class="keyword">int</span>[] arr)</span> </span>&#123;</span><br><span class="line">        IntStream.of(arr).forEach(x -&gt; System.out.print(<span class="string">&quot;,&quot;</span> + x));</span><br><span class="line">        System.out.println();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">swap</span><span class="params">(<span class="keyword">int</span>[] data, <span class="keyword">int</span> i, <span class="keyword">int</span> j)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (i == j) &#123;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        data[i] = data[i] + data[j];</span><br><span class="line">        data[j] = data[i] - data[j];</span><br><span class="line">        data[i] = data[i] - data[j];</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">     <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">heapSort</span><span class="params">(<span class="keyword">int</span>[] arr)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> end = arr.length - <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">do</span> &#123;</span><br><span class="line">            buildMaxHeap(arr, end);</span><br><span class="line">            swap(arr, <span class="number">0</span>, end);</span><br><span class="line">            end--;</span><br><span class="line">        &#125; <span class="keyword">while</span> (end &gt; <span class="number">0</span>);</span><br><span class="line">        printArray(arr);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">buildMaxHeap</span><span class="params">(<span class="keyword">int</span>[] arr, <span class="keyword">int</span> end)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = end / <span class="number">2</span>; i &gt;= <span class="number">0</span>; i--) &#123;</span><br><span class="line">            HeapAdjust(arr, end, i);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">HeapAdjust</span><span class="params">(<span class="keyword">int</span>[] arr, <span class="keyword">int</span> end, <span class="keyword">int</span> adjustNode)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> left = <span class="number">2</span> * adjustNode + <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">int</span> right = <span class="number">2</span> * adjustNode + <span class="number">2</span>;</span><br><span class="line">        <span class="keyword">int</span> maxPosition = adjustNode;</span><br><span class="line">        <span class="keyword">if</span> (left &gt; end) &#123;</span><br><span class="line">            <span class="comment">//没有子节点</span></span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (right &gt; end) &#123;</span><br><span class="line">            <span class="comment">//只有一个左子节点</span></span><br><span class="line">            <span class="keyword">if</span> (arr[left] &gt; arr[adjustNode]) &#123;</span><br><span class="line">                swap(arr, left, adjustNode);</span><br><span class="line">                maxPosition = left;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">int</span> bigger = arr[left] &lt; arr[right] ? right : left;</span><br><span class="line">            <span class="keyword">if</span> (arr[adjustNode] &lt; arr[bigger]) &#123;</span><br><span class="line">                swap(arr, adjustNode, bigger);</span><br><span class="line">                maxPosition = bigger;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (maxPosition != adjustNode) &#123;  <span class="comment">//说明这个节点没有调整，最终一定会到叶子节点或者无须调整而停止递归</span></span><br><span class="line">            HeapAdjust(arr, end, maxPosition);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>JavaScript:</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> numbers = [<span class="number">82</span>,<span class="number">37</span>,<span class="number">10</span>,<span class="number">69</span>,<span class="number">1</span>,<span class="number">92</span>,<span class="number">6</span>,<span class="number">13</span>,<span class="number">77</span>,<span class="number">33</span>,<span class="number">47</span>,<span class="number">12</span>,<span class="number">23</span>,<span class="number">82</span>,<span class="number">71</span>,<span class="number">57</span>,<span class="number">58</span>,<span class="number">51</span>,<span class="number">57</span>,<span class="number">75</span>];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">heap_sort</span>(<span class="params">numbers</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">let</span> end = numbers.length - <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">do</span> &#123;</span><br><span class="line">        build_max_heap(numbers, end);</span><br><span class="line">        [numbers[<span class="number">0</span>],numbers[end]] =  [numbers[end],numbers[<span class="number">0</span>]] ;</span><br><span class="line">        end--;</span><br><span class="line">    &#125; <span class="keyword">while</span> (end &gt; <span class="number">0</span>);</span><br><span class="line">    <span class="built_in">console</span>.log(numbers.join());</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">build_max_heap</span>(<span class="params">arr,end</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="built_in">Math</span>.floor(end / <span class="number">2</span>); i &gt;= <span class="number">0</span>; i--) &#123;</span><br><span class="line">        heap_adjust(arr, end, i);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">heap_adjust</span>(<span class="params">arr, end, adjust_node</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">let</span> left = <span class="number">2</span> * adjust_node + <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">let</span> right = <span class="number">2</span> * adjust_node + <span class="number">2</span>;</span><br><span class="line">    <span class="keyword">let</span> maxPosition = adjust_node;</span><br><span class="line">    <span class="keyword">if</span> (left &gt; end) &#123;</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (right &gt; end) &#123;</span><br><span class="line">        <span class="keyword">if</span> (arr[left] &gt; arr[adjust_node]) &#123;</span><br><span class="line">            [arr[left],arr[adjust_node]] =  [arr[adjust_node],arr[left]] ;</span><br><span class="line">            maxPosition = left;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">let</span> bigger = arr[left] &lt; arr[right]?right:left;</span><br><span class="line">        <span class="keyword">if</span> (arr[adjust_node] &lt; arr[bigger]) &#123;</span><br><span class="line">            [arr[bigger],arr[adjust_node]] =  [arr[adjust_node],arr[bigger]] ;</span><br><span class="line">            maxPosition = bigger;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (maxPosition != adjust_node) &#123;  </span><br><span class="line">        heap_adjust(arr, end, maxPosition);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">heap_sort([...numbers])</span><br></pre></td></tr></table></figure>
<p>Python</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">numbers = [<span class="number">82</span>,<span class="number">37</span>,<span class="number">10</span>,<span class="number">69</span>,<span class="number">1</span>,<span class="number">92</span>,<span class="number">6</span>,<span class="number">13</span>,<span class="number">77</span>,<span class="number">33</span>,<span class="number">47</span>,<span class="number">12</span>,<span class="number">23</span>,<span class="number">82</span>,<span class="number">71</span>,<span class="number">57</span>,<span class="number">58</span>,<span class="number">51</span>,<span class="number">57</span>,<span class="number">75</span>]</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">heap_sort</span>(<span class="params">numbers</span>):</span></span><br><span class="line">    end = <span class="built_in">len</span>(numbers) - <span class="number">1</span></span><br><span class="line">    <span class="keyword">while</span> <span class="literal">True</span> :</span><br><span class="line">        build_max_heap(numbers, end)</span><br><span class="line">        numbers[<span class="number">0</span>],numbers[end] =  numbers[end],numbers[<span class="number">0</span>] </span><br><span class="line">        end = end -<span class="number">1</span> </span><br><span class="line">        <span class="keyword">if</span> end &lt; <span class="number">0</span> :</span><br><span class="line">            <span class="keyword">break</span> </span><br><span class="line">    print(numbers)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">build_max_heap</span>(<span class="params">arr,end</span>) :</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">int</span>(end / <span class="number">2</span>),-<span class="number">1</span>,-<span class="number">1</span>):</span><br><span class="line">        heap_adjust(arr, end, i)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">heap_adjust</span>(<span class="params">arr, end, adjust_node</span>) :</span></span><br><span class="line">    left = <span class="number">2</span> * adjust_node + <span class="number">1</span></span><br><span class="line">    right = <span class="number">2</span> * adjust_node + <span class="number">2</span></span><br><span class="line">    maxPosition = adjust_node</span><br><span class="line">    <span class="keyword">if</span> left &gt; end :</span><br><span class="line">        <span class="keyword">pass</span></span><br><span class="line">    <span class="keyword">elif</span> right &gt; end :</span><br><span class="line">        <span class="keyword">if</span> arr[left] &gt; arr[adjust_node] :</span><br><span class="line">            arr[left],arr[adjust_node] =  arr[adjust_node],arr[left] </span><br><span class="line">            maxPosition = left</span><br><span class="line">    <span class="keyword">else</span> :</span><br><span class="line">        bigger = right <span class="keyword">if</span> arr[left] &lt; arr[right] <span class="keyword">else</span> left;</span><br><span class="line">        <span class="keyword">if</span> arr[adjust_node] &lt; arr[bigger] :</span><br><span class="line">            arr[bigger],arr[adjust_node] = arr[adjust_node],arr[bigger]</span><br><span class="line">            maxPosition = bigger</span><br><span class="line">    <span class="keyword">if</span> maxPosition != adjust_node :  </span><br><span class="line">        heap_adjust(arr, end, maxPosition)</span><br><span class="line"></span><br><span class="line">heap_sort(numbers[:])</span><br></pre></td></tr></table></figure>
<p>C++:</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> GET_LEN(array, len)                     \</span></span><br><span class="line">    &#123;                                           \</span><br><span class="line">        len = <span class="keyword">sizeof</span>(<span class="built_in">array</span>) / <span class="keyword">sizeof</span>(<span class="built_in">array</span>[<span class="number">0</span>]); \</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">swap</span><span class="params">(<span class="keyword">int</span> &amp;a ,<span class="keyword">int</span> &amp;b)</span></span>&#123;</span><br><span class="line">    a = a^b ;</span><br><span class="line">    b = a^b ;</span><br><span class="line">    a = a^b ;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">heap_adjust</span><span class="params">(<span class="keyword">int</span> arr[] ,<span class="keyword">int</span> end,<span class="keyword">int</span> adjust_node)</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> left = <span class="number">2</span> * adjust_node + <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">int</span> right = <span class="number">2</span> * adjust_node + <span class="number">2</span>;</span><br><span class="line">    <span class="keyword">int</span> maxPosition = adjust_node;</span><br><span class="line">    <span class="keyword">if</span> (left &gt; end) &#123;</span><br><span class="line">        <span class="comment">//没有子节点</span></span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (right &gt; end) &#123;</span><br><span class="line">        <span class="comment">//只有一个左子节点</span></span><br><span class="line">        <span class="keyword">if</span> (arr[left] &gt; arr[adjust_node]) &#123;</span><br><span class="line">            swap(arr[left], arr[adjust_node]);</span><br><span class="line">            maxPosition = left;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">int</span> bigger = arr[left] &lt; arr[right] ? right : left;</span><br><span class="line">        <span class="keyword">if</span> (arr[adjust_node] &lt; arr[bigger]) &#123;</span><br><span class="line">            swap(arr[adjust_node], arr[bigger]);</span><br><span class="line">            maxPosition = bigger;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (maxPosition != adjust_node) &#123;  </span><br><span class="line">        heap_adjust(arr, end, maxPosition);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">build_max_heap</span><span class="params">(<span class="keyword">int</span> numbers[],<span class="keyword">int</span> end)</span></span>&#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = end/<span class="number">2</span> ; i&gt;=<span class="number">0</span>; i--)&#123;</span><br><span class="line">        heap_adjust(numbers,end,i);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">heap_sort</span><span class="params">(<span class="keyword">int</span> numbers[],<span class="keyword">int</span> length)</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> end = length<span class="number">-1</span>;</span><br><span class="line">    <span class="keyword">do</span>&#123;</span><br><span class="line">        build_max_heap(numbers,end);</span><br><span class="line">        swap(numbers[<span class="number">0</span>],numbers[end]);</span><br><span class="line">        end--;</span><br><span class="line">    &#125;<span class="keyword">while</span>(end&gt;<span class="number">0</span>);</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; length; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; numbers[i] &lt;&lt; <span class="string">&quot;,&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> numbers[] = &#123;<span class="number">82</span>,<span class="number">37</span>,<span class="number">10</span>,<span class="number">69</span>,<span class="number">1</span>,<span class="number">92</span>,<span class="number">6</span>,<span class="number">13</span>,<span class="number">77</span>,<span class="number">33</span>,<span class="number">47</span>,<span class="number">12</span>,<span class="number">23</span>,<span class="number">82</span>,<span class="number">71</span>,<span class="number">57</span>,<span class="number">58</span>,<span class="number">51</span>,<span class="number">57</span>,<span class="number">75</span>&#125;;</span><br><span class="line">    <span class="keyword">int</span> length;</span><br><span class="line">    GET_LEN(numbers, length);</span><br><span class="line">    heap_sort(numbers,length);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>写的时候发现好多基本的语法都全忘光了。。<br>c++的交换，发现用异或来交换可能会导致问题，<br>比如我想象的过程是</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">arr[<span class="number">0</span>] = <span class="number">1</span> ;</span><br><span class="line">swap(arr[<span class="number">0</span>],arr[<span class="number">0</span>]) ;</span><br><span class="line"></span><br><span class="line">a = <span class="number">1</span>, b=<span class="number">1</span></span><br><span class="line"></span><br><span class="line">a = a ^ b = <span class="number">0</span></span><br><span class="line">b = a ^ b = <span class="number">0</span> ^ <span class="number">1</span> = <span class="number">1</span></span><br><span class="line">a = a ^ b = <span class="number">0</span> ^ <span class="number">1</span> = <span class="number">1</span></span><br></pre></td></tr></table></figure>
<p>结果实际执行的是</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">a = <span class="number">1</span>, b=a</span><br><span class="line"></span><br><span class="line">a = a ^ a = <span class="number">0</span></span><br><span class="line">b = a ^ a = <span class="number">0</span> </span><br><span class="line">a = a ^ a = <span class="number">0</span> </span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>另外js和python的版本基本都是直接复制的java的逻辑，没有用上它们特色的函数式编程等方式，比如js版本的快排，虽然它要了更多空间，但是js的那种实现明显更‘地道’.</p>
]]></content>
      <categories>
        <category>数据结构和算法</category>
      </categories>
      <tags>
        <tag>面试</tag>
      </tags>
  </entry>
  <entry>
    <title>翻译--RecyclerView Animations</title>
    <url>/2018/09/12/%E7%BF%BB%E8%AF%91-RecyclerView-Animations/</url>
    <content><![CDATA[<p><a href="https://www.birbit.com/recyclerview-animations-part-1-how-animations-work">原文</a>是 RecyclerView 的作者写的，解释了这个控件里面的一些概念。这里翻译一下(注意这是旧的源码，例如新的版本中layout分成了三步而不是两步，大致是把这里提到的prelayout拆分成了step1和step2)</p>
<a id="more"></a>

<h2 id="第一部分"><a href="#第一部分" class="headerlink" title="第一部分"></a>第一部分</h2><p>ListView 是Android里面最受欢迎的控件之一，即使它有许多的功能和特性，但是使用起来非常复杂并且很难自定义。随着UI的进化和手机的发展，这个缺点开始越来越明显。通过实现一些简单的约定，我们可以控制很多行为：</p>
<ol>
<li>items是怎么布局的</li>
<li>动画</li>
<li>item 装饰</li>
<li>回收策略<br>…</li>
</ol>
<p>当然，这种灵活性的代价也伴随着更复杂的类结构，同时，也有更多的东西需要学习。</p>
<p>在这片文章里面，我将会深入RecyclerView的内部细节，特别是动画是怎么运作的。</p>
<p>在 Honeycomb 版本的时候，Android Framework 引入了 LayoutTransition 动画，它可以非常容易的把 ViewGroup 内部的的变化通过动画表现出来。 它工作的方式是在ViewGroup布局变化的前后分别取一个快照，然后创造一个动画集合来表示这两种状态的变化过程。这种方式和RecycleView对Adapter的变化所执行的动画的原理是类似的。</p>
<p><img src="/2018/09/12/%E7%BF%BB%E8%AF%91-RecyclerView-Animations/trans_man_default.gif" alt="LayoutTransirion example"></p>
<p>不幸的是，LayoutTransitions动画和list有点不兼容，主要是list里面的子条目和ViewGroup里面的子view不一样。用对views使用的这一套动画机制去对items使用时，理解这个区别非常重要。</p>
<p>在正常的ViewGroup中，如果一个view是刚被添加到视图树的，那么它就可以被当作新添加的view然后执行相应的动画(比如淡入效果).对于视图集合来说，情况有点不一样。 比如，一个子条目的view变的可见可能是因为它前面的某个子条目被从adapter中移出了。在这种情况下，为新的item 执行一个淡入动画可能会导致一些误解，因为它本来就是在list中的，虽然这个view是刚刚在屏幕中可见。RecyclerView知道这个item是不是新添加的，但是如果item不是新添加的，它就不知道这个item之前在哪里(注:意思是没有缓存view的引用？)。同样的情况也发生在view消失的时候，RecyclerView不知道这个view会到那里去如果它没有被从Adapter中移出的话。</p>
<p><img src="/2018/09/12/%E7%BF%BB%E8%AF%91-RecyclerView-Animations/trans_man_default.gif" alt="LayoutTransition failure for a list"></p>
<p>为了解决这个问题，RecyclerView 可以向 LayoutManager 请求新出现的view 的之前的位置。虽然这样做可行，但这会需要在LayoutManager中存一些记录，并且对于一些更复杂的LayoutManager来说这些记录计算起来可能会很麻烦。</p>
<p>RecyclerView用来处理item显示和消失动画(指对list中过去和现在一直都存在的items所对应的views执行出现和消失的动画)的方法是通过layoutManager来执行预布局逻辑。一方面来说，RecyclerView想要在这次变化之前知道这些view被布局在哪里，另一方面，如果LayoutManager把当前不可见的view布局出来，RecyclerView想要知道在这次变化之后这些view将会被布局到哪里。</p>
<p>为了使 LayoutManager 更容易的提供这些信息，当adapter有应该执行动画的数据变化的时候，RecyclerView 通过两个步骤来处理。这两个步骤是：</p>
<ol>
<li>在第一步（preLayout阶段），RecyclerView 要求 LayoutManager依据额外的信息来局部之前的状态，对于上面的例子来说，这个意思是告诉它 “重新布局这些items,顺便说下，C已经被移除了”.LayoutManager 则正常运行布局过程，但是它知道C将会被移除掉，所以它会用view把C空出来的过程填充起来。这个过程中比较有趣的部分是，RecyclerView依然表现的好像C仍然在Adapter中一样，如果这时候LayoutManager请求在位置2的view,RecyclerView会返回C的view给它(getViewForPosition(2) == View(‘C’))，如果LayoutManager请求位置4的view，RecyclerView会返回E对应的view给它（虽然现在Adapter中D是第四个(注:这里好像有错？C移除后D是第三个了))，返回的view的LayoutParams有个isItemRemoved方法，LayoutManager可以用它来检查这个view是不是对应一个马上要消失的item。</li>
<li>在第二步（postLayout阶段）,RecyclerView 会请求 LayoutManager 重新布局它的子条目。这一次“C”已经不在Adapter中了，getViewForPosition(2)会返回“D”，getViewForPosition(4)会返回“F”，记住，这时候子条目C已经从Adapter中移除了，但是因为RecyclerView仍然持有C对应的View的引用，所以它可以表现的仿佛C依然在一样。换句话说，RecyclerView也会对LayoutManager做记录</li>
</ol>
<p>每次LayoutManager调用onLayoutChildren的时候，它都会先暂时的detach掉所有的view然后再从scratch中取出来重新布局。没有变化的view会被scrap缓存中返回回来，它们的测量结果依然有效，所以对这种view的重新布局会相对简单。</p>
<p><img src="/2018/09/12/%E7%BF%BB%E8%AF%91-RecyclerView-Animations/pre-layout.jpg" alt="pre-layout"><br>LinearLayoutManager preLayout的结果: (红色部分表示对用户可见的区域)* </p>
<p><img src="/2018/09/12/%E7%BF%BB%E8%AF%91-RecyclerView-Animations/post-layout.jpg" alt="post-layout"><br>LinearLayoutManager postlayout的结果</p>
<p>在这两个阶段过后，RecyclerView知道了View从哪里来，所以可以执行正确的动画。</p>
<p><img src="/2018/09/12/%E7%BF%BB%E8%AF%91-RecyclerView-Animations/predictive_animations.gif" alt="Predictive Animation"></p>
<p>你可能会问，C对应的View都没有被LayoutManager布局了，它怎么还是可见的？</p>
<p>需要明确说明的是，在pre-layout阶段LayoutManager依然布局C的原因是它看起来仍然在Adapter，在post-layout阶段LayoutManager不布局的原因则是C的确不在Adapter里面了。对于LayoutManger来说C不再是它的子view了，但是对RecyclerView来说却不是这样。当一个view被从LayoutManager中移除的时候，如果 ItemAnimator想要它执行动画，RecyclerView会仍然把它作为一个子view(这样子动画才能够正常执行)。更多的细节在第二部分会描述。</p>
<h3 id="消失子条目的处理"><a href="#消失子条目的处理" class="headerlink" title="消失子条目的处理"></a>消失子条目的处理</h3><p>在两个阶段执行以后，RecyclerView 可以正确的执行添加动画了，但现在还有个问题就是消失动画。考虑一下下面的情况，当一个新的item被添加到list中，会导致其他的一些子条目被挤出可见区域，动画过程如下：</p>
<p><img src="/2018/09/12/%E7%BF%BB%E8%AF%91-RecyclerView-Animations/layout_transition_add.gif" alt="Predictive Animation"></p>
<p>当X被添加到A之后的时候，会导致F被挤出屏幕外，因为LayoutManager不会布局F，所以LayoutTransition认为它被UI移除了然后执行一个淡出动画，实际上，F仍然在adapter中但是被推出了可见区域而已。</p>
<p>为了解决这个问题，RecyclerView为Layoutmanager提供了一些额外的api来获取这些信息。在postlayout阶段的末尾，LayourManager可以调用getScrapList来获取出于这种情况下的view列表（没有被LayoutManager布局出来但是仍然在adapter中),然后它仍然会布局这些view,就好像RecyclerView很大可以容纳他们一样。</p>
<p>LinearLayoutManager postLayout的结果: (红色部分表示对用户可见的区域)*<br><img src="/2018/09/12/%E7%BF%BB%E8%AF%91-RecyclerView-Animations/add_post_layout_with_frame.png" alt="Predictive Animation"></p>
<p>一个重要的细节是，由于这些view在动画结束后就没必要存在了，LayoutManager会调用addDisappearingView而不是addView。这会告诉RecyclerView，这个view应该在动画结束后移除掉。这个view会被RecyclerView添加到hidden views，因此它会在这个方法调用结束后马上从LayoutManager的子view列表中移除掉。通过这种方式，LayoutManager可以清除掉它。</p>
<p><img src="/2018/09/12/%E7%BF%BB%E8%AF%91-RecyclerView-Animations/predictive_add.gif" alt="Predictive Animation"></p>
<p>刚开始的时候，你可能认为 LayoutManager 可以计算出 View 从哪里来或者要去哪里，这样子就不需要两个layout步骤来计算了。不幸的是，在同一个步骤中，如果adapter的多种类型发生变化，会有很多边界情况发生。对于一个更复杂的LayoutManager（比如StaggeredGridLayout)来说，计算一个Item放在哪个位置不是一件容易的事情，通过两步layout的方式可以为LayoutManager减轻很多压力并且能够很容易的支持合适的动画而不用花太多力气。</p>
<p>目前位置，我已经提到了RecyclerView中预处理动画的原理的主要内容，但对于LayoutManager来说仍然有很多事情要做。你可以在第二部分了解到背后仍然需要做的事情。</p>
<h2 id="第二部分"><a href="#第二部分" class="headerlink" title="第二部分"></a>第二部分</h2><ol>
<li><p>RecyclerView 即使在一些child 被LayoutManager移除掉的时候依然保持它们的attached状态，具体的过程是什么？这样不会破坏RecyclerView和 LayoutManager 之间的状态吗？<br> 是的，在某种程度上的确有点这个意思，但是：</p>
<p> RecyclerView 的确保留了它们作为ViewGroup的子view,但是把它们都对LayoutManager隐藏了，每次LayoutManager调用方法获取它们的children的时候，RecyclerView会把隐藏的view也考虑在内（是指考虑屏蔽）。让我们看一下part 1 中 C被移出adapter的例子：</p>
<p> <img src="/2018/09/12/%E7%BF%BB%E8%AF%91-RecyclerView-Animations/predictive_animations.gif" alt="Predictive Animation"></p>
<p> 在这里C淡出了，如果LayoutManager调用getChildCount(),RecyclerView会返回6虽然它有7个children,如果LayoutManager调用getChildAt(int),Recycler会进行合适的偏移来跳过C（或者任何隐藏的children）。如果LayoutManager调用addView(view,position),RecyclerView也会在ViewGroup调用addView之前进行适当的偏移。</p>
<p> 当动画结束的时候，RecyclerView会移出这个View然后回收它</p>
<p> 更多的细节你可以看ChildHelper这个内部类的实现</p>
</li>
<li><p>在Pre-layout阶段，RecyclerView对item的位置是怎么处理的？这时候item在Adapter中的位置不一样。<br> 这得益于adapter新增的特定事件的通知，当Adapter派发notify xx 事件的时候，RecyclerView会记录它们并且为这个变化请求一次布局，在下一个布局阶段之前到来的事件都会在一起执行。</p>
<p> 当onLayout被系统调用的时候，RecyclerView执行以下步骤：</p>
<ol>
<li><p>对这些事件重新排序，把move事件放到事件list的末尾。移动move事件到结尾仅仅是一个简化步骤，因此这里不打算讨论它的细节。你可以在OpReorderer类中找到感兴趣的细节。 </p>
</li>
<li><p>按顺序一个一个处理事件，并且更新已经存在的ViewHolder的位置。如果一个ViewHolder被移除掉，它也会被标记为移除状态。当这么做的时候，RecyclerView也会决定adapter数据的变化是不是要在preLayout步骤之前或者之后分发给LayoutManager,这个过程如下：</p>
<ul>
<li>如果是一个add操作，它会被延期执行因为item不应该在preLayout阶段存在。</li>
<li>如果是一个update或者remove操作并且这个操作会影响到已经存在的ViewHolder，这个操作会被推迟执行。如果这个操作不会影响到已经存在的ViewHolder,它就会被分发到LayoutManager，这是因为RecyclerView不能复现这个item之前的状态（它没有代表这个item之前的状态的ViewHolder）</li>
<li>如果是一个move操作，它会被延期执行因为RecyclerView可以在prelayout阶段弄一个假的位置。比如，如果把位置3的item移动到位置5，在prelayout阶段如果位置3的view被请求的话，RecyclerView返回位置5的view</li>
<li>RecyclerView会在必要的时候重写这些操作。比如，一个更新或者删除操作影响到了一些ViewHolder,RecyclerView会拆分这些操作。如果一个操作应该被分发给LayoutManager但是一个延迟的操作会影响它，RecyclerView会重排序这些操作使它们依然是一致的。</li>
</ul>
</li>
<li><p>比如说，如果有一个在位置3添加1的操作，这个操作被延迟了，紧接着有一个不能被延迟的删除位置5的1的操作，RecyclerView会把删除位置4的1分发给LayoutManager，这么做是因为Adapter在添加1到位置3之后执行删除位置5的1并且通知它。因此RecyclerView没有告诉layoutManager关于添加1到位置3的事情，它重写了remove操作来保证一致。</p>
<p>这种做法使得对于layoutManager来说追踪一个item会很容易。adapter和layoutManager之间的抽象关系使得这一切称为可能，因此ReclcyclerView不需要把Adapter的引用传给layoutManager,相反的，RecyclerView提供了一些通过State和Recycler类来接触Adapter的方法。</p>
<p>ViewHolders也有它们自己的旧位置，prelayout位置和最终adpater位置。当viewHolder.getPosition被调用的时候，它们会返回prelayout位置或者最终adapter位置，这取决于当时处在layout的哪个状态（pre 还是post).LayoutManager不需要知道这些因为它总是保持和之前的分发给它的事件保持一致。</p>
</li>
<li><p>在Adapter的更新处理完后，RecyclerView保存已经存在的View的位置和大小信息并在之后把它们用于动画。</p>
</li>
<li><p>RecyclerView在preLayout阶段会调用LayoutManager.onLayoutChildren，在上一段中提到过，layoutmanager会执行它的正常layout逻辑，它要做的就是为更多的比如正在删除或者变化的item(isItemRemoved,isItemChanged)进行布局，删除的或者变化的item依然出现在Adapter提供给LayoutManager的api中。这种情况下，layoutManager仅仅是把它们当作普通的view来处理</p>
</li>
<li><p>在pre-layout结束后，RecyclerView再次记录这些view的位置信息然后把剩下的Adapter 更新分发给LayoutManager.</p>
</li>
<li><p>RecyclerView 再次调用layoutManager的 onLayout（postLayout阶段），这一次，在postlayout结束后，所有的item的位置都会和adapter中的数据一致，layoutManager再次执行正常的布局逻辑</p>
</li>
<li><p>postLayout结束后，RecycerView再次检查view的位置信息，然后决定哪些item是add,remove,changed,moved.它会隐藏掉remove的view,并且把没有添加到LayoutManager的view添加到RecyclerView（因为要执行动画）.</p>
</li>
<li><p>要执行动画的items会被传给ItemAnimator来开始动画效果。动画结束后，Item Animator调用一个回调告诉RecyclerView移除和回收不再需要的view</p>
</li>
</ol>
</li>
</ol>
<ol start="3">
<li><p>如果LayoutManager 在内部数据结构中使用item 的位置信息会发生什么？ </p>
<p> 因为RecyclerView会重写adapter的变化，layoutManager要做的就是当一个adapter数据变化的回调到来的时候更新它自己的记录。RecyclerView保证这些更新会在合适的时机以合适的顺序调用。</p>
<p> 在layout的任何时间点，如果layoutManager想要获取Adapter的一些额外数据，它可以调用Recycler.convertPreLayoutPositionToPostLayout来获取item在adapter中的位置。比如，GridLayoutManager就使用了这个接口来获取item的信息。</p>
</li>
<li><p>notifyDataSetChanged 被调用的时候会发生什么?预处理动画会执行吗？</p>
<p> 不会，这是为什么notifyDataSetChanged应该是你最后才考虑调用的方法。当notifyDataSetChanged调用的时候，RecyclerView无法知道items移动到哪里去了因此它没法正确的模拟getViewForPosition的调用。此时它仅仅是执行一个普通布局容器动画将会做的事情</p>
</li>
</ol>
<h2 id="第三部分-这里是我自己加的"><a href="#第三部分-这里是我自己加的" class="headerlink" title="第三部分( 这里是我自己加的 )"></a>第三部分( 这里是我自己加的 )</h2><ol>
<li><p>为什么要执行多次layout ?<br> 为了正确的执行动画，所以必须知道条目的信息，包括数据改变之前和之后的，主要是记录position对应的holder和 RecyclerView.State，对于默认的实现DefaultAnimation()来说，主要是用到了top和left，translationX等，可见SimpleAnimation类的animateChange()方法，对于之前的，为什么不直接拿当前的信息呢？只能猜测是为了要recyclerview最初的状态，当前状态可能是用户交互过的，view的信息可能已经变化了，在step1中完成 ，对于之后的，就是拿新数据layout更新一次可以拿到，在step2中完成。</p>
</li>
<li><p>notifyItemXXX 和 notifyDataSetChanged 的区别？<br> 主要区别还是在于执行动画，对于notifyDataSetChanged，一般来说不执行动画(Recyclerview的dispatchLayoutStep1中做的判断），而对于 notifyItemXXX ，则根据 item变化的类型决定是不是要执行动画，此时RecyclerView其实也并不知道data数据集哪里变化了，需要开发者主动去告诉它，哪个item insert,remove等等，如果你在data list尾部插入数据，然后notifyItemInsert(0),这时候数据也会错乱，RecyclerView会误认为data list的0位置是新插入的数据，然后生成位置0对应的view,插入进去。。</p>
</li>
</ol>
]]></content>
      <categories>
        <category>android_app</category>
      </categories>
      <tags>
        <tag>列表控件</tag>
      </tags>
  </entry>
  <entry>
    <title>Android SystemUI的相关类</title>
    <url>/2018/08/26/Android-SystemUI%E7%9A%84%E7%9B%B8%E5%85%B3%E7%B1%BB/</url>
    <content><![CDATA[<p>在Android系统中SystemUI是以应用的形式运行在Android系统当中，即编译SystemUI模块会生产APK文件，源代码路径在frameworks/base/packages/SystemUI/，安装路径system/priv-app/-SystemUI。它和普通apk不同的是，它是开机启动的并且不可退出，可以把它理解为一个模块。它为系统提供了基础的显示页面，比如 屏幕顶端的状态栏，屏幕底部的导航栏，壁纸，近期使用app列表，截屏操作，电量监控等功能。<a id="more"></a></p>
<h2 id="状态栏的创建"><a href="#状态栏的创建" class="headerlink" title="状态栏的创建"></a>状态栏的创建</h2><p>在Android开机流程的一部分，会调用到ams的systemReady()通知ams已经准备就绪。</p>
<blockquote>
<p> 以下代码基于android-27,SystemUI每个大版本都有比较大的重构和变化，比如在最新的9.0的master分支中， SERVICE 名单被配置到xml中去了，在看代码的时候千万不能看混了（血泪的代价=。=</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">mActivityManagerService.systemReady(() -&gt; &#123;</span><br><span class="line">    Slog.i(TAG, <span class="string">&quot;Making services ready&quot;</span>);</span><br><span class="line">    ...</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        startSystemUi(context, windowManagerF);</span><br><span class="line">    &#125; <span class="keyword">catch</span> (Throwable e) &#123;</span><br><span class="line">        reportWtf(<span class="string">&quot;starting System UI&quot;</span>, e);</span><br><span class="line">    &#125;</span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">void</span> <span class="title">startSystemUi</span><span class="params">(Context context, WindowManagerService windowManager)</span> </span>&#123;</span><br><span class="line">    Intent intent = <span class="keyword">new</span> Intent();</span><br><span class="line">    intent.setComponent(<span class="keyword">new</span> ComponentName(<span class="string">&quot;com.android.systemui&quot;</span>,</span><br><span class="line">                <span class="string">&quot;com.android.systemui.SystemUIService&quot;</span>));</span><br><span class="line">    intent.addFlags(Intent.FLAG_DEBUG_TRIAGED_MISSING);</span><br><span class="line">    <span class="comment">//Slog.d(TAG, &quot;Starting service: &quot; + intent);</span></span><br><span class="line">    context.startServiceAsUser(intent, UserHandle.SYSTEM);</span><br><span class="line">    windowManager.onSystemUiStarted();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SystemUIService</span> <span class="keyword">extends</span> <span class="title">Service</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onCreate</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>.onCreate();</span><br><span class="line">        ((SystemUIApplication) getApplication()).startServicesIfNeeded();</span><br><span class="line">        ...</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">startServicesIfNeeded</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    startServicesIfNeeded(SERVICES);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">final</span> Class&lt;?&gt;[] SERVICES = <span class="keyword">new</span> Class[] &#123;</span><br><span class="line">        Dependency.class,</span><br><span class="line">        NotificationChannels.class,</span><br><span class="line">        CommandQueue.CommandQueueStart.class,</span><br><span class="line">        KeyguardViewMediator.class,</span><br><span class="line">        Recents.class,</span><br><span class="line">        VolumeUI.class,</span><br><span class="line">        Divider.class,</span><br><span class="line">        SystemBars.class,</span><br><span class="line">        StorageNotification.class,</span><br><span class="line">        PowerUI.class,</span><br><span class="line">        RingtonePlayer.class,</span><br><span class="line">        KeyboardUI.class,</span><br><span class="line">        PipUI.class,</span><br><span class="line">        ShortcutKeyDispatcher.class,</span><br><span class="line">        VendorServices.class,</span><br><span class="line">        GarbageMonitor.Service.class,</span><br><span class="line">        LatencyTester.class,</span><br><span class="line">        GlobalActionsComponent.class,</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">startServicesIfNeeded</span><span class="params">(Class&lt;?&gt;[] services)</span> </span>&#123;</span><br><span class="line">    ...</span><br><span class="line">    <span class="keyword">final</span> <span class="keyword">int</span> N = services.length;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; N; i++) &#123;</span><br><span class="line">        Class&lt;?&gt; cl = services[i];</span><br><span class="line">        <span class="keyword">if</span> (DEBUG) Log.d(TAG, <span class="string">&quot;loading: &quot;</span> + cl);</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            Object newService = SystemUIFactory.getInstance().createInstance(cl);</span><br><span class="line">            mServices[i] = (SystemUI) ((newService == <span class="keyword">null</span>) ? cl.newInstance() : newService);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IllegalAccessException ex) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(ex);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (InstantiationException ex) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(ex);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        mServices[i].mContext = <span class="keyword">this</span>;</span><br><span class="line">        mServices[i].mComponents = mComponents;</span><br><span class="line">        <span class="keyword">if</span> (DEBUG) Log.d(TAG, <span class="string">&quot;running: &quot;</span> + mServices[i]);</span><br><span class="line">        mServices[i].start();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (mBootCompleted) &#123;</span><br><span class="line">            mServices[i].onBootCompleted();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SystemBars</span> <span class="keyword">extends</span> <span class="title">SystemUI</span> </span>&#123;</span><br><span class="line">    <span class="comment">// in-process fallback implementation, per the product config</span></span><br><span class="line">    <span class="keyword">private</span> SystemUI mStatusBar;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">start</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        createStatusBarFromConfig();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">createStatusBarFromConfig</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (DEBUG) Log.d(TAG, <span class="string">&quot;createStatusBarFromConfig&quot;</span>);</span><br><span class="line">        <span class="comment">// R.string.config_statusBarComponent 的值是 com.android.systemui.statusbar.phone.StatusBar</span></span><br><span class="line">        <span class="keyword">final</span> String clsName = mContext.getString(R.string.config_statusBarComponent);</span><br><span class="line">        <span class="keyword">if</span> (clsName == <span class="keyword">null</span> || clsName.length() == <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">throw</span> andLog(<span class="string">&quot;No status bar component configured&quot;</span>, <span class="keyword">null</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        Class&lt;?&gt; cls = <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            cls = mContext.getClassLoader().loadClass(clsName);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Throwable t) &#123;</span><br><span class="line">            <span class="keyword">throw</span> andLog(<span class="string">&quot;Error loading status bar component: &quot;</span> + clsName, t);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            mStatusBar = (SystemUI) cls.newInstance();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Throwable t) &#123;</span><br><span class="line">            <span class="keyword">throw</span> andLog(<span class="string">&quot;Error creating status bar component: &quot;</span> + clsName, t);</span><br><span class="line">        &#125;</span><br><span class="line">        mStatusBar.mContext = mContext;</span><br><span class="line">        mStatusBar.mComponents = mComponents;</span><br><span class="line">        mStatusBar.start();</span><br><span class="line">        <span class="keyword">if</span> (DEBUG) Log.d(TAG, <span class="string">&quot;started &quot;</span> + mStatusBar.getClass().getSimpleName());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">StatusBar</span> <span class="keyword">extends</span> <span class="title">SystemUI</span> <span class="keyword">implements</span> ...</span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">start</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        ...</span><br><span class="line">        mWindowManager = (WindowManager)mContext.getSystemService(Context.WINDOW_SERVICE);</span><br><span class="line">        mWindowManagerService = WindowManagerGlobal.getWindowManagerService();</span><br><span class="line">        mBarService = IStatusBarService.Stub.asInterface(</span><br><span class="line">                ServiceManager.getService(Context.STATUS_BAR_SERVICE));</span><br><span class="line">        mCommandQueue = getComponent(CommandQueue.class);</span><br><span class="line">        createAndAddWindows();</span><br><span class="line">        mBarService.registerStatusBar(mCommandQueue,...);</span><br><span class="line">        mCommandQueue.addCallbacks(<span class="keyword">this</span>);</span><br><span class="line">        ...</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">createAndAddWindows</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        addStatusBarWindow();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">addStatusBarWindow</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        makeStatusBarView();</span><br><span class="line">        mStatusBarWindowManager = Dependency.get(StatusBarWindowManager.class);</span><br><span class="line">        mRemoteInputController = <span class="keyword">new</span> RemoteInputController(mHeadsUpManager);</span><br><span class="line">        mStatusBarWindowManager.add(mStatusBarWindow, getStatusBarHeight());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">makeStatusBarView</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        ...</span><br><span class="line">        <span class="keyword">boolean</span> showNav = mWindowManagerService.hasNavigationBar();</span><br><span class="line">        <span class="keyword">if</span> (DEBUG) Log.v(TAG, <span class="string">&quot;hasNavigationBar=&quot;</span> + showNav);</span><br><span class="line">        <span class="keyword">if</span> (showNav) &#123;</span><br><span class="line">            createNavigationBar();</span><br><span class="line">        &#125;</span><br><span class="line">        ...</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getStatusBarHeight</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (mNaturalBarHeight &lt; <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">final</span> Resources res = mContext.getResources();</span><br><span class="line">            <span class="comment">//其中 R.dimen.status_bar_height 的值为 24dp</span></span><br><span class="line">            mNaturalBarHeight =res.getDimensionPixelSize(com.android.internal.R.dimen.status_bar_height);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> mNaturalBarHeight;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>上面的过程简化成图就是这样：<br><img src="/2018/08/26/Android-SystemUI%E7%9A%84%E7%9B%B8%E5%85%B3%E7%B1%BB/SystemUI.jpg" alt="SystemUI"></p>
<p>值得提到的是，<code>SERVICES</code>里面的那些类，并不是真的Service,它们只是继承了 SystemUI 这个虚基类实现了 onstart()方法而已，可以理解为类似于WindowManager的一个本地服务类(仅仅是为了与wms,ams这些系统服务区分开来)，最后在<code>addStatusBarWindow()</code>方法里面创建了window并且把view添加上去完成了状态栏的创建。</p>
<p>在 StatusBar 的 启动过程中，会把 CommandQueue 对象传给 StatusBarManagerService 保存为mBar，类型为bp端，因此当客户端通过 ServiceManager 拿到 StatusBarManagerService 这个系统服务的接口时，就可以通过 mBar 来调用 CommandQueue 对象的方法，而 CommandQueue 则通过callback回调消息给 StatusBar ，这样子就可以更新状态栏了。</p>
<h2 id="状态栏的xml视图"><a href="#状态栏的xml视图" class="headerlink" title="状态栏的xml视图"></a>状态栏的xml视图</h2><p>整个View视图：<br><img src="/2018/08/26/Android-SystemUI%E7%9A%84%E7%9B%B8%E5%85%B3%E7%B1%BB/StatusBar.jpg" alt="SystemUI"></p>
<h3 id="常规状态栏界面"><a href="#常规状态栏界面" class="headerlink" title="常规状态栏界面"></a>常规状态栏界面</h3><p><img src="/2018/08/26/Android-SystemUI%E7%9A%84%E7%9B%B8%E5%85%B3%E7%B1%BB/%E7%8A%B6%E6%80%81%E6%A0%8F1.png" alt="状态栏1"><br>这个状态栏结构还是挺简单的，由 CollapsedStatusBarFragment 控制， 从左到右依次是 mNotificationIconArea(里面包含mNotificationIcons)用于显示通知图标，mSystemIconArea(好像没有发现有添加图标进去)，statusIcons，mSignalClusterView(信号)，BatteryMeterView(电池)，Clock(时间)</p>
<h3 id="展开状态栏界面"><a href="#展开状态栏界面" class="headerlink" title="展开状态栏界面"></a>展开状态栏界面</h3><p><img src="/2018/08/26/Android-SystemUI%E7%9A%84%E7%9B%B8%E5%85%B3%E7%B1%BB/%E7%8A%B6%E6%80%81%E6%A0%8F2%E6%94%B6%E8%B5%B7.png" alt="状态栏2收起"><br><img src="/2018/08/26/Android-SystemUI%E7%9A%84%E7%9B%B8%E5%85%B3%E7%B1%BB/%E7%8A%B6%E6%80%81%E6%A0%8F2%E5%B1%95%E5%BC%80.png" alt="状态栏2展开"><br>状态栏2的视图由 QSFragment 控制，有收起和展开状态。其中 QSPannel 区域则重叠了很多视图，包括点击 TileRecord.view 弹出的 mQSDetail，点击 FootImpl的edit按钮弹出的 Edit界面 (mQSCustomizer)，以及当前显示出来的界面，在收起状态下为 HeaderTileLayout ，展开状态下为 PagedTileLayout ，这两个View都实现了同一个接口。 其中 PagedTileLayout是一个ViewPager，它的页面是一个自定义View,TilePage。</p>
<p>下面的区域没有细看，应该是 NotificationStackScrollLayout ，用来显示通知详情的</p>
<h3 id="锁屏状态栏界面"><a href="#锁屏状态栏界面" class="headerlink" title="锁屏状态栏界面"></a>锁屏状态栏界面</h3><p>略</p>
<h2 id="发送通知消息的过程"><a href="#发送通知消息的过程" class="headerlink" title="发送通知消息的过程"></a>发送通知消息的过程</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// NotificationManager:: notify </span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">notify</span><span class="params">(<span class="keyword">int</span> id, Notification notification)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        notify(<span class="keyword">null</span>, id, notification);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Post a notification to be shown in the status bar. If a notification with</span></span><br><span class="line"><span class="comment">     * the same tag and id has already been posted by your application and has not yet been</span></span><br><span class="line"><span class="comment">     * canceled, it will be replaced by the updated information.</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> tag A string identifier for this notification.  May be &#123;<span class="doctag">@code</span> null&#125;.</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> id An identifier for this notification.  The pair (tag, id) must be unique</span></span><br><span class="line"><span class="comment">     *        within your application.</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> notification A &#123;<span class="doctag">@link</span> Notification&#125; object describing what to</span></span><br><span class="line"><span class="comment">     *        show the user. Must not be null.</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">notify</span><span class="params">(String tag, <span class="keyword">int</span> id, Notification notification)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        notifyAsUser(tag, id, notification, <span class="keyword">new</span> UserHandle(UserHandle.myUserId()));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">notifyAsUser</span><span class="params">(String tag, <span class="keyword">int</span> id, Notification notification, UserHandle user)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        INotificationManager service = getService();</span><br><span class="line">        ...</span><br><span class="line">        service.enqueueNotificationWithTag(pkg, mContext.getOpPackageName(), tag, id,copy, user.getIdentifier());</span><br><span class="line">        ...</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>
<p>需要注意的是这里的 INotificationManager ， NotificationManagerService 并没有直接实现INotificationManager.Stub,而是继承了SystemService，包含了一个INotificationManager.Stub类型的成员变量，并且把它注册到了SystemService中，也就是说 NotificationManagerService 实际上是 INotificationManager.Stub 这个系统服务的管理类，当调用<code>service.enqueueNotificationWithTag(...)</code>的时候，会进入到这个成员变量类的方法里面：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//NotificationManagerService::mService::enqueueNotificationWithTag()</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">enqueueNotificationWithTag</span><span class="params">(String pkg, String opPkg, String tag, <span class="keyword">int</span> id,</span></span></span><br><span class="line"><span class="function"><span class="params">        Notification notification, <span class="keyword">int</span> userId)</span> <span class="keyword">throws</span> RemoteException </span>&#123;</span><br><span class="line">    enqueueNotificationInternal(pkg, opPkg, Binder.getCallingUid(),</span><br><span class="line">            Binder.getCallingPid(), tag, id, notification, userId);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">enqueueNotificationInternal</span><span class="params">(<span class="keyword">final</span> String pkg, <span class="keyword">final</span> String opPkg, <span class="keyword">final</span> <span class="keyword">int</span> callingUid,</span></span></span><br><span class="line"><span class="function"><span class="params">            <span class="keyword">final</span> <span class="keyword">int</span> callingPid, <span class="keyword">final</span> String tag, <span class="keyword">final</span> <span class="keyword">int</span> id, <span class="keyword">final</span> Notification notification,</span></span></span><br><span class="line"><span class="function"><span class="params">            <span class="keyword">int</span> incomingUserId)</span> </span>&#123;</span><br><span class="line">        ...  <span class="comment">// 权限，pid，重复 等检查</span></span><br><span class="line">        mHandler.post(<span class="keyword">new</span> EnqueueNotificationRunnable(userId, r));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">protected</span> <span class="class"><span class="keyword">class</span> <span class="title">EnqueueNotificationRunnable</span> <span class="keyword">implements</span> <span class="title">Runnable</span> </span>&#123;</span><br><span class="line">        ...</span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            <span class="keyword">synchronized</span> (mNotificationLock) &#123;</span><br><span class="line">                ...</span><br><span class="line">                <span class="comment">// tell the assistant service about the notification</span></span><br><span class="line">                <span class="keyword">if</span> (mAssistants.isEnabled()) &#123;</span><br><span class="line">                    mAssistants.onNotificationEnqueued(r);</span><br><span class="line">                    mHandler.postDelayed(<span class="keyword">new</span> PostNotificationRunnable(r.getKey()),</span><br><span class="line">                            DELAY_FOR_ASSISTANT_TIME);</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    mHandler.post(<span class="keyword">new</span> PostNotificationRunnable(r.getKey()));</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">protected</span> <span class="class"><span class="keyword">class</span> <span class="title">PostNotificationRunnable</span> <span class="keyword">implements</span> <span class="title">Runnable</span> </span>&#123;</span><br><span class="line">    ...</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">synchronized</span> (mNotificationLock) &#123;</span><br><span class="line">                ...</span><br><span class="line">                NotificationRecord old = mNotificationsByKey.get(key);</span><br><span class="line">                <span class="keyword">final</span> StatusBarNotification n = r.sbn;</span><br><span class="line">                <span class="keyword">final</span> Notification notification = n.getNotification();</span><br><span class="line">                <span class="keyword">int</span> index = indexOfNotificationLocked(n.getKey());</span><br><span class="line">                <span class="keyword">if</span> (index &lt; <span class="number">0</span>) &#123;</span><br><span class="line">                    mNotificationList.add(r);</span><br><span class="line">                    mUsageStats.registerPostedByApp(r);</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    old = mNotificationList.get(index);</span><br><span class="line">                    mNotificationList.set(index, r);</span><br><span class="line">                    mUsageStats.registerUpdatedByApp(r, old);</span><br><span class="line">                    <span class="comment">// Make sure we don&#x27;t lose the foreground service state.</span></span><br><span class="line">                    notification.flags |=</span><br><span class="line">                            old.getNotification().flags &amp; Notification.FLAG_FOREGROUND_SERVICE;</span><br><span class="line">                    r.isUpdate = <span class="keyword">true</span>;</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">                mNotificationsByKey.put(n.getKey(), r);</span><br><span class="line"></span><br><span class="line">                <span class="comment">// Ensure if this is a foreground service that the proper additional</span></span><br><span class="line">                <span class="comment">// flags are set.</span></span><br><span class="line">                <span class="keyword">if</span> ((notification.flags &amp; Notification.FLAG_FOREGROUND_SERVICE) != <span class="number">0</span>) &#123;</span><br><span class="line">                    notification.flags |= Notification.FLAG_ONGOING_EVENT</span><br><span class="line">                            | Notification.FLAG_NO_CLEAR;</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">                applyZenModeLocked(r);</span><br><span class="line">                mRankingHelper.sort(mNotificationList);</span><br><span class="line">                <span class="keyword">if</span> (notification.getSmallIcon() != <span class="keyword">null</span>) &#123;</span><br><span class="line">                    StatusBarNotification oldSbn = (old != <span class="keyword">null</span>) ? old.sbn : <span class="keyword">null</span>;</span><br><span class="line">                    mListeners.notifyPostedLocked(n, oldSbn);</span><br><span class="line">                    <span class="keyword">if</span> (oldSbn == <span class="keyword">null</span> || !Objects.equals(oldSbn.getGroup(), n.getGroup())) &#123;</span><br><span class="line">                        mHandler.post(<span class="keyword">new</span> Runnable() &#123;</span><br><span class="line">                            <span class="meta">@Override</span></span><br><span class="line">                            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">                                mGroupHelper.onNotificationPosted(</span><br><span class="line">                                        n, hasAutoGroupSummaryLocked(n));</span><br><span class="line">                            &#125;</span><br><span class="line">                        &#125;);</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125; </span><br><span class="line">                ...</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>这一路的Runnable跟下去，发现到最后只是添加通知到<code>mNotificationList</code>并排序，我们知道通知最后是会在状态栏显示一个图标的，从前面的分析和之前版本的Android源码来看，拿到 StatusBarManagerService 就可以更新状态栏，但找来找去没有发现 StatusBarManagerService 的踪影，最后，注意到 <code>mListeners.notifyPostedLocked(n, oldSbn);</code>, 发现mListener类型为NotificationListeners，接下来跟下去：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">NotificationListeners</span> <span class="keyword">extends</span> <span class="title">ManagedServices</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">notifyPostedLocked</span><span class="params">(StatusBarNotification sbn, StatusBarNotification oldSbn)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">final</span> ManagedServiceInfo info : getServices()) &#123;</span><br><span class="line">            mHandler.post(<span class="keyword">new</span> Runnable() &#123;</span><br><span class="line">                    <span class="meta">@Override</span></span><br><span class="line">                    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">                        notifyPosted(info, sbnToPost, update);</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">notifyPosted</span><span class="params">(<span class="keyword">final</span> ManagedServiceInfo info,</span></span></span><br><span class="line"><span class="function"><span class="params">                <span class="keyword">final</span> StatusBarNotification sbn, NotificationRankingUpdate rankingUpdate)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">final</span> INotificationListener listener = (INotificationListener) info.service;</span><br><span class="line">            StatusBarNotificationHolder sbnHolder = <span class="keyword">new</span> StatusBarNotificationHolder(sbn);</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                listener.onNotificationPosted(sbnHolder, rankingUpdate);</span><br><span class="line">            &#125; <span class="keyword">catch</span> (RemoteException ex) &#123;</span><br><span class="line">                Log.e(TAG, <span class="string">&quot;unable to notify listener (posted): &quot;</span> + listener, ex);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>这里又出来一个listener，是从<code>ManagedServices.getServices()</code>得到的， 在 ManagedServices 类中搜索，发现 mServices.add() 调用有多处，但都是从 registerService(…) 开始，于是在 NotificationManagerService 中搜索 ManagedServices类型的成员变量mListeners的registerService()方法，发现调用是在 INotificationManager.Stub.registerListener() 方法中:</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">   * Register a listener binder directly with the notification manager.</span></span><br><span class="line"><span class="comment">   *</span></span><br><span class="line"><span class="comment">   * Only works with system callers. Apps should extend</span></span><br><span class="line"><span class="comment">   * &#123;<span class="doctag">@link</span> android.service.notification.NotificationListenerService&#125;.</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">   <span class="meta">@Override</span></span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">registerListener</span><span class="params">(<span class="keyword">final</span> INotificationListener listener,</span></span></span><br><span class="line"><span class="function"><span class="params">       <span class="keyword">final</span> ComponentName component, <span class="keyword">final</span> <span class="keyword">int</span> userid)</span> </span>&#123;</span><br><span class="line">       enforceSystemOrSystemUI(<span class="string">&quot;INotificationManager.registerListener&quot;</span>);</span><br><span class="line">       mListeners.registerService(listener, component, userid);</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure>
<p>这里提到 这个方法仅仅供系统直接调用，app应该通过继承 NotificationListenerService 来调用，那么去看 NotificationListenerService 这个类，发现它的<code>registerAsSystemService()</code>方法中刚好调用了<code>INotificationManager.registerListener()</code>,而它传过去的第一个参数是 <code>NotificationListenerWrapper</code>类型的实例mWrapper，也就是上面所找的 INotificationListener listener，原来 listener 的赋值是在这里。那么接着上面的通知发送流程，也就是<code>listener.onNotificationPosted(...)</code>,我们看向 mWrapper 的 onNotificationPosted() 方法，发现最终调用到 NotificationListenerService.onNotificationPosted(…) ,而这个方法是空方法…</p>
<p>这个线索断了，我们继续回过头来找 <code>NotificationListenerService.registerAsSystemService()</code>的调用方法，右键 find usages 发现调用回到了 <code>StatusBar.onStart()</code>方法，这才发现 StatusBar有个成员变量 mNotificationListener ，类型为继承了 NotificationListenerService 类的 NotificationListenerWithPlugins类:</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//StatusBar::Start</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">start</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    ...</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        mNotificationListener.registerAsSystemService(...);</span><br><span class="line">    &#125; <span class="keyword">catch</span> (RemoteException e) &#123;</span><br><span class="line">        Log.e(TAG, <span class="string">&quot;Unable to register notification listener&quot;</span>, e);</span><br><span class="line">    &#125;</span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">NotificationListenerWithPlugins</span> <span class="keyword">extends</span> <span class="title">NotificationListenerService</span> <span class="keyword">implements</span></span></span><br><span class="line"><span class="class">        <span class="title">PluginListener</span>&lt;<span class="title">NotificationListenerController</span>&gt; </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> ArrayList&lt;NotificationListenerController&gt; mPlugins = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">boolean</span> mConnected;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">registerAsSystemService</span><span class="params">(Context context, ComponentName componentName,</span></span></span><br><span class="line"><span class="function"><span class="params">            <span class="keyword">int</span> currentUser)</span> <span class="keyword">throws</span> RemoteException </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>.registerAsSystemService(context, componentName, currentUser);</span><br><span class="line">        Dependency.get(PluginManager.class).addPluginListener(<span class="keyword">this</span>,</span><br><span class="line">                NotificationListenerController.class);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>这里看到 registerAsSystemService() 除了调用父类的方法外，还调用了 addPluginListener() ,这里 addPluginListener() 先不看，从名字上看可能是 把notification的更新通知给所有的插件 。上面我们提到<code>listener.onNotificationPosted(...)</code>最终调用到了一个空方法，但是这里既然有了子类，那么就会调用到子类的 onNotificationPosted() 方法中:</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">final</span> NotificationListenerWithPlugins mNotificationListener =</span><br><span class="line">           <span class="keyword">new</span> NotificationListenerWithPlugins() &#123;</span><br><span class="line">       <span class="meta">@Override</span></span><br><span class="line">       <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onListenerConnected</span><span class="params">()</span> </span>&#123;</span><br><span class="line">           <span class="keyword">if</span> (DEBUG) Log.d(TAG, <span class="string">&quot;onListenerConnected&quot;</span>);</span><br><span class="line">           onPluginConnected();</span><br><span class="line">           <span class="keyword">final</span> StatusBarNotification[] notifications = getActiveNotifications();</span><br><span class="line">           <span class="keyword">if</span> (notifications == <span class="keyword">null</span>) &#123;</span><br><span class="line">               Log.w(TAG, <span class="string">&quot;onListenerConnected unable to get active notifications.&quot;</span>);</span><br><span class="line">               <span class="keyword">return</span>;</span><br><span class="line">           &#125;</span><br><span class="line">           <span class="keyword">final</span> RankingMap currentRanking = getCurrentRanking();</span><br><span class="line">           mHandler.post(<span class="keyword">new</span> Runnable() &#123;</span><br><span class="line">               <span class="meta">@Override</span></span><br><span class="line">               <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">                   <span class="keyword">for</span> (StatusBarNotification sbn : notifications) &#123;</span><br><span class="line">                       <span class="keyword">try</span> &#123;</span><br><span class="line">                           addNotification(sbn, currentRanking);</span><br><span class="line">                       &#125; <span class="keyword">catch</span> (InflationException e) &#123;</span><br><span class="line">                           handleInflationException(sbn, e);</span><br><span class="line">                       &#125;</span><br><span class="line">                   &#125;</span><br><span class="line">               &#125;</span><br><span class="line">           &#125;);</span><br><span class="line">       &#125;</span><br><span class="line"></span><br><span class="line">       <span class="meta">@Override</span></span><br><span class="line">       <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onNotificationPosted</span><span class="params">(<span class="keyword">final</span> StatusBarNotification sbn,</span></span></span><br><span class="line"><span class="function"><span class="params">               <span class="keyword">final</span> RankingMap rankingMap)</span> </span>&#123;</span><br><span class="line">           <span class="keyword">if</span> (DEBUG) Log.d(TAG, <span class="string">&quot;onNotificationPosted: &quot;</span> + sbn);</span><br><span class="line">           <span class="keyword">if</span> (sbn != <span class="keyword">null</span> &amp;&amp; !onPluginNotificationPosted(sbn, rankingMap)) &#123;</span><br><span class="line">               mHandler.post(<span class="keyword">new</span> Runnable() &#123;</span><br><span class="line">                   <span class="meta">@Override</span></span><br><span class="line">                   <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">                       processForRemoteInput(sbn.getNotification());</span><br><span class="line">                       String key = sbn.getKey();</span><br><span class="line">                       mKeysKeptForRemoteInput.remove(key);</span><br><span class="line">                       <span class="keyword">boolean</span> isUpdate = mNotificationData.get(key) != <span class="keyword">null</span>;</span><br><span class="line">                       <span class="comment">// In case we don&#x27;t allow child notifications, we ignore children of</span></span><br><span class="line">                       <span class="comment">// notifications that have a summary, since we&#x27;re not going to show them</span></span><br><span class="line">                       <span class="comment">// anyway. This is true also when the summary is canceled,</span></span><br><span class="line">                       <span class="comment">// because children are automatically canceled by NoMan in that case.</span></span><br><span class="line">                       <span class="keyword">if</span> (!ENABLE_CHILD_NOTIFICATIONS</span><br><span class="line">                           &amp;&amp; mGroupManager.isChildInGroupWithSummary(sbn)) &#123;</span><br><span class="line">                           <span class="keyword">if</span> (DEBUG) &#123;</span><br><span class="line">                               Log.d(TAG, <span class="string">&quot;Ignoring group child due to existing summary: &quot;</span> + sbn);</span><br><span class="line">                           &#125;</span><br><span class="line"></span><br><span class="line">                           <span class="comment">// Remove existing notification to avoid stale data.</span></span><br><span class="line">                           <span class="keyword">if</span> (isUpdate) &#123;</span><br><span class="line">                               removeNotification(key, rankingMap);</span><br><span class="line">                           &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                               mNotificationData.updateRanking(rankingMap);</span><br><span class="line">                           &#125;</span><br><span class="line">                           <span class="keyword">return</span>;</span><br><span class="line">                       &#125;</span><br><span class="line">                       <span class="keyword">try</span> &#123;</span><br><span class="line">                           <span class="keyword">if</span> (isUpdate) &#123;</span><br><span class="line">                               updateNotification(sbn, rankingMap);</span><br><span class="line">                           &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                               addNotification(sbn, rankingMap);</span><br><span class="line">                           &#125;</span><br><span class="line">                       &#125; <span class="keyword">catch</span> (InflationException e) &#123;</span><br><span class="line">                           handleInflationException(sbn, e);</span><br><span class="line">                       &#125;</span><br><span class="line">                   &#125;</span><br><span class="line">               &#125;);</span><br><span class="line">           &#125;</span><br><span class="line">       &#125;</span><br><span class="line"></span><br><span class="line">       <span class="meta">@Override</span></span><br><span class="line">       <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onNotificationRemoved</span><span class="params">(StatusBarNotification sbn,</span></span></span><br><span class="line"><span class="function"><span class="params">               <span class="keyword">final</span> RankingMap rankingMap)</span> </span>&#123;</span><br><span class="line">           <span class="keyword">if</span> (DEBUG) Log.d(TAG, <span class="string">&quot;onNotificationRemoved: &quot;</span> + sbn);</span><br><span class="line">           <span class="keyword">if</span> (sbn != <span class="keyword">null</span> &amp;&amp; !onPluginNotificationRemoved(sbn, rankingMap)) &#123;</span><br><span class="line">               <span class="keyword">final</span> String key = sbn.getKey();</span><br><span class="line">               mHandler.post(() -&gt; removeNotification(key, rankingMap));</span><br><span class="line">           &#125;</span><br><span class="line">       &#125;</span><br><span class="line"></span><br><span class="line">       <span class="meta">@Override</span></span><br><span class="line">       <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onNotificationRankingUpdate</span><span class="params">(<span class="keyword">final</span> RankingMap rankingMap)</span> </span>&#123;</span><br><span class="line">           <span class="keyword">if</span> (DEBUG) Log.d(TAG, <span class="string">&quot;onRankingUpdate&quot;</span>);</span><br><span class="line">           <span class="keyword">if</span> (rankingMap != <span class="keyword">null</span>) &#123;</span><br><span class="line">               RankingMap r = onPluginRankingUpdate(rankingMap);</span><br><span class="line">               mHandler.post(() -&gt; updateNotificationRanking(r));</span><br><span class="line">           &#125;</span><br><span class="line">       &#125;</span><br><span class="line"></span><br><span class="line">   &#125;;</span><br></pre></td></tr></table></figure>
<p>这里终于看到了addNotification(sbn, rankingMap)的调用了。。。总结一下：<br>类图 :<br><img src="/2018/08/26/Android-SystemUI%E7%9A%84%E7%9B%B8%E5%85%B3%E7%B1%BB/StatusBar%E7%B1%BB%E5%9B%BE.jpg" alt="StatusBar类图"></p>
<p>通知相关初始化 ：</p>
<p><img src="/2018/08/26/Android-SystemUI%E7%9A%84%E7%9B%B8%E5%85%B3%E7%B1%BB/%E9%80%9A%E7%9F%A5%E7%9B%B8%E5%85%B3%E5%88%9D%E5%A7%8B%E5%8C%96.jpg" alt="通知相关初始化"></p>
<p>发送通知的过程 :</p>
<p><img src="/2018/08/26/Android-SystemUI%E7%9A%84%E7%9B%B8%E5%85%B3%E7%B1%BB/%E9%80%9A%E7%9F%A5%E8%BF%87%E7%A8%8B.jpg" alt="通知过程"></p>
<p>在Android 8.0里面不仅状态栏的界面和交互发生了变化，连消息流向也变了。之前是直接查询SystemServer就可以拿到StatusBarManagerService,然后可以通知StatusBar去 addNotification() ,现在的版本则不再通过 StatusBarManagerService ，而是使用 NotificationListenerService 去创建一个内部类INotificationListener.Stub类型的成员变量并注册它到 NotificationManager Service，这样子 NotificationManager 就拿到了远程接口可以直接调用到内部类中，再调用到 NotificationListenerService 类中，而客户端通过 继承NotificationListenerService的子类，就等于可以直接接收到NotificationManagerService的回调。这里有个问题，为什么不像 mCommandQueue 一样直接把 INotificationListener.Stub 传给 NotificationListenerService 呢 ？在这里猜想是因为plug相关的操作，通知消息不仅仅要告诉StatusBar，也需要告诉一些plug，因此拿 NotificationListenerService 来进行adapt和管理。</p>
<p>在类图中，我们可以清晰的看到， StatusBarManagerService 比较直接， 它可以通过 IStatusBar 直接调用到 CommandQueue ，而 CommandQueue 则通过callback通知到 StatusBar 。而 NotificationManagerService 则是另外一种方法，它可以一路找到 INotificationListener，然后调用到 INotificationListener.Stub 所在的 StatusBar 类，这里是通过匿名内部类的机制直接调用到 StatusBar的方法。 不管是哪种方式，我们都可以大致的总结出一种 客户端 和 系统服务交互的简化模型，即 </p>
<p>系统服务 &lt;===&gt; binder接口管理类 &lt;==&gt; 客户端</p>
<p>对于 StatusBarManagerService 来说，就是 StatusBarManagerService &lt;===&gt; CommandQueue &lt;==&gt; StatusBar，对于 NotificationManagerService 来说，就是 NotificationManagerService &lt;===&gt; NotificationListenerWithPlugins &lt;==&gt; StatusBar，在更多的功能模块中，我们也会看到这种模型，比如 wms &lt;===&gt; ViewRootImpl(包含mWindow) &lt;==&gt; PhoneWindow 等。</p>
<p>在 SystemService 的注释中我们也可以看到，以后Android会逐步转成这种方式，即 系统服务 都会继承 SystemService 类，SystemService类则定义了通用的一些回调方法。系统服务中则以Ixxx.Stub这种真正的服务作为成员变量，这么做的好处在于，可以把系统服务之间需要相互调用的方法剥离出来成一个内部类，叫做 xxxxInternal.class , 然后在 SystemService 类中会保存一个静态的hashmap，用来存储这种对应关系。因为系统服务大部分都是运行在同一个系统进程的不同线程，所以这个hashmap会对所有的系统服务可见，当 StatusBarManagerService 需要 NotificationManagerService 的功能的时候，就不需要通过binder调用来进行了，而是直接可以从 hashmap 取出 xxxxInternal 类，进而调用到 NotificationManagerService 的功能中去，提高了一些效率。</p>
<h2 id="导航栏"><a href="#导航栏" class="headerlink" title="导航栏"></a>导航栏</h2><p>导航栏的添加和状态栏的添加在一起：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">makeStatusBarView</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    ...</span><br><span class="line">    createNavigationBar();</span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">createNavigationBar</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    mNavigationBarView = NavigationBarFragment.create(...);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//NavigationBarFragment::create(...)</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> View <span class="title">create</span><span class="params">(Context context, FragmentListener listener)</span> </span>&#123;</span><br><span class="line">        WindowManager.LayoutParams lp = <span class="keyword">new</span> WindowManager.LayoutParams(</span><br><span class="line">                LayoutParams.MATCH_PARENT, LayoutParams.MATCH_PARENT,</span><br><span class="line">                WindowManager.LayoutParams.TYPE_NAVIGATION_BAR,</span><br><span class="line">                WindowManager.LayoutParams.FLAG_TOUCHABLE_WHEN_WAKING</span><br><span class="line">                        | WindowManager.LayoutParams.FLAG_NOT_FOCUSABLE</span><br><span class="line">                        | WindowManager.LayoutParams.FLAG_NOT_TOUCH_MODAL</span><br><span class="line">                        | WindowManager.LayoutParams.FLAG_WATCH_OUTSIDE_TOUCH</span><br><span class="line">                        | WindowManager.LayoutParams.FLAG_SPLIT_TOUCH</span><br><span class="line">                        | WindowManager.LayoutParams.FLAG_SLIPPERY,</span><br><span class="line">                PixelFormat.TRANSLUCENT);</span><br><span class="line">        lp.token = <span class="keyword">new</span> Binder();</span><br><span class="line">        lp.setTitle(<span class="string">&quot;NavigationBar&quot;</span>);</span><br><span class="line">        lp.windowAnimations = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">        View navigationBarView = LayoutInflater.from(context).inflate(</span><br><span class="line">                R.layout.navigation_bar_window, <span class="keyword">null</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (DEBUG) Log.v(TAG, <span class="string">&quot;addNavigationBar: about to add &quot;</span> + navigationBarView);</span><br><span class="line">        <span class="keyword">if</span> (navigationBarView == <span class="keyword">null</span>) <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line"></span><br><span class="line">        context.getSystemService(WindowManager.class).addView(navigationBarView, lp);</span><br><span class="line">        FragmentHostManager fragmentHost = FragmentHostManager.get(navigationBarView);</span><br><span class="line">        NavigationBarFragment fragment = <span class="keyword">new</span> NavigationBarFragment();</span><br><span class="line">        fragmentHost.getFragmentManager().beginTransaction()</span><br><span class="line">                .replace(R.id.navigation_bar_frame, fragment, TAG)</span><br><span class="line">                .commit();</span><br><span class="line">        fragmentHost.addTagListener(TAG, listener);</span><br><span class="line">        <span class="keyword">return</span> navigationBarView;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>
<p>这里 导航栏的window参数为<code>LayoutParams.MATCH_PARENT</code>，从之前 wms 的介绍可以知道， 在relayoutWindow()的时候，window的尺寸和位置最终都以 wms 的决定为准，而在 wms的 addWindow/在relayoutWindow 方法中，都可以看到 updateFocusedWindowLocked()的调用：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// wms ::updateFocusedWindowLocked()</span></span><br><span class="line"><span class="function"><span class="keyword">boolean</span> <span class="title">updateFocusedWindowLocked</span><span class="params">(<span class="keyword">int</span> mode, <span class="keyword">boolean</span> updateInputWindows)</span> </span>&#123;</span><br><span class="line">    ...</span><br><span class="line">    displayContent.performLayout(...);</span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//DisplayContent::performLayout()</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">performLayout</span><span class="params">(<span class="keyword">boolean</span> initial, <span class="keyword">boolean</span> updateInputWindows)</span> </span>&#123;</span><br><span class="line">    ...</span><br><span class="line">    mService.mPolicy.beginLayoutLw(isDefaultDisplay, dw, dh, mRotation,getConfiguration().uiMode);</span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//PhoneWindowManager::beginLayoutLw()</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">beginLayoutLw</span><span class="params">(<span class="keyword">boolean</span> isDefaultDisplay, <span class="keyword">int</span> displayWidth, <span class="keyword">int</span> displayHeight,</span></span></span><br><span class="line"><span class="function"><span class="params">                            <span class="keyword">int</span> displayRotation, <span class="keyword">int</span> uiMode)</span> </span>&#123;</span><br><span class="line">    ...</span><br><span class="line">    <span class="keyword">if</span> (isDefaultDisplay) &#123;</span><br><span class="line">        <span class="comment">// For purposes of putting out fake window up to steal focus, we will</span></span><br><span class="line">        <span class="comment">// drive nav being hidden only by whether it is requested.</span></span><br><span class="line">        <span class="keyword">final</span> <span class="keyword">int</span> sysui = mLastSystemUiFlags;</span><br><span class="line">        <span class="keyword">boolean</span> navVisible = (sysui &amp; View.SYSTEM_UI_FLAG_HIDE_NAVIGATION) == <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">boolean</span> navTranslucent = (sysui</span><br><span class="line">                &amp; (View.NAVIGATION_BAR_TRANSLUCENT | View.NAVIGATION_BAR_TRANSPARENT)) != <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">boolean</span> immersive = (sysui &amp; View.SYSTEM_UI_FLAG_IMMERSIVE) != <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">boolean</span> immersiveSticky = (sysui &amp; View.SYSTEM_UI_FLAG_IMMERSIVE_STICKY) != <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">boolean</span> navAllowedHidden = immersive || immersiveSticky;</span><br><span class="line">        navTranslucent &amp;= !immersiveSticky;  <span class="comment">// transient trumps translucent</span></span><br><span class="line">        <span class="keyword">boolean</span> isKeyguardShowing = isStatusBarKeyguard() &amp;&amp; !mKeyguardOccluded;</span><br><span class="line">        <span class="keyword">if</span> (!isKeyguardShowing) &#123;</span><br><span class="line">            navTranslucent &amp;= areTranslucentBarsAllowed();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">boolean</span> statusBarExpandedNotKeyguard = !isKeyguardShowing &amp;&amp; mStatusBar != <span class="keyword">null</span></span><br><span class="line">                &amp;&amp; mStatusBar.getAttrs().height == MATCH_PARENT</span><br><span class="line">                &amp;&amp; mStatusBar.getAttrs().width == MATCH_PARENT;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// When the navigation bar isn&#x27;t visible, we put up a fake</span></span><br><span class="line">        <span class="comment">// input window to catch all touch events.  This way we can</span></span><br><span class="line">        <span class="comment">// detect when the user presses anywhere to bring back the nav</span></span><br><span class="line">        <span class="comment">// bar and ensure the application doesn&#x27;t see the event.</span></span><br><span class="line">        <span class="keyword">if</span> (navVisible || navAllowedHidden) &#123;</span><br><span class="line">            <span class="keyword">if</span> (mInputConsumer != <span class="keyword">null</span>) &#123;</span><br><span class="line">                mHandler.sendMessage(</span><br><span class="line">                        mHandler.obtainMessage(MSG_DISPOSE_INPUT_CONSUMER, mInputConsumer));</span><br><span class="line">                mInputConsumer = <span class="keyword">null</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (mInputConsumer == <span class="keyword">null</span>) &#123;</span><br><span class="line">            mInputConsumer = mWindowManagerFuncs.createInputConsumer(mHandler.getLooper(),</span><br><span class="line">                    INPUT_CONSUMER_NAVIGATION,</span><br><span class="line">                    (channel, looper) -&gt; <span class="keyword">new</span> HideNavInputEventReceiver(channel, looper));</span><br><span class="line">            <span class="comment">// As long as mInputConsumer is active, hover events are not dispatched to the app</span></span><br><span class="line">            <span class="comment">// and the pointer icon is likely to become stale. Hide it to avoid confusion.</span></span><br><span class="line">            InputManager.getInstance().setPointerIconType(PointerIcon.TYPE_NULL);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// For purposes of positioning and showing the nav bar, if we have</span></span><br><span class="line">        <span class="comment">// decided that it can&#x27;t be hidden (because of the screen aspect ratio),</span></span><br><span class="line">        <span class="comment">// then take that into account.</span></span><br><span class="line">        navVisible |= !canHideNavigationBar();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">boolean</span> updateSysUiVisibility = layoutNavigationBar(displayWidth, displayHeight,</span><br><span class="line">                displayRotation, uiMode, overscanLeft, overscanRight, overscanBottom, dcf, navVisible, navTranslucent,</span><br><span class="line">                navAllowedHidden, statusBarExpandedNotKeyguard);</span><br><span class="line">        <span class="keyword">if</span> (DEBUG_LAYOUT) Slog.i(TAG, String.format(<span class="string">&quot;mDock rect: (%d,%d - %d,%d)&quot;</span>,</span><br><span class="line">                mDockLeft, mDockTop, mDockRight, mDockBottom));</span><br><span class="line">        updateSysUiVisibility |= layoutStatusBar(pf, df, of, vf, dcf, sysui, isKeyguardShowing);</span><br><span class="line">        <span class="keyword">if</span> (updateSysUiVisibility) &#123;</span><br><span class="line">            updateSystemUiVisibilityLw();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">boolean</span> <span class="title">layoutNavigationBar</span><span class="params">(...)</span> </span>&#123;</span><br><span class="line">    ...</span><br><span class="line">    getNavigationBarHeight()/getNavigationBarWidth()</span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">int</span> <span class="title">getNavigationBarHeight</span><span class="params">(<span class="keyword">int</span> rotation, <span class="keyword">int</span> uiMode)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (ALTERNATE_CAR_MODE_NAV_SIZE &amp;&amp; (uiMode &amp; UI_MODE_TYPE_MASK) == UI_MODE_TYPE_CAR) &#123;</span><br><span class="line">        <span class="keyword">return</span> mNavigationBarHeightForRotationInCarMode[rotation];</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> mNavigationBarHeightForRotationDefault[rotation];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>在 PhoneWindowManager 类中可以看到这个值的默认值是 <code>res.getDimensionPixelSize(com.android.internal.R.dimen.navigation_bar_height)</code> : 48dp </p>
<h3 id="布局"><a href="#布局" class="headerlink" title="布局"></a>布局</h3><p>导航栏的布局比较简单：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">@layout&#x2F;navigation_bar_window  --&gt; @layout&#x2F;navigation_bar --&gt; NavigationBarInflaterView|@layout&#x2F;navigation_layout</span><br></pre></td></tr></table></figure>
<p>其中，每一个按钮是一个 KeyButtonView，继承了ImageView 并且定义了 KeyButtonRipple 用来显示按下效果。在onTouchEvent()里面里，对于home,back等有keycode的控件，会根据keycode，生成一个KeyEvent(),插入到inputManager去分发，这样客户端就可以收到事件了。对于recent等没有keycode的控件会直接触发onclickListener。</p>
]]></content>
      <categories>
        <category>android_framework</category>
      </categories>
  </entry>
  <entry>
    <title>Android控件总结(显示流程，触摸事件派发)</title>
    <url>/2018/08/20/Android%E6%8E%A7%E4%BB%B6%E6%80%BB%E7%BB%93/</url>
    <content><![CDATA[<p>在wms服务中，我们可以直接使用它的api来创建一个窗口，显示出来并且通过InputEventReceiver接收输入事件。但是这种方法太原始,并且存在以下一些问题:</p>
<ol>
<li>需要完全的Android源码环境</li>
<li>需要自己去处理UI元素的测量，布局和绘制</li>
<li>还需要处理InputEventReceiver事件，分发到合适的窗口</li>
<li>wms来的各种回调<a id="more"></a>
因此Android提供了控件系统来帮我们完成各种各样的控件的创建。更高级一点的创建方式是获取 WindowManager,然后通过addView()方法得到一个可以交互的有界面的窗口</li>
</ol>
<p>关于WindowManager的一个类图,比较容易混乱的是<code>context.getSystemService(WINDOW)</code>拿到的其实只是一个WindowManagerImpl类，并不是wms服务。。<br><img src="/2018/08/20/Android%E6%8E%A7%E4%BB%B6%E6%80%BB%E7%BB%93/WindowManager%E7%BB%93%E6%9E%84.jpg" alt="WindowManager结构"></p>
<h2 id="窗口添加view的过程"><a href="#窗口添加view的过程" class="headerlink" title="窗口添加view的过程"></a>窗口添加view的过程</h2><p>然后是为窗口添加view所发生的调用过程</p>
<p><img src="/2018/08/20/Android%E6%8E%A7%E4%BB%B6%E6%80%BB%E7%BB%93/WindowManager.addView%E8%BF%87%E7%A8%8B.jpg" alt="WindowManager结构"></p>
<p>我们跟进WindManager.addView()过程，可以看到最终通过RootViewImpl.addView()调用到了PerformTraversals()。除此之外，requestLayout()也会导致 PerformTraversals() 被调用：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">requestLayout</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (!mHandlingLayoutInLayoutRequest) &#123;   <span class="comment">//在layout过程中会被设置为true</span></span><br><span class="line">        checkThread();</span><br><span class="line">        mLayoutRequested = <span class="keyword">true</span>;</span><br><span class="line">        scheduleTraversals();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"> <span class="function"><span class="keyword">void</span> <span class="title">scheduleTraversals</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (!mTraversalScheduled) &#123;   <span class="comment">//屏蔽重复的调用</span></span><br><span class="line">        mTraversalScheduled = <span class="keyword">true</span>;</span><br><span class="line">        mTraversalBarrier = mHandler.getLooper().getQueue().postSyncBarrier();</span><br><span class="line">        <span class="comment">//即使performTraversals()执行比较快，在一次垂直同步的时间里最多只会调用performTraversals()一次</span></span><br><span class="line">        mChoreographer.postCallback(Choreographer.CALLBACK_TRAVERSAL, mTraversalRunnable, <span class="keyword">null</span>);  </span><br><span class="line">        <span class="keyword">if</span> (!mUnbufferedInputDispatch) &#123;</span><br><span class="line">            scheduleConsumeBatchedInput();</span><br><span class="line">        &#125;</span><br><span class="line">        notifyRendererOfFramePending();</span><br><span class="line">        pokeDrawLockIfNeeded();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">final</span> <span class="class"><span class="keyword">class</span> <span class="title">TraversalRunnable</span> <span class="keyword">implements</span> <span class="title">Runnable</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        doTraversal();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">doTraversal</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (mTraversalScheduled) &#123;</span><br><span class="line">        mTraversalScheduled = <span class="keyword">false</span>;</span><br><span class="line">        mHandler.getLooper().getQueue().removeSyncBarrier(mTraversalBarrier);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (mProfile) &#123;</span><br><span class="line">            Debug.startMethodTracing(<span class="string">&quot;ViewAncestor&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        performTraversals();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (mProfile) &#123;</span><br><span class="line">            Debug.stopMethodTracing();</span><br><span class="line">            mProfile = <span class="keyword">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><code>performTraversals()</code>主要经过了以下几个阶段：</p>
<ol>
<li>预测量阶段，这里会对控件树第一次进行测量，计算出为了显示控件树所希望的窗口大小，将会依次调用view和子类的onMeasure()方法。</li>
<li>布局窗口阶段，这里会把上一步得到的数据发给wms，wms会对窗口进行重新布局，计算出系统实际上给客户端的窗口大小并返回。</li>
<li>最终测量阶段，这里只能接受wms给的窗口大小，并根据这个大小最终计算出控件树的实际大小，将会依次调用view和子类的onMeasure()方法。</li>
<li>布局控件树， 上一步得到测量结果这里就可以计算出控件的位置，将会依次调用View和子类的onLayout()方法</li>
<li>绘制。将会依次调用View和子类的onDraw()方法</li>
</ol>
<p><img src="/2018/08/20/Android%E6%8E%A7%E4%BB%B6%E6%80%BB%E7%BB%93/performTraversals.jpg" alt="WindowManager结构"></p>
<p>需要注意的是， onMeasure和onLayout,onDraw都是可以跳过的</p>
<h3 id="测量阶段-1-2-3"><a href="#测量阶段-1-2-3" class="headerlink" title="测量阶段(1,2,3)"></a>测量阶段(1,2,3)</h3><p>第一次测量的时候，使用的 desiredWindowWidth 和 desiredWindowHeight 就是屏幕的大小，后面再测量的时候使用的就是上次测量得出的窗口大小了。在measureHierarchy可以看到，如果performMeasure()的结果带有标记MEASURED_STATE_TOO_SMALL，performMeasure()有可能被调用多次。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">performTraversals()&#123;</span><br><span class="line">    ...</span><br><span class="line">    <span class="comment">//预测量阶段</span></span><br><span class="line">    <span class="keyword">if</span> (mFirst) &#123;</span><br><span class="line">        mFullRedrawNeeded = <span class="keyword">true</span>;</span><br><span class="line">        mLayoutRequested = <span class="keyword">true</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">final</span> Configuration config = mContext.getResources().getConfiguration();</span><br><span class="line">        <span class="keyword">if</span> (shouldUseDisplaySize(lp)) &#123;</span><br><span class="line">            <span class="comment">// NOTE -- system code, won&#x27;t try to do compat mode.</span></span><br><span class="line">            ...</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            desiredWindowWidth = dipToPx(config.screenWidthDp);</span><br><span class="line">            desiredWindowHeight = dipToPx(config.screenHeightDp);</span><br><span class="line">        &#125;</span><br><span class="line">    <span class="keyword">else</span>&#123;</span><br><span class="line">        desiredWindowWidth = frame.width();</span><br><span class="line">        desiredWindowHeight = frame.height();</span><br><span class="line">        <span class="keyword">if</span> (desiredWindowWidth != mWidth || desiredWindowHeight != mHeight) &#123;</span><br><span class="line">            <span class="keyword">if</span> (DEBUG_ORIENTATION) Log.v(mTag, <span class="string">&quot;View &quot;</span> + host + <span class="string">&quot; resized to: &quot;</span> + frame);</span><br><span class="line">            mFullRedrawNeeded = <span class="keyword">true</span>;</span><br><span class="line">            mLayoutRequested = <span class="keyword">true</span>;</span><br><span class="line">            windowSizeMayChange = <span class="keyword">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//没有开始绘制的时候可能会有消息过来，这时候要存在一个队列里面，开始绘制了再执行</span></span><br><span class="line">    getRunQueue().executeActions(mAttachInfo.mHandler);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">boolean</span> layoutRequested = mLayoutRequested &amp;&amp; (!mStopped || mReportNextDraw);</span><br><span class="line">    <span class="keyword">if</span> (layoutRequested) &#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">final</span> Resources res = mView.getContext().getResources();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (mFirst) &#123;</span><br><span class="line">            <span class="comment">// make sure touch mode code executes by setting cached value</span></span><br><span class="line">            <span class="comment">// to opposite of the added touch mode.</span></span><br><span class="line">            mAttachInfo.mInTouchMode = !mAddedTouchMode;</span><br><span class="line">            ensureTouchModeLocally(mAddedTouchMode);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            ...</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// Ask host how big it wants to be</span></span><br><span class="line">        windowSizeMayChange |= measureHierarchy(host, lp, res,</span><br><span class="line">                desiredWindowWidth, desiredWindowHeight);</span><br><span class="line">    &#125;</span><br><span class="line">    ...</span><br><span class="line">    <span class="comment">//布局窗口阶段</span></span><br><span class="line">    relayoutResult = relayoutWindow(params, viewVisibility, insetsPending); </span><br><span class="line"></span><br><span class="line">    ...</span><br><span class="line">    <span class="comment">//最终测量阶段，如果wms返回的结果和客户端自己期望的结果不一样，则需要再次测量</span></span><br><span class="line">    <span class="keyword">if</span> (focusChangedDueToTouchMode || mWidth != host.getMeasuredWidth()|| mHeight != host.getMeasuredHeight() </span><br><span class="line">                    || contentInsetsChanged ||updatedConfiguration) &#123;</span><br><span class="line">        <span class="keyword">int</span> childWidthMeasureSpec = getRootMeasureSpec(mWidth, lp.width);</span><br><span class="line">        <span class="keyword">int</span> childHeightMeasureSpec = getRootMeasureSpec(mHeight, lp.height);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (DEBUG_LAYOUT) Log.v(mTag, <span class="string">&quot;Ooops, something changed!  mWidth=&quot;</span></span><br><span class="line">                + mWidth + <span class="string">&quot; measuredWidth=&quot;</span> + host.getMeasuredWidth()</span><br><span class="line">                + <span class="string">&quot; mHeight=&quot;</span> + mHeight</span><br><span class="line">                + <span class="string">&quot; measuredHeight=&quot;</span> + host.getMeasuredHeight()</span><br><span class="line">                + <span class="string">&quot; coveredInsetsChanged=&quot;</span> + contentInsetsChanged);</span><br><span class="line"></span><br><span class="line">            <span class="comment">// Ask host how big it wants to be</span></span><br><span class="line">        performMeasure(childWidthMeasureSpec, childHeightMeasureSpec);</span><br><span class="line">        ...</span><br><span class="line"></span><br><span class="line">        layoutRequested = <span class="keyword">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//布局控件树</span></span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">boolean</span> <span class="title">measureHierarchy</span><span class="params">(<span class="keyword">final</span> View host, <span class="keyword">final</span> WindowManager.LayoutParams lp,</span></span></span><br><span class="line"><span class="function"><span class="params">        <span class="keyword">final</span> Resources res, <span class="keyword">final</span> <span class="keyword">int</span> desiredWindowWidth, <span class="keyword">final</span> <span class="keyword">int</span> desiredWindowHeight)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> childWidthMeasureSpec;</span><br><span class="line">    <span class="keyword">int</span> childHeightMeasureSpec;</span><br><span class="line">    <span class="keyword">boolean</span> windowSizeMayChange = <span class="keyword">false</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (DEBUG_ORIENTATION || DEBUG_LAYOUT) Log.v(mTag,</span><br><span class="line">            <span class="string">&quot;Measuring &quot;</span> + host + <span class="string">&quot; in display &quot;</span> + desiredWindowWidth</span><br><span class="line">            + <span class="string">&quot;x&quot;</span> + desiredWindowHeight + <span class="string">&quot;...&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">boolean</span> goodMeasure = <span class="keyword">false</span>;</span><br><span class="line">    <span class="keyword">if</span> (lp.width == ViewGroup.LayoutParams.WRAP_CONTENT) &#123;</span><br><span class="line">        <span class="comment">// On large screens, we don&#x27;t want to allow dialogs to just</span></span><br><span class="line">        <span class="comment">// stretch to fill the entire width of the screen to display</span></span><br><span class="line">        <span class="comment">// one line of text.  First try doing the layout at a smaller</span></span><br><span class="line">        <span class="comment">// size to see if it will fit.</span></span><br><span class="line">        <span class="keyword">final</span> DisplayMetrics packageMetrics = res.getDisplayMetrics();</span><br><span class="line">        res.getValue(com.android.internal.R.dimen.config_prefDialogWidth, mTmpValue, <span class="keyword">true</span>);</span><br><span class="line">        <span class="keyword">int</span> baseSize = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">if</span> (mTmpValue.type == TypedValue.TYPE_DIMENSION) &#123;</span><br><span class="line">            baseSize = (<span class="keyword">int</span>)mTmpValue.getDimension(packageMetrics);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (DEBUG_DIALOG) Log.v(mTag, <span class="string">&quot;Window &quot;</span> + mView + <span class="string">&quot;: baseSize=&quot;</span> + baseSize</span><br><span class="line">                + <span class="string">&quot;, desiredWindowWidth=&quot;</span> + desiredWindowWidth);</span><br><span class="line">        <span class="keyword">if</span> (baseSize != <span class="number">0</span> &amp;&amp; desiredWindowWidth &gt; baseSize) &#123;</span><br><span class="line">            childWidthMeasureSpec = getRootMeasureSpec(baseSize, lp.width);</span><br><span class="line">            childHeightMeasureSpec = getRootMeasureSpec(desiredWindowHeight, lp.height);</span><br><span class="line">            performMeasure(childWidthMeasureSpec, childHeightMeasureSpec);</span><br><span class="line">            <span class="keyword">if</span> (DEBUG_DIALOG) Log.v(mTag, <span class="string">&quot;Window &quot;</span> + mView + <span class="string">&quot;: measured (&quot;</span></span><br><span class="line">                    + host.getMeasuredWidth() + <span class="string">&quot;,&quot;</span> + host.getMeasuredHeight()</span><br><span class="line">                    + <span class="string">&quot;) from width spec: &quot;</span> + MeasureSpec.toString(childWidthMeasureSpec)</span><br><span class="line">                    + <span class="string">&quot; and height spec: &quot;</span> + MeasureSpec.toString(childHeightMeasureSpec));</span><br><span class="line">            <span class="keyword">if</span> ((host.getMeasuredWidthAndState()&amp;View.MEASURED_STATE_TOO_SMALL) == <span class="number">0</span>) &#123;</span><br><span class="line">                goodMeasure = <span class="keyword">true</span>;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="comment">// Didn&#x27;t fit in that size... try expanding a bit.</span></span><br><span class="line">                baseSize = (baseSize+desiredWindowWidth)/<span class="number">2</span>;</span><br><span class="line">                <span class="keyword">if</span> (DEBUG_DIALOG) Log.v(mTag, <span class="string">&quot;Window &quot;</span> + mView + <span class="string">&quot;: next baseSize=&quot;</span></span><br><span class="line">                        + baseSize);</span><br><span class="line">                childWidthMeasureSpec = getRootMeasureSpec(baseSize, lp.width);</span><br><span class="line">                performMeasure(childWidthMeasureSpec, childHeightMeasureSpec);</span><br><span class="line">                <span class="keyword">if</span> (DEBUG_DIALOG) Log.v(mTag, <span class="string">&quot;Window &quot;</span> + mView + <span class="string">&quot;: measured (&quot;</span></span><br><span class="line">                        + host.getMeasuredWidth() + <span class="string">&quot;,&quot;</span> + host.getMeasuredHeight() + <span class="string">&quot;)&quot;</span>);</span><br><span class="line">                <span class="keyword">if</span> ((host.getMeasuredWidthAndState()&amp;View.MEASURED_STATE_TOO_SMALL) == <span class="number">0</span>) &#123;</span><br><span class="line">                    <span class="keyword">if</span> (DEBUG_DIALOG) Log.v(mTag, <span class="string">&quot;Good!&quot;</span>);</span><br><span class="line">                    goodMeasure = <span class="keyword">true</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (!goodMeasure) &#123;</span><br><span class="line">        childWidthMeasureSpec = getRootMeasureSpec(desiredWindowWidth, lp.width);</span><br><span class="line">        childHeightMeasureSpec = getRootMeasureSpec(desiredWindowHeight, lp.height);</span><br><span class="line">        performMeasure(childWidthMeasureSpec, childHeightMeasureSpec);</span><br><span class="line">        <span class="keyword">if</span> (mWidth != host.getMeasuredWidth() || mHeight != host.getMeasuredHeight()) &#123;</span><br><span class="line">            windowSizeMayChange = <span class="keyword">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (DBG) &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;======================================&quot;</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;performTraversals -- after measure&quot;</span>);</span><br><span class="line">        host.debug();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> windowSizeMayChange;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">performMeasure</span><span class="params">(<span class="keyword">int</span> childWidthMeasureSpec, <span class="keyword">int</span> childHeightMeasureSpec)</span> </span>&#123;</span><br><span class="line">    ...</span><br><span class="line">    mView.measure(childWidthMeasureSpec, childHeightMeasureSpec);</span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">void</span> <span class="title">measure</span><span class="params">(<span class="keyword">int</span> widthMeasureSpec, <span class="keyword">int</span> heightMeasureSpec)</span> </span>&#123;</span><br><span class="line">    ...</span><br><span class="line">    <span class="keyword">if</span> (forceLayout || needsLayout) &#123;</span><br><span class="line">        <span class="comment">// first clears the measured dimension flag</span></span><br><span class="line">        mPrivateFlags &amp;= ~PFLAG_MEASURED_DIMENSION_SET;</span><br><span class="line"></span><br><span class="line">        resolveRtlPropertiesIfNeeded();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">int</span> cacheIndex = forceLayout ? -<span class="number">1</span> : mMeasureCache.indexOfKey(key);</span><br><span class="line">        <span class="keyword">if</span> (cacheIndex &lt; <span class="number">0</span> || sIgnoreMeasureCache) &#123;</span><br><span class="line">            <span class="comment">// measure ourselves, this should set the measured dimension flag back</span></span><br><span class="line">            onMeasure(widthMeasureSpec, heightMeasureSpec);</span><br><span class="line">            mPrivateFlags3 &amp;= ~PFLAG3_MEASURE_NEEDED_BEFORE_LAYOUT;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">long</span> value = mMeasureCache.valueAt(cacheIndex);</span><br><span class="line">            <span class="comment">// Casting a long to int drops the high 32 bits, no mask needed</span></span><br><span class="line">            setMeasuredDimensionRaw((<span class="keyword">int</span>) (value &gt;&gt; <span class="number">32</span>), (<span class="keyword">int</span>) value);</span><br><span class="line">            mPrivateFlags3 |= PFLAG3_MEASURE_NEEDED_BEFORE_LAYOUT;</span><br><span class="line">        &#125;</span><br><span class="line">        ...</span><br><span class="line">        mPrivateFlags |= PFLAG_LAYOUT_REQUIRED; <span class="comment">//measure里面会对flag进行设置，所以不能直接重写measure()，而是写onMeasure()</span></span><br><span class="line">    &#125;</span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="布局控件树"><a href="#布局控件树" class="headerlink" title="布局控件树"></a>布局控件树</h3><p>这里主要的工作内容是 performLayout() 和  mWindowSession.setTransparentRegion().</p>
<p>整个窗口默认都是透明区域，当普通控件加入时，控件会把自己的区域从透明区域移除掉，而SurfaceView会把自己的区域添加到当前窗口的透明区域中。<br>随后这个区域会被设置给wms,在surfaceFlinger对surface进行混合的时候，窗口的透明区域将会被忽略掉</p>
<p>需要注意的是在layout方法里面，会调用到setFrame来检查布局坐标是否变化，如果发生变化，就会调用invalidate(),此时一定会调用onDraw()</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">performTraversals()&#123;</span><br><span class="line">    ... <span class="comment">//测量阶段(1,2,3)</span></span><br><span class="line">    <span class="keyword">final</span> <span class="keyword">boolean</span> didLayout = layoutRequested &amp;&amp; (!mStopped || mReportNextDraw);</span><br><span class="line">    <span class="keyword">boolean</span> triggerGlobalLayoutListener = didLayout|| mAttachInfo.mRecomputeGlobalAttributes;</span><br><span class="line">    <span class="keyword">if</span> (didLayout) &#123;</span><br><span class="line">        performLayout(lp, mWidth, mHeight);</span><br><span class="line">        ...</span><br><span class="line">        <span class="keyword">if</span> (!mTransparentRegion.equals(mPreviousTransparentRegion)) &#123;</span><br><span class="line">            mPreviousTransparentRegion.set(mTransparentRegion);</span><br><span class="line">            mFullRedrawNeeded = <span class="keyword">true</span>;</span><br><span class="line">            <span class="comment">// reconfigure window manager</span></span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                mWindowSession.setTransparentRegion(mWindow, mTransparentRegion);</span><br><span class="line">            &#125; <span class="keyword">catch</span> (RemoteException e) &#123;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    ... <span class="comment">//绘制阶段</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">performLayout</span><span class="params">(WindowManager.LayoutParams lp, <span class="keyword">int</span> desiredWindowWidth,<span class="keyword">int</span> desiredWindowHeight)</span> </span>&#123;</span><br><span class="line">        ...</span><br><span class="line">        <span class="keyword">final</span> View host = mView;</span><br><span class="line">        ...</span><br><span class="line">        host.layout(<span class="number">0</span>, <span class="number">0</span>, host.getMeasuredWidth(), host.getMeasuredHeight());</span><br><span class="line">        ...</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">layout</span><span class="params">(<span class="keyword">int</span> l, <span class="keyword">int</span> t, <span class="keyword">int</span> r, <span class="keyword">int</span> b)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> ((mPrivateFlags3 &amp; PFLAG3_MEASURE_NEEDED_BEFORE_LAYOUT) != <span class="number">0</span>) &#123;</span><br><span class="line">        onMeasure(mOldWidthMeasureSpec, mOldHeightMeasureSpec);</span><br><span class="line">        mPrivateFlags3 &amp;= ~PFLAG3_MEASURE_NEEDED_BEFORE_LAYOUT;</span><br><span class="line">    &#125;</span><br><span class="line">    ...</span><br><span class="line">    <span class="comment">//注意这里，setOpticalFrame和setFrame都会调用到setFrame，里面可能会调用invalidate(),此时一定会调用onDraw()</span></span><br><span class="line">    <span class="keyword">boolean</span> changed = isLayoutModeOptical(mParent) ?setOpticalFrame(l, t, r, b) : setFrame(l, t, r, b);</span><br><span class="line">    <span class="keyword">if</span> (changed || (mPrivateFlags &amp; PFLAG_LAYOUT_REQUIRED) == PFLAG_LAYOUT_REQUIRED) &#123;</span><br><span class="line">        onLayout(changed, l, t, r, b);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (shouldDrawRoundScrollbar()) &#123;</span><br><span class="line">            <span class="keyword">if</span>(mRoundScrollbarRenderer == <span class="keyword">null</span>) &#123;</span><br><span class="line">                mRoundScrollbarRenderer = <span class="keyword">new</span> RoundScrollbarRenderer(<span class="keyword">this</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            mRoundScrollbarRenderer = <span class="keyword">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        mPrivateFlags &amp;= ~PFLAG_LAYOUT_REQUIRED;  <span class="comment">////layout里面会对flag进行设置，所以不能直接重写layout()，而是写onLayout()</span></span><br><span class="line">        ...</span><br><span class="line">    &#125;</span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">boolean</span> <span class="title">setFrame</span><span class="params">(<span class="keyword">int</span> left, <span class="keyword">int</span> top, <span class="keyword">int</span> right, <span class="keyword">int</span> bottom)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">boolean</span> changed = <span class="keyword">false</span>;</span><br><span class="line">    <span class="keyword">if</span> (mLeft != left || mRight != right || mTop != top || mBottom != bottom) &#123;</span><br><span class="line">        changed = <span class="keyword">true</span>;</span><br><span class="line">        ...</span><br><span class="line">        <span class="keyword">boolean</span> sizeChanged = (newWidth != oldWidth) || (newHeight != oldHeight);</span><br><span class="line">        <span class="comment">// Invalidate our old position</span></span><br><span class="line">        invalidate(sizeChanged);</span><br><span class="line">        ...</span><br><span class="line">        <span class="keyword">if</span> (sizeChanged) &#123;</span><br><span class="line">            sizeChange(newWidth, newHeight, oldWidth, oldHeight);</span><br><span class="line">        &#125;</span><br><span class="line">        ...</span><br><span class="line">    <span class="keyword">return</span> changed;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="绘制控件"><a href="#绘制控件" class="headerlink" title="绘制控件"></a>绘制控件</h3><ol>
<li>如果view不可见，不需要绘制</li>
<li>如果surface是新创建的(比如从不可见到可见，此时会新创建surface)，不需要绘制，调用scheduleTraversals()下次再绘制。</li>
<li>绘制的时候仅仅会对需要重绘的区域进行绘制，这部分区域称为脏区域。如果mDirty为空，有可能不会进行绘制。在控件中表示为<code>PFLAG_DIRTY</code>和<code>PFLAG_DIRTY_OPAQUE</code>,表示这个控件中是否有需要重绘的区域。其中<code>PFLAG_DIRTY_OPAQUE</code>表示此区域是不透明的，如果是整个控件，那就是意思是可以不用控件的底层背景，提高绘制效率。</li>
</ol>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">performTraversals()&#123;</span><br><span class="line">    ... <span class="comment">//测量阶段(1,2,3)</span></span><br><span class="line">    ... <span class="comment">//布局阶段</span></span><br><span class="line">    <span class="keyword">boolean</span> cancelDraw = mAttachInfo.mTreeObserver.dispatchOnPreDraw() || !isViewVisible;</span><br><span class="line">    <span class="keyword">if</span> (!cancelDraw &amp;&amp; !newSurface) &#123;</span><br><span class="line">        <span class="keyword">if</span> (mPendingTransitions != <span class="keyword">null</span> &amp;&amp; mPendingTransitions.size() &gt; <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; mPendingTransitions.size(); ++i) &#123;</span><br><span class="line">                mPendingTransitions.get(i).startChangingAnimations();</span><br><span class="line">            &#125;</span><br><span class="line">            mPendingTransitions.clear();</span><br><span class="line">        &#125;</span><br><span class="line">        performDraw();</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (isViewVisible) &#123;</span><br><span class="line">            scheduleTraversals();</span><br><span class="line">        &#125;</span><br><span class="line">       ...</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">performDraw</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (mAttachInfo.mDisplayState == Display.STATE_OFF &amp;&amp; !mReportNextDraw) &#123;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (mView == <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">final</span> <span class="keyword">boolean</span> fullRedrawNeeded = mFullRedrawNeeded;</span><br><span class="line">        mFullRedrawNeeded = <span class="keyword">false</span>;</span><br><span class="line"></span><br><span class="line">        mIsDrawing = <span class="keyword">true</span>;</span><br><span class="line">        Trace.traceBegin(Trace.TRACE_TAG_VIEW, <span class="string">&quot;draw&quot;</span>);</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            draw(fullRedrawNeeded);</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            mIsDrawing = <span class="keyword">false</span>;</span><br><span class="line">            Trace.traceEnd(Trace.TRACE_TAG_VIEW);</span><br><span class="line">        &#125;</span><br><span class="line">        ...</span><br><span class="line">        pendingDrawFinished();</span><br><span class="line">        ...</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>
<p>这里主要有两个步骤，其中<code>pendingDrawFinished()</code>用来通知 wms 控件绘制结束，wms收到消息后就会把窗口的surface显示出来。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">pendingDrawFinished</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (mDrawsNeededToReport == <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(<span class="string">&quot;Unbalanced drawPending/pendingDrawFinished calls&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        mDrawsNeededToReport--;</span><br><span class="line">        <span class="keyword">if</span> (mDrawsNeededToReport == <span class="number">0</span>) &#123;</span><br><span class="line">            reportDrawFinished();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">reportDrawFinished</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            mDrawsNeededToReport = <span class="number">0</span>;</span><br><span class="line">            mWindowSession.finishDrawing(mWindow);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (RemoteException e) &#123;</span><br><span class="line">            <span class="comment">// Have fun!</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>另一个则是 控件的绘制过程<code>draw(fullRedrawNeeded);</code>：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">draw</span><span class="params">(<span class="keyword">boolean</span> fullRedrawNeeded)</span> </span>&#123;</span><br><span class="line">        Surface surface = mSurface;</span><br><span class="line">        ... <span class="comment">// 控件滚动的相关计算</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">final</span> Rect dirty = mDirty;</span><br><span class="line">        <span class="keyword">if</span> (mSurfaceHolder != <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="comment">// The app owns the surface, we won&#x27;t draw.</span></span><br><span class="line">            dirty.setEmpty();</span><br><span class="line">            <span class="keyword">if</span> (animating &amp;&amp; mScroller != <span class="keyword">null</span>) &#123;</span><br><span class="line">                mScroller.abortAnimation();</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (fullRedrawNeeded) &#123;</span><br><span class="line">            mAttachInfo.mIgnoreDirtyState = <span class="keyword">true</span>;</span><br><span class="line">            dirty.set(<span class="number">0</span>, <span class="number">0</span>, (<span class="keyword">int</span>) (mWidth * appScale + <span class="number">0.5f</span>), (<span class="keyword">int</span>) (mHeight * appScale + <span class="number">0.5f</span>));</span><br><span class="line">        &#125;</span><br><span class="line">        ...</span><br><span class="line">        <span class="keyword">if</span> (!dirty.isEmpty() || mIsAnimating || accessibilityFocusDirty) &#123;</span><br><span class="line">            <span class="keyword">if</span> (mAttachInfo.mThreadedRenderer != <span class="keyword">null</span> &amp;&amp; mAttachInfo.mThreadedRenderer.isEnabled()) &#123;</span><br><span class="line">               ...</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                ...</span><br><span class="line">                <span class="keyword">if</span> (!drawSoftware(surface, mAttachInfo, xOffset, yOffset, scalingRequired, dirty)) &#123;</span><br><span class="line">                    <span class="keyword">return</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        ...</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">boolean</span> <span class="title">drawSoftware</span><span class="params">(Surface surface, AttachInfo attachInfo, <span class="keyword">int</span> xoff, <span class="keyword">int</span> yoff,</span></span></span><br><span class="line"><span class="function"><span class="params">            <span class="keyword">boolean</span> scalingRequired, Rect dirty)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// Draw with software renderer.</span></span><br><span class="line">        <span class="keyword">final</span> Canvas canvas;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            ...</span><br><span class="line">            canvas = mSurface.lockCanvas(dirty);</span><br><span class="line">            ...</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Surface.OutOfResourcesException e) &#123;</span><br><span class="line">           ...</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            ...</span><br><span class="line">            mView.draw(canvas);</span><br><span class="line">            ...</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            surface.unlockCanvasAndPost(canvas);</span><br><span class="line">            ...</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">draw</span><span class="params">(Canvas canvas)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">final</span> <span class="keyword">int</span> privateFlags = mPrivateFlags;</span><br><span class="line">        <span class="keyword">final</span> <span class="keyword">boolean</span> dirtyOpaque = (privateFlags &amp; PFLAG_DIRTY_MASK) == PFLAG_DIRTY_OPAQUE &amp;&amp;</span><br><span class="line">                (mAttachInfo == <span class="keyword">null</span> || !mAttachInfo.mIgnoreDirtyState);</span><br><span class="line">        mPrivateFlags = (privateFlags &amp; ~PFLAG_DIRTY_MASK) | PFLAG_DRAWN;</span><br><span class="line"></span><br><span class="line">        <span class="comment">/*</span></span><br><span class="line"><span class="comment">         * Draw traversal performs several drawing steps which must be executed</span></span><br><span class="line"><span class="comment">         * in the appropriate order:</span></span><br><span class="line"><span class="comment">         *</span></span><br><span class="line"><span class="comment">         *      1. Draw the background</span></span><br><span class="line"><span class="comment">         *      2. If necessary, save the canvas&#x27; layers to prepare for fading</span></span><br><span class="line"><span class="comment">         *      3. Draw view&#x27;s content</span></span><br><span class="line"><span class="comment">         *      4. Draw children</span></span><br><span class="line"><span class="comment">         *      5. If necessary, draw the fading edges and restore layers</span></span><br><span class="line"><span class="comment">         *      6. Draw decorations (scrollbars for instance)</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// Step 1, draw the background, if needed</span></span><br><span class="line">        <span class="keyword">int</span> saveCount;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (!dirtyOpaque) &#123;</span><br><span class="line">            drawBackground(canvas);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// skip step 2 &amp; 5 if possible (common case)</span></span><br><span class="line">        <span class="keyword">final</span> <span class="keyword">int</span> viewFlags = mViewFlags;</span><br><span class="line">        <span class="keyword">boolean</span> horizontalEdges = (viewFlags &amp; FADING_EDGE_HORIZONTAL) != <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">boolean</span> verticalEdges = (viewFlags &amp; FADING_EDGE_VERTICAL) != <span class="number">0</span>;</span><br><span class="line">        <span class="comment">//如果不需要绘制 渐变边界，则进入简便流程，跳过2，5步骤</span></span><br><span class="line">        <span class="keyword">if</span> (!verticalEdges &amp;&amp; !horizontalEdges) &#123;</span><br><span class="line">            <span class="comment">// Step 3, draw the content</span></span><br><span class="line">            <span class="keyword">if</span> (!dirtyOpaque) onDraw(canvas);</span><br><span class="line"></span><br><span class="line">            <span class="comment">// Step 4, draw the children</span></span><br><span class="line">            dispatchDraw(canvas);</span><br><span class="line"></span><br><span class="line">            drawAutofilledHighlight(canvas);</span><br><span class="line"></span><br><span class="line">            <span class="comment">// Overlay is part of the content and draws beneath Foreground</span></span><br><span class="line">            <span class="keyword">if</span> (mOverlay != <span class="keyword">null</span> &amp;&amp; !mOverlay.isEmpty()) &#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">                mOverlay.getOverlayView().dispatchDraw(canvas);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="comment">// Step 6, draw decorations (foreground, scrollbars)</span></span><br><span class="line">            onDrawForeground(canvas);</span><br><span class="line"></span><br><span class="line">            <span class="comment">// Step 7, draw the default focus highlight</span></span><br><span class="line">            drawDefaultFocusHighlight(canvas);</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> (debugDraw()) &#123;</span><br><span class="line">                debugDrawFocus(canvas);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="comment">// we&#x27;re done...</span></span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//完整流程</span></span><br><span class="line">        ...</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>
<p>draw的draw()方法，简便流程主要有以下几步：</p>
<ol>
<li>绘制背景 <code>drawBackground()</code></li>
<li>绘制控件自身，<code>onDraw(canvas)</code>，默认空实现</li>
<li>绘制子控件 <code>dispatchDraw(canvas);</code>，默认空实现 </li>
<li>绘制装饰(前景色，滚动条,etc.) <code>onDrawForeground(canvas);</code></li>
</ol>
<h2 id="Activity和PhoneWindow"><a href="#Activity和PhoneWindow" class="headerlink" title="Activity和PhoneWindow"></a>Activity和PhoneWindow</h2><p><img src="/2018/08/20/Android%E6%8E%A7%E4%BB%B6%E6%80%BB%E7%BB%93/Activity%E7%9A%84%E6%98%BE%E7%A4%BA%E8%BF%87%E7%A8%8B.jpg" alt="Activity的显示过程"></p>
<h3 id="PhoneWindow"><a href="#PhoneWindow" class="headerlink" title="PhoneWindow"></a>PhoneWindow</h3><p>通过 WindowManager ，ViewRootImpl 创建窗口的时候，我们仍然需要自行初始化 LayoutParams ，处理控件树的添加和删除等。 Android 在此之上又提供了一套机制，用于更简单的创建窗口和界面。而且 界面提供了预定义的样式，比如 标题栏，图标等，相比于自行创建符合Android规范的界面模板，进一步简化了开发者工作。这些工作是通过一个 com.view.Window 抽象类来实现的，目前它的唯一实现是PhoneWindow 类。我们仅仅需要通过setContentView()设置自己定义的控件树就可以得到一个带有标准模板的窗口界面，模板的样式取决于flag,theme等属性</p>
<h3 id="DecorView"><a href="#DecorView" class="headerlink" title="DecorView"></a>DecorView</h3><p>DecorView 继承了 FrameLayout , 是 PhoneWindow 类里面的 控件树的根。预定义的样式就是由它实现，在我们通过setContentView()设置自己定义的View的时候，仅仅是设置View到DecorView里面成为它的子view。</p>
<h2 id="控件焦点"><a href="#控件焦点" class="headerlink" title="控件焦点"></a>控件焦点</h2><ul>
<li>触摸模式(Touch_mode)：在触摸模式下，一些控件比如菜单项，按钮等将不再可以保持或获取焦点，文本框等依然可以获取焦点</li>
<li>非触摸模式： 在这个模式下，菜单项，按钮等都可以获取焦点，通过方向键使焦点在这些控件之间游走，从而进行选择和确认</li>
</ul>
<p>控件能否获取焦点的策略：</p>
<ol>
<li>当 NOT_FOCUSABLE 标记位于View.mViewFlags时，无法获取焦点</li>
<li>当控件的父控件的DescendantFocusability 取值为 FOCUS_BLOCK_DESCENDANTS 时，无法获取焦点。</li>
<li>当 FOCUSABLE 标记位于View.mViewFlags时，还有两种情况：<ol>
<li>位于非触摸模式时，可以获取焦点</li>
<li>位于触摸模式的时候，View.mViewFlags 中存在 FUCUSABLE_IN_TOUCH_MODE标记可以获取焦点，否则不能获取焦点</li>
</ol>
</li>
</ol>
<p>获取到焦点的控件实际上只是增加了 PFLAG_FOCUSED 标记，而失去焦点则删除这个标记。对于获取到焦点的控件来说，它的父控件则会用 mFocused 变量来保存此控件，这样通过控件树的根节点可以迅速的一层层找到最终拥有焦点的控件。View类则提供两个方法来查询焦点的状态。</p>
<ol>
<li><code>isFocused()</code> 表示此控件是否含有<code>PFLAG_FOCUSED</code>标记，即焦点的持有者</li>
<li><code>hasFocused()</code> 表示焦点是否在其内部，也就是自己或者子控件持有焦点</li>
</ol>
<h2 id="输入事件的派发"><a href="#输入事件的派发" class="headerlink" title="输入事件的派发"></a>输入事件的派发</h2><p>在ViewRootImpl.setView()中，ViewRootImpl使用wms分配的 InputChannel 创建了 InputEventReceiver 来接收输入事件，它们通过 onInputEvent()回调来得到事件并且进行处理：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">setview</span><span class="params">(...)</span></span>&#123;</span><br><span class="line">    ...</span><br><span class="line">    mInputEventReceiver = <span class="keyword">new</span> WindowInputEventReceiver(mInputChannel,Looper.myLooper());</span><br><span class="line">    ...</span><br><span class="line">    mSyntheticInputStage = <span class="keyword">new</span> SyntheticInputStage();</span><br><span class="line">    InputStage viewPostImeStage = <span class="keyword">new</span> ViewPostImeInputStage(mSyntheticInputStage);</span><br><span class="line">    InputStage nativePostImeStage = <span class="keyword">new</span> NativePostImeInputStage(viewPostImeStage,<span class="string">&quot;aq:native-post-ime:&quot;</span> + counterSuffix);</span><br><span class="line">    InputStage earlyPostImeStage = <span class="keyword">new</span> EarlyPostImeInputStage(nativePostImeStage);</span><br><span class="line">    InputStage imeStage = <span class="keyword">new</span> ImeInputStage(earlyPostImeStage,<span class="string">&quot;aq:ime:&quot;</span> + counterSuffix);</span><br><span class="line">    InputStage viewPreImeStage = <span class="keyword">new</span> ViewPreImeInputStage(imeStage);</span><br><span class="line">    InputStage nativePreImeStage = <span class="keyword">new</span> NativePreImeInputStage(viewPreImeStage,<span class="string">&quot;aq:native-pre-ime:&quot;</span> + counterSuffix);</span><br><span class="line"></span><br><span class="line">    mFirstInputStage = nativePreImeStage;</span><br><span class="line">    mFirstPostImeInputStage = earlyPostImeStage;</span><br><span class="line">    mPendingInputEventQueueLengthCounterName = <span class="string">&quot;aq:pending:&quot;</span> + counterSuffix;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">final</span> <span class="class"><span class="keyword">class</span> <span class="title">WindowInputEventReceiver</span> <span class="keyword">extends</span> <span class="title">InputEventReceiver</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">WindowInputEventReceiver</span><span class="params">(InputChannel inputChannel, Looper looper)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>(inputChannel, looper);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onInputEvent</span><span class="params">(InputEvent event, <span class="keyword">int</span> displayId)</span> </span>&#123;</span><br><span class="line">        enqueueInputEvent(event, <span class="keyword">this</span>, <span class="number">0</span>, <span class="keyword">true</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onBatchedInputEventPending</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (mUnbufferedInputDispatch) &#123;</span><br><span class="line">            <span class="keyword">super</span>.onBatchedInputEventPending();</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            scheduleConsumeBatchedInput();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">dispose</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        unscheduleConsumeBatchedInput();</span><br><span class="line">        <span class="keyword">super</span>.dispose();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">enqueueInputEvent</span><span class="params">(InputEvent event,</span></span></span><br><span class="line"><span class="function"><span class="params">        InputEventReceiver receiver, <span class="keyword">int</span> flags, <span class="keyword">boolean</span> processImmediately)</span> </span>&#123;</span><br><span class="line">    adjustInputEventForCompatibility(event);</span><br><span class="line">    QueuedInputEvent q = obtainQueuedInputEvent(event, receiver, flags);</span><br><span class="line">    ... <span class="comment">//输入事件加入到链表中</span></span><br><span class="line">    <span class="keyword">if</span> (processImmediately) &#123;</span><br><span class="line">        doProcessInputEvents();</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="comment">//稍后处理，通过handler还是会走到doProcessInputEvents()中</span></span><br><span class="line">        scheduleProcessInputEvents();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">doProcessInputEvents</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="comment">// Deliver all pending input events in the queue.</span></span><br><span class="line">    <span class="keyword">while</span> (mPendingInputEventHead != <span class="keyword">null</span>) &#123;</span><br><span class="line">        QueuedInputEvent q = mPendingInputEventHead;</span><br><span class="line">        mPendingInputEventHead = q.mNext;</span><br><span class="line">        ...</span><br><span class="line">        deliverInputEvent(q);</span><br><span class="line">    &#125;</span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">deliverInputEvent</span><span class="params">(QueuedInputEvent q)</span> </span>&#123;</span><br><span class="line">    Trace.asyncTraceBegin(Trace.TRACE_TAG_VIEW, <span class="string">&quot;deliverInputEvent&quot;</span>,</span><br><span class="line">            q.mEvent.getSequenceNumber());</span><br><span class="line">    <span class="keyword">if</span> (mInputEventConsistencyVerifier != <span class="keyword">null</span>) &#123;</span><br><span class="line">        mInputEventConsistencyVerifier.onInputEvent(q.mEvent, <span class="number">0</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    InputStage stage;</span><br><span class="line">    <span class="keyword">if</span> (q.shouldSendToSynthesizer()) &#123;</span><br><span class="line">        stage = mSyntheticInputStage;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        stage = q.shouldSkipIme() ? mFirstPostImeInputStage : mFirstInputStage;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (stage != <span class="keyword">null</span>) &#123;</span><br><span class="line">        stage.deliver(q);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="comment">//做一些清理回收工作</span></span><br><span class="line">        finishInputEvent(q);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>其中，输入事件在这里被定义成了几个类型：</p>
<ol>
<li>keyEvent 按键事件</li>
<li>PointerEvent 触摸事件 </li>
<li>TrackballEvent 轨迹球事件</li>
<li>GenericMotionEvent 其他事件，比如悬浮(HOVER)事件，游戏手柄等</li>
</ol>
<p>而 InputStage 是一个基类，通过Wrapper模式不断的调用apply和forward方法来进行链式调用，定义了6个state，在各个阶段会选择性处理感兴趣的事件，在任一阶段事件被消耗掉了都不会继续传递:</p>
<ol>
<li>nativePreImeStage : 这里会把输入事件传给native层看看是否要处理</li>
<li>viewPreImeStage ： 这里会把输入事件交给view去处理，对 keyEvent事件 调用 <code>mView.dispatchKeyEventPreIme(event)</code></li>
<li>imeStage : 这里会把输入事件交给输入法窗口去处理，调用<code>imm.dispatchInputEvent(event, q, this, mHandler)</code></li>
<li>earlyPostImeStage ：这里会进行一些状态记录，触摸模式的确认和退出等</li>
<li>nativePostImeStage ： 同1一样，只不过这里是在 输入法窗口处理 之后再次传给 native 层</li>
<li>viewPostImeStage ： 把输入事件交给view去处理 <figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">int</span> <span class="title">onProcess</span><span class="params">(QueuedInputEvent q)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (q.mEvent <span class="keyword">instanceof</span> KeyEvent) &#123;</span><br><span class="line">        <span class="keyword">return</span> processKeyEvent(q);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">final</span> <span class="keyword">int</span> source = q.mEvent.getSource();</span><br><span class="line">        <span class="keyword">if</span> ((source &amp; InputDevice.SOURCE_CLASS_POINTER) != <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> processPointerEvent(q);</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> ((source &amp; InputDevice.SOURCE_CLASS_TRACKBALL) != <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> processTrackballEvent(q);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> processGenericMotionEvent(q);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="按键事件"><a href="#按键事件" class="headerlink" title="按键事件"></a>按键事件</h3>keyEvent 按键事件是基于焦点派发的，因为在非触摸模式下，输入法窗口无法获取到焦点，因此在这里会给输入法窗口一个处理的机会。对于view来说，处理的逻辑相对比较简单，如果自己拥有焦点，则调用自己的<code>view.onKeyPreIme()</code>方法去处理，否则调用<code>mFocused.dispatchKeyEventPreIme(event)</code></li>
</ol>
<h3 id="触摸事件"><a href="#触摸事件" class="headerlink" title="触摸事件"></a>触摸事件</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// ViewRootImply::processPointerEvent</span></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">int</span> <span class="title">processPointerEvent</span><span class="params">(QueuedInputEvent q)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">final</span> MotionEvent event = (MotionEvent)q.mEvent;</span><br><span class="line">    ...</span><br><span class="line">    <span class="keyword">boolean</span> handled = mView.dispatchPointerEvent(event);</span><br><span class="line">    ...</span><br><span class="line">    <span class="keyword">return</span> handled ? FINISH_HANDLED : FORWARD;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//View::dispatchPointerEvent()</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">boolean</span> <span class="title">dispatchPointerEvent</span><span class="params">(MotionEvent event)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (event.isTouchEvent()) &#123;</span><br><span class="line">        <span class="keyword">return</span> dispatchTouchEvent(event);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> dispatchGenericMotionEvent(event);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>多点触摸 ：<br>触摸事件被封装为一个 MotionEvent 类，在多点触摸的情况下，即使 MotionEvent 由一个触摸点触发，它也包含所有触控点的位置信息。这时候通过 <code>MotionEvent.getAction()</code>获取的是一个复合值，低8位描述了动作，高8位描述了触控点的索引号。我们可以通过<code>MotionEvent.getActionMasked()</code>和<code>MotionEvent.getActionIndex()</code>分别获取这两个值。<code>MotionEvent.getX(index)</code>和<code>MotionEvent.getY(index)</code>则接受索引号为参数返回此触摸点的位置。</p>
<p>索引号不是固定的，比如当我们使用 AB两个手指按下的时候，它们会分别获得的索引号是0和1，当A抬起后，B的索引号则变成了0。但是我们可以通过<code>MotionEvent.getPointerId(index)</code>来获取这个索引号对应的触控点的pointerId,这个值则是在不变的</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//ACTION_DOWN 是第一个手指按下 ，ACTION_UP 是最后一个手指抬起</span></span><br><span class="line">ACTION_DOWN --&gt; ACTION_POINTER_DOWN --&gt;ACTION_POINTER_DOWN --&gt; ACTION_POINTER_UP --&gt; ACTION_POINTER_UP --&gt; ACTION_UP</span><br><span class="line"></span><br></pre></td></tr></table></figure>


<p>到这里ViewRootImpl把事件传递给了mView对象，而在实际的使用中，这个mView对象则是指 DecorView (参考<code>WindowManagerGlobal::addView</code>方法)，DecorView对<code>dispatchTouchEvent</code>进行了重写：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//DecorView::dispatchTouchEvent</span></span><br><span class="line"> <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">dispatchTouchEvent</span><span class="params">(MotionEvent ev)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">final</span> Window.Callback cb = mWindow.getCallback();</span><br><span class="line">        <span class="keyword">return</span> cb != <span class="keyword">null</span> &amp;&amp; !mWindow.isDestroyed() &amp;&amp; mFeatureId &lt; <span class="number">0</span></span><br><span class="line">                ? cb.dispatchTouchEvent(ev) : <span class="keyword">super</span>.dispatchTouchEvent(ev);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br></pre></td></tr></table></figure>
<p>这里的mWindow 则是在 DecorView的构造函数中传入的 Activity的 PhoneWindow类，而它的 Callback ，是在 <code>Activity::onAttach(...)</code>方法中设置的：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//Activity::onAttach(...)</span></span><br><span class="line"><span class="function"><span class="keyword">final</span> <span class="keyword">void</span> <span class="title">attach</span><span class="params">(...)</span></span>&#123;</span><br><span class="line">    ...</span><br><span class="line">    mWindow = <span class="keyword">new</span> PhoneWindow(<span class="keyword">this</span>, window, activityConfigCallback);</span><br><span class="line">    mWindow.setWindowControllerCallback(<span class="keyword">this</span>);</span><br><span class="line">    mWindow.setCallback(<span class="keyword">this</span>); </span><br><span class="line">    ... </span><br><span class="line">&#125; </span><br><span class="line"></span><br><span class="line"><span class="comment">//Activity::dispatchTouchEvent</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">dispatchTouchEvent</span><span class="params">(MotionEvent ev)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (ev.getAction() == MotionEvent.ACTION_DOWN) &#123;</span><br><span class="line">        onUserInteraction();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (getWindow().superDispatchTouchEvent(ev)) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> onTouchEvent(ev);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//PhoneWindow::superDispatchTouchEvent</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">superDispatchTouchEvent</span><span class="params">(MotionEvent event)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> mDecor.superDispatchTouchEvent(event);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//DecorView::superDispatchTouchEvent</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">superDispatchTouchEvent</span><span class="params">(MotionEvent event)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">super</span>.dispatchTouchEvent(event);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>
<p>可以说是绕了一圈又回到了<code>ViewGroup.dispatchTouchEvent</code>中来了，这个过程中，主要是加入了Activity的介入。Activity可以重写dispatchTouchEvent()和onTouchEvent 来在View处理触摸事件之前和之后进行介入。</p>
<p><code>dispatchTouchEvent()</code>有View和ViewGroup两种实现 :</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// View::dispatchTouchEvent()</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">dispatchTouchEvent</span><span class="params">(MotionEvent event)</span> </span>&#123;</span><br><span class="line">    ...</span><br><span class="line">    <span class="keyword">boolean</span> result = <span class="keyword">false</span>;</span><br><span class="line">    ...</span><br><span class="line">    <span class="keyword">if</span> (onFilterTouchEventForSecurity(event)) &#123;</span><br><span class="line">        <span class="keyword">if</span> ((mViewFlags &amp; ENABLED_MASK) == ENABLED &amp;&amp; handleScrollBarDragging(event)) &#123;</span><br><span class="line">            result = <span class="keyword">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//noinspection SimplifiableIfStatement</span></span><br><span class="line">        ListenerInfo li = mListenerInfo;</span><br><span class="line">        <span class="keyword">if</span> (li != <span class="keyword">null</span> &amp;&amp; li.mOnTouchListener != <span class="keyword">null</span> &amp;&amp; (mViewFlags &amp; ENABLED_MASK) == ENABLED</span><br><span class="line">                &amp;&amp; li.mOnTouchListener.onTouch(<span class="keyword">this</span>, event)) &#123;</span><br><span class="line">            result = <span class="keyword">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (!result &amp;&amp; onTouchEvent(event)) &#123;</span><br><span class="line">            result = <span class="keyword">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    ...</span><br><span class="line">    <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>对于View来说， dispatchTouchEvent() 主要做了两件事， 先把事件给<code>mOnTouchListener</code>处理，如果<code>mOnTouchListener</code>没有消耗掉，则交给<code>onTouchEvent(event)</code>处理。</p>
<p>ViewGroup的 dispatchTouchEvent() 相对来说比较复杂，总体来说，分以下几个步骤：</p>
<ol>
<li>准备工作：<ol>
<li>过滤可能导致安全问题的触控事件</li>
<li>如果是<code>ACTION_DOWN</code>则清空之前留下的touchTarget和touchState</li>
<li>处理 ViewGroup 的拦截的问题 (<code>FLAG_DISALLOW_INTERCEPT</code>和<code>onInterceptTouchEvent()</code>两个条件)</li>
</ol>
</li>
<li>如果事件没有被拦截或者取消掉，则寻找派发目标：<ol>
<li>如果是 <code>ACTION_DOWN</code>,<code>ACTION_POINTER_DOWN</code>或者<code>ACTION_HOVER_MOVE</code>之一，则进入下面的处理流程</li>
<li>记下触摸事件的pointId</li>
<li>按照一定(PreOrder)的顺序遍历child，如果触摸点不在这个child的控件范围内，则排除掉，否则尝试在自己保存的TouchTarget链表中寻找是否已经保存了;如果找到这个child,那么确定这个child就是此次派发目标，跳出循环，把后续的事件都交给它，寻找派发目标结束;如果在自己保存的TouchTarget链表中没有找到,还是尝试调用 <code>dispatchTransformedTouchEvent(...)</code> 把此次触摸事件派发给这个child控件(如果子控件也是一个ViewGroup,则有可能会继续分发下去)，调用结果是True的时候，为这个child生成新的TouchTarget节点并使用头插法加入到保存的链表中，然后跳出循环；如果调用 <code>dispatchTransformedTouchEvent(...)</code>返回false,表示这个子控件没有处理这个触摸事件，继续遍历child</li>
</ol>
</li>
<li>开始派发事件：<ol>
<li>如果TouchTarget链表为空，表示子view已经遍历完了，都没有消耗掉这个事件，此时则发给自己处理</li>
<li>如果TouchTarget链表不为空，表示有子view消耗掉了触摸事件。遍历 TouchTarget 链表的节点，如果是<code>ActionDown</code>之类的事件，则已经在上面第二步中处理过了，结束派发，否则尝试调用<code>dispatchTransformedTouchEvent(...)</code>把此次触摸事件派发给它，如果取消了事件，则需要回收掉该节点。如果失败，则继续尝试下一个节点</li>
</ol>
</li>
</ol>
<blockquote>
<p>这里没有太明白TouchTarget设计为链表的原因，即使是子view有重叠的情况，一个触摸点可能会落在多个view的范围内，此时会按照PreOrder的顺序去让它们依次处理，但是只要任意一个子view消耗了<code>ActionDown</code>事件，就会把它存TouchTarget中，后续的动作都不会再添加到TouchTarget了，TouchTarget只会add一次呀。。</p>
</blockquote>
<p>派发的函数<code>dispatchTransformedTouchEvent(...)</code>如下所示：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">    * Transforms a motion event into the coordinate space of a particular child view,</span></span><br><span class="line"><span class="comment">    * filters out irrelevant pointer ids, and overrides its action if necessary.</span></span><br><span class="line"><span class="comment">    * If child is null, assumes the MotionEvent will be sent to this ViewGroup instead.</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">boolean</span> <span class="title">dispatchTransformedTouchEvent</span><span class="params">(MotionEvent event, <span class="keyword">boolean</span> cancel,</span></span></span><br><span class="line"><span class="function"><span class="params">        View child, <span class="keyword">int</span> desiredPointerIdBits)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">final</span> <span class="keyword">boolean</span> handled;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Canceling motions is a special case.  We don&#x27;t need to perform any transformations</span></span><br><span class="line">    <span class="comment">// or filtering.  The important part is the action, not the contents.</span></span><br><span class="line">    <span class="keyword">final</span> <span class="keyword">int</span> oldAction = event.getAction();</span><br><span class="line">    <span class="keyword">if</span> (cancel || oldAction == MotionEvent.ACTION_CANCEL) &#123;</span><br><span class="line">        event.setAction(MotionEvent.ACTION_CANCEL);</span><br><span class="line">        <span class="keyword">if</span> (child == <span class="keyword">null</span>) &#123;</span><br><span class="line">            handled = <span class="keyword">super</span>.dispatchTouchEvent(event);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            handled = child.dispatchTouchEvent(event);</span><br><span class="line">        &#125;</span><br><span class="line">        event.setAction(oldAction);</span><br><span class="line">        <span class="keyword">return</span> handled;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Calculate the number of pointers to deliver.</span></span><br><span class="line">    <span class="keyword">final</span> <span class="keyword">int</span> oldPointerIdBits = event.getPointerIdBits();</span><br><span class="line">    <span class="keyword">final</span> <span class="keyword">int</span> newPointerIdBits = oldPointerIdBits &amp; desiredPointerIdBits;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// If for some reason we ended up in an inconsistent state where it looks like we</span></span><br><span class="line">    <span class="comment">// might produce a motion event with no pointers in it, then drop the event.</span></span><br><span class="line">    <span class="keyword">if</span> (newPointerIdBits == <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// If the number of pointers is the same and we don&#x27;t need to perform any fancy</span></span><br><span class="line">    <span class="comment">// irreversible transformations, then we can reuse the motion event for this</span></span><br><span class="line">    <span class="comment">// dispatch as long as we are careful to revert any changes we make.</span></span><br><span class="line">    <span class="comment">// Otherwise we need to make a copy.</span></span><br><span class="line">    <span class="keyword">final</span> MotionEvent transformedEvent;</span><br><span class="line">    <span class="keyword">if</span> (newPointerIdBits == oldPointerIdBits) &#123;</span><br><span class="line">        <span class="keyword">if</span> (child == <span class="keyword">null</span> || child.hasIdentityMatrix()) &#123;</span><br><span class="line">            <span class="keyword">if</span> (child == <span class="keyword">null</span>) &#123;</span><br><span class="line">                handled = <span class="keyword">super</span>.dispatchTouchEvent(event);</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="keyword">final</span> <span class="keyword">float</span> offsetX = mScrollX - child.mLeft;</span><br><span class="line">                <span class="keyword">final</span> <span class="keyword">float</span> offsetY = mScrollY - child.mTop;</span><br><span class="line">                event.offsetLocation(offsetX, offsetY);</span><br><span class="line"></span><br><span class="line">                handled = child.dispatchTouchEvent(event);</span><br><span class="line"></span><br><span class="line">                event.offsetLocation(-offsetX, -offsetY);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> handled;</span><br><span class="line">        &#125;</span><br><span class="line">        transformedEvent = MotionEvent.obtain(event);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        transformedEvent = event.split(newPointerIdBits);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Perform any necessary transformations and dispatch.</span></span><br><span class="line">    <span class="keyword">if</span> (child == <span class="keyword">null</span>) &#123;</span><br><span class="line">        handled = <span class="keyword">super</span>.dispatchTouchEvent(transformedEvent);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">final</span> <span class="keyword">float</span> offsetX = mScrollX - child.mLeft;</span><br><span class="line">        <span class="keyword">final</span> <span class="keyword">float</span> offsetY = mScrollY - child.mTop;</span><br><span class="line">        transformedEvent.offsetLocation(offsetX, offsetY);</span><br><span class="line">        <span class="keyword">if</span> (! child.hasIdentityMatrix()) &#123;</span><br><span class="line">            transformedEvent.transform(child.getInverseMatrix());</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        handled = child.dispatchTouchEvent(transformedEvent);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Done.</span></span><br><span class="line">    transformedEvent.recycle();</span><br><span class="line">    <span class="keyword">return</span> handled;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>注释写的很清楚，这个函数的主要功能是：</p>
<ol>
<li>把一个motionEvent转化为childview坐标下的坐标点位置。</li>
<li>过滤不感兴趣的pointerId触摸点</li>
<li>可能的情况下，修改Action的值。</li>
<li>如果传入的child为空，则派发给viewGroup自己(即<code>super.dispatchTouchEvent</code>调用到View的方法中去)</li>
</ol>
<p>其中，比较复杂的则是 修改Action的值 ，这个涉及到多点触摸的原理和过程，需要另外分析。</p>
<p>在 ViewGroup 的处理中，有个比较神奇的操作，和常见的使用flags来记录一些预定义的值不一样：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">final</span> <span class="keyword">int</span> idBitsToAssign = split ? <span class="number">1</span> &lt;&lt; ev.getPointerId(actionIndex): TouchTarget.ALL_POINTER_IDS;</span><br></pre></td></tr></table></figure>
<p>它使用idBitsToAssign 这样一个int值来记录触摸点的信息，因为一个int值最多32bit,所以对于每一个TouchTarget，最多支持32个触摸点</p>
<p>更多的细节，会在<a href="https://nangonghuang.github.io/2018/09/05/Android%E6%8E%A7%E4%BB%B6%E6%80%BB%E7%BB%932/">下一篇</a>中记下来</p>
]]></content>
      <categories>
        <category>android_framework</category>
      </categories>
  </entry>
  <entry>
    <title>Java-线程池</title>
    <url>/2018/08/14/Java-%E7%BA%BF%E7%A8%8B%E6%B1%A0/</url>
    <content><![CDATA[<p>最近遇到一个问题，如果Java线程池的设置是,coresize=0,队列为无界队列，maxSize=1，这个线程池会不会工作，会怎样工作？</p>
<a id="more"></a>
<p>之前对于线程池的使用和关注，基本上都只是看了下概念，没怎么去看一下源码的执行流程，遇到这个问题的时候，就难住了。后面翻了下源码，又在网上看了下资料，找到一篇写的挺好的资料，于是转过来，主要是怕文章不知道什么时候会404了。</p>
<p>其实问题的关键在于，大多数的书讲线程池的时候都没有提到线程池的状态。coresize=0,队列为无界队列，maxSize=1的时候，初次执行execute()，根据线程池状态和配置，会直接进入到 启动非核心线程来执行任务，后续的runnable都会加入到无界队列中，第一个runnable执行完毕后，worker会调用getTask从队列中获取任务产生新的worker，因此会实际上变成单线程执行任务的线程池。</p>
<p><a href="http://www.cnblogs.com/trust-freedom/p/6681948.html">Java线程池ThreadPoolExecutor使用和分析(二) - execute()原理</a></p>
<hr>
<p>execute()是 java.util.concurrent.Executor接口中唯一的方法，JDK注释中的描述是“在未来的某一时刻执行命令command”，即向线程池中提交任务，在未来某个时刻执行，提交的任务必须实现Runnable接口，该提交方式不能获取返回值。下面是对execute()方法内部原理的分析，分析前先简单介绍线程池有哪些状态，在一系列执行过程中涉及线程池状态相关的判断。以下分析基于JDK 1.7</p>
<h2 id="一、线程池的执行流程"><a href="#一、线程池的执行流程" class="headerlink" title="一、线程池的执行流程"></a>一、线程池的执行流程</h2><p><img src="/2018/08/14/Java-%E7%BA%BF%E7%A8%8B%E6%B1%A0/677054-20170408210803050-1576156526.png" alt="01"></p>
<ol>
<li>如果线程池中的线程数量少于corePoolSize，就创建新的线程来执行新添加的任务</li>
<li>如果线程池中的线程数量大于等于corePoolSize，但队列workQueue未满，则将新添加的任务放到workQueue中</li>
<li>如果线程池中的线程数量大于等于corePoolSize，且队列workQueue已满，但线程池中的线程数量小于maximumPoolSize，则会创建新的线程来处理被添加的任务</li>
<li>如果线程池中的线程数量等于了maximumPoolSize，就用RejectedExecutionHandler来执行拒绝策略</li>
</ol>
<h2 id="二、线程池状态"><a href="#二、线程池状态" class="headerlink" title="二、线程池状态"></a>二、线程池状态</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">final</span> AtomicInteger ctl = <span class="keyword">new</span> AtomicInteger(ctlOf(RUNNING, <span class="number">0</span>));</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> COUNT_BITS = Integer.SIZE - <span class="number">3</span>;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> CAPACITY   = (<span class="number">1</span> &lt;&lt; COUNT_BITS) - <span class="number">1</span>;</span><br><span class="line"> </span><br><span class="line"><span class="comment">// runState is stored in the high-order bits</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> RUNNING    = -<span class="number">1</span> &lt;&lt; COUNT_BITS;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> SHUTDOWN   =  <span class="number">0</span> &lt;&lt; COUNT_BITS;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> STOP       =  <span class="number">1</span> &lt;&lt; COUNT_BITS;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> TIDYING    =  <span class="number">2</span> &lt;&lt; COUNT_BITS;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> TERMINATED =  <span class="number">3</span> &lt;&lt; COUNT_BITS;</span><br><span class="line"> </span><br><span class="line"><span class="comment">// Packing and unpacking ctl</span></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">runStateOf</span><span class="params">(<span class="keyword">int</span> c)</span>     </span>&#123; <span class="keyword">return</span> c &amp; ~CAPACITY; &#125;</span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">workerCountOf</span><span class="params">(<span class="keyword">int</span> c)</span>  </span>&#123; <span class="keyword">return</span> c &amp; CAPACITY; &#125;</span><br><span class="line"><span class="comment">// 合并 线程池的状态和工作线程的数量到一个整数</span></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">ctlOf</span><span class="params">(<span class="keyword">int</span> rs, <span class="keyword">int</span> wc)</span> </span>&#123; <span class="keyword">return</span> rs | wc; &#125;</span><br></pre></td></tr></table></figure>
<p>其中ctl这个AtomicInteger的功能很强大，其高3位用于维护线程池运行状态，低29位维护线程池中线程数量</p>
<ol>
<li><p>RUNNING：-1&lt;&lt;COUNT_BITS，即 111 00000000000000000000000000000 ，该状态的线程池会接收新任务，也会处理在阻塞队列中等待处理的任务</p>
</li>
<li><p>SHUTDOWN：0&lt;&lt;COUNT_BITS，即 000 00000000000000000000000000000，<strong>该状态的线程池不会再接收新任务，但还会处理已经提交到阻塞队列中等待处理的任务</strong></p>
</li>
<li><p>STOP：1&lt;&lt;COUNT_BITS，即 001 00000000000000000000000000000，<strong>该状态的线程池不会再接收新任务，不会处理在阻塞队列中等待的任务，而且还会中断正在运行的任务</strong></p>
</li>
<li><p>TIDYING：2&lt;&lt;COUNT_BITS，即 010 00000000000000000000000000000，所有任务都被终止了，workerCount为0，为此状态时还将调用terminated()方法</p>
</li>
<li><p>TERMINATED：3&lt;&lt;COUNT_BITS，即 011 00000000000000000000000000000，terminated()方法调用完成后变成此状态</p>
</li>
</ol>
<p>这些状态均由int型表示，大小关系为 RUNNING&lt;SHUTDOWN&lt;STOP&lt;TIDYING&lt;TERMINATED，这个顺序基本上也是遵循线程池从 运行 到 终止这个过程。</p>
<p>各个状态的转换过程 :</p>
<ul>
<li>RUNNING -&gt; SHUTDOWN：当调用了 shutdown() 后，会发生这个状态转换，这也是最重要的</li>
<li>(RUNNING or SHUTDOWN) -&gt; STOP：当调用 shutdownNow() 后，会发生这个状态转换，这下要清楚 shutDown() 和 shutDownNow() 的区别了</li>
<li>SHUTDOWN -&gt; TIDYING：当任务队列和线程池都清空后，会由 SHUTDOWN 转换为 TIDYING</li>
<li>STOP -&gt; TIDYING：当任务队列清空后，发生这个转换</li>
<li>TIDYING -&gt; TERMINATED：这个前面说了，当 terminated() 方法结束后</li>
</ul>
<h2 id="三、任务提交内部原理"><a href="#三、任务提交内部原理" class="headerlink" title="三、任务提交内部原理"></a>三、任务提交内部原理</h2><h3 id="execute-–-提交任务"><a href="#execute-–-提交任务" class="headerlink" title="execute()  –  提交任务"></a>execute()  –  提交任务</h3><p><img src="/2018/08/14/Java-%E7%BA%BF%E7%A8%8B%E6%B1%A0/677054-20170408210905472-1864459025.png" alt="01"></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Executes the given task sometime in the future.  The task</span></span><br><span class="line"><span class="comment"> * may execute in a new thread or in an existing pooled thread.</span></span><br><span class="line"><span class="comment"> * 在未来的某个时刻执行给定的任务。这个任务用一个新线程执行，或者用一个线程池中已经存在的线程执行</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * If the task cannot be submitted for execution, either because this</span></span><br><span class="line"><span class="comment"> * executor has been shutdown or because its capacity has been reached,</span></span><br><span class="line"><span class="comment"> * the task is handled by the current &#123;<span class="doctag">@code</span> RejectedExecutionHandler&#125;.</span></span><br><span class="line"><span class="comment"> * 如果任务无法被提交执行，要么是因为这个Executor已经被shutdown关闭，要么是已经达到其容量上限，任务会被当前的RejectedExecutionHandler处理</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> command the task to execute</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@throws</span> RejectedExecutionException at discretion of</span></span><br><span class="line"><span class="comment"> *         &#123;<span class="doctag">@code</span> RejectedExecutionHandler&#125;, if the task</span></span><br><span class="line"><span class="comment"> *         cannot be accepted for execution                 RejectedExecutionException是一个RuntimeException</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@throws</span> NullPointerException if &#123;<span class="doctag">@code</span> command&#125; is null</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">execute</span><span class="params">(Runnable command)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (command == <span class="keyword">null</span>)</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> NullPointerException();</span><br><span class="line">     </span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">     * Proceed in 3 steps:</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * 1. If fewer than corePoolSize threads are running, try to</span></span><br><span class="line"><span class="comment">     * start a new thread with the given command as its first</span></span><br><span class="line"><span class="comment">     * task.  The call to addWorker atomically checks runState and</span></span><br><span class="line"><span class="comment">     * workerCount, and so prevents false alarms that would add</span></span><br><span class="line"><span class="comment">     * threads when it shouldn&#x27;t, by returning false.</span></span><br><span class="line"><span class="comment">     * 如果运行的线程少于corePoolSize，尝试开启一个新线程去运行command，command作为这个线程的第一个任务</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * 2. If a task can be successfully queued, then we still need</span></span><br><span class="line"><span class="comment">     * to double-check whether we should have added a thread</span></span><br><span class="line"><span class="comment">     * (because existing ones died since last checking) or that</span></span><br><span class="line"><span class="comment">     * the pool shut down since entry into this method. So we</span></span><br><span class="line"><span class="comment">     * recheck state and if necessary roll back the enqueuing if</span></span><br><span class="line"><span class="comment">     * stopped, or start a new thread if there are none.</span></span><br><span class="line"><span class="comment">     * 如果任务成功放入队列，我们仍需要一个双重校验去确认是否应该新建一个线程（因为可能存在有些线程在我们上次检查后死了） 或者 从我们进入这个方法后，pool被关闭了</span></span><br><span class="line"><span class="comment">     * 所以我们需要再次检查state，如果线程池停止了需要回滚入队列，如果池中没有线程了，新开启 一个线程</span></span><br><span class="line"><span class="comment">     * </span></span><br><span class="line"><span class="comment">     * 3. If we cannot queue task, then we try to add a new</span></span><br><span class="line"><span class="comment">     * thread.  If it fails, we know we are shut down or saturated</span></span><br><span class="line"><span class="comment">     * and so reject the task.</span></span><br><span class="line"><span class="comment">     * 如果无法将任务入队列（可能队列满了），需要新开一个线程（自己：往maxPoolSize发展）</span></span><br><span class="line"><span class="comment">     * 如果失败了，说明线程池shutdown 或者 饱和了，所以我们拒绝任务</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">int</span> c = ctl.get();</span><br><span class="line">     </span><br><span class="line">    <span class="keyword">if</span> (workerCountOf(c) &lt; corePoolSize) &#123;</span><br><span class="line">        <span class="comment">//addWorker()成功，返回</span></span><br><span class="line">        <span class="keyword">if</span> (addWorker(command, <span class="keyword">true</span>))</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">         </span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * 没有成功addWorker()，再次获取c（凡是需要再次用ctl做判断时，都会再次调用ctl.get()）</span></span><br><span class="line"><span class="comment">         * 失败的原因可能是：</span></span><br><span class="line"><span class="comment">         * 1、线程池已经shutdown，shutdown的线程池不再接收新任务</span></span><br><span class="line"><span class="comment">         * 2、workerCountOf(c) &lt; corePoolSize 判断后，由于并发，别的线程先创建了worker线程，导致workerCount&gt;=corePoolSize</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        c = ctl.get();</span><br><span class="line">    &#125;</span><br><span class="line">     </span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 如果线程池RUNNING状态，并且入队列成功，入队成功还不是表示这个任务能执行</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">if</span> (isRunning(c) &amp;&amp; workQueue.offer(command)) &#123;</span><br><span class="line">        <span class="keyword">int</span> recheck = ctl.get();</span><br><span class="line">         </span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * 再次校验放入workerQueue中的任务是否能被执行</span></span><br><span class="line"><span class="comment">         * 1、如果线程池不是运行状态了，应该拒绝添加新任务，从workQueue中删除任务</span></span><br><span class="line"><span class="comment">         * 2、如果线程池是运行状态，或者从workQueue中删除任务失败（刚好有一个线程执行完毕，并消耗了这个任务），确保还有线程执行任务（只要有一个就够了）</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        <span class="keyword">if</span> (!isRunning(recheck) &amp;&amp; remove(command))</span><br><span class="line">            reject(command);</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (workerCountOf(recheck) == <span class="number">0</span>)</span><br><span class="line">            addWorker(<span class="keyword">null</span>, <span class="keyword">false</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 如果线程不说running状态了，或者入队失败（意思是队列满了），尝试添加新的工作线程，失败则执行拒绝策略</span></span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span> (!addWorker(command, <span class="keyword">false</span>))</span><br><span class="line">        reject(command);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>execute(Runnable command)</p>
<p>参数：<br>    command    提交执行的任务，不能为空<br>执行流程：<br>1、如果线程池当前线程数量少于corePoolSize，则addWorker(command, true)创建新worker线程，如创建成功返回，如没创建成功，则执行后续步骤；<br>    addWorker(command, true)失败的原因可能是：<br>    A、线程池已经shutdown，shutdown的线程池不再接收新任务<br>    B、workerCountOf(c) &lt; corePoolSize 判断后，由于并发，别的线程先创建了worker线程，导致workerCount&gt;=corePoolSize<br>2、如果线程池还在running状态，将task加入workQueue阻塞队列中，如果加入成功，进行double-check，如果加入失败（可能是队列已满），则执行后续步骤；<br>    double-check主要目的是判断刚加入workQueue阻塞队列的task是否能被执行<br>    A、如果线程池已经不是running状态了，应该拒绝添加新任务，从workQueue中删除任务<br>    B、如果线程池是运行状态，或者从workQueue中删除任务失败（刚好有一个线程执行完毕，并消耗了这个任务），确保还有线程执行任务（只要有一个就够了）<br>3、如果线程池不是running状态 或者 无法入队列，尝试开启新线程，扩容至maxPoolSize，如果addWork(command, false)失败了，拒绝当前command</p>
<h3 id="addWorker-–-添加worker线程"><a href="#addWorker-–-添加worker线程" class="headerlink" title="addWorker()  –  添加worker线程"></a>addWorker()  –  添加worker线程</h3><p><img src="/2018/08/14/Java-%E7%BA%BF%E7%A8%8B%E6%B1%A0/677054-20170408211358816-1277836615.png" alt="03"></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">*  判断是不是要创建新的工作线程，如果可以创建就创建，如果不能创建，返回false</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">boolean</span> <span class="title">addWorker</span><span class="params">(Runnable firstTask, <span class="keyword">boolean</span> core)</span> </span>&#123;</span><br><span class="line">    <span class="comment">//这个循环有三个出口，但是如果符合创建条件却创建失败的话（CAS冲突），会一直尝试直到成功，跳出循环，开始创建worker,或者线程池状态改变到不允许状态了，直接返回false了</span></span><br><span class="line">    retry:</span><br><span class="line">    <span class="keyword">for</span> (;;) &#123;</span><br><span class="line">        <span class="keyword">int</span> c = ctl.get();</span><br><span class="line">        <span class="keyword">int</span> rs = runStateOf(c); <span class="comment">//状态</span></span><br><span class="line"> </span><br><span class="line">        <span class="comment">// Check if queue empty only if necessary.</span></span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * 线程池的state越小越是运行状态，runnbale=-1，shutdown=0,stop=1,tidying=2，terminated=3</span></span><br><span class="line"><span class="comment">         * 1、如果线程池state已经至少是shutdown状态了</span></span><br><span class="line"><span class="comment">         * 2、并且以下3个条件任意一个是false</span></span><br><span class="line"><span class="comment">         *   rs == SHUTDOWN     假如这里是false，意思是线程池状态已经超过shutdown，可能是stop、tidying、terminated其中一个，此时不允许再添加工作线程</span></span><br><span class="line"><span class="comment">         *   firstTask == null   假如这里是false，意思是线程池已经shutdown了，还要添加新的任务，拒绝</span></span><br><span class="line"><span class="comment">         *   ! workQueue.isEmpty()   假如这里是false，意思是 线程池已经shutdown了，不添加新的任务，但是还要处理阻塞队列里面的任务，如果workQueue已经为空，那么就没有添加新worker线程的必要了</span></span><br><span class="line"><span class="comment">         * return false，即无法addWorker()</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        <span class="keyword">if</span> (rs &gt;= SHUTDOWN &amp;&amp;</span><br><span class="line">            ! (rs == SHUTDOWN &amp;&amp; firstTask == <span class="keyword">null</span> &amp;&amp; !workQueue.isEmpty())</span><br><span class="line">            )</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line"> </span><br><span class="line">        <span class="keyword">for</span> (;;) &#123;</span><br><span class="line">            <span class="keyword">int</span> wc = workerCountOf(c);</span><br><span class="line">            <span class="keyword">if</span> (wc &gt;= CAPACITY ||</span><br><span class="line">                wc &gt;= (core ? corePoolSize : maximumPoolSize))</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">             </span><br><span class="line">            <span class="comment">//调用unsafe CAS操作，使得worker数量+1，成功则跳出整个retry循环，准备创建新worker,否则</span></span><br><span class="line">            <span class="keyword">if</span> (compareAndIncrementWorkerCount(c))</span><br><span class="line">                <span class="keyword">break</span> retry;</span><br><span class="line">            c = ctl.get();  </span><br><span class="line">            <span class="comment">//如果状态不等于之前获取的state，跳出内层循环，继续去外层循环判断</span></span><br><span class="line">            <span class="keyword">if</span> (runStateOf(c) != rs)</span><br><span class="line">                <span class="keyword">continue</span> retry;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * worker数量+1成功的后续操作</span></span><br><span class="line"><span class="comment">     * 添加到workers Set集合，并启动worker线程</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">boolean</span> workerStarted = <span class="keyword">false</span>;</span><br><span class="line">    <span class="keyword">boolean</span> workerAdded = <span class="keyword">false</span>;</span><br><span class="line">    Worker w = <span class="keyword">null</span>;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="keyword">final</span> ReentrantLock mainLock = <span class="keyword">this</span>.mainLock; </span><br><span class="line">        w = <span class="keyword">new</span> Worker(firstTask); <span class="comment">//1、设置worker这个AQS锁的同步状态state=-1</span></span><br><span class="line">                                   <span class="comment">//2、将firstTask设置给worker的成员变量firstTask</span></span><br><span class="line">                                   <span class="comment">//3、使用worker自身这个runnable，调用ThreadFactory创建一个线程，并设置给worker的成员变量thread</span></span><br><span class="line">        <span class="keyword">final</span> Thread t = w.thread;</span><br><span class="line">        <span class="keyword">if</span> (t != <span class="keyword">null</span>) &#123;</span><br><span class="line">            mainLock.lock();</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                <span class="comment">//--------------------------------------------这部分代码是上锁的</span></span><br><span class="line">                <span class="comment">// Recheck while holding lock.</span></span><br><span class="line">                <span class="comment">// Back out on ThreadFactory failure or if</span></span><br><span class="line">                <span class="comment">// shut down before lock acquired.</span></span><br><span class="line">                <span class="comment">// 当获取到锁后，再次检查</span></span><br><span class="line">                <span class="keyword">int</span> c = ctl.get();</span><br><span class="line">                <span class="keyword">int</span> rs = runStateOf(c);</span><br><span class="line"> </span><br><span class="line">                <span class="comment">//如果线程池在运行running&lt;shutdown 或者 线程池已经shutdown，且firstTask==null（可能是workQueue中仍有未执行完成的任务，创建没有初始任务的worker线程执行）</span></span><br><span class="line">                <span class="comment">//worker数量-1的操作在addWorkerFailed()</span></span><br><span class="line">                <span class="keyword">if</span> (rs &lt; SHUTDOWN ||</span><br><span class="line">                    (rs == SHUTDOWN &amp;&amp; firstTask == <span class="keyword">null</span>)) &#123;</span><br><span class="line">                    <span class="keyword">if</span> (t.isAlive()) <span class="comment">// precheck that t is startable   线程已经启动，抛非法线程状态异常</span></span><br><span class="line">                        <span class="keyword">throw</span> <span class="keyword">new</span> IllegalThreadStateException();</span><br><span class="line">                     </span><br><span class="line">                    workers.add(w);<span class="comment">//workers是一个HashSet&lt;Worker&gt;</span></span><br><span class="line">                     </span><br><span class="line">                    <span class="comment">//设置最大的池大小largestPoolSize，workerAdded设置为true</span></span><br><span class="line">                    <span class="keyword">int</span> s = workers.size();</span><br><span class="line">                    <span class="keyword">if</span> (s &gt; largestPoolSize)</span><br><span class="line">                        largestPoolSize = s;</span><br><span class="line">                    workerAdded = <span class="keyword">true</span>;</span><br><span class="line">                &#125;</span><br><span class="line">              <span class="comment">//--------------------------------------------</span></span><br><span class="line">            &#125; </span><br><span class="line">            <span class="keyword">finally</span> &#123;</span><br><span class="line">                mainLock.unlock();</span><br><span class="line">            &#125;</span><br><span class="line">             </span><br><span class="line">            <span class="comment">//如果往HashSet中添加worker成功，启动线程</span></span><br><span class="line">            <span class="keyword">if</span> (workerAdded) &#123;</span><br><span class="line">                t.start();</span><br><span class="line">                workerStarted = <span class="keyword">true</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">        <span class="comment">//如果启动线程失败</span></span><br><span class="line">        <span class="keyword">if</span> (! workerStarted)</span><br><span class="line">            addWorkerFailed(w);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> workerStarted;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>addWorker(Runnable firstTask, boolean core)<br>参数：<br>    firstTask：    worker线程的初始任务，可以为空<br>    core：           true：将corePoolSize作为上限，false：将maximumPoolSize作为上限<br>addWorker方法有4种传参的方式：</p>
<pre><code>1、addWorker(command, true)

2、addWorker(command, false)

3、addWorker(null, false)

4、addWorker(null, true)</code></pre>
<p>在execute方法中就使用了前3种，结合这个核心方法进行以下分析<br>    第一个：线程数小于corePoolSize时，放一个需要处理的task进Workers Set。如果Workers Set长度超过corePoolSize，就返回false<br>    第二个：当队列被放满时，就尝试将这个新来的task直接放入Workers Set，而此时Workers Set的长度限制是maximumPoolSize。如果线程池也满了的话就返回false<br>    第三个：放入一个空的task进workers Set，长度限制是maximumPoolSize。这样一个task为空的worker在线程执行的时候会去任务队列里拿任务，这样就相当于创建了一个新的线程，只是没有马上分配任务<br>    第四个：这个方法就是放一个null的task进Workers Set，而且是在小于corePoolSize时，如果此时Set中的数量已经达到corePoolSize那就返回false，什么也不干。实际使用中是在prestartAllCoreThreads()方法，这个方法用来为线程池预先启动corePoolSize个worker等待从workQueue中获取任务执行<br>执行流程：</p>
<ol>
<li>判断线程池当前是否为可以添加worker线程的状态，可以则继续下一步，不可以return false：<br> A、线程池状态&gt;shutdown，可能为stop、tidying、terminated，不能添加worker线程<br> B、线程池状态==shutdown，firstTask不为空，不能添加worker线程，因为shutdown状态的线程池不接收新任务<br> C、线程池状态==shutdown，firstTask==null，workQueue为空，不能添加worker线程，因为firstTask为空是为了添加一个没有任务的线程再从workQueue获取task，而workQueue为空，说明添加无任务线程已经没有意义</li>
<li>线程池当前线程数量是否超过上限（corePoolSize 或 maximumPoolSize），超过了return false，没超过则对workerCount+1，继续下一步</li>
<li>在线程池的ReentrantLock保证下，向Workers Set中添加新创建的worker实例，添加完成后解锁，并启动worker线程，如果这一切都成功了，return true，如果添加worker入Set失败或启动失败，调用addWorkerFailed()逻辑</li>
</ol>
<h3 id="内部类Worker"><a href="#内部类Worker" class="headerlink" title="内部类Worker"></a>内部类Worker</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Class Worker mainly maintains interrupt control state for</span></span><br><span class="line"><span class="comment"> * threads running tasks, along with other minor bookkeeping.</span></span><br><span class="line"><span class="comment"> * This class opportunistically extends AbstractQueuedSynchronizer</span></span><br><span class="line"><span class="comment"> * to simplify acquiring and releasing a lock surrounding each</span></span><br><span class="line"><span class="comment"> * task execution.  This protects against interrupts that are</span></span><br><span class="line"><span class="comment"> * intended to wake up a worker thread waiting for a task from</span></span><br><span class="line"><span class="comment"> * instead interrupting a task being run.  We implement a simple</span></span><br><span class="line"><span class="comment"> * non-reentrant mutual exclusion lock rather than use</span></span><br><span class="line"><span class="comment"> * ReentrantLock because we do not want worker tasks to be able to</span></span><br><span class="line"><span class="comment"> * reacquire the lock when they invoke pool control methods like</span></span><br><span class="line"><span class="comment"> * setCorePoolSize.  Additionally, to suppress interrupts until</span></span><br><span class="line"><span class="comment"> * the thread actually starts running tasks, we initialize lock</span></span><br><span class="line"><span class="comment"> * state to a negative value, and clear it upon start (in</span></span><br><span class="line"><span class="comment"> * runWorker).</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> * Worker类大体上管理着运行线程的中断状态 和 一些指标</span></span><br><span class="line"><span class="comment"> * Worker类投机取巧的继承了AbstractQueuedSynchronizer来简化在执行任务时的获取、释放锁</span></span><br><span class="line"><span class="comment"> * 这样防止了中断在运行中的任务，只会唤醒(中断)在等待从workQueue中获取任务的线程</span></span><br><span class="line"><span class="comment"> * 解释：</span></span><br><span class="line"><span class="comment"> *   为什么不直接执行execute(command)提交的command，而要在外面包一层Worker呢？？</span></span><br><span class="line"><span class="comment"> *   主要是为了控制中断</span></span><br><span class="line"><span class="comment"> *   用什么控制？？</span></span><br><span class="line"><span class="comment"> *   用AQS锁，当运行时上锁，就不能中断，TreadPoolExecutor的shutdown()方法中断前都要获取worker锁</span></span><br><span class="line"><span class="comment"> *   只有在等待从workQueue中获取任务getTask()时才能中断</span></span><br><span class="line"><span class="comment"> * worker实现了一个简单的不可重入的互斥锁，而不是用ReentrantLock可重入锁</span></span><br><span class="line"><span class="comment"> * 因为我们不想让在调用比如setCorePoolSize()这种线程池控制方法时可以再次获取锁(重入)</span></span><br><span class="line"><span class="comment"> * 解释：</span></span><br><span class="line"><span class="comment"> *   setCorePoolSize()时可能会interruptIdleWorkers()，在对一个线程interrupt时会要w.tryLock()</span></span><br><span class="line"><span class="comment"> *   如果可重入，就可能会在对线程池操作的方法中中断线程，类似方法还有：</span></span><br><span class="line"><span class="comment"> *   setMaximumPoolSize()</span></span><br><span class="line"><span class="comment"> *   setKeppAliveTime()</span></span><br><span class="line"><span class="comment"> *   allowCoreThreadTimeOut()</span></span><br><span class="line"><span class="comment"> *   shutdown()</span></span><br><span class="line"><span class="comment"> * 此外，为了让线程真正开始后才可以中断，初始化lock状态为负值(-1)，在开始runWorker()时将state置为0，而state&gt;=0才可以中断</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> * Worker继承了AQS，实现了Runnable，说明其既是一个可运行的任务，也是一把锁（不可重入）</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">final</span> <span class="class"><span class="keyword">class</span> <span class="title">Worker</span></span></span><br><span class="line"><span class="class">    <span class="keyword">extends</span> <span class="title">AbstractQueuedSynchronizer</span></span></span><br><span class="line"><span class="class">    <span class="keyword">implements</span> <span class="title">Runnable</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * This class will never be serialized, but we provide a</span></span><br><span class="line"><span class="comment">     * serialVersionUID to suppress a javac warning.</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">long</span> serialVersionUID = <span class="number">6138294804551838833L</span>;</span><br><span class="line"> </span><br><span class="line">    <span class="comment">/** Thread this worker is running in.  Null if factory fails. */</span></span><br><span class="line">    <span class="keyword">final</span> Thread thread; <span class="comment">//利用ThreadFactory和 Worker这个Runnable创建的线程对象</span></span><br><span class="line">     </span><br><span class="line">    <span class="comment">/** Initial task to run.  Possibly null. */</span></span><br><span class="line">    Runnable firstTask;</span><br><span class="line">     </span><br><span class="line">    <span class="comment">/** Per-thread task counter */</span></span><br><span class="line">    <span class="keyword">volatile</span> <span class="keyword">long</span> completedTasks;</span><br><span class="line"> </span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Creates with given first task and thread from ThreadFactory.</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> firstTask the first task (null if none)</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    Worker(Runnable firstTask) &#123;</span><br><span class="line">        <span class="comment">//设置AQS的同步状态private volatile int state，是一个计数器，大于0代表锁已经被获取</span></span><br><span class="line">        setState(-<span class="number">1</span>); <span class="comment">// inhibit interrupts until runWorker </span></span><br><span class="line">                      <span class="comment">// 在调用runWorker()前，禁止interrupt中断，在interruptIfStarted()方法中会判断 getState()&gt;=0</span></span><br><span class="line">        <span class="keyword">this</span>.firstTask = firstTask;</span><br><span class="line">        <span class="keyword">this</span>.thread = getThreadFactory().newThread(<span class="keyword">this</span>); <span class="comment">//根据当前worker创建一个线程对象</span></span><br><span class="line">                                                          <span class="comment">//当前worker本身就是一个runnable任务，也就是不会用参数的firstTask创建线程，而是调用当前worker.run()时调用firstTask.run()</span></span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    <span class="comment">/** Delegates main run loop to outer runWorker  */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        runWorker(<span class="keyword">this</span>); <span class="comment">//runWorker()是ThreadPoolExecutor的方法</span></span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    <span class="comment">// Lock methods</span></span><br><span class="line">    <span class="comment">//</span></span><br><span class="line">    <span class="comment">// The value 0 represents the unlocked state. 0代表“没被锁定”状态</span></span><br><span class="line">    <span class="comment">// The value 1 represents the locked state. 1代表“锁定”状态</span></span><br><span class="line"> </span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">boolean</span> <span class="title">isHeldExclusively</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> getState() != <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 尝试获取锁</span></span><br><span class="line"><span class="comment">     * 重写AQS的tryAcquire()，AQS本来就是让子类来实现的</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">boolean</span> <span class="title">tryAcquire</span><span class="params">(<span class="keyword">int</span> unused)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//尝试一次将state从0设置为1，即“锁定”状态，但由于每次都是state 0-&gt;1，而不是+1，那么说明不可重入</span></span><br><span class="line">        <span class="comment">//且state==-1时也不会获取到锁</span></span><br><span class="line">        <span class="keyword">if</span> (compareAndSetState(<span class="number">0</span>, <span class="number">1</span>)) &#123;</span><br><span class="line">            setExclusiveOwnerThread(Thread.currentThread()); <span class="comment">//设置exclusiveOwnerThread=当前线程</span></span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 尝试释放锁</span></span><br><span class="line"><span class="comment">     * 不是state-1，而是置为0</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">boolean</span> <span class="title">tryRelease</span><span class="params">(<span class="keyword">int</span> unused)</span> </span>&#123;</span><br><span class="line">        setExclusiveOwnerThread(<span class="keyword">null</span>); </span><br><span class="line">        setState(<span class="number">0</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">lock</span><span class="params">()</span>        </span>&#123; acquire(<span class="number">1</span>); &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">tryLock</span><span class="params">()</span>  </span>&#123; <span class="keyword">return</span> tryAcquire(<span class="number">1</span>); &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">unlock</span><span class="params">()</span>      </span>&#123; release(<span class="number">1</span>); &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isLocked</span><span class="params">()</span> </span>&#123; <span class="keyword">return</span> isHeldExclusively(); &#125;</span><br><span class="line"> </span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 中断（如果运行）</span></span><br><span class="line"><span class="comment">     * shutdownNow时会循环对worker线程执行</span></span><br><span class="line"><span class="comment">     * 且不需要获取worker锁，即使在worker运行时也可以中断</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">interruptIfStarted</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        Thread t;</span><br><span class="line">        <span class="comment">//如果state&gt;=0、t!=null、且t没有被中断</span></span><br><span class="line">        <span class="comment">//new Worker()时state==-1，说明不能中断</span></span><br><span class="line">        <span class="keyword">if</span> (getState() &gt;= <span class="number">0</span> &amp;&amp; (t = thread) != <span class="keyword">null</span> &amp;&amp; !t.isInterrupted()) &#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                t.interrupt();</span><br><span class="line">            &#125; <span class="keyword">catch</span> (SecurityException ignore) &#123;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>Worker类<br>Worker类本身既实现了Runnable，又继承了AbstractQueuedSynchronizer（以下简称AQS），所以其既是一个可执行的任务，又可以达到锁的效果<br>new Worker()<br>1、将AQS的state置为-1，在runWoker()前不允许中断<br>2、待执行的任务会以参数传入，并赋予firstTask<br>3、用Worker这个Runnable创建Thread</p>
<p>之所以Worker自己实现Runnable，并创建Thread，在firstTask外包一层，是因为要通过Worker控制中断，而firstTask这个工作任务只是负责执行业务<br>Worker控制中断主要有以下几方面：<br>1、初始AQS状态为-1，此时不允许中断interrupt()，只有在worker线程启动了，执行了runWoker()，将state置为0，才能中断<br>    不允许中断体现在：<br>    A、shutdown()线程池时，会对每个worker tryLock()上锁，而Worker类这个AQS的tryAcquire()方法是固定将state从0-&gt;1，故初始状态state==-1时tryLock()失败，没法interrupt()<br>    B、shutdownNow()线程池时，不用tryLock()上锁，但调用worker.interruptIfStarted()终止worker，interruptIfStarted()也有state&gt;0才能interrupt的逻辑<br>2、为了防止某种情况下，在运行中的worker被中断，runWorker()每次运行任务时都会lock()上锁，而shutdown()这类可能会终止worker的操作需要先获取worker的锁，这样就防止了中断正在运行的线程</p>
<p>Worker实现的AQS为不可重入锁，为了是在获得worker锁的情况下再进入其它一些需要加锁的方法</p>
<p>Worker和Task的区别：<br>Worker是线程池中的线程，而Task虽然是runnable，但是并没有真正执行，只是被Worker调用了run方法，后面会看到这部分的实现。</p>
<h3 id="runWorker-–-执行任务"><a href="#runWorker-–-执行任务" class="headerlink" title="runWorker()  –  执行任务"></a>runWorker()  –  执行任务</h3><p><img src="/2018/08/14/Java-%E7%BA%BF%E7%A8%8B%E6%B1%A0/677054-20170408211458878-1033038857.png" alt="04"></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Main worker run loop.  Repeatedly gets tasks from queue and</span></span><br><span class="line"><span class="comment"> * executes them, while coping with a number of issues:</span></span><br><span class="line"><span class="comment"> * 重复的从队列中获取任务并执行，同时应对一些问题：</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * 1. We may start out with an initial task, in which case we</span></span><br><span class="line"><span class="comment"> * don&#x27;t need to get the first one. Otherwise, as long as pool is</span></span><br><span class="line"><span class="comment"> * running, we get tasks from getTask. If it returns null then the</span></span><br><span class="line"><span class="comment"> * worker exits due to changed pool state or configuration</span></span><br><span class="line"><span class="comment"> * parameters.  Other exits result from exception throws in</span></span><br><span class="line"><span class="comment"> * external code, in which case completedAbruptly holds, which</span></span><br><span class="line"><span class="comment"> * usually leads processWorkerExit to replace this thread.</span></span><br><span class="line"><span class="comment"> * 我们可能使用一个初始化任务开始，即firstTask为null</span></span><br><span class="line"><span class="comment"> * 然后只要线程池在运行，我们就从getTask()获取任务</span></span><br><span class="line"><span class="comment"> * 如果getTask()返回null，则worker由于改变了线程池状态或参数配置而退出</span></span><br><span class="line"><span class="comment"> * 其它退出因为外部代码抛异常了，这会使得completedAbruptly为true，这会导致在processWorkerExit()方法中替换当前线程</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * 2. Before running any task, the lock is acquired to prevent</span></span><br><span class="line"><span class="comment"> * other pool interrupts while the task is executing, and</span></span><br><span class="line"><span class="comment"> * clearInterruptsForTaskRun called to ensure that unless pool is</span></span><br><span class="line"><span class="comment"> * stopping, this thread does not have its interrupt set.</span></span><br><span class="line"><span class="comment"> * 在任何任务执行之前，都需要对worker加锁去防止在任务运行时，其它的线程池中断操作</span></span><br><span class="line"><span class="comment"> * clearInterruptsForTaskRun保证除非线程池正在stoping，线程不会被设置中断标示</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * 3. Each task run is preceded by a call to beforeExecute, which</span></span><br><span class="line"><span class="comment"> * might throw an exception, in which case we cause thread to die</span></span><br><span class="line"><span class="comment"> * (breaking loop with completedAbruptly true) without processing</span></span><br><span class="line"><span class="comment"> * the task.</span></span><br><span class="line"><span class="comment"> * 每个任务执行前会调用beforeExecute()，其中可能抛出一个异常，这种情况下会导致线程die（跳出循环，且completedAbruptly==true），没有执行任务</span></span><br><span class="line"><span class="comment"> * 因为beforeExecute()的异常没有cache住，会上抛，跳出循环</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * 4. Assuming beforeExecute completes normally, we run the task,</span></span><br><span class="line"><span class="comment"> * gathering any of its thrown exceptions to send to</span></span><br><span class="line"><span class="comment"> * afterExecute. We separately handle RuntimeException, Error</span></span><br><span class="line"><span class="comment"> * (both of which the specs guarantee that we trap) and arbitrary</span></span><br><span class="line"><span class="comment"> * Throwables.  Because we cannot rethrow Throwables within</span></span><br><span class="line"><span class="comment"> * Runnable.run, we wrap them within Errors on the way out (to the</span></span><br><span class="line"><span class="comment"> * thread&#x27;s UncaughtExceptionHandler).  Any thrown exception also</span></span><br><span class="line"><span class="comment"> * conservatively causes thread to die.</span></span><br><span class="line"><span class="comment"> * 假定beforeExecute()正常完成，我们执行任务</span></span><br><span class="line"><span class="comment"> * 汇总任何抛出的异常并发送给afterExecute(task, thrown)</span></span><br><span class="line"><span class="comment"> * 因为我们不能在Runnable.run()方法中重新上抛Throwables，我们将Throwables包装到Errors上抛（会到线程的UncaughtExceptionHandler去处理）</span></span><br><span class="line"><span class="comment"> * 任何上抛的异常都会导致线程die</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * 5. After task.run completes, we call afterExecute, which may</span></span><br><span class="line"><span class="comment"> * also throw an exception, which will also cause thread to</span></span><br><span class="line"><span class="comment"> * die. According to JLS Sec 14.20, this exception is the one that</span></span><br><span class="line"><span class="comment"> * will be in effect even if task.run throws.</span></span><br><span class="line"><span class="comment"> * 任务执行结束后，调用afterExecute()，也可能抛异常，也会导致线程die</span></span><br><span class="line"><span class="comment"> * 根据JLS Sec 14.20，这个异常（finally中的异常）会生效</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * The net effect of the exception mechanics is that afterExecute</span></span><br><span class="line"><span class="comment"> * and the thread&#x27;s UncaughtExceptionHandler have as accurate</span></span><br><span class="line"><span class="comment"> * information as we can provide about any problems encountered by</span></span><br><span class="line"><span class="comment"> * user code.</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> w the worker</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">final</span> <span class="keyword">void</span> <span class="title">runWorker</span><span class="params">(Worker w)</span> </span>&#123;</span><br><span class="line">    Thread wt = Thread.currentThread();</span><br><span class="line">    Runnable task = w.firstTask;</span><br><span class="line">    w.firstTask = <span class="keyword">null</span>;</span><br><span class="line">    w.unlock(); <span class="comment">// allow interrupts</span></span><br><span class="line">                <span class="comment">// new Worker()是state==-1，此处是调用Worker类的tryRelease()方法，将state置为0， 而interruptIfStarted()中只有state&gt;=0才允许调用中断</span></span><br><span class="line">    <span class="keyword">boolean</span> completedAbruptly = <span class="keyword">true</span>; <span class="comment">//是否“突然完成”，如果是由于异常导致的进入finally，那么completedAbruptly==true就是突然完成的</span></span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * 如果task不为null，或者从阻塞队列中getTask()不为null</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        <span class="keyword">while</span> (task != <span class="keyword">null</span> || (task = getTask()) != <span class="keyword">null</span>) &#123;</span><br><span class="line">            w.lock(); <span class="comment">//上锁，不是为了防止并发执行任务，为了在shutdown()时不终止正在运行的worker</span></span><br><span class="line">             </span><br><span class="line">            <span class="comment">// If pool is stopping, ensure thread is interrupted;</span></span><br><span class="line">            <span class="comment">// if not, ensure thread is not interrupted.  This</span></span><br><span class="line">            <span class="comment">// requires a recheck in second case to deal with</span></span><br><span class="line">            <span class="comment">// shutdownNow race while clearing interrupt</span></span><br><span class="line">            <span class="comment">/**</span></span><br><span class="line"><span class="comment">             * clearInterruptsForTaskRun操作</span></span><br><span class="line"><span class="comment">             * 确保只有在线程stoping时，才会被设置中断标示，否则清除中断标示</span></span><br><span class="line"><span class="comment">             * 1、如果线程池状态&gt;=stop，且当前线程没有设置中断状态，wt.interrupt()</span></span><br><span class="line"><span class="comment">             * 2、如果一开始判断线程池状态&lt;stop，但Thread.interrupted()为true，即线程已经被中断，又清除了中断标示，再次判断线程池状态是否&gt;=stop</span></span><br><span class="line"><span class="comment">             *   是，再次设置中断标示，wt.interrupt()</span></span><br><span class="line"><span class="comment">             *   否，不做操作，清除中断标示后进行后续步骤</span></span><br><span class="line"><span class="comment">             */</span></span><br><span class="line">            <span class="keyword">if</span> ((runStateAtLeast(ctl.get(), STOP) ||</span><br><span class="line">                 (Thread.interrupted() &amp;&amp;</span><br><span class="line">                  runStateAtLeast(ctl.get(), STOP))) &amp;&amp;</span><br><span class="line">                !wt.isInterrupted())</span><br><span class="line">                wt.interrupt(); <span class="comment">//当前线程调用interrupt()中断</span></span><br><span class="line">             </span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                <span class="comment">//执行前（子类实现）</span></span><br><span class="line">                beforeExecute(wt, task);</span><br><span class="line">                 </span><br><span class="line">                Throwable thrown = <span class="keyword">null</span>;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    task.run();</span><br><span class="line">                &#125; </span><br><span class="line">                <span class="keyword">catch</span> (RuntimeException x) &#123;</span><br><span class="line">                    thrown = x; <span class="keyword">throw</span> x;</span><br><span class="line">                &#125; </span><br><span class="line">                <span class="keyword">catch</span> (Error x) &#123;</span><br><span class="line">                    thrown = x; <span class="keyword">throw</span> x;</span><br><span class="line">                &#125; </span><br><span class="line">                <span class="keyword">catch</span> (Throwable x) &#123;</span><br><span class="line">                    thrown = x; <span class="keyword">throw</span> <span class="keyword">new</span> Error(x);</span><br><span class="line">                &#125; </span><br><span class="line">                <span class="keyword">finally</span> &#123;</span><br><span class="line">                    <span class="comment">//执行后（子类实现）</span></span><br><span class="line">                    afterExecute(task, thrown); <span class="comment">//这里就考验catch和finally的执行顺序了，因为要以thrown为参数</span></span><br><span class="line">                &#125;</span><br><span class="line">            &#125; </span><br><span class="line">            <span class="keyword">finally</span> &#123;</span><br><span class="line">                task = <span class="keyword">null</span>; <span class="comment">//task置为null</span></span><br><span class="line">                w.completedTasks++; <span class="comment">//完成任务数+1</span></span><br><span class="line">                w.unlock(); <span class="comment">//解锁</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">         </span><br><span class="line">        completedAbruptly = <span class="keyword">false</span>;</span><br><span class="line">    &#125; </span><br><span class="line">    <span class="keyword">finally</span> &#123;</span><br><span class="line">        <span class="comment">//处理worker的退出</span></span><br><span class="line">        processWorkerExit(w, completedAbruptly);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>runWorker(Worker w)<br>执行流程：<br>1、Worker线程启动后，通过Worker类的run()方法调用runWorker(this)<br>2、执行任务之前，首先worker.unlock()，将AQS的state置为0，允许中断当前worker线程<br>3、开始执行firstTask，调用task.run()，在执行任务前会上锁wroker.lock()，在执行完任务后会解锁，为了防止在任务运行时被线程池一些中断操作中断<br>4、在任务执行前后，可以根据业务场景自定义beforeExecute() 和 afterExecute()方法<br>5、无论在beforeExecute()、task.run()、afterExecute()发生异常上抛，都会导致worker线程终止，进入processWorkerExit()处理worker退出的流程<br>6、如正常执行完当前task后，会通过getTask()从阻塞队列中获取新任务，当队列中没有任务，且获取任务超时，那么当前worker也会进入退出流程</p>
<h3 id="getTask-–-获取任务"><a href="#getTask-–-获取任务" class="headerlink" title="getTask()  –  获取任务"></a>getTask()  –  获取任务</h3><p><img src="/2018/08/14/Java-%E7%BA%BF%E7%A8%8B%E6%B1%A0/677054-20170408211632300-254189763.png" alt="05"></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Performs blocking or timed wait for a task, depending on</span></span><br><span class="line"><span class="comment"> * current configuration settings, or returns null if this worker</span></span><br><span class="line"><span class="comment"> * must exit because of any of:  以下情况会返回null</span></span><br><span class="line"><span class="comment"> * 1. There are more than maximumPoolSize workers (due to</span></span><br><span class="line"><span class="comment"> *    a call to setMaximumPoolSize).</span></span><br><span class="line"><span class="comment"> *    超过了maximumPoolSize设置的线程数量（因为调用了setMaximumPoolSize()）</span></span><br><span class="line"><span class="comment"> * 2. The pool is stopped.</span></span><br><span class="line"><span class="comment"> *    线程池被stop</span></span><br><span class="line"><span class="comment"> * 3. The pool is shutdown and the queue is empty.</span></span><br><span class="line"><span class="comment"> *    线程池被shutdown，并且workQueue空了</span></span><br><span class="line"><span class="comment"> * 4. This worker timed out waiting for a task, and timed-out</span></span><br><span class="line"><span class="comment"> *    workers are subject to termination (that is,</span></span><br><span class="line"><span class="comment"> *    &#123;<span class="doctag">@code</span> allowCoreThreadTimeOut || workerCount &gt; corePoolSize&#125;)</span></span><br><span class="line"><span class="comment"> *    both before and after the timed wait.</span></span><br><span class="line"><span class="comment"> *    线程等待任务超时</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> task, or null if the worker must exit, in which case</span></span><br><span class="line"><span class="comment"> *         workerCount is decremented</span></span><br><span class="line"><span class="comment"> *         返回null表示这个worker要结束了，这种情况下workerCount-1</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">private</span> Runnable <span class="title">getTask</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">boolean</span> timedOut = <span class="keyword">false</span>; <span class="comment">// Did the last poll() time out?</span></span><br><span class="line"> </span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 外层循环</span></span><br><span class="line"><span class="comment">     * 用于判断线程池状态</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    retry:</span><br><span class="line">    <span class="keyword">for</span> (;;) &#123;</span><br><span class="line">        <span class="keyword">int</span> c = ctl.get();</span><br><span class="line">        <span class="keyword">int</span> rs = runStateOf(c);</span><br><span class="line"> </span><br><span class="line">        <span class="comment">// Check if queue empty only if necessary.</span></span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * 对线程池状态的判断，两种情况会workerCount-1，并且返回null</span></span><br><span class="line"><span class="comment">         * 线程池状态为shutdown，且workQueue为空（反映了shutdown状态的线程池还是要执行workQueue中剩余的任务的）</span></span><br><span class="line"><span class="comment">         * 线程池状态为stop（shutdownNow()会导致变成STOP）（此时不用考虑workQueue的情况）</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        <span class="keyword">if</span> (rs &gt;= SHUTDOWN &amp;&amp; (rs &gt;= STOP || workQueue.isEmpty())) &#123;</span><br><span class="line">            decrementWorkerCount(); <span class="comment">//循环的CAS减少worker数量，直到成功</span></span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line"> </span><br><span class="line">        <span class="keyword">boolean</span> timed;      <span class="comment">// Are workers subject to culling?</span></span><br><span class="line">                            <span class="comment">// 是否需要定时从workQueue中获取</span></span><br><span class="line">         </span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * 内层循环</span></span><br><span class="line"><span class="comment">         * 要么break去workQueue获取任务</span></span><br><span class="line"><span class="comment">         * 要么超时了，worker count-1</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        <span class="keyword">for</span> (;;) &#123;</span><br><span class="line">            <span class="keyword">int</span> wc = workerCountOf(c);</span><br><span class="line">            timed = allowCoreThreadTimeOut || wc &gt; corePoolSize; <span class="comment">//allowCoreThreadTimeOut默认为false</span></span><br><span class="line">                                                                 <span class="comment">//如果allowCoreThreadTimeOut为true，说明corePoolSize和maximum都需要定时</span></span><br><span class="line">             </span><br><span class="line">            <span class="comment">//如果当前执行线程数&lt;maximumPoolSize，并且timedOut 和 timed 任一为false，跳出循环，开始从workQueue获取任务</span></span><br><span class="line">            <span class="keyword">if</span> (wc &lt;= maximumPoolSize &amp;&amp; ! (timedOut &amp;&amp; timed))</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">             </span><br><span class="line">            <span class="comment">/**</span></span><br><span class="line"><span class="comment">             * 如果到了这一步，说明要么线程数量超过了maximumPoolSize（可能maximumPoolSize被修改了）</span></span><br><span class="line"><span class="comment">             * 要么既需要计时timed==true，也超时了timedOut==true</span></span><br><span class="line"><span class="comment">             * worker数量-1，减一执行一次就行了，然后返回null，在runWorker()中会有逻辑减少worker线程</span></span><br><span class="line"><span class="comment">             * 如果本次减一失败，继续内层循环再次尝试减一</span></span><br><span class="line"><span class="comment">             */</span></span><br><span class="line">            <span class="keyword">if</span> (compareAndDecrementWorkerCount(c))</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">             </span><br><span class="line">            <span class="comment">//如果减数量失败，再次读取ctl</span></span><br><span class="line">            c = ctl.get();  <span class="comment">// Re-read ctl</span></span><br><span class="line">             </span><br><span class="line">            <span class="comment">//如果线程池运行状态发生变化，继续外层循环</span></span><br><span class="line">            <span class="comment">//如果状态没变，继续内层循环</span></span><br><span class="line">            <span class="keyword">if</span> (runStateOf(c) != rs)</span><br><span class="line">                <span class="keyword">continue</span> retry;</span><br><span class="line">            <span class="comment">// else CAS failed due to workerCount change; retry inner loop</span></span><br><span class="line">        &#125;</span><br><span class="line"> </span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">//poll() - 使用  LockSupport.parkNanos(this, nanosTimeout) 挂起一段时间，interrupt()时不会抛异常，但会有中断响应</span></span><br><span class="line">            <span class="comment">//take() - 使用 LockSupport.park(this) 挂起，interrupt()时不会抛异常，但会有中断响应</span></span><br><span class="line">            Runnable r = timed ?</span><br><span class="line">                workQueue.poll(keepAliveTime, TimeUnit.NANOSECONDS) :    <span class="comment">//大于corePoolSize</span></span><br><span class="line">                workQueue.take();                                        <span class="comment">//小于等于corePoolSize</span></span><br><span class="line">             </span><br><span class="line">            <span class="comment">//如获取到了任务就返回</span></span><br><span class="line">            <span class="keyword">if</span> (r != <span class="keyword">null</span>)</span><br><span class="line">                <span class="keyword">return</span> r;</span><br><span class="line">             </span><br><span class="line">            <span class="comment">//没有返回，说明超时，那么在下一次内层循环时会进入worker count减一的步骤</span></span><br><span class="line">            timedOut = <span class="keyword">true</span>;</span><br><span class="line">        &#125; </span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">              * blockingQueue的take()阻塞使用LockSupport.park(this)进入wait状态的，对LockSupport.park(this)进行interrupt不会抛异常，但还是会有中断响应</span></span><br><span class="line"><span class="comment">              * 但AQS的ConditionObject的await()对中断状态做了判断，会报告中断状态 reportInterruptAfterWait(interruptMode)</span></span><br><span class="line"><span class="comment">              * 就会上抛InterruptedException，在此处捕获，重新开始循环</span></span><br><span class="line"><span class="comment">              * 如果是由于shutdown()等操作导致的空闲worker中断响应，在外层循环判断状态时，可能return null</span></span><br><span class="line"><span class="comment">              */</span></span><br><span class="line">        <span class="keyword">catch</span> (InterruptedException retry) &#123; </span><br><span class="line">            timedOut = <span class="keyword">false</span>; <span class="comment">//响应中断，重新开始，中断状态会被清除</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>getTask()<br>执行流程：<br>1、首先判断是否可以满足从workQueue中获取任务的条件，不满足return null<br>    A、线程池状态是否满足：<br>        （a）shutdown状态 + workQueue为空 或 stop状态，都不满足，因为被shutdown后还是要执行workQueue剩余的任务，但workQueue也为空，就可以退出了<br>        （b）stop状态，shutdownNow()操作会使线程池进入stop，此时不接受新任务，中断正在执行的任务，workQueue中的任务也不执行了，故return null返回<br>    B、线程数量是否超过maximumPoolSize 或 获取任务是否超时<br>        （a）线程数量超过maximumPoolSize可能是线程池在运行时被调用了setMaximumPoolSize()被改变了大小，否则已经addWorker()成功不会超过maximumPoolSize<br>        （b）如果 当前线程数量&gt;corePoolSize，才会检查是否获取任务超时，这也体现了当线程数量达到maximumPoolSize后，如果一直没有新任务，会逐渐终止worker线程直到corePoolSize<br>2、如果满足获取任务条件，根据是否需要定时获取调用不同方法：<br>    A、workQueue.poll()：如果在keepAliveTime时间内，阻塞队列还是没有任务，返回null<br>    B、workQueue.take()：如果阻塞队列为空，当前线程会被挂起等待；当队列中有任务加入时，线程被唤醒，take方法返回任务<br>3、在阻塞从workQueue中获取任务时，可以被interrupt()中断，代码中捕获了InterruptedException，重置timedOut为初始值false，再次执行第1步中的判断，满足就继续获取任务，不满足return null，会进入worker退出的流程</p>
<h3 id="processWorkerExit-–-worker线程退出"><a href="#processWorkerExit-–-worker线程退出" class="headerlink" title="processWorkerExit()  –  worker线程退出"></a>processWorkerExit()  –  worker线程退出</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">**</span><br><span class="line"> * Performs cleanup and bookkeeping <span class="keyword">for</span> a dying worker. Called</span><br><span class="line"> * only from worker threads. Unless completedAbruptly is set,</span><br><span class="line"> * assumes that workerCount has already been adjusted to account</span><br><span class="line"> * <span class="keyword">for</span> exit.  This method removes thread from worker set, and</span><br><span class="line"> * possibly terminates the pool or replaces the worker <span class="keyword">if</span> either</span><br><span class="line"> * it exited due to user task exception or <span class="keyword">if</span> fewer than</span><br><span class="line"> * corePoolSize workers are running or queue is non-empty but</span><br><span class="line"> * there are no workers.</span><br><span class="line"> *</span><br><span class="line"> * <span class="meta">@param</span> w the worker</span><br><span class="line"> * <span class="meta">@param</span> completedAbruptly <span class="keyword">if</span> the worker died due to user exception</span><br><span class="line"> */</span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">processWorkerExit</span><span class="params">(Worker w, <span class="keyword">boolean</span> completedAbruptly)</span> </span>&#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 1、worker数量-1</span></span><br><span class="line"><span class="comment">     * 如果是突然终止，说明是task执行时异常情况导致，即run()方法执行时发生了异常，那么正在工作的worker线程数量需要-1</span></span><br><span class="line"><span class="comment">     * 如果不是突然终止，说明是worker线程没有task可执行了，不用-1，因为已经在getTask()方法中-1了</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">if</span> (completedAbruptly) <span class="comment">// If abrupt, then workerCount wasn&#x27;t adjusted 代码和注释正好相反啊</span></span><br><span class="line">        decrementWorkerCount();</span><br><span class="line"> </span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 2、从Workers Set中移除worker</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">final</span> ReentrantLock mainLock = <span class="keyword">this</span>.mainLock;</span><br><span class="line">    mainLock.lock();</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        completedTaskCount += w.completedTasks; <span class="comment">//把worker的完成任务数加到线程池的完成任务数</span></span><br><span class="line">        workers.remove(w); <span class="comment">//从HashSet&lt;Worker&gt;中移除</span></span><br><span class="line">    &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">        mainLock.unlock();</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 3、在对线程池有负效益的操作时，都需要“尝试终止”线程池</span></span><br><span class="line"><span class="comment">     * 主要是判断线程池是否满足终止的状态</span></span><br><span class="line"><span class="comment">     * 如果状态满足，但还有线程池还有线程，尝试对其发出中断响应，使其能进入退出流程</span></span><br><span class="line"><span class="comment">     * 没有线程了，更新状态为tidying-&gt;terminated</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    tryTerminate();</span><br><span class="line"> </span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 4、是否需要增加worker线程</span></span><br><span class="line"><span class="comment">     * 线程池状态是running 或 shutdown</span></span><br><span class="line"><span class="comment">     * 如果当前线程是突然终止的，addWorker()</span></span><br><span class="line"><span class="comment">     * 如果当前线程不是突然终止的，但当前线程数量 &lt; 要维护的线程数量，addWorker()</span></span><br><span class="line"><span class="comment">     * 故如果调用线程池shutdown()，直到workQueue为空前，线程池都会维持corePoolSize个线程，然后再逐渐销毁这corePoolSize个线程</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">int</span> c = ctl.get();</span><br><span class="line">    <span class="comment">//如果状态是running、shutdown，即tryTerminate()没有成功终止线程池，尝试再添加一个worker</span></span><br><span class="line">    <span class="keyword">if</span> (runStateLessThan(c, STOP)) &#123;</span><br><span class="line">        <span class="comment">//不是突然完成的，即没有task任务可以获取而完成的，计算min，并根据当前worker数量判断是否需要addWorker()</span></span><br><span class="line">        <span class="keyword">if</span> (!completedAbruptly) &#123;</span><br><span class="line">            <span class="keyword">int</span> min = allowCoreThreadTimeOut ? <span class="number">0</span> : corePoolSize; <span class="comment">//allowCoreThreadTimeOut默认为false，即min默认为corePoolSize</span></span><br><span class="line">             </span><br><span class="line">            <span class="comment">//如果min为0，即不需要维持核心线程数量，且workQueue不为空，至少保持一个线程</span></span><br><span class="line">            <span class="keyword">if</span> (min == <span class="number">0</span> &amp;&amp; ! workQueue.isEmpty())</span><br><span class="line">                min = <span class="number">1</span>;</span><br><span class="line">             </span><br><span class="line">            <span class="comment">//如果线程数量大于最少数量，直接返回，否则下面至少要addWorker一个</span></span><br><span class="line">            <span class="keyword">if</span> (workerCountOf(c) &gt;= min)</span><br><span class="line">                <span class="keyword">return</span>; <span class="comment">// replacement not needed</span></span><br><span class="line">        &#125;</span><br><span class="line">         </span><br><span class="line">        <span class="comment">//添加一个没有firstTask的worker</span></span><br><span class="line">        <span class="comment">//只要worker是completedAbruptly突然终止的，或者线程数量小于要维护的数量，就新添一个worker线程，即使是shutdown状态</span></span><br><span class="line">        addWorker(<span class="keyword">null</span>, <span class="keyword">false</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>processWorkerExit(Worker w, boolean completedAbruptly)<br>参数：<br>    worker：                      要结束的worker<br>    completedAbruptly： 是否突然完成（是否因为异常退出）<br>执行流程：<br>1、worker数量-1<br>    A、如果是突然终止，说明是task执行时异常情况导致，即run()方法执行时发生了异常，那么正在工作的worker线程数量需要-1<br>    B、如果不是突然终止，说明是worker线程没有task可执行了，不用-1，因为已经在getTask()方法中-1了<br>2、从Workers Set中移除worker，删除时需要上锁mainlock<br>3、tryTerminate()：在对线程池有负效益的操作时，都需要“尝试终止”线程池，大概逻辑：<br>    判断线程池是否满足终止的状态<br>    A、如果状态满足，但还有线程池还有线程，尝试对其发出中断响应，使其能进入退出流程<br>    B、没有线程了，更新状态为tidying-&gt;terminated<br>4、是否需要增加worker线程，如果线程池还没有完全终止，仍需要保持一定数量的线程<br>    线程池状态是running 或 shutdown<br>    A、如果当前线程是突然终止的，addWorker()<br>    B、如果当前线程不是突然终止的，但当前线程数量 &lt; 要维护的线程数量，addWorker()<br>    故如果调用线程池shutdown()，直到workQueue为空前，线程池都会维持corePoolSize个线程，然后再逐渐销毁这corePoolSize个线程</p>
<h2 id="Android中的线程池"><a href="#Android中的线程池" class="headerlink" title="Android中的线程池"></a>Android中的线程池</h2><p>Android中的线程池都是之间或间接通过配置ThreadPoolExecutor来实现不同特性的线程池.Android中最常见的四类具有不同特性的线程池分别为FixThreadPool、CachedThreadPool、SingleThreadPool、ScheduleThreadExecutor.</p>
<ol>
<li>FixThreadPool<br>只有核心线程,并且数量固定的,也不会被回收,所有线程都活动时,因为队列没有限制大小,新任务会等待执行.<br>优点:更快的响应外界请求.</li>
<li>SingleThreadPool<br>只有一个核心线程,确保所有的任务都在同一线程中按顺序完成.因此不需要处理线程同步的问题.</li>
<li>CachedThreadPool<br>只有非核心线程,最大线程数非常大,所有线程都活动时,会为新任务创建新线程,否则会利用空闲线程(60s空闲时间,过了就会被回收,所以线程池中有0个线程的可能)处理任务.<br>优点:任何任务都会被立即执行(任务队列SynchronousQueue相当于一个空集合);比较适合执行大量的耗时较少的任务.</li>
<li>ScheduledThreadPool<br>核心线程数固定,非核心线程(闲着没活干会被立即回收)数没有限制.<br>优点:执行定时任务以及有固定周期的重复任务</li>
</ol>
<p>扩展：<br><a href="https://javadoop.com/post/java-thread-pool#Executor%20%E6%8E%A5%E5%8F%A3">深度解读 java 线程池设计思想及源码实现</a></p>
]]></content>
      <categories>
        <category>Java</category>
      </categories>
      <tags>
        <tag>面试</tag>
      </tags>
  </entry>
  <entry>
    <title>Android-binder-c++层</title>
    <url>/2018/08/09/Android-binder-c++%E5%B1%82/</url>
    <content><![CDATA[<p>这里主要是native端的流程<a id="more"></a></p>
<p>主要涉及到的目录是 </p>
<ol>
<li>android / platform / frameworks / native / master / . / libs </li>
<li>android / platform / frameworks / base / master / . / core / jni<h2 id="Native端-ServiceManager-启动过程"><a href="#Native端-ServiceManager-启动过程" class="headerlink" title="Native端 ServiceManager 启动过程"></a>Native端 ServiceManager 启动过程</h2></li>
</ol>
<blockquote>
<p>原本列了一大串，后来发现详细内容还不如直接看这个把。<br><a href="http://gityuan.com/2015/11/07/binder-start-sm/">Binder系列3—启动ServiceManager</a></p>
</blockquote>
<p><img src="/2018/08/09/Android-binder-c++%E5%B1%82/binder_15.png" alt="ServiceManager"></p>
<p>提炼出关键步骤就是</p>
<ol>
<li><p><code>binder_open(driver, 128*1024)</code> ,内部调用为 :</p>
<ol>
<li>打开/dev/binder文件：<code>bs-&gt;fd = open(&quot;/dev/binder&quot;, O_RDWR);</code>,这个方法会进入到binder驱动程序，保存线程上下文信息，生成多个红黑树，用于保存服务端binder实体信息，客户端binder引用信息等;</li>
<li>记下映射内存大小:<code>bs-&gt;mapsize = mapsize;</code></li>
<li>建立128K内存映射:<code>bs-&gt;mapped = mmap(NULL, mapsize, PROT_READ, MAP_PRIVATE, bs-&gt;fd, 0);</code>,这个方法也会进入到binder驱动程序,使用进程虚拟地址空间和内核虚拟地址空间来映射同一个物理页面。这样，进程和内核之间就可以减少一次内存拷贝了，提到了进程间通信效率。举个例子如，Client要将一块内存数据传递给Server，一般的做法是，Client将这块数据从它的进程空间拷贝到内核空间中，然后内核再将这个数据从内核空间拷贝到Server的进程空间，这样，Server就可以访问这个数据了。但是在这种方法中，执行了两次内存拷贝操作，而采用我们上面提到的方法，只需要把Client进程空间的数据拷贝一次到内核空间，然后Server与内核共享这个数据就可以了，整个过程只需要执行一次内存拷贝，提高了效率。</li>
</ol>
<p>这里用到一个数据结构 binder_state 把它们存起来</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">binder_state</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    <span class="keyword">int</span> fd;  <span class="comment">//驱动的文件描述符</span></span><br><span class="line">    <span class="keyword">void</span> *mapped;  <span class="comment">//映射内存的起始地址</span></span><br><span class="line">    <span class="keyword">unsigned</span> mapsize;  <span class="comment">//映射内存的大小</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></li>
<li><p>通知Binder驱动程序它是守护进程：</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">binder_become_context_manager</span><span class="params">(struct binder_state *bs)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> ioctl(bs-&gt;fd, BINDER_SET_CONTEXT_MGR, <span class="number">0</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>这里通过调用ioctl文件操作函数来通知Binder驱动程序自己是守护进程，cmd是BINDER_SET_CONTEXT_MGR，没有参数。在驱动程序内部的调用为:</p>
<ol>
<li>初始化<code>binder_context_mgr_uid</code>为<code>current-&gt;cred-&gt;euid</code>，<code>binder_context_mgr_uid</code>表示Service Manager守护进程的uid,这样使当前线程成为Binder机制的守护进程</li>
<li>通过<code>binder_new_node()</code>来创建binder实体,<code>binder_context_mgr_node</code>用来表示Service Manager的binder实体</li>
</ol>
</li>
<li><p>进入循环等待请求的到来：<code>binder_loop(bs, svcmgr_handler)</code>,并且使用 <code>svcmgr_handler</code> 函数来处理binder请求,没有请求时，<br>在<code>binder_ioctl()</code>函数中通过<code>wait_event_interruptible_exclusive()</code>阻塞</p>
</li>
</ol>
<h2 id="Native端获取-ServiceManager-远程接口的过程"><a href="#Native端获取-ServiceManager-远程接口的过程" class="headerlink" title="Native端获取 ServiceManager 远程接口的过程"></a>Native端获取 ServiceManager 远程接口的过程</h2><p><a href="http://gityuan.com/2015/11/08/binder-get-sm/">Binder系列4—获取ServiceManager</a></p>
<p>Service Manager在Binder机制中既充当守护进程的角色，同时它也充当着Server角色，然而它又与一般的Server不一样。</p>
<p>对于普通的Server来说，Client如果想要获得Server的远程接口，那么必须通过Service Manager远程接口提供的getService接口来获得，getService是一个使用Binder机制来进行进程间通信的过程(需要通过名字查询得到相应的Server端binder实体对应的binder引用句柄，用于生成BpBinder)；</p>
<p>而对于Service Manager这个Server来说，Client如果想要获得Service Manager远程接口，却不必通过进程间通信机制来获得，因为Service Manager远程接口是一个特殊的Binder引用，它的引用句柄一定是0。</p>
<p>获取Service Manager远程接口的函数是</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function">sp&lt;IServiceManager&gt; <span class="title">defaultServiceManager</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"> </span><br><span class="line">    <span class="keyword">if</span> (gDefaultServiceManager != <span class="literal">NULL</span>) <span class="keyword">return</span> gDefaultServiceManager;</span><br><span class="line"> </span><br><span class="line">    &#123;</span><br><span class="line">        AutoMutex _l(gDefaultServiceManagerLock);</span><br><span class="line">        <span class="keyword">if</span> (gDefaultServiceManager == <span class="literal">NULL</span>) &#123;</span><br><span class="line">            gDefaultServiceManager = interface_cast&lt;IServiceManager&gt;(</span><br><span class="line">                ProcessState::self()-&gt;getContextObject(<span class="literal">NULL</span>));</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    <span class="keyword">return</span> gDefaultServiceManager;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>一个相关的类继承关系图:<br><img src="/2018/08/09/Android-binder-c++%E5%B1%82/binder_4.jpg" alt="关于BpServiceManager"><br>从图中可以看到：</p>
<ol>
<li><p>BpServiceManager类继承了BpInterface<IServiceManager>类，BpInterface是个模板类，又继承了IServiceManager和BpRefBase,它的构造函数需要一个IBinder类</IServiceManager></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> INTERFACE&gt;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">BpInterface</span> :</span> <span class="keyword">public</span> INTERFACE, <span class="keyword">public</span> BpRefBase</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    BpInterface(<span class="keyword">const</span> sp&lt;IBinder&gt;&amp; remote);</span><br><span class="line"></span><br><span class="line"><span class="keyword">protected</span>:</span><br><span class="line">    <span class="function"><span class="keyword">virtual</span> IBinder* <span class="title">onAsBinder</span><span class="params">()</span></span>;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></li>
<li><p>IServiceManager类继承了IInterface类，而IInterface类和BpRefBase类又继承了RefBase类。在BpRefBase类中，有一个成员变量mRemote，它的类型是IBinder*，实现类为BpBinder，它表示一个Binder引用，引用句柄值保存在BpBinder类的mHandle成员变量中。因此IServiceManager也有mRemote的指针，可以和binder通信</p>
</li>
</ol>
<p>创建Service Manager远程接口主要是下面语句,主要是三个步骤:</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line">gDefaultServiceManager = interface_cast&lt;IServiceManager&gt;(ProcessState::self()-&gt;getContextObject(<span class="literal">NULL</span>));</span><br></pre></td></tr></table></figure>
<ol>
<li><p>首先是<code>ProcessState::self()</code>:</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function">sp&lt;ProcessState&gt; <span class="title">ProcessState::self</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (gProcess != <span class="literal">NULL</span>) <span class="keyword">return</span> gProcess;</span><br><span class="line">    </span><br><span class="line">    AutoMutex _l(gProcessMutex);</span><br><span class="line">    <span class="keyword">if</span> (gProcess == <span class="literal">NULL</span>) gProcess = <span class="keyword">new</span> ProcessState;</span><br><span class="line">    <span class="keyword">return</span> gProcess;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>这里仅仅是创建一个单例，它的构造函数</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line">ProcessState::ProcessState()</span><br><span class="line">: mDriverFD(open_driver())</span><br><span class="line">, mVMStart(MAP_FAILED)</span><br><span class="line">, mManagesContexts(<span class="literal">false</span>)</span><br><span class="line">, mBinderContextCheckFunc(<span class="literal">NULL</span>)</span><br><span class="line">, mBinderContextUserData(<span class="literal">NULL</span>)</span><br><span class="line">, mThreadPoolStarted(<span class="literal">false</span>)</span><br><span class="line">, mThreadPoolSeq(<span class="number">1</span>)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">if</span> (mDriverFD &gt;= <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="comment">// XXX Ideally, there should be a specific define for whether we</span></span><br><span class="line">        <span class="comment">// have mmap (or whether we could possibly have the kernel module</span></span><br><span class="line">        <span class="comment">// availabla).</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">if</span> !defined(HAVE_WIN32_IPC)</span></span><br><span class="line">        <span class="comment">// mmap the binder, providing a chunk of virtual address space to receive transactions.</span></span><br><span class="line">        mVMStart = mmap(<span class="number">0</span>, BINDER_VM_SIZE, PROT_READ, MAP_PRIVATE | MAP_NORESERVE, mDriverFD, <span class="number">0</span>);</span><br><span class="line">        <span class="keyword">if</span> (mVMStart == MAP_FAILED) &#123;</span><br><span class="line">            <span class="comment">// *sigh*</span></span><br><span class="line">            LOGE(<span class="string">&quot;Using /dev/binder failed: unable to mmap transaction memory.\n&quot;</span>);</span><br><span class="line">            close(mDriverFD);</span><br><span class="line">            mDriverFD = <span class="number">-1</span>;</span><br><span class="line">        &#125;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">else</span></span></span><br><span class="line">        mDriverFD = <span class="number">-1</span>;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (mDriverFD &lt; <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="comment">// Need to run without the driver, starting our own thread pool.</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>主要做了三件事：</p>
<ol>
<li>调用open()，打开/dev/binder驱动设备；</li>
<li>再利用mmap()，创建大小为BINDER_VM_SIZE(1M-8K)的内存地址空间；</li>
<li>设定当前进程最大的最大并发Binder线程个数为16。</li>
</ol>
</li>
<li><p><code>ProcessState::self()-&gt;getContextObject(NULL)</code>,这个函数的返回值，是一个句柄值为0的Binder引用，即BpBinder:<code>new BpBinder(0)</code></p>
</li>
<li><p><code>interface_cast&lt;IServiceManager&gt;()</code>函数,这是一个模板函数，最终调用到了<code>IServiceManager::asInterface()</code>:</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> INTERFACE&gt;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> sp&lt;INTERFACE&gt; <span class="title">interface_cast</span><span class="params">(<span class="keyword">const</span> sp&lt;IBinder&gt;&amp; obj)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">return</span> INTERFACE::asInterface(obj); </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function">android::sp&lt;IServiceManager&gt; <span class="title">IServiceManager::asInterface</span><span class="params">(<span class="keyword">const</span> android::sp&lt;android::IBinder&gt;&amp; obj)</span>                                              </span></span><br><span class="line"><span class="function"></span>&#123;                                                                                </span><br><span class="line">    android::sp&lt;IServiceManager&gt; intr;                               </span><br><span class="line">    <span class="keyword">if</span> (obj != <span class="literal">NULL</span>) &#123;                                                    </span><br><span class="line">        intr = <span class="keyword">static_cast</span>&lt;IServiceManager*&gt;(                                                  </span><br><span class="line">                    obj-&gt;queryLocalInterface(IServiceManager::descriptor).get());     </span><br><span class="line">        <span class="keyword">if</span> (intr == <span class="literal">NULL</span>) &#123;                </span><br><span class="line">            intr = <span class="keyword">new</span> BpServiceManager(obj);                                        </span><br><span class="line">        &#125;                                          </span><br><span class="line">    ｝</span><br><span class="line">    <span class="keyword">return</span> intr;                                  </span><br><span class="line">&#125;   </span><br></pre></td></tr></table></figure>
<p>因此实际的过程为:</p>
</li>
</ol>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line">gDefaultServiceManager = <span class="keyword">new</span> BpServiceManager(<span class="keyword">new</span> BpBinder(<span class="number">0</span>));</span><br></pre></td></tr></table></figure>
<p>即获取的Service Manager远程接口，本质上是一个BpServiceManager，包含了一个句柄值为0的Binder引用，这个过程不涉及到跨进程调用</p>
<h2 id="Native端普通-Service-的初始化，注册"><a href="#Native端普通-Service-的初始化，注册" class="headerlink" title="Native端普通 Service 的初始化，注册"></a>Native端普通 Service 的初始化，注册</h2><p>在上一节里面我们看到了 ServiceManager 的远程接口端的类图，实际上是一个BpServiceManager。这里我们以MediaPlayerService为例，看一下服务端的类图</p>
<p><img src="/2018/08/09/Android-binder-c++%E5%B1%82/binder_6.jpg" alt="MediaPlayerService"></p>
<p>可以看到，这个结构和Bp端很类似，不同的地方在于，<code>MediaPlayerService</code>继承于<code>BnMediaPlayerService</code>,而<code>BnMediaPlayerService</code>继承于<code>BnInterface</code>，<code>BnInterface</code>继承了<code>BBinder</code>接口， IBinder 的实现类则是<code>BBinder</code>其他部分则是类似的</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> INTERFACE&gt;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">BnInterface</span> :</span> <span class="keyword">public</span> INTERFACE, <span class="keyword">public</span> BBinder</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">virtual</span> sp&lt;IInterface&gt;      <span class="title">queryLocalInterface</span><span class="params">(<span class="keyword">const</span> String16&amp; _descriptor)</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">virtual</span> <span class="keyword">const</span> String16&amp;     <span class="title">getInterfaceDescriptor</span><span class="params">()</span> <span class="keyword">const</span></span>;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">protected</span>:</span><br><span class="line">    <span class="function"><span class="keyword">virtual</span> IBinder*            <span class="title">onAsBinder</span><span class="params">()</span></span>;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<p>MediaPlayerService的启动过程：</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span>** argv)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="function">sp&lt;ProcessState&gt; <span class="title">proc</span><span class="params">(ProcessState::self())</span></span>;</span><br><span class="line">    sp&lt;IServiceManager&gt; sm = defaultServiceManager();</span><br><span class="line">    LOGI(<span class="string">&quot;ServiceManager: %p&quot;</span>, sm.get());</span><br><span class="line">    AudioFlinger::instantiate();</span><br><span class="line">    MediaPlayerService::instantiate();</span><br><span class="line">    CameraService::instantiate();</span><br><span class="line">    AudioPolicyService::instantiate();</span><br><span class="line">    ProcessState::self()-&gt;startThreadPool();</span><br><span class="line">    IPCThreadState::self()-&gt;joinThreadPool();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>主要步骤是：</p>
<ol>
<li><p><code>sp&lt;ProcessState&gt; proc(ProcessState::self());</code> , 在上一节已经分析过这句过程。主要是打开binder设备和映射内存</p>
</li>
<li><p><code>sp&lt;IServiceManager&gt; sm = defaultServiceManager()</code>,获取ServiceManager接口，上一节也已经分析过</p>
</li>
<li><p><code>MediaPlayerService::instantiate()</code>：</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">MediaPlayerService::instantiate</span><span class="params">()</span> </span>&#123;</span><br><span class="line">defaultServiceManager()-&gt;addService(</span><br><span class="line">        String16(<span class="string">&quot;media.player&quot;</span>), <span class="keyword">new</span> MediaPlayerService());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>addService函数传入了两个参数，一个是服务的名字，一个是服务的实现类。这里首先看一下<code>defaultServiceManager</code>返回的<code>BpServiceManager</code>定义:</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">BpServiceManager</span> :</span> <span class="keyword">public</span> BpInterface&lt;IServiceManager&gt;</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">	BpServiceManager(<span class="keyword">const</span> sp&lt;IBinder&gt;&amp; impl)</span><br><span class="line">		: BpInterface&lt;IServiceManager&gt;(impl)</span><br><span class="line">	&#123;</span><br><span class="line">	&#125;</span><br><span class="line"> </span><br><span class="line">	......</span><br><span class="line"> </span><br><span class="line">	<span class="function"><span class="keyword">virtual</span> <span class="keyword">status_t</span> <span class="title">addService</span><span class="params">(<span class="keyword">const</span> String16&amp; name, <span class="keyword">const</span> sp&lt;IBinder&gt;&amp; service)</span></span></span><br><span class="line"><span class="function">	</span>&#123;</span><br><span class="line">		Parcel data, reply;</span><br><span class="line">        <span class="comment">//IServiceManager::getInterfaceDescriptor()返回来的是一个字符串，即&quot;android.os.IServiceManager&quot;，写入一个字符串</span></span><br><span class="line">		data.writeInterfaceToken(IServiceManager::getInterfaceDescriptor());</span><br><span class="line">        <span class="comment">// name 即 &quot;media.player&quot;，写入一个字符串</span></span><br><span class="line">		data.writeString16(name);</span><br><span class="line">		data.writeStrongBinder(service);</span><br><span class="line">		<span class="keyword">status_t</span> err = remote()-&gt;transact(ADD_SERVICE_TRANSACTION, data, &amp;reply);</span><br><span class="line">		<span class="keyword">return</span> err == NO_ERROR ? reply.readExceptionCode() </span><br><span class="line">	&#125;</span><br><span class="line">	......</span><br><span class="line"> </span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">status_t</span> <span class="title">Parcel::writeStrongBinder</span><span class="params">(<span class="keyword">const</span> sp&lt;IBinder&gt;&amp; val)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> flatten_binder(ProcessState::self(), val, <span class="keyword">this</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>这里 <code>flatten_binder(ProcessState::self(), val, this)</code>会把传入进来的 IBinder实现类service转成一个flat_binder_object对象，然后序列化到Parcel 里面 。 每一个Binder实体或者引用，都通过 flat_binder_object 来表示，成员变量里面 binder表示这是一个Binder实体，handle表示这是一个Binder引用，当这是一个Binder实体时，cookie才有意义，表示附加数据，由进程自己解释。：</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">status_t</span> <span class="title">flatten_binder</span><span class="params">(<span class="keyword">const</span> sp&lt;ProcessState&gt;&amp; proc,<span class="keyword">const</span> sp&lt;IBinder&gt;&amp; binder, Parcel* out)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    flat_binder_object obj;</span><br><span class="line">    </span><br><span class="line">    obj.flags = <span class="number">0x7f</span> | FLAT_BINDER_FLAG_ACCEPTS_FDS;</span><br><span class="line">    <span class="keyword">if</span> (binder != <span class="literal">NULL</span>) &#123;</span><br><span class="line">        IBinder *local = binder-&gt;localBinder();</span><br><span class="line">        <span class="keyword">if</span> (!local) &#123;</span><br><span class="line">            BpBinder *proxy = binder-&gt;remoteBinder();</span><br><span class="line">            <span class="keyword">if</span> (proxy == <span class="literal">NULL</span>) &#123;</span><br><span class="line">                LOGE(<span class="string">&quot;null proxy&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">const</span> <span class="keyword">int32_t</span> handle = proxy ? proxy-&gt;handle() : <span class="number">0</span>;</span><br><span class="line">            obj.type = BINDER_TYPE_HANDLE;</span><br><span class="line">            obj.handle = handle;</span><br><span class="line">            obj.cookie = <span class="literal">NULL</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;  <span class="comment">//此次会进入到这里，因为是BBinder，服务实体</span></span><br><span class="line">            obj.type = BINDER_TYPE_BINDER;</span><br><span class="line">            obj.binder = local-&gt;getWeakRefs();</span><br><span class="line">            obj.cookie = local;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        obj.type = BINDER_TYPE_BINDER;</span><br><span class="line">        obj.binder = <span class="literal">NULL</span>;</span><br><span class="line">        obj.cookie = <span class="literal">NULL</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> finish_flatten_binder(binder, obj, out); <span class="comment">//序列化，把flat_binder_object写入out。</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><code>writeStrongBinder</code>的过程，在这里就是，把parcel data 转成 flat_binder_object ,然后写入到parcel out。</p>
<p>回到上面去，<code>writeStrongBinder</code>结束后，就开始调用<code>status_t err = remote()-&gt;tra nsact(ADD_SERVICE_TRANSACTION, data, &amp;reply);</code>,</p>
<p>因为这里是BpServiceManager，所以remote()成员函数来自于BpRefBase类，它返回一个BpBinder指针，也就是BpBinder(0)。后面是一连串的调用链：</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">// android / platform / frameworks / native / master / . / libs / binder / BpBinder.cpp</span></span><br><span class="line"><span class="function"><span class="keyword">status_t</span> <span class="title">BpBinder::transact</span><span class="params">(<span class="keyword">uint32_t</span> code, <span class="keyword">const</span> Parcel&amp; data, Parcel* reply, <span class="keyword">uint32_t</span> flags)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    ...</span><br><span class="line">    <span class="comment">//IPCThreadState::self() 里面会初始化自己的成员变量mIn,mOut</span></span><br><span class="line">    <span class="keyword">status_t</span> status = IPCThreadState::self()-&gt;transact(mHandle, code, data, reply, flags);</span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">status_t</span> <span class="title">IPCThreadState::transact</span><span class="params">(<span class="keyword">int32_t</span> handle,</span></span></span><br><span class="line"><span class="function"><span class="params">                                <span class="keyword">uint32_t</span> code, <span class="keyword">const</span> Parcel&amp; data,</span></span></span><br><span class="line"><span class="function"><span class="params">                                Parcel* reply, <span class="keyword">uint32_t</span> flags)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    flags |= TF_ACCEPT_FDS;</span><br><span class="line">    . . . . . .</span><br><span class="line">    <span class="comment">// 把data数据整理进内部的mOut包中</span></span><br><span class="line">    err = writeTransactionData(BC_TRANSACTION, flags, handle, code, data, <span class="literal">NULL</span>);</span><br><span class="line">    . . . . . .</span><br><span class="line">    <span class="keyword">if</span> ((flags &amp; TF_ONE_WAY) == <span class="number">0</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        . . . . . .</span><br><span class="line">        <span class="keyword">if</span> (reply)</span><br><span class="line">        &#123;</span><br><span class="line">            err = waitForResponse(reply);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">        &#123;</span><br><span class="line">            Parcel fakeReply;</span><br><span class="line">            err = waitForResponse(&amp;fakeReply);</span><br><span class="line">        &#125;</span><br><span class="line">        . . . . . .</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">         <span class="comment">//oneway，则不需要等待reply的场景</span></span><br><span class="line">        err = waitForResponse(<span class="literal">NULL</span>, <span class="literal">NULL</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> err;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">status_t</span> <span class="title">IPCThreadState::writeTransactionData</span><span class="params">(<span class="keyword">int32_t</span> cmd, <span class="keyword">uint32_t</span> binderFlags,<span class="keyword">int32_t</span> handle, <span class="keyword">uint32_t</span> code, <span class="keyword">const</span> Parcel&amp; data, <span class="keyword">status_t</span>* statusBuffer)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">//把数据封装成 binder_transaction_data</span></span><br><span class="line">    binder_transaction_data tr;</span><br><span class="line">    tr.target.handle = handle;  <span class="comment">// handle = 0</span></span><br><span class="line">    tr.code = code;             <span class="comment">// code = ADD_SERVICE_TRANSACTION</span></span><br><span class="line">    tr.flags = binderFlags;</span><br><span class="line">    <span class="comment">// data为记录Media服务信息的Parcel对象</span></span><br><span class="line">    <span class="keyword">const</span> <span class="keyword">status_t</span> err = data.errorCheck();</span><br><span class="line">    <span class="keyword">if</span> (err == NO_ERROR) &#123;</span><br><span class="line">        tr.data_size = data.ipcDataSize();</span><br><span class="line">        tr.data.ptr.buffer = data.ipcData();</span><br><span class="line">        tr.offsets_size = data.ipcObjectsCount()*<span class="keyword">sizeof</span>(<span class="keyword">size_t</span>);</span><br><span class="line">        tr.data.ptr.offsets = data.ipcObjects();</span><br><span class="line">    &#125;</span><br><span class="line">    ....</span><br><span class="line">    mOut.writeInt32(cmd);         <span class="comment">//cmd = BC_TRANSACTION</span></span><br><span class="line">    mOut.write(&amp;tr, <span class="keyword">sizeof</span>(tr));  <span class="comment">//写入 binder_transaction_data 数据</span></span><br><span class="line">    <span class="keyword">return</span> NO_ERROR;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//在waitForResponse过程, 首先回复之前的ADD_SERVICE信息，执行BR_TRANSACTION_COMPLETE；另外，在目标进程收到事务后，处理BR_TRANSACTION事务。 然后发送给当前进程，再执行BR_REPLY命令。</span></span><br><span class="line"><span class="function"><span class="keyword">status_t</span> <span class="title">IPCThreadState::waitForResponse</span><span class="params">(Parcel *reply, <span class="keyword">status_t</span> *acquireResult)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    ...</span><br><span class="line">    <span class="comment">// talkWithDriver()内部会完成跨进程事务</span></span><br><span class="line">    <span class="keyword">if</span> ((err=talkWithDriver()) &lt; NO_ERROR) <span class="keyword">break</span>;</span><br><span class="line">    ...</span><br><span class="line">    <span class="comment">// 事务的回复信息被记录在mIn中，所以需要进一步分析这个</span></span><br><span class="line">    cmd = mIn.readInt32();</span><br><span class="line">    <span class="keyword">switch</span> (cmd) &#123;</span><br><span class="line">    <span class="keyword">case</span> BR_TRANSACTION_COMPLETE:</span><br><span class="line">        <span class="keyword">if</span> (!reply &amp;&amp; !acquireResult) <span class="keyword">goto</span> finish;</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">status_t</span> <span class="title">IPCThreadState::talkWithDriver</span><span class="params">(<span class="keyword">bool</span> doReceive)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">//把mOut数据和mIn的数据处理后构造一个binder_write_read对象</span></span><br><span class="line">    binder_write_read bwr;</span><br><span class="line">    bwr.write_size = outAvail;</span><br><span class="line">    bwr.write_buffer = (<span class="keyword">long</span> <span class="keyword">unsigned</span> <span class="keyword">int</span>)mOut.data();</span><br><span class="line">    <span class="comment">// This is what we&#x27;ll read.</span></span><br><span class="line">    <span class="keyword">if</span> (doReceive &amp;&amp; needRead) &#123;</span><br><span class="line">        <span class="comment">//接收数据缓冲区信息的填充。如果以后收到数据，就直接填在mIn中了。</span></span><br><span class="line">        bwr.read_size = mIn.dataCapacity();</span><br><span class="line">        bwr.read_buffer = (<span class="keyword">long</span> <span class="keyword">unsigned</span> <span class="keyword">int</span>)mIn.data();</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        bwr.read_size = <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    ...</span><br><span class="line">    <span class="keyword">do</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (ioctl(mProcess-&gt;mDriverFD, BINDER_WRITE_READ, &amp;bwr) &gt;= <span class="number">0</span>)</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 这里设置收到的回复数据</span></span><br><span class="line">        <span class="keyword">if</span> (bwr.read_consumed &gt; <span class="number">0</span>) &#123;</span><br><span class="line">            mIn.setDataSize(bwr.read_consumed);</span><br><span class="line">            mIn.setDataPosition(<span class="number">0</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; <span class="keyword">while</span> (err == -EINTR); <span class="comment">//当被中断，则继续执行</span></span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>短暂的总结一下流程:<br><img src="/2018/08/09/Android-binder-c++%E5%B1%82/binder_16.png" alt="binder_16"></p>
<hr>
<blockquote>
<p>这里开始是 binder驱动内容，其实只需要知道这个<code>talkWithDriver()</code>结果是 mIn 得到数据，<br><code>waitForResponse()</code>中<code>reply-&gt;ipcSetDataReferenc()</code>设置返回数据即可。///驱动这里我也好多没看懂。。。</p>
</blockquote>
</li>
</ol>
   <figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">//内核驱动程序，</span></span><br><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">long</span> <span class="title">binder_ioctl</span><span class="params">(struct file *filp, <span class="keyword">unsigned</span> <span class="keyword">int</span> cmd, <span class="keyword">unsigned</span> <span class="keyword">long</span> arg)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">binder_proc</span> *<span class="title">proc</span> =</span> filp-&gt;private_data;</span><br><span class="line">    <span class="keyword">void</span> __user *ubuf = (<span class="keyword">void</span> __user *)arg;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">binder_write_read</span> <span class="title">bwr</span>;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">//这里已经是驱动内容了，将用户空间bwr结构体拷贝到内核空间</span></span><br><span class="line">    copy_from_user(&amp;bwr, ubuf, <span class="keyword">sizeof</span>(bwr));</span><br><span class="line">    ...</span><br><span class="line">    <span class="keyword">switch</span> (cmd) &#123;</span><br><span class="line">    <span class="keyword">case</span> BINDER_WRITE_READ: &#123;</span><br><span class="line">        ...</span><br><span class="line">        <span class="keyword">if</span> (bwr.write_size &gt; <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="comment">//写数据</span></span><br><span class="line">            ret = binder_thread_write(proc, thread, (<span class="keyword">void</span> __user *)bwr.write_buffer, bwr.write_size, &amp;bwr.write_consumed);</span><br><span class="line">            ...</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (bwr.read_size &gt; <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="comment">//读取自己队列的数据</span></span><br><span class="line">            ret = binder_thread_read(proc, thread, (<span class="keyword">void</span> __user *)bwr.read_buffer, bwr.read_size, &amp;bwr.read_consumed, filp-&gt;f_flags &amp; O_NONBLOCK);</span><br><span class="line">            ...</span><br><span class="line">        &#125;</span><br><span class="line">        ...</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//将内核空间bwr结构体拷贝到用户空间</span></span><br><span class="line">    copy_to_user(ubuf, &amp;bwr, <span class="keyword">sizeof</span>(bwr));</span><br><span class="line">    ......</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">binder_thread_write(struct binder_proc *proc, struct binder_thread *thread,<span class="keyword">void</span> __user *buffer, <span class="keyword">int</span> size, <span class="keyword">signed</span> <span class="keyword">long</span> *consumed)</span><br><span class="line">&#123;</span><br><span class="line">    ...</span><br><span class="line">    <span class="keyword">uint32_t</span> cmd;</span><br><span class="line">    <span class="keyword">void</span> __user *buffer = (<span class="keyword">void</span> __user *)(<span class="keyword">uintptr_t</span>)binder_buffer;</span><br><span class="line">    <span class="keyword">void</span> __user *ptr = buffer + *consumed;</span><br><span class="line">    <span class="keyword">void</span> __user *end = buffer + size;</span><br><span class="line">    <span class="keyword">while</span> (ptr &lt; end &amp;&amp; thread-&gt;return_error == BR_OK) &#123;</span><br><span class="line">        <span class="comment">//拷贝用户空间的cmd命令，此时为BC_TRANSACTION</span></span><br><span class="line">        <span class="keyword">if</span> (get_user(cmd, (<span class="keyword">uint32_t</span> __user *)ptr)) -EFAULT;</span><br><span class="line">        ptr += <span class="keyword">sizeof</span>(<span class="keyword">uint32_t</span>);</span><br><span class="line">        <span class="keyword">switch</span> (cmd) &#123;</span><br><span class="line">            <span class="keyword">case</span> BC_TRANSACTION:</span><br><span class="line">            <span class="keyword">case</span> BC_REPLY: &#123;</span><br><span class="line">                <span class="class"><span class="keyword">struct</span> <span class="title">binder_transaction_data</span> <span class="title">tr</span>;</span></span><br><span class="line">                <span class="comment">//拷贝用户空间的binder_transaction_data，复制数据</span></span><br><span class="line">                <span class="keyword">if</span> (copy_from_user(&amp;tr, ptr, <span class="keyword">sizeof</span>(tr)))   <span class="keyword">return</span> -EFAULT;</span><br><span class="line">                ptr += <span class="keyword">sizeof</span>(tr);</span><br><span class="line">                binder_transaction(proc, thread, &amp;tr, cmd == BC_REPLY);</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            ...</span><br><span class="line">        &#125;</span><br><span class="line">        *consumed = ptr - buffer;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//binder_transaction函数主要负责的工作：</span></span><br><span class="line"><span class="comment">//新建binder_transaction对象，并插入到自己的binder_transaction堆栈中</span></span><br><span class="line"><span class="comment">//新建binder_work对象，插入到目标进程的todo队列</span></span><br><span class="line"><span class="comment">//Binder与Handle的转换 (flat_binder_object)</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">binder_transaction</span><span class="params">(struct binder_proc *proc, struct binder_thread *thread,struct binder_transaction_data *tr, <span class="keyword">int</span> reply)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    ......</span><br><span class="line">    <span class="comment">//根据handle找到node,这里handle是0，因此找到binder_context_mgr_node</span></span><br><span class="line">    <span class="keyword">if</span> (tr-&gt;target.handle) &#123;</span><br><span class="line">        ......</span><br><span class="line">	&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">	    target_node = binder_context_mgr_node;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (target_thread) &#123;</span><br><span class="line">        ...</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="comment">//找到servicemanager进程的todo队列</span></span><br><span class="line">        target_list = &amp;target_proc-&gt;todo;</span><br><span class="line">        target_wait = &amp;target_proc-&gt;wait;</span><br><span class="line">    &#125;</span><br><span class="line">	......</span><br><span class="line">    t-&gt;sender_euid = task_euid(proc-&gt;tsk);</span><br><span class="line">    t-&gt;to_proc = target_proc; <span class="comment">//此次通信目标进程为servicemanager进程</span></span><br><span class="line">    t-&gt;to_thread = target_thread;</span><br><span class="line">    t-&gt;code = tr-&gt;code;  <span class="comment">//此次通信code = ADD_SERVICE_TRANSACTION</span></span><br><span class="line">    t-&gt;flags = tr-&gt;flags;  <span class="comment">// 此次通信flags = 0</span></span><br><span class="line">    t-&gt;priority = task_nice(current);</span><br><span class="line"></span><br><span class="line">    ...</span><br><span class="line">    <span class="comment">//分别拷贝用户空间的binder_transaction_data中ptr.buffer和ptr.offsets到内核</span></span><br><span class="line">    copy_from_user(t-&gt;buffer-&gt;data,</span><br><span class="line">        (<span class="keyword">const</span> <span class="keyword">void</span> __user *)(<span class="keyword">uintptr_t</span>)tr-&gt;data.ptr.buffer, tr-&gt;data_size);</span><br><span class="line">    copy_from_user(offp,</span><br><span class="line">        (<span class="keyword">const</span> <span class="keyword">void</span> __user *)(<span class="keyword">uintptr_t</span>)tr-&gt;data.ptr.offsets, tr-&gt;offsets_size);</span><br><span class="line">    off_end = (<span class="keyword">void</span> *)offp + tr-&gt;offsets_size;</span><br><span class="line">    ...</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (; offp &lt; off_end; offp++) &#123;</span><br><span class="line">        <span class="class"><span class="keyword">struct</span> <span class="title">flat_binder_object</span> *<span class="title">fp</span>;</span></span><br><span class="line">        fp = (struct flat_binder_object *)(t-&gt;buffer-&gt;data + *offp);</span><br><span class="line">        off_min = *offp + <span class="keyword">sizeof</span>(struct flat_binder_object);</span><br><span class="line">        <span class="keyword">switch</span> (fp-&gt;type) &#123;</span><br><span class="line">            <span class="comment">//注册服务的时候，传递的是 BBinder,type是BINDER_TYPE_BINDER</span></span><br><span class="line">            <span class="keyword">case</span> BINDER_TYPE_BINDER:</span><br><span class="line">            <span class="keyword">case</span> BINDER_TYPE_WEAK_BINDER: </span><br><span class="line">            &#123;</span><br><span class="line">                <span class="class"><span class="keyword">struct</span> <span class="title">binder_ref</span> *<span class="title">ref</span>;</span></span><br><span class="line">                <span class="class"><span class="keyword">struct</span> <span class="title">binder_node</span> *<span class="title">node</span> =</span> binder_get_node(proc, fp-&gt;binder);</span><br><span class="line">                <span class="keyword">if</span> (node == <span class="literal">NULL</span>) &#123;</span><br><span class="line">                    <span class="comment">//请求所在进程(也就是这个MediaService进程)创建binder_node实体</span></span><br><span class="line">                    node = binder_new_node(proc, fp-&gt;binder, fp-&gt;cookie);</span><br><span class="line">                    ...</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="comment">//目标进程(也就是ServiceManager进程)创建binder_ref</span></span><br><span class="line">                ref = binder_get_ref_for_node(target_proc, node);</span><br><span class="line">                ...</span><br><span class="line">                <span class="comment">//调整type为HANDLE类型</span></span><br><span class="line">                <span class="keyword">if</span> (fp-&gt;type == BINDER_TYPE_BINDER)</span><br><span class="line">                    fp-&gt;type = BINDER_TYPE_HANDLE;</span><br><span class="line">                <span class="keyword">else</span></span><br><span class="line">                    fp-&gt;type = BINDER_TYPE_WEAK_HANDLE;</span><br><span class="line">                fp-&gt;binder = <span class="number">0</span>;</span><br><span class="line">                fp-&gt;handle = ref-&gt;desc; <span class="comment">//设置handle值</span></span><br><span class="line">                fp-&gt;cookie = <span class="number">0</span>;</span><br><span class="line">                ...</span><br><span class="line">            &#125;</span><br><span class="line">            ...</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//将BINDER_WORK_TRANSACTION添加到目标队列，本次通信的目标队列为target_proc-&gt;todo</span></span><br><span class="line">    t-&gt;work.type = BINDER_WORK_TRANSACTION;</span><br><span class="line">    list_add_tail(&amp;t-&gt;work.entry, target_list);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//将BINDER_WORK_TRANSACTION_COMPLETE添加到请求线程的todo队列</span></span><br><span class="line">    tcomplete-&gt;type = BINDER_WORK_TRANSACTION_COMPLETE;</span><br><span class="line">    list_add_tail(&amp;tcomplete-&gt;entry, &amp;thread-&gt;todo);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//唤醒等待队列，本次通信的目标队列为target_proc-&gt;wait</span></span><br><span class="line">    <span class="keyword">if</span> (target_wait)</span><br><span class="line">        wake_up_interruptible(target_wait);</span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 第一次执行完这个函数后会返回到waitForResponse继续执行，由于当前线程的todo队列有任务了，进入binder_thread_read来处理相关的事务.接下来进入到第二次执行到这里的时候 MediaPlayerService 会休眠</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">int</span> <span class="title">binder_thread_read</span><span class="params">(struct binder_proc *proc, struct binder_thread *thread,<span class="keyword">void</span>  __user *buffer, <span class="keyword">int</span> size, <span class="keyword">signed</span> <span class="keyword">long</span> *consumed, <span class="keyword">int</span> non_block)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">     <span class="comment">//当已使用字节数为0时，将BR_NOOP响应码放入指针ptr</span></span><br><span class="line">     <span class="keyword">if</span> (*consumed == <span class="number">0</span>) &#123;</span><br><span class="line">             <span class="keyword">if</span> (put_user(BR_NOOP, (<span class="keyword">uint32_t</span> __user *)ptr))</span><br><span class="line">                 <span class="keyword">return</span> -EFAULT;</span><br><span class="line">             ptr += <span class="keyword">sizeof</span>(<span class="keyword">uint32_t</span>);</span><br><span class="line">         &#125;</span><br><span class="line"></span><br><span class="line">     retry:</span><br><span class="line">         <span class="comment">//binder_transaction()已设置transaction_stack不为空，则wait_for_proc_work为false.</span></span><br><span class="line">         wait_for_proc_work = thread-&gt;transaction_stack == <span class="literal">NULL</span> &amp;&amp;</span><br><span class="line">                 list_empty(&amp;thread-&gt;todo);</span><br><span class="line"></span><br><span class="line">         thread-&gt;looper |= BINDER_LOOPER_STATE_WAITING;</span><br><span class="line">         <span class="keyword">if</span> (wait_for_proc_work)</span><br><span class="line">         proc-&gt;ready_threads++; <span class="comment">//进程中空闲binder线程加1</span></span><br><span class="line"></span><br><span class="line">         <span class="comment">//只有当前线程todo队列为空，并且transaction_stack也为空，才会开始处于当前进程的事务</span></span><br><span class="line">         <span class="keyword">if</span> (wait_for_proc_work) &#123;</span><br><span class="line">             <span class="keyword">if</span> (non_block) &#123;</span><br><span class="line">                 ...</span><br><span class="line">             &#125; <span class="keyword">else</span></span><br><span class="line">                 <span class="comment">//当进程todo队列没有数据,则进入休眠等待状态</span></span><br><span class="line">                 ret = wait_event_freezable_exclusive(proc-&gt;wait, binder_has_proc_work(proc, thread));</span><br><span class="line">         &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">             <span class="keyword">if</span> (non_block) &#123;</span><br><span class="line">                 ...</span><br><span class="line">             &#125; <span class="keyword">else</span></span><br><span class="line">                 <span class="comment">//当线程todo队列有数据则执行往下执行；当线程todo队列没有数据，则进入休眠等待状态</span></span><br><span class="line">                 ret = wait_event_freezable(thread-&gt;wait, binder_has_thread_work(thread));</span><br><span class="line">         &#125;</span><br><span class="line"></span><br><span class="line">         <span class="keyword">if</span> (wait_for_proc_work)</span><br><span class="line">         proc-&gt;ready_threads--; <span class="comment">//退出等待状态, 则进程中空闲binder线程减1</span></span><br><span class="line">         thread-&gt;looper &amp;= ~BINDER_LOOPER_STATE_WAITING;</span><br><span class="line">         ...</span><br><span class="line"></span><br><span class="line">         <span class="keyword">while</span> (<span class="number">1</span>) &#123;</span><br><span class="line"></span><br><span class="line">             <span class="keyword">uint32_t</span> cmd;</span><br><span class="line">             <span class="class"><span class="keyword">struct</span> <span class="title">binder_transaction_data</span> <span class="title">tr</span>;</span></span><br><span class="line">             <span class="class"><span class="keyword">struct</span> <span class="title">binder_work</span> *<span class="title">w</span>;</span></span><br><span class="line">             <span class="class"><span class="keyword">struct</span> <span class="title">binder_transaction</span> *<span class="title">t</span> =</span> <span class="literal">NULL</span>;</span><br><span class="line">             <span class="comment">//先从线程todo队列获取事务数据</span></span><br><span class="line">             <span class="keyword">if</span> (!list_empty(&amp;thread-&gt;todo)) &#123;</span><br><span class="line">                 w = list_first_entry(&amp;thread-&gt;todo, struct binder_work, entry);</span><br><span class="line">             <span class="comment">// 线程todo队列没有数据, 则从进程todo对获取事务数据</span></span><br><span class="line">             &#125; <span class="keyword">else</span> <span class="keyword">if</span> (!list_empty(&amp;proc-&gt;todo) &amp;&amp; wait_for_proc_work) &#123;</span><br><span class="line">                 w = list_first_entry(&amp;proc-&gt;todo, struct binder_work, entry);</span><br><span class="line">             &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                 <span class="comment">//没有数据,则返回retry</span></span><br><span class="line">                 <span class="keyword">if</span> (ptr - buffer == <span class="number">4</span> &amp;&amp;</span><br><span class="line">                     !(thread-&gt;looper &amp; BINDER_LOOPER_STATE_NEED_RETURN))</span><br><span class="line">                     <span class="keyword">goto</span> retry;</span><br><span class="line">                 <span class="keyword">break</span>;</span><br><span class="line">             &#125;</span><br><span class="line"></span><br><span class="line">             <span class="keyword">switch</span> (w-&gt;type) &#123;</span><br><span class="line">                 <span class="keyword">case</span> BINDER_WORK_TRANSACTION:</span><br><span class="line">                     <span class="comment">//获取transaction数据</span></span><br><span class="line">                     t = container_of(w, struct binder_transaction, work);</span><br><span class="line">                     <span class="keyword">break</span>;</span><br><span class="line"></span><br><span class="line">                 <span class="keyword">case</span> BINDER_WORK_TRANSACTION_COMPLETE:</span><br><span class="line">                     cmd = BR_TRANSACTION_COMPLETE;</span><br><span class="line">                     <span class="comment">//将BR_TRANSACTION_COMPLETE写入*ptr，并跳出循环。</span></span><br><span class="line">                     put_user(cmd, (<span class="keyword">uint32_t</span> __user *)ptr)；</span><br><span class="line">                     list_del(&amp;w-&gt;entry);</span><br><span class="line">                     kfree(w);</span><br><span class="line">                     <span class="keyword">break</span>;</span><br><span class="line"></span><br><span class="line">                 <span class="keyword">case</span> BINDER_WORK_NODE: ...    <span class="keyword">break</span>;</span><br><span class="line">                 <span class="keyword">case</span> BINDER_WORK_DEAD_BINDER:</span><br><span class="line">                 <span class="keyword">case</span> BINDER_WORK_DEAD_BINDER_AND_CLEAR:</span><br><span class="line">                 <span class="keyword">case</span> BINDER_WORK_CLEAR_DEATH_NOTIFICATION: ...   <span class="keyword">break</span>;</span><br><span class="line">             &#125;</span><br><span class="line"></span><br><span class="line">             <span class="comment">//只有BINDER_WORK_TRANSACTION命令才能继续往下执行</span></span><br><span class="line">             <span class="keyword">if</span> (!t)</span><br><span class="line">                 <span class="keyword">continue</span>;</span><br><span class="line"></span><br><span class="line">             <span class="keyword">if</span> (t-&gt;buffer-&gt;target_node) &#123;</span><br><span class="line">                 <span class="comment">//获取目标node</span></span><br><span class="line">                 <span class="class"><span class="keyword">struct</span> <span class="title">binder_node</span> *<span class="title">target_node</span> =</span> t-&gt;buffer-&gt;target_node;</span><br><span class="line">                 tr.target.ptr = target_node-&gt;ptr;</span><br><span class="line">                 tr.cookie =  target_node-&gt;cookie;  <span class="comment">//设置cookie</span></span><br><span class="line">                 t-&gt;saved_priority = task_nice(current);</span><br><span class="line">                 ...</span><br><span class="line">                 cmd = BR_TRANSACTION;  <span class="comment">//设置命令为BR_TRANSACTION</span></span><br><span class="line">             &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                 tr.target.ptr = <span class="literal">NULL</span>;</span><br><span class="line">                 tr.cookie = <span class="literal">NULL</span>;</span><br><span class="line">                 cmd = BR_REPLY; <span class="comment">//设置命令为BR_REPLY</span></span><br><span class="line">             &#125;</span><br><span class="line">             tr.code = t-&gt;code;</span><br><span class="line">             tr.flags = t-&gt;flags;</span><br><span class="line">             tr.sender_euid = t-&gt;sender_euid;</span><br><span class="line"></span><br><span class="line">             <span class="keyword">if</span> (t-&gt;from) &#123;</span><br><span class="line">                 <span class="class"><span class="keyword">struct</span> <span class="title">task_struct</span> *<span class="title">sender</span> =</span> t-&gt;from-&gt;proc-&gt;tsk;</span><br><span class="line">                 <span class="comment">//当非oneway的情况下,将调用者进程的pid保存到sender_pid</span></span><br><span class="line">                 tr.sender_pid = task_tgid_nr_ns(sender,</span><br><span class="line">                                 current-&gt;nsproxy-&gt;pid_ns);</span><br><span class="line">             &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                 <span class="comment">//当oneway的的情况下,则该值为0</span></span><br><span class="line">                 tr.sender_pid = <span class="number">0</span>;</span><br><span class="line">             &#125;</span><br><span class="line"></span><br><span class="line">             tr.data_size = t-&gt;buffer-&gt;data_size;</span><br><span class="line">             tr.offsets_size = t-&gt;buffer-&gt;offsets_size;</span><br><span class="line">             tr.data.ptr.buffer = (<span class="keyword">void</span> *)t-&gt;buffer-&gt;data + proc-&gt;user_buffer_offset;</span><br><span class="line">             tr.data.ptr.offsets = tr.data.ptr.buffer +</span><br><span class="line">                         ALIGN(t-&gt;buffer-&gt;data_size, <span class="keyword">sizeof</span>(<span class="keyword">void</span> *));</span><br><span class="line"></span><br><span class="line">             <span class="comment">//将cmd和数据写回用户空间</span></span><br><span class="line">             <span class="keyword">if</span> (put_user(cmd, (<span class="keyword">uint32_t</span> __user *)ptr))</span><br><span class="line">                 <span class="keyword">return</span> -EFAULT;</span><br><span class="line">             ptr += <span class="keyword">sizeof</span>(<span class="keyword">uint32_t</span>);</span><br><span class="line">             <span class="keyword">if</span> (copy_to_user(ptr, &amp;tr, <span class="keyword">sizeof</span>(tr)))</span><br><span class="line">                 <span class="keyword">return</span> -EFAULT;</span><br><span class="line">             ptr += <span class="keyword">sizeof</span>(tr);</span><br><span class="line"></span><br><span class="line">             list_del(&amp;t-&gt;work.entry);</span><br><span class="line">             t-&gt;buffer-&gt;allow_user_free = <span class="number">1</span>;</span><br><span class="line">             <span class="keyword">if</span> (cmd == BR_TRANSACTION &amp;&amp; !(t-&gt;flags &amp; TF_ONE_WAY)) &#123;</span><br><span class="line">                 t-&gt;to_parent = thread-&gt;transaction_stack;</span><br><span class="line">                 t-&gt;to_thread = thread;</span><br><span class="line">                 thread-&gt;transaction_stack = t;</span><br><span class="line">             &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                 t-&gt;buffer-&gt;transaction = <span class="literal">NULL</span>;</span><br><span class="line">                 kfree(t); <span class="comment">//通信完成,则运行释放</span></span><br><span class="line">             &#125;</span><br><span class="line">             <span class="keyword">break</span>;</span><br><span class="line">         &#125;</span><br><span class="line">     done:</span><br><span class="line">         *consumed = ptr - buffer;</span><br><span class="line">         <span class="comment">//当满足请求线程加已准备线程数等于0，已启动线程数小于最大线程数(15)，</span></span><br><span class="line">         <span class="comment">//且looper状态为已注册或已进入时创建新的线程。</span></span><br><span class="line">         <span class="keyword">if</span> (proc-&gt;requested_threads + proc-&gt;ready_threads == <span class="number">0</span> &amp;&amp;</span><br><span class="line">             proc-&gt;requested_threads_started &lt; proc-&gt;max_threads &amp;&amp;</span><br><span class="line">             (thread-&gt;looper &amp; (BINDER_LOOPER_STATE_REGISTERED |</span><br><span class="line">             BINDER_LOOPER_STATE_ENTERED))) &#123;</span><br><span class="line">             proc-&gt;requested_threads++;</span><br><span class="line">             <span class="comment">// 生成BR_SPAWN_LOOPER命令，用于创建新的线程</span></span><br><span class="line">             put_user(BR_SPAWN_LOOPER, (<span class="keyword">uint32_t</span> __user *)buffer)；</span><br><span class="line">         &#125;</span><br><span class="line">         <span class="keyword">return</span> <span class="number">0</span>;</span><br></pre></td></tr></table></figure>
<hr>
<p>   这里到了服务进程了</p>
<pre><code>ServiceManager在 `binder_loop`的`ioctl()`函数中由于`binder_thread_read()`的`wait_event_interruptible_exclusive()`而进入阻塞状态，在这里被驱动通过 wake_up_interruptible 唤醒了，：</code></pre>
   <figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">binder_loop</span><span class="params">(struct binder_state *bs, binder_handler func)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> res;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">binder_write_read</span> <span class="title">bwr</span>;</span></span><br><span class="line">    <span class="keyword">unsigned</span> readbuf[<span class="number">32</span>];</span><br><span class="line"></span><br><span class="line">    bwr.write_size = <span class="number">0</span>;</span><br><span class="line">    bwr.write_consumed = <span class="number">0</span>;</span><br><span class="line">    bwr.write_buffer = <span class="number">0</span>;</span><br><span class="line">    </span><br><span class="line">    readbuf[<span class="number">0</span>] = BC_ENTER_LOOPER;</span><br><span class="line">    binder_write(bs, readbuf, <span class="keyword">sizeof</span>(<span class="keyword">unsigned</span>));</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (;;) &#123;</span><br><span class="line">        bwr.read_size = <span class="keyword">sizeof</span>(readbuf);</span><br><span class="line">        bwr.read_consumed = <span class="number">0</span>;</span><br><span class="line">        bwr.read_buffer = (<span class="keyword">unsigned</span>) readbuf;</span><br><span class="line"></span><br><span class="line">        res = ioctl(bs-&gt;fd, BINDER_WRITE_READ, &amp;bwr);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (res &lt; <span class="number">0</span>) &#123;</span><br><span class="line">            LOGE(<span class="string">&quot;binder_loop: ioctl failed (%s)\n&quot;</span>, strerror(errno));</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        res = binder_parse(bs, <span class="number">0</span>, readbuf, bwr.read_consumed, func);</span><br><span class="line">        <span class="keyword">if</span> (res == <span class="number">0</span>) &#123;</span><br><span class="line">            LOGE(<span class="string">&quot;binder_loop: unexpected reply?!\n&quot;</span>);</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (res &lt; <span class="number">0</span>) &#123;</span><br><span class="line">            LOGE(<span class="string">&quot;binder_loop: io error %d %s\n&quot;</span>, res, strerror(errno));</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>   被唤醒后，会在<code>binder_thread_read()</code>中读取binder传过来的数据，赋值到本地局部变量struct binder_transaction_data tr中，接着把tr的内容拷贝到用户传进来的缓冲区 ，返回后再把<code>binder_ioctl()</code>中的本地变量struct binder_write_read bwr的内容拷贝回到用户传进来的缓冲区中，最后从<code>binder_ioctl()</code>函数返回(有任务就break跳出循环返回了)，接着执行<code>binder_parse()</code>:</p>
   <figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">binder_parse</span><span class="params">(struct binder_state *bs, struct binder_io *bio,</span></span></span><br><span class="line"><span class="function"><span class="params">                <span class="keyword">uint32_t</span> *ptr, <span class="keyword">uint32_t</span> size, binder_handler func)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> r = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">uintptr_t</span> end = ptr + (<span class="keyword">uintptr_t</span>) size;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> (ptr &lt; end) &#123;</span><br><span class="line">        <span class="keyword">uint32_t</span> cmd = *(<span class="keyword">uint32_t</span> *) ptr;</span><br><span class="line">        ptr += <span class="keyword">sizeof</span>(<span class="keyword">uint32_t</span>);</span><br><span class="line">        <span class="keyword">switch</span>(cmd) &#123;</span><br><span class="line">        <span class="keyword">case</span> BR_TRANSACTION: &#123;</span><br><span class="line">            <span class="class"><span class="keyword">struct</span> <span class="title">binder_transaction_data</span> *<span class="title">txn</span> =</span> (struct binder_transaction_data *) ptr;</span><br><span class="line">            ...</span><br><span class="line">            binder_dump_txn(txn);</span><br><span class="line">            <span class="keyword">if</span> (func) &#123;</span><br><span class="line">                <span class="keyword">unsigned</span> rdata[<span class="number">256</span>/<span class="number">4</span>];</span><br><span class="line">                <span class="class"><span class="keyword">struct</span> <span class="title">binder_io</span> <span class="title">msg</span>;</span></span><br><span class="line">                <span class="class"><span class="keyword">struct</span> <span class="title">binder_io</span> <span class="title">reply</span>;</span></span><br><span class="line">                <span class="keyword">int</span> res;</span><br><span class="line"></span><br><span class="line">                bio_init(&amp;reply, rdata, <span class="keyword">sizeof</span>(rdata), <span class="number">4</span>);</span><br><span class="line">                bio_init_from_txn(&amp;msg, txn); <span class="comment">//从txn解析出binder_io信息</span></span><br><span class="line">                <span class="comment">// 收到Binder事务 </span></span><br><span class="line">                res = func(bs, txn, &amp;msg, &amp;reply);</span><br><span class="line">                <span class="comment">// 向binder驱动发送reply事件 </span></span><br><span class="line">                binder_send_reply(bs, &amp;reply, txn-&gt;data.ptr.buffer, res);</span><br><span class="line">            &#125;</span><br><span class="line">            ptr += <span class="keyword">sizeof</span>(*txn);</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">case</span> : ...</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> r;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>   这个函数传入的函数指针是<code>svcmgr_handler</code>，因此会进入到</p>
   <figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">svcmgr_handler</span><span class="params">(struct binder_state *bs,</span></span></span><br><span class="line"><span class="function"><span class="params">                struct binder_transaction_data *txn,</span></span></span><br><span class="line"><span class="function"><span class="params">                struct binder_io *msg,</span></span></span><br><span class="line"><span class="function"><span class="params">                struct binder_io *reply)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">svcinfo</span> *<span class="title">si</span>;</span></span><br><span class="line">    <span class="keyword">uint16_t</span> *s;</span><br><span class="line">    <span class="keyword">unsigned</span> len;</span><br><span class="line">    <span class="keyword">void</span> *ptr;</span><br><span class="line">    <span class="keyword">uint32_t</span> strict_policy;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (txn-&gt;target != svcmgr_handle)</span><br><span class="line">        <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Equivalent to Parcel::enforceInterface(), reading the RPC</span></span><br><span class="line">    <span class="comment">// header with the strict mode policy mask and the interface name.</span></span><br><span class="line">    <span class="comment">// Note that we ignore the strict_policy and don&#x27;t propagate it</span></span><br><span class="line">    <span class="comment">// further (since we do no outbound RPCs anyway).</span></span><br><span class="line">    strict_policy = bio_get_uint32(msg);</span><br><span class="line">    s = bio_get_string16(msg, &amp;len);  <span class="comment">// &quot;android.os.IServiceManager&quot;</span></span><br><span class="line">    <span class="keyword">if</span> ((len != (<span class="keyword">sizeof</span>(svcmgr_id) / <span class="number">2</span>)) ||</span><br><span class="line">        <span class="built_in">memcmp</span>(svcmgr_id, s, <span class="keyword">sizeof</span>(svcmgr_id))) &#123;</span><br><span class="line">            <span class="built_in">fprintf</span>(<span class="built_in">stderr</span>,<span class="string">&quot;invalid id %s\n&quot;</span>, str8(s));</span><br><span class="line">            <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">switch</span>(txn-&gt;code) &#123;</span><br><span class="line">    ......</span><br><span class="line">    <span class="keyword">case</span> SVC_MGR_ADD_SERVICE:</span><br><span class="line">        s = bio_get_string16(msg, &amp;len);   <span class="comment">// &quot;media.player&quot;</span></span><br><span class="line">        ptr = bio_get_ref(msg);    <span class="comment">// new MediaPlayerService()</span></span><br><span class="line">        <span class="keyword">if</span> (do_add_service(bs, s, len, ptr, txn-&gt;sender_euid))</span><br><span class="line">            <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    ......</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    bio_put_uint32(reply, <span class="number">0</span>);  <span class="comment">//reply返回0</span></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//ServiceManager中的flat_binder_object被改为了BINDER_TYPE_HANDLE，句柄值写到一个struct svcinfo结构体中，</span></span><br><span class="line"><span class="comment">//然后插入到链接svclist的头部去</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">do_add_service</span><span class="params">(struct binder_state *bs,</span></span></span><br><span class="line"><span class="function"><span class="params">                <span class="keyword">uint16_t</span> *s, <span class="keyword">unsigned</span> len,</span></span></span><br><span class="line"><span class="function"><span class="params">                <span class="keyword">void</span> *ptr, <span class="keyword">unsigned</span> uid)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">svcinfo</span> *<span class="title">si</span>;</span></span><br><span class="line"><span class="comment">//    LOGI(&quot;add_service(&#x27;%s&#x27;,%p) uid=%d\n&quot;, str8(s), ptr, uid);</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (!ptr || (len == <span class="number">0</span>) || (len &gt; <span class="number">127</span>))</span><br><span class="line">        <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (!svc_can_register(uid, s)) &#123;</span><br><span class="line">        LOGE(<span class="string">&quot;add_service(&#x27;%s&#x27;,%p) uid=%d - PERMISSION DENIED\n&quot;</span>,</span><br><span class="line">            str8(s), ptr, uid);</span><br><span class="line">        <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    si = find_svc(s, len);  <span class="comment">//根据名字查找引用，这里是  &quot;media.player&quot;</span></span><br><span class="line">    <span class="keyword">if</span> (si) &#123;</span><br><span class="line">        <span class="keyword">if</span> (si-&gt;ptr) &#123;</span><br><span class="line">            LOGE(<span class="string">&quot;add_service(&#x27;%s&#x27;,%p) uid=%d - ALREADY REGISTERED\n&quot;</span>,</span><br><span class="line">                str8(s), ptr, uid);</span><br><span class="line">            <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        si-&gt;ptr = ptr;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        si = <span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(*si) + (len + <span class="number">1</span>) * <span class="keyword">sizeof</span>(<span class="keyword">uint16_t</span>));</span><br><span class="line">        <span class="keyword">if</span> (!si) &#123;</span><br><span class="line">            LOGE(<span class="string">&quot;add_service(&#x27;%s&#x27;,%p) uid=%d - OUT OF MEMORY\n&quot;</span>,</span><br><span class="line">                str8(s), ptr, uid);</span><br><span class="line">            <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        si-&gt;ptr = ptr;</span><br><span class="line">        si-&gt;len = len;</span><br><span class="line">        <span class="built_in">memcpy</span>(si-&gt;name, s, (len + <span class="number">1</span>) * <span class="keyword">sizeof</span>(<span class="keyword">uint16_t</span>));</span><br><span class="line">        si-&gt;name[len] = <span class="string">&#x27;\0&#x27;</span>;</span><br><span class="line">        si-&gt;death.func = svcinfo_death;</span><br><span class="line">        si-&gt;death.ptr = si;</span><br><span class="line">        si-&gt;next = svclist;</span><br><span class="line">        svclist = si;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    binder_acquire(bs, ptr);</span><br><span class="line">    binder_link_to_death(bs, ptr, &amp;si-&gt;death);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>   最后，执行<code>binder_send_reply()</code>函数，再次进入到<code>ioctl()</code>函数中，把数据再次封装成一个事务，唤醒 MediaPlayerService去处理，<br>   对于ServiceManager来说，到这里就结束了。IServiceManager::addService执行完毕.</p>
<p>   <img src="/2018/08/09/Android-binder-c++%E5%B1%82/media_player_service_ipc.jpg" alt="binder_16"></p>
<p>   数据流向： </p>
<ol>
<li><p>BBinder+name 序列化到 Parcel里，</p>
</li>
<li><p>然后加上 target= 0和code=ADD_SERVICE 转成 binder_transation_data 对象，</p>
</li>
<li><p>加上cmd = BC_TRANSACTION 写入到IPC_ThreadState的mOut 里面</p>
</li>
<li><p>mOut和mIn 构造一个 binder_write_read 对象， 发送给 binder 驱动</p>
</li>
<li><p>binder 驱动拷贝这个数据到内核，构造一个 binder_transaction_data 发送给服务进程的todo队列，同时向用户进程回复BR_COMPLETE(为什么要拷贝，之前传指针不是很方便吗？因为那里是客户进程，内核可以访问，但是服务进程访问不了，指针没法跨进程使用。)</p>
</li>
<li><p>服务进程构造 binder_transaction_data 和 BC_REPLY 回复给 binder 驱动</p>
</li>
<li><p>上面描述了 service_manager 的 binder_loop 循环，对于其他的服务来说，binder线程的启动是通过下面两句来启动的：</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line">ProcessState::self()-&gt;startThreadPool();</span><br><span class="line">IPCThreadState::self()-&gt;joinThreadPool();</span><br></pre></td></tr></table></figure>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">IPCThreadState::joinThreadPool</span><span class="params">(<span class="keyword">bool</span> isMain)</span></span></span><br><span class="line"><span class="function"> </span>&#123;</span><br><span class="line">     mOut.writeInt32(isMain ? BC_ENTER_LOOPER : BC_REGISTER_LOOPER);</span><br><span class="line">     set_sched_policy(mMyThreadId, SP_FOREGROUND);</span><br><span class="line"></span><br><span class="line">     <span class="keyword">status_t</span> result;</span><br><span class="line">     <span class="keyword">do</span> &#123;</span><br><span class="line">         processPendingDerefs(); <span class="comment">//处理对象引用</span></span><br><span class="line">         result = getAndExecuteCommand();<span class="comment">//获取并执行命令</span></span><br><span class="line"></span><br><span class="line">         <span class="keyword">if</span> (result &lt; NO_ERROR &amp;&amp; result != TIMED_OUT &amp;&amp; result != -ECONNREFUSED &amp;&amp; result != -EBADF) &#123;</span><br><span class="line">             ALOGE(<span class="string">&quot;getAndExecuteCommand(fd=%d) returned unexpected error %d, aborting&quot;</span>,</span><br><span class="line">                 mProcess-&gt;mDriverFD, result);</span><br><span class="line">             <span class="built_in">abort</span>();</span><br><span class="line">         &#125;</span><br><span class="line"></span><br><span class="line">         <span class="comment">//对于binder非主线程不再使用，则退出</span></span><br><span class="line">         <span class="keyword">if</span>(result == TIMED_OUT &amp;&amp; !isMain) &#123;</span><br><span class="line">             <span class="keyword">break</span>;</span><br><span class="line">         &#125;</span><br><span class="line">     &#125; <span class="keyword">while</span> (result != -ECONNREFUSED &amp;&amp; result != -EBADF);</span><br><span class="line"></span><br><span class="line">     mOut.writeInt32(BC_EXIT_LOOPER);</span><br><span class="line">     talkWithDriver(<span class="literal">false</span>);</span><br><span class="line"> &#125;</span><br><span class="line"></span><br><span class="line"> <span class="function"><span class="keyword">status_t</span> <span class="title">IPCThreadState::getAndExecuteCommand</span><span class="params">()</span></span></span><br><span class="line"><span class="function"> </span>&#123;</span><br><span class="line">     <span class="keyword">status_t</span> result;</span><br><span class="line">     <span class="keyword">int32_t</span> cmd;</span><br><span class="line"></span><br><span class="line">     result = talkWithDriver(); <span class="comment">//该Binder Driver进行交互</span></span><br><span class="line">     <span class="keyword">if</span> (result &gt;= NO_ERROR) &#123;</span><br><span class="line">         <span class="keyword">size_t</span> IN = mIn.dataAvail();</span><br><span class="line">         <span class="keyword">if</span> (IN &lt; <span class="keyword">sizeof</span>(<span class="keyword">int32_t</span>)) <span class="keyword">return</span> result;</span><br><span class="line">         cmd = mIn.readInt32(); <span class="comment">//读取命令</span></span><br><span class="line"></span><br><span class="line">         pthread_mutex_lock(&amp;mProcess-&gt;mThreadCountLock);</span><br><span class="line">         mProcess-&gt;mExecutingThreadsCount++;</span><br><span class="line">         pthread_mutex_unlock(&amp;mProcess-&gt;mThreadCountLock);</span><br><span class="line"></span><br><span class="line">         result = executeCommand(cmd); </span><br><span class="line"></span><br><span class="line">         pthread_mutex_lock(&amp;mProcess-&gt;mThreadCountLock);</span><br><span class="line">         mProcess-&gt;mExecutingThreadsCount--;</span><br><span class="line">         pthread_cond_broadcast(&amp;mProcess-&gt;mThreadCountDecrement);</span><br><span class="line">         pthread_mutex_unlock(&amp;mProcess-&gt;mThreadCountLock);</span><br><span class="line"></span><br><span class="line">         set_sched_policy(mMyThreadId, SP_FOREGROUND);</span><br><span class="line">     &#125;</span><br><span class="line">     <span class="keyword">return</span> result;</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure>
<p>上文中的分析可以知道，<code>talkWithDriver()</code>会把数据封装成一个事务发送给服务端 ，服务端处理请求后会把数据封装成事务返回，<code>talkWithDriver()</code>则解析返回的事务得到数据并返回。因此这里返回数据后接着调用<code>executeCommand()</code></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">status_t</span> <span class="title">IPCThreadState::executeCommand</span><span class="params">(<span class="keyword">int32_t</span> cmd)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    BBinder* obj;</span><br><span class="line">    RefBase::weakref_type* refs;</span><br><span class="line">    <span class="keyword">status_t</span> result = NO_ERROR;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">switch</span> (cmd) &#123;</span><br><span class="line">    ......</span><br><span class="line"></span><br><span class="line">     <span class="keyword">case</span> BR_TRANSACTION:</span><br><span class="line">         &#123;</span><br><span class="line">             binder_transaction_data tr;</span><br><span class="line">             result = mIn.read(&amp;tr, <span class="keyword">sizeof</span>(tr));</span><br><span class="line">             ALOG_ASSERT(result == NO_ERROR,</span><br><span class="line">                 <span class="string">&quot;Not enough command data for brTRANSACTION&quot;</span>);</span><br><span class="line">             <span class="keyword">if</span> (result != NO_ERROR) <span class="keyword">break</span>;</span><br><span class="line">             <span class="comment">//Record the fact that we&#x27;re in a binder call.</span></span><br><span class="line">             mIPCThreadStateBase-&gt;pushCurrentState(</span><br><span class="line">                 IPCThreadStateBase::CallState::BINDER);</span><br><span class="line">             Parcel buffer;</span><br><span class="line">             buffer.ipcSetDataReference(</span><br><span class="line">                 <span class="keyword">reinterpret_cast</span>&lt;<span class="keyword">const</span> <span class="keyword">uint8_t</span>*&gt;(tr.data.ptr.buffer),</span><br><span class="line">                 tr.data_size,</span><br><span class="line">                 <span class="keyword">reinterpret_cast</span>&lt;<span class="keyword">const</span> <span class="keyword">binder_size_t</span>*&gt;(tr.data.ptr.offsets),</span><br><span class="line">                 tr.offsets_size/<span class="keyword">sizeof</span>(<span class="keyword">binder_size_t</span>), freeBuffer, <span class="keyword">this</span>);</span><br><span class="line">             <span class="keyword">const</span> <span class="keyword">pid_t</span> origPid = mCallingPid;</span><br><span class="line">             <span class="keyword">const</span> <span class="keyword">uid_t</span> origUid = mCallingUid;</span><br><span class="line">             <span class="keyword">const</span> <span class="keyword">int32_t</span> origStrictModePolicy = mStrictModePolicy;</span><br><span class="line">             <span class="keyword">const</span> <span class="keyword">int32_t</span> origTransactionBinderFlags = mLastTransactionBinderFlags;</span><br><span class="line">             mCallingPid = tr.sender_pid;</span><br><span class="line">             mCallingUid = tr.sender_euid;</span><br><span class="line">             mLastTransactionBinderFlags = tr.flags;</span><br><span class="line">             <span class="comment">//ALOGI(&quot;&gt;&gt;&gt;&gt; TRANSACT from pid %d uid %d\n&quot;, mCallingPid, mCallingUid);</span></span><br><span class="line">             Parcel reply;</span><br><span class="line">             <span class="keyword">status_t</span> error;</span><br><span class="line">             IF_LOG_TRANSACTIONS() &#123;</span><br><span class="line">                 TextOutput::Bundle _b(alog);</span><br><span class="line">                 alog &lt;&lt; <span class="string">&quot;BR_TRANSACTION thr &quot;</span> &lt;&lt; (<span class="keyword">void</span>*)pthread_self()</span><br><span class="line">                     &lt;&lt; <span class="string">&quot; / obj &quot;</span> &lt;&lt; tr.target.ptr &lt;&lt; <span class="string">&quot; / code &quot;</span></span><br><span class="line">                     &lt;&lt; TypeCode(tr.code) &lt;&lt; <span class="string">&quot;: &quot;</span> &lt;&lt; indent &lt;&lt; buffer</span><br><span class="line">                     &lt;&lt; dedent &lt;&lt; <span class="built_in">endl</span></span><br><span class="line">                     &lt;&lt; <span class="string">&quot;Data addr = &quot;</span></span><br><span class="line">                     &lt;&lt; <span class="keyword">reinterpret_cast</span>&lt;<span class="keyword">const</span> <span class="keyword">uint8_t</span>*&gt;(tr.data.ptr.buffer)</span><br><span class="line">                     &lt;&lt; <span class="string">&quot;, offsets addr=&quot;</span></span><br><span class="line">                     &lt;&lt; <span class="keyword">reinterpret_cast</span>&lt;<span class="keyword">const</span> <span class="keyword">size_t</span>*&gt;(tr.data.ptr.offsets) &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">             &#125;</span><br><span class="line">             <span class="keyword">if</span> (tr.target.ptr) &#123;</span><br><span class="line">                 <span class="comment">// We only have a weak reference on the target object, so we must first try to</span></span><br><span class="line">                 <span class="comment">// safely acquire a strong reference before doing anything else with it.</span></span><br><span class="line">                 <span class="keyword">if</span> (<span class="keyword">reinterpret_cast</span>&lt;RefBase::weakref_type*&gt;(</span><br><span class="line">                         tr.target.ptr)-&gt;attemptIncStrong(<span class="keyword">this</span>)) &#123;</span><br><span class="line">                     error = <span class="keyword">reinterpret_cast</span>&lt;BBinder*&gt;(tr.cookie)-&gt;transact(tr.code, buffer,</span><br><span class="line">                             &amp;reply, tr.flags);</span><br><span class="line">                     <span class="keyword">reinterpret_cast</span>&lt;BBinder*&gt;(tr.cookie)-&gt;decStrong(<span class="keyword">this</span>);</span><br><span class="line">                 &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                     error = UNKNOWN_TRANSACTION;</span><br><span class="line">                 &#125;</span><br><span class="line">             &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                 error = the_context_object-&gt;transact(tr.code, buffer, &amp;reply, tr.flags);</span><br><span class="line">             &#125;</span><br><span class="line">             mIPCThreadStateBase-&gt;popCurrentState();</span><br><span class="line">             <span class="comment">//ALOGI(&quot;&lt;&lt;&lt;&lt; TRANSACT from pid %d restore pid %d uid %d\n&quot;,</span></span><br><span class="line">             <span class="comment">//     mCallingPid, origPid, origUid);</span></span><br><span class="line">             <span class="keyword">if</span> ((tr.flags &amp; TF_ONE_WAY) == <span class="number">0</span>) &#123;</span><br><span class="line">                 LOG_ONEWAY(<span class="string">&quot;Sending reply to %d!&quot;</span>, mCallingPid);</span><br><span class="line">                 <span class="keyword">if</span> (error &lt; NO_ERROR) reply.setError(error);</span><br><span class="line">                 sendReply(reply, <span class="number">0</span>);</span><br><span class="line">             &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                 LOG_ONEWAY(<span class="string">&quot;NOT sending reply to %d!&quot;</span>, mCallingPid);</span><br><span class="line">             &#125;</span><br><span class="line">             mCallingPid = origPid;</span><br><span class="line">             mCallingUid = origUid;</span><br><span class="line">             mStrictModePolicy = origStrictModePolicy;</span><br><span class="line">             mLastTransactionBinderFlags = origTransactionBinderFlags;</span><br><span class="line">             IF_LOG_TRANSACTIONS() &#123;</span><br><span class="line">                 TextOutput::Bundle _b(alog);</span><br><span class="line">                 alog &lt;&lt; <span class="string">&quot;BC_REPLY thr &quot;</span> &lt;&lt; (<span class="keyword">void</span>*)pthread_self() &lt;&lt; <span class="string">&quot; / obj &quot;</span></span><br><span class="line">                     &lt;&lt; tr.target.ptr &lt;&lt; <span class="string">&quot;: &quot;</span> &lt;&lt; indent &lt;&lt; reply &lt;&lt; dedent &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">             &#125;</span><br><span class="line">         &#125;</span><br><span class="line">         <span class="keyword">break</span>;</span><br><span class="line"></span><br><span class="line">    .......</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (result != NO_ERROR) &#123;</span><br><span class="line">        mLastError = result;</span><br><span class="line">    &#125;</span><br><span class="line">	<span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">status_t</span> <span class="title">BBinder::transact</span><span class="params">(<span class="keyword">uint32_t</span> code, <span class="keyword">const</span> Parcel&amp; data, Parcel* reply, <span class="keyword">uint32_t</span> flags)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    data.setDataPosition(<span class="number">0</span>);</span><br><span class="line"> </span><br><span class="line">    <span class="keyword">status_t</span> err = NO_ERROR;</span><br><span class="line">    <span class="keyword">switch</span> (code) &#123;</span><br><span class="line">        <span class="keyword">case</span> PING_TRANSACTION:</span><br><span class="line">            reply-&gt;writeInt32(pingBinder());</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">default</span>:</span><br><span class="line">            err = onTransact(code, data, reply, flags);</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    <span class="keyword">if</span> (reply != <span class="literal">NULL</span>) &#123;</span><br><span class="line">        reply-&gt;setDataPosition(<span class="number">0</span>);</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    <span class="keyword">return</span> err;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>因为服务端继承了BBinder，因此这里实际上会调用服务端的<code>onTransact()</code>，也就是MediaPlayerService的<code>onTransact()</code>函数，执行相应的动作。这样子就从客户端跨进程调用到了服务端。</p>
</li>
</ol>
<h2 id="Native端-客户端获取服务端接口的过程："><a href="#Native端-客户端获取服务端接口的过程：" class="headerlink" title="Native端 客户端获取服务端接口的过程："></a>Native端 客户端获取服务端接口的过程：</h2><p>在上一节里面分析了<code>BpServiceManager.addService()</code>,这一节来看 <code>getService(string)</code> </p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">BpServiceManager</span> :</span> <span class="keyword">public</span> BpInterface&lt;IServiceManager&gt;</span><br><span class="line">&#123;</span><br><span class="line">    ......</span><br><span class="line"> </span><br><span class="line">	<span class="function"><span class="keyword">virtual</span> sp&lt;IBinder&gt; <span class="title">getService</span><span class="params">(<span class="keyword">const</span> String16&amp; name)</span> <span class="keyword">const</span></span></span><br><span class="line"><span class="function">	</span>&#123;</span><br><span class="line">        <span class="comment">//如果服务没有准备好，就休眠1秒，循环5次，还没有获取到就返回null，避免ANR</span></span><br><span class="line">		<span class="keyword">unsigned</span> n;</span><br><span class="line">		<span class="keyword">for</span> (n = <span class="number">0</span>; n &lt; <span class="number">5</span>; n++)&#123;</span><br><span class="line">			sp&lt;IBinder&gt; svc = checkService(name);</span><br><span class="line">			<span class="keyword">if</span> (svc != <span class="literal">NULL</span>) <span class="keyword">return</span> svc;</span><br><span class="line">			LOGI(<span class="string">&quot;Waiting for service %s...\n&quot;</span>, String8(name).<span class="built_in">string</span>());</span><br><span class="line">			sleep(<span class="number">1</span>);</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">return</span> <span class="literal">NULL</span>;</span><br><span class="line">	&#125;</span><br><span class="line"> </span><br><span class="line">	<span class="function"><span class="keyword">virtual</span> sp&lt;IBinder&gt; <span class="title">checkService</span><span class="params">( <span class="keyword">const</span> String16&amp; name)</span> <span class="keyword">const</span></span></span><br><span class="line"><span class="function">	</span>&#123;</span><br><span class="line">		Parcel data, reply;</span><br><span class="line">		data.writeInterfaceToken(IServiceManager::getInterfaceDescriptor());</span><br><span class="line">		data.writeString16(name);</span><br><span class="line">		remote()-&gt;transact(CHECK_SERVICE_TRANSACTION, data, &amp;reply);</span><br><span class="line">		<span class="keyword">return</span> reply.readStrongBinder();</span><br><span class="line">	&#125;</span><br><span class="line"> </span><br><span class="line">	......</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<p>这里的调用链大部分都在上一节说过了。因此这里简单描述下:</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line">remote()-&gt;transact(CHECK_SERVICE_TRANSACTION, data, &amp;reply);</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">status_t</span> <span class="title">BpBinder::transact</span><span class="params">(<span class="keyword">uint32_t</span> code, <span class="keyword">const</span> Parcel&amp; data, Parcel* reply, <span class="keyword">uint32_t</span> flags)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">status_t</span> <span class="title">IPCThreadState::transact</span><span class="params">(<span class="keyword">int32_t</span> handle,<span class="keyword">uint32_t</span> code, <span class="keyword">const</span> Parcel&amp; data,Parcel* reply, <span class="keyword">uint32_t</span> flags)</span></span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function"><span class="keyword">status_t</span> <span class="title">IPCThreadState::writeTransactionData</span><span class="params">(<span class="keyword">int32_t</span> cmd, <span class="keyword">uint32_t</span> binderFlags,<span class="keyword">int32_t</span> handle, <span class="keyword">uint32_t</span> code, <span class="keyword">const</span> Parcel&amp; data, <span class="keyword">status_t</span>* statusBuffer)</span></span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function"><span class="keyword">status_t</span> <span class="title">IPCThreadState::waitForResponse</span><span class="params">(Parcel *reply, <span class="keyword">status_t</span> *acquireResult)</span></span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function"><span class="keyword">status_t</span> <span class="title">IPCThreadState::talkWithDriver</span><span class="params">(<span class="keyword">bool</span> doReceive)</span></span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function"><span class="keyword">long</span> <span class="title">binder_ioctl</span><span class="params">(struct file *filp, <span class="keyword">unsigned</span> <span class="keyword">int</span> cmd, <span class="keyword">unsigned</span> <span class="keyword">long</span> arg)</span></span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">binder_thread_write</span><span class="params">(struct binder_proc *proc, struct binder_thread *thread,<span class="keyword">void</span> __user *buffer, <span class="keyword">int</span> size, <span class="keyword">signed</span> <span class="keyword">long</span> *consumed)</span></span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">binder_transaction</span><span class="params">(struct binder_proc *proc, struct binder_thread *thread,struct binder_transaction_data *tr, <span class="keyword">int</span> reply)</span></span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function"><span class="comment">//唤醒 ServiceManager</span></span></span><br><span class="line"><span class="function"><span class="title">wake_up_interruptible</span><span class="params">(target_wait)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">int</span> <span class="title">binder_thread_read</span><span class="params">(struct binder_proc *proc, struct binder_thread *thread,<span class="keyword">void</span>  __user *buffer, <span class="keyword">int</span> size, <span class="keyword">signed</span> <span class="keyword">long</span> *consumed, <span class="keyword">int</span> non_block)</span></span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function">IPCThreadState::<span class="title">talkWithDriver::ioctl</span><span class="params">(mProcess-&gt;mDriverFD, BINDER_WRITE_READ, &amp;bwr)</span></span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function"><span class="comment">//当前线程休眠，等待ServiceManager返回操作结果</span></span></span><br><span class="line"><span class="function">ret </span>= wait_event_interruptible(thread-&gt;wait, binder_has_thread_work(thread));</span><br><span class="line"></span><br><span class="line"><span class="comment">//ServiceManager 被唤醒后</span></span><br><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">int</span> <span class="title">binder_thread_read</span><span class="params">(struct binder_proc *proc, struct binder_thread *thread,<span class="keyword">void</span>  __user *buffer, <span class="keyword">int</span> size, <span class="keyword">signed</span> <span class="keyword">long</span> *consumed, <span class="keyword">int</span> non_block)</span></span></span><br><span class="line"><span class="function"><span class="comment">//得到事务t</span></span></span><br><span class="line"><span class="function">t </span>= container_of(w, struct binder_transaction, work);</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">binder_parse</span><span class="params">(struct binder_state *bs, struct binder_io *bio,<span class="keyword">uint32_t</span> *ptr, <span class="keyword">uint32_t</span> size, binder_handler func)</span></span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">bio_init</span><span class="params">(struct binder_io *bio, <span class="keyword">void</span> *data,<span class="keyword">uint32_t</span> maxdata, <span class="keyword">uint32_t</span> maxoffs)</span></span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">bio_init_from_txn</span><span class="params">(struct binder_io *bio, struct binder_txn *txn)</span></span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">svcmgr_handler</span><span class="params">(struct binder_state *bs,struct binder_txn *txn,struct binder_io *msg,struct binder_io *reply)</span></span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function"><span class="keyword">void</span> *<span class="title">do_find_service</span><span class="params">(struct binder_state *bs, <span class="keyword">uint16_t</span> *s, <span class="keyword">unsigned</span> len)</span></span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function">struct svcinfo *<span class="title">find_svc</span><span class="params">(<span class="keyword">uint16_t</span> *s16, <span class="keyword">unsigned</span> len)</span></span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">bio_put_ref</span><span class="params">(reply, ptr)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">bio_put_ref</span><span class="params">(struct binder_io *bio, <span class="keyword">void</span> *ptr)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">binder_object</span> *<span class="title">obj</span>;</span></span><br><span class="line">    </span><br><span class="line">    <span class="keyword">if</span> (ptr)</span><br><span class="line">        obj = bio_alloc_obj(bio);</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        obj = bio_alloc(bio, <span class="keyword">sizeof</span>(*obj));</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">if</span> (!obj)</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    </span><br><span class="line">    obj-&gt;flags = <span class="number">0x7f</span> | FLAT_BINDER_FLAG_ACCEPTS_FDS;</span><br><span class="line">    obj-&gt;type = BINDER_TYPE_HANDLE;</span><br><span class="line">    obj-&gt;pointer = ptr;</span><br><span class="line">    obj-&gt;cookie = <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">binder_send_reply</span><span class="params">(struct binder_state *bs,struct binder_io *reply,<span class="keyword">void</span> *buffer_to_free,<span class="keyword">int</span> status)</span></span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">binder_write</span><span class="params">(struct binder_state *bs, <span class="keyword">void</span> *data, <span class="keyword">unsigned</span> len)</span></span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function"><span class="keyword">long</span> <span class="title">binder_ioctl</span><span class="params">(struct file *filp, <span class="keyword">unsigned</span> <span class="keyword">int</span> cmd, <span class="keyword">unsigned</span> <span class="keyword">long</span> arg)</span></span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">binder_thread_write</span><span class="params">(struct binder_proc *proc, struct binder_thread *thread,<span class="keyword">void</span> __user *buffer, <span class="keyword">int</span> size, <span class="keyword">signed</span> <span class="keyword">long</span> *consumed)</span></span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">binder_transaction</span><span class="params">(struct binder_proc *proc, struct binder_thread *thread,struct binder_transaction_data *tr, <span class="keyword">int</span> reply)</span></span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function">struct binder_ref *ref </span>= binder_get_ref(proc, fp-&gt;handle);</span><br><span class="line"><span class="comment">//旧的句柄是ServiceManager进程里面的，这里需要给它一个新的句柄值返回给客户端进程用</span></span><br><span class="line">new_ref = binder_get_ref_for_node(target_proc, ref-&gt;node);</span><br><span class="line"><span class="comment">//清理，休眠</span></span><br><span class="line">...</span><br><span class="line"></span><br><span class="line"><span class="comment">//唤醒请求的客户端线程</span></span><br><span class="line">...</span><br><span class="line"></span><br><span class="line"><span class="keyword">static</span> <span class="keyword">int</span>  </span><br><span class="line">binder_thread_read(struct binder_proc *proc, struct binder_thread *thread,  <span class="keyword">void</span>  __user *buffer, <span class="keyword">int</span> size, <span class="keyword">signed</span> <span class="keyword">long</span> *consumed, <span class="keyword">int</span> non_block) </span><br><span class="line"></span><br><span class="line">copy_to_user(ubuf, &amp;bwr, <span class="keyword">sizeof</span>(bwr))</span><br><span class="line"></span><br><span class="line">reply-&gt;ipcSetDataReference(  <span class="keyword">reinterpret_cast</span>&lt;<span class="keyword">const</span> <span class="keyword">uint8_t</span>*&gt;(tr.data.ptr.buffer),tr.data_size,  <span class="keyword">reinterpret_cast</span>&lt;<span class="keyword">const</span> <span class="keyword">size_t</span>*&gt;(tr.data.ptr.offsets), tr.offsets_size/<span class="keyword">sizeof</span>(<span class="keyword">size_t</span>),freeBuffer, <span class="keyword">this</span>);  </span><br><span class="line"></span><br><span class="line"><span class="comment">//android / platform / frameworks / native / master / . / libs / binder / Parcel.cpp</span></span><br><span class="line"><span class="function"><span class="keyword">status_t</span> <span class="title">Parcel::readStrongBinder</span><span class="params">(sp&lt;IBinder&gt;* val)</span> <span class="keyword">const</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">status_t</span> status = readNullableStrongBinder(val);</span><br><span class="line">    <span class="keyword">if</span> (status == OK &amp;&amp; !val-&gt;get()) &#123;</span><br><span class="line">        status = UNEXPECTED_NULL;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> status;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//android / platform / frameworks / native / master / . / libs / binder / Parcel.cpp</span></span><br><span class="line"><span class="function"><span class="keyword">status_t</span> <span class="title">Parcel::readNullableStrongBinder</span><span class="params">(sp&lt;IBinder&gt;* val)</span> <span class="keyword">const</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> unflatten_binder(ProcessState::self(), *<span class="keyword">this</span>, val);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//android / platform / frameworks / native / master / . / libs / binder / Parcel.cpp</span></span><br><span class="line"><span class="function"><span class="keyword">status_t</span> <span class="title">unflatten_binder</span><span class="params">(<span class="keyword">const</span> sp&lt;ProcessState&gt;&amp; proc,</span></span></span><br><span class="line"><span class="function"><span class="params">    <span class="keyword">const</span> Parcel&amp; in, sp&lt;IBinder&gt;* out)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">const</span> flat_binder_object* flat = in.readObject(<span class="literal">false</span>);</span><br><span class="line">    <span class="keyword">if</span> (flat) &#123;</span><br><span class="line">        <span class="keyword">switch</span> (flat-&gt;hdr.type) &#123;</span><br><span class="line">            <span class="keyword">case</span> BINDER_TYPE_BINDER:</span><br><span class="line">                *out = <span class="keyword">reinterpret_cast</span>&lt;IBinder*&gt;(flat-&gt;cookie);</span><br><span class="line">                <span class="keyword">return</span> finish_unflatten_binder(<span class="literal">nullptr</span>, *flat, in);</span><br><span class="line">            <span class="keyword">case</span> BINDER_TYPE_HANDLE:</span><br><span class="line">                *out = proc-&gt;getStrongProxyForHandle(flat-&gt;handle);</span><br><span class="line">                <span class="keyword">return</span> finish_unflatten_binder(</span><br><span class="line">                    <span class="keyword">static_cast</span>&lt;BpBinder*&gt;(out-&gt;get()), *flat, in);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> BAD_TYPE;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//根据句柄生成BpBinder()</span></span><br><span class="line"><span class="function">sp&lt;IBinder&gt; <span class="title">ProcessState::getStrongProxyForHandle</span><span class="params">(<span class="keyword">int32_t</span> handle)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    sp&lt;IBinder&gt; result;</span><br><span class="line"> </span><br><span class="line">    AutoMutex _l(mLock);</span><br><span class="line"> </span><br><span class="line">    handle_entry* e = lookupHandleLocked(handle);</span><br><span class="line"> </span><br><span class="line">    <span class="keyword">if</span> (e != <span class="literal">NULL</span>) &#123;</span><br><span class="line">        <span class="comment">// We need to create a new BpBinder if there isn&#x27;t currently one, OR we</span></span><br><span class="line">        <span class="comment">// are unable to acquire a weak reference on this current one.  See comment</span></span><br><span class="line">        <span class="comment">// in getWeakProxyForHandle() for more info about this.</span></span><br><span class="line">        IBinder* b = e-&gt;binder;</span><br><span class="line">        <span class="keyword">if</span> (b == <span class="literal">NULL</span> || !e-&gt;refs-&gt;attemptIncWeak(<span class="keyword">this</span>)) &#123;</span><br><span class="line">            b = <span class="keyword">new</span> BpBinder(handle); </span><br><span class="line">            e-&gt;binder = b;</span><br><span class="line">            <span class="keyword">if</span> (b) e-&gt;refs = b-&gt;getWeakRefs();</span><br><span class="line">            result = b;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="comment">// This little bit of nastyness is to allow us to add a primary</span></span><br><span class="line">            <span class="comment">// reference to the remote proxy when this team doesn&#x27;t have one</span></span><br><span class="line">            <span class="comment">// but another team is sending the handle to us.</span></span><br><span class="line">            result.force_set(b);</span><br><span class="line">            e-&gt;refs-&gt;decWeak(<span class="keyword">this</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function">android::sp&lt;IMediaPlayerService&gt; <span class="title">IMediaPlayerService::asInterface</span><span class="params">(<span class="keyword">const</span> android::sp&lt;android::IBinder&gt;&amp; obj)</span></span></span><br><span class="line"><span class="function"></span></span><br></pre></td></tr></table></figure>
<p>最终得到一个BpMediaPlayerService对象</p>
<h2 id="总结一下-c-部分"><a href="#总结一下-c-部分" class="headerlink" title="总结一下(c++部分)"></a>总结一下(c++部分)</h2><ol>
<li>获取 ServiceManager 远程接口的时候，不需要跨进程，因为ServiceManger的binder实体固定句柄为0，只需要new BpBinder(0) 就可以得到binder引用，拿到 BpServieManager</li>
<li>获取普通服务的远程接口的时候，需要跨进程调用，因为需要通过 BpServieManager 向ServiceManger请求，ServiceManager会返回名字对应的服务的Binder实体的句柄给驱动程序，驱动程序读出来后序列化后返回给客户端，客户端拿到以后就可以new BpBinder(handle)拿到普通服务的远程代理对象了。</li>
<li>调用 ServiceManager 的功能的时候(比如addservice，getService),  ServiceManager 是在binder_loop函数中解析 驱动传过来的数据后，直接处理，然后返回数据给驱动程序。 而 调用普通服务的功能的时候，拿到 驱动传过来的数据后会调用到BBinder的虚函数去处理</li>
<li>IPCThreadState类借助ProcessState类来负责与Binder驱动程序交</li>
<li>需要注意的是，比如我们在addService中传入一个BBinder对象，会通过<code>writeStrongBinder()</code>序列化成一个<code>flat_binder_object</code>后传给驱动，而在<code>getService()</code>的时候,驱动返回的也是一个包含服务端句柄的 <code>flat_binder_object</code>对象，这个对象会被<code>readStrongBinder()</code>函数解析成一个BpBinder对象返回给调用方。</li>
</ol>
<p>流程总结:<br><img src="/2018/08/09/Android-binder-c++%E5%B1%82/binder_8.png" alt="binder_8"><br><img src="/2018/08/09/Android-binder-c++%E5%B1%82/binder_21.jpg" alt="binder_21"></p>
<blockquote>
<p>参考：<br>《深入理解Android 卷1》<br>《深入理解Android 卷3》<br><a href="https://blog.csdn.net/luoshengyang/article/details/6618363">Android进程间通信（IPC）机制Binder简要介绍和学习计划</a><br><a href="https://blog.csdn.net/yangwen123/article/details/9316987">深入分析Android Binder 驱动</a><br><a href="https://my.oschina.net/youranhongcha/blog/152233">红茶一杯话Binder</a><br><a href="https://blog.csdn.net/happylishang/article/details/62234127">深入理解Binder原理</a><br><a href="https://blog.csdn.net/freshui/article/details/55051268">Parcel数据传输过程，简要分析Binder流程</a></p>
</blockquote>
]]></content>
      <categories>
        <category>android_framework</category>
      </categories>
      <tags>
        <tag>binder</tag>
      </tags>
  </entry>
</search>
